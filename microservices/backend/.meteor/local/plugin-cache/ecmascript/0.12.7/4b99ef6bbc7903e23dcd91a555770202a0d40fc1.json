{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/exposures.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/promotions/server/exposures.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/exposures.js","inputSourceMap":{"version":3,"sources":["imports/core/api/promotions/server/exposures.js"],"names":["Match","exposeQuery","createSearchFilters","SecurityService","adminPromotions","appPromotion","promotionSearch","proPromotions","proPromotionUsers","PROMOTION_STATUS","makePromotionLotAnonymizer","query","options","allowFilterById","overrides","firewall","userId","promotionId","promotions","hasAccessToPromotion","embody","body","$filter","filters","params","_id","status","OPEN","validateParams","String","loanId","searchQuery","Object","assign","Maybe","checkUserIsPro","isAllowedToView","isUserAdmin","anonymize","embodyParams","$postFilter","simple","map","promotion","promotionLots","rest","name","Boolean","users","length"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport SecurityService from '../../security';\nimport {\n  adminPromotions,\n  appPromotion,\n  promotionSearch,\n  proPromotions,\n  proPromotionUsers,\n} from '../queries';\nimport { PROMOTION_STATUS } from '../promotionConstants';\n\nimport { makePromotionLotAnonymizer } from './promotionServerHelpers';\n\nexposeQuery({ query: adminPromotions, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: appPromotion,\n  overrides: {\n    firewall(userId, { promotionId }) {\n      SecurityService.promotions.hasAccessToPromotion({ promotionId, userId });\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params.promotionId;\n        filters.status = PROMOTION_STATUS.OPEN;\n      };\n    },\n    validateParams: { promotionId: String, loanId: String },\n  },\n});\n\nexposeQuery({\n  query: promotionSearch,\n  overrides: {\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['name', '_id'], searchQuery),\n        );\n      };\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proPromotions,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.checkUserIsPro(userId);\n      const { _id: promotionId } = params;\n      params.userId = userId;\n\n      if (promotionId) {\n        SecurityService.promotions.isAllowedToView({\n          promotionId,\n          userId,\n        });\n      }\n\n      if (!SecurityService.isUserAdmin(userId)) {\n        params.anonymize = true;\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        const { _id: promotionId, userId } = params;\n        if (promotionId) {\n          filters._id = promotionId;\n        } else {\n          filters['userLinks._id'] = userId;\n        }\n      };\n\n      body.$postFilter = (promotions = [], params) => {\n        const { anonymize = false, simple, userId } = params;\n\n        if (!anonymize) {\n          return promotions;\n        }\n\n        return promotions.map((promotion) => {\n          const { promotionLots = [], ...rest } = promotion;\n          return simple\n            ? { promotionLots: promotionLots.map(({ name }) => name) }\n            : {\n              promotionLots: promotionLots.map(makePromotionLotAnonymizer({ userId })),\n              ...rest,\n            };\n        });\n      };\n    },\n    validateParams: {\n      userId: String,\n      simple: Match.Maybe(Boolean),\n      anonymize: Match.Maybe(Boolean),\n      _id: Match.Maybe(String),\n    },\n  },\n});\n\nexposeQuery({\n  query: proPromotionUsers,\n  overrides: {\n    firewall(userId, { _id: promotionId }) {\n      SecurityService.promotions.hasAccessToPromotion({ promotionId, userId });\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { promotionId } }) => {\n        filters._id = promotionId;\n      };\n      body.$postFilter = (promotion = []) => {\n        const { users = [] } = (!!promotion.length && promotion[0]) || {};\n        return users;\n      };\n    },\n  },\n  options: { allowFilterById: true },\n});\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/exposures.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/promotions/server/exposures.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nlet Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet exposeQuery;\nmodule.link(\"../../queries/queryHelpers\", {\n  exposeQuery(v) {\n    exposeQuery = v;\n  }\n\n}, 1);\nlet createSearchFilters;\nmodule.link(\"../../helpers/mongoHelpers\", {\n  createSearchFilters(v) {\n    createSearchFilters = v;\n  }\n\n}, 2);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 3);\nlet adminPromotions, appPromotion, promotionSearch, proPromotions, proPromotionUsers;\nmodule.link(\"../queries\", {\n  adminPromotions(v) {\n    adminPromotions = v;\n  },\n\n  appPromotion(v) {\n    appPromotion = v;\n  },\n\n  promotionSearch(v) {\n    promotionSearch = v;\n  },\n\n  proPromotions(v) {\n    proPromotions = v;\n  },\n\n  proPromotionUsers(v) {\n    proPromotionUsers = v;\n  }\n\n}, 4);\nlet PROMOTION_STATUS;\nmodule.link(\"../promotionConstants\", {\n  PROMOTION_STATUS(v) {\n    PROMOTION_STATUS = v;\n  }\n\n}, 5);\nlet makePromotionLotAnonymizer;\nmodule.link(\"./promotionServerHelpers\", {\n  makePromotionLotAnonymizer(v) {\n    makePromotionLotAnonymizer = v;\n  }\n\n}, 6);\nexposeQuery({\n  query: adminPromotions,\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: appPromotion,\n  overrides: {\n    firewall(userId, {\n      promotionId\n    }) {\n      SecurityService.promotions.hasAccessToPromotion({\n        promotionId,\n        userId\n      });\n    },\n\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params\n      }) => {\n        filters._id = params.promotionId;\n        filters.status = PROMOTION_STATUS.OPEN;\n      };\n    },\n    validateParams: {\n      promotionId: String,\n      loanId: String\n    }\n  }\n});\nexposeQuery({\n  query: promotionSearch,\n  overrides: {\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params: {\n          searchQuery\n        }\n      }) => {\n        Object.assign(filters, createSearchFilters(['name', '_id'], searchQuery));\n      };\n    },\n    validateParams: {\n      searchQuery: Match.Maybe(String)\n    }\n  }\n});\nexposeQuery({\n  query: proPromotions,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.checkUserIsPro(userId);\n      const {\n        _id: promotionId\n      } = params;\n      params.userId = userId;\n\n      if (promotionId) {\n        SecurityService.promotions.isAllowedToView({\n          promotionId,\n          userId\n        });\n      }\n\n      if (!SecurityService.isUserAdmin(userId)) {\n        params.anonymize = true;\n      }\n    },\n\n    embody: (body, embodyParams) => {\n      body.$filter = ({\n        filters,\n        params\n      }) => {\n        const {\n          _id: promotionId,\n          userId\n        } = params;\n\n        if (promotionId) {\n          filters._id = promotionId;\n        } else {\n          filters['userLinks._id'] = userId;\n        }\n      };\n\n      body.$postFilter = (promotions = [], params) => {\n        const {\n          anonymize = false,\n          simple,\n          userId\n        } = params;\n\n        if (!anonymize) {\n          return promotions;\n        }\n\n        return promotions.map(promotion => {\n          const {\n            promotionLots = []\n          } = promotion,\n                rest = (0, _objectWithoutProperties2.default)(promotion, [\"promotionLots\"]);\n          return simple ? {\n            promotionLots: promotionLots.map(({\n              name\n            }) => name)\n          } : (0, _objectSpread2.default)({\n            promotionLots: promotionLots.map(makePromotionLotAnonymizer({\n              userId\n            }))\n          }, rest);\n        });\n      };\n    },\n    validateParams: {\n      userId: String,\n      simple: Match.Maybe(Boolean),\n      anonymize: Match.Maybe(Boolean),\n      _id: Match.Maybe(String)\n    }\n  }\n});\nexposeQuery({\n  query: proPromotionUsers,\n  overrides: {\n    firewall(userId, {\n      _id: promotionId\n    }) {\n      SecurityService.promotions.hasAccessToPromotion({\n        promotionId,\n        userId\n      });\n    },\n\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params: {\n          promotionId\n        }\n      }) => {\n        filters._id = promotionId;\n      };\n\n      body.$postFilter = (promotion = []) => {\n        const {\n          users = []\n        } = !!promotion.length && promotion[0] || {};\n        return users;\n      };\n    }\n  },\n  options: {\n    allowFilterById: true\n  }\n});","map":{"version":3,"sources":["imports/core/api/promotions/server/exposures.js"],"names":["exposeQuery","query","options","allowFilterById","overrides","firewall","promotionId","SecurityService","userId","embody","body","params","filters","PROMOTION_STATUS","validateParams","loanId","String","searchQuery","Object","createSearchFilters","Match","_id","promotions","anonymize","promotion","promotionLots","rest","simple","name","makePromotionLotAnonymizer","users"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport SecurityService from '../../security';\nimport {\n  adminPromotions,\n  appPromotion,\n  promotionSearch,\n  proPromotions,\n  proPromotionUsers,\n} from '../queries';\nimport { PROMOTION_STATUS } from '../promotionConstants';\n\nimport { makePromotionLotAnonymizer } from './promotionServerHelpers';\n\nexposeQuery({ query: adminPromotions, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: appPromotion,\n  overrides: {\n    firewall(userId, { promotionId }) {\n      SecurityService.promotions.hasAccessToPromotion({ promotionId, userId });\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params.promotionId;\n        filters.status = PROMOTION_STATUS.OPEN;\n      };\n    },\n    validateParams: { promotionId: String, loanId: String },\n  },\n});\n\nexposeQuery({\n  query: promotionSearch,\n  overrides: {\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['name', '_id'], searchQuery),\n        );\n      };\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proPromotions,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.checkUserIsPro(userId);\n      const { _id: promotionId } = params;\n      params.userId = userId;\n\n      if (promotionId) {\n        SecurityService.promotions.isAllowedToView({\n          promotionId,\n          userId,\n        });\n      }\n\n      if (!SecurityService.isUserAdmin(userId)) {\n        params.anonymize = true;\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        const { _id: promotionId, userId } = params;\n        if (promotionId) {\n          filters._id = promotionId;\n        } else {\n          filters['userLinks._id'] = userId;\n        }\n      };\n\n      body.$postFilter = (promotions = [], params) => {\n        const { anonymize = false, simple, userId } = params;\n\n        if (!anonymize) {\n          return promotions;\n        }\n\n        return promotions.map((promotion) => {\n          const { promotionLots = [], ...rest } = promotion;\n          return simple\n            ? { promotionLots: promotionLots.map(({ name }) => name) }\n            : {\n              promotionLots: promotionLots.map(makePromotionLotAnonymizer({ userId })),\n              ...rest,\n            };\n        });\n      };\n    },\n    validateParams: {\n      userId: String,\n      simple: Match.Maybe(Boolean),\n      anonymize: Match.Maybe(Boolean),\n      _id: Match.Maybe(String),\n    },\n  },\n});\n\nexposeQuery({\n  query: proPromotionUsers,\n  overrides: {\n    firewall(userId, { _id: promotionId }) {\n      SecurityService.promotions.hasAccessToPromotion({ promotionId, userId });\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { promotionId } }) => {\n        filters._id = promotionId;\n      };\n      body.$postFilter = (promotion = []) => {\n        const { users = [] } = (!!promotion.length && promotion[0]) || {};\n        return users;\n      };\n    },\n  },\n  options: { allowFilterById: true },\n});\n"]},"sourceType":"script","hash":"4b99ef6bbc7903e23dcd91a555770202a0d40fc1"}

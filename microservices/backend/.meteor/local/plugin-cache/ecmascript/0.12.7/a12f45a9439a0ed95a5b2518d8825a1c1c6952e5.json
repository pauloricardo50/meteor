{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/ModalManager/test/ModalManager.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/components/ModalManager/test/ModalManager.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/ModalManager/test/ModalManager.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/ModalManager/test/ModalManager.spec.jsx"],"names":["React","useContext","expect","Dialog","getMountedComponent","ModalManager","ModalManagerContext","TestComp","openModal","content","actions","closeModal","Promise","res","then","returnValue","describe","component","Component","props","closeDialog","find","first","simulate","beforeEach","reset","after","it","length","to","equal","text","last","prop","done","setTimeout","update"],"mappings":"AAAA;;AACA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,OAAOC,mBAAP;AAEA,OAAOC,YAAP;AACA,OAAOC,mBAAP;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,UAAU,CAACK,mBAAD,CAAhC;AACA,SACE,CAAC,GAAD;MACE,CAAC,MAAD,CACE,GAAG,MADL,CAEE,KAAK,QAFP,CAGE,QAAQ,CAAC,MACPE,SAAS,CAAC;AACRC,MAAAA,OAAO,EAAE,CAAC,GAAD,CAAK,UAAU,kBAAf,CAAkC,WAAW,EAAE,GAAF;AAD9C,KAAD,CADH,CAHV;;MAUA,EAAE,MAAF;MACA,CAAC,MAAD,CACE,GAAG,MADL,CAEE,KAAK,QAFP,CAGE,QAAQ,CAAC,MACPD,SAAS,CAAC;AACRC,MAAAA,OAAO,EAAE,CAAC,GAAD,CAAK,UAAU,kBAAf,CAAkC,WAAW,EAAE,GAAF;AAD9C,KAAD,CADH,CAHV;;MAUA,EAAE,MAAF;MACA,CAAC,MAAD,CACE,GAAG,MADL,CAEE,KAAK,QAFP,CAGE,QAAQ,CAAC,MACPD,SAAS,CAAC,CACR;AAAEC,MAAAA,OAAO,EAAE,CAAC,GAAD,CAAK,UAAU,kBAAf,CAAkC,WAAW,EAAE,GAAF;AAAxD,KADQ,EAER;AAAEA,MAAAA,OAAO,EAAE,CAAC,GAAD,CAAK,UAAU,kBAAf,CAAkC,WAAW,EAAE,GAAF;AAAxD,KAFQ,EAGR;AAAEA,MAAAA,OAAO,EAAE,CAAC,GAAD,CAAK,UAAU,kBAAf,CAAkC,WAAW,EAAE,GAAF;AAAxD,KAHQ,CAAD,CADH,CAHV;;MAYA,EAAE,MAAF;MACA,CAAC,MAAD,CACE,GAAG,MADL,CAEE,KAAK,QAFP,CAGE,QAAQ,CAAC,MACPD,SAAS,CAAC,CACR;AACEC,MAAAA,OAAO,EAAE,CAAC,GAAD,CAAK,UAAU,kBAAf,CAAkC,WAAW,EAAE,GAAF,CADxD;AAEEC,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA;AAAF,OAAD,KACP,CAAC,MAAD,CACE,KAAK,QADP,CAEE,UAAU,cAFZ,CAGE,QAAQ,CAAC,MACP,IAAIC,OAAJ,CAAaC,GAAD,IAAS;AACnBA,QAAAA,GAAG,CAAC,iBAAD,CAAH;AACD,OAFD,EAEGC,IAFH,CAEQH,UAFR,CADM,CAHV;;gBAUA,EAAE,MAAF;AAbJ,KADQ,EAiBR;AACEF,MAAAA,OAAO,EAAE,CAAC;AAAEM,QAAAA;AAAF,OAAD,KACP,CAAC,GAAD,CAAK,UAAU,kBAAf,CAAkC,CAACA,WAAD,CAAa,EAAE,GAAF;AAFnD,KAjBQ,CAAD,CADH,CAHV;;MA8BA,EAAE,MAAF;IACF,EAAE,GAAF,CApEF;AAsED,CAxED;;AA0EAC,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7B,QAAMC,SAAS,GAAG,MAChBb,mBAAmB,CAAC;AAClBc,IAAAA,SAAS,EAAEC,KAAK,IACd,CAAC,YAAD;UACE,CAAC,QAAD,CAAU,IAAIA,KAAJ,CAAV;QACF,EAAE,YAAF;AAJgB,GAAD,CADrB;;AASA,QAAMC,WAAW,GAAG,MAClBH,SAAS,GACNI,IADH,CACQ,eADR,EAEGC,KAFH,GAGGC,QAHH,CAGY,OAHZ,CADF;;AAMAC,EAAAA,UAAU,CAAC,MAAM;AACfpB,IAAAA,mBAAmB,CAACqB,KAApB;AACD,GAFS,CAAV;AAIAC,EAAAA,KAAK,CAAC,MAAM;AACV;AACAN,IAAAA,WAAW;AACZ,GAHI,CAAL;AAKAO,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxBV,IAAAA,SAAS,GACNI,IADH,CACQ,QADR,EAEGC,KAFH,GAGGC,QAHH,CAGY,OAHZ;AAKArB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AACA5B,IAAAA,MAAM,CAACe,SAAS,GACbI,IADI,CACC,mBADD,EAEJU,IAFI,EAAD,CAAN,CAEWF,EAFX,CAEcC,KAFd,CAEoB,aAFpB;AAGD,GAVC,CAAF;AAYAH,EAAAA,EAAE,CAAC,gBAAD,EAAmB,MAAM;AACzBV,IAAAA,SAAS,GACNI,IADH,CACQ,QADR,EAEGC,KAFH,GAGGC,QAHH,CAGY,OAHZ;AAKArB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AACAV,IAAAA,WAAW;AAEXlB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AACD,GAVC,CAAF;AAYAH,EAAAA,EAAE,CAAC,oCAAD,EAAuC,MAAM;AAC7CV,IAAAA,SAAS,GACNI,IADH,CACQ,OADR,EAEGC,KAFH,GAGGC,QAHH,CAGY,OAHZ;AAKAN,IAAAA,SAAS,GACNI,IADH,CACQ,OADR,EAEGW,IAFH,GAGGT,QAHH,CAGY,OAHZ;AAKArB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AAEAV,IAAAA,WAAW;AAEXlB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AAEAV,IAAAA,WAAW;AAEXlB,IAAAA,MAAM,CAACe,SAAS,GACbI,IADI,CACClB,MADD,EAEJ8B,IAFI,CAEC,MAFD,CAAD,CAAN,CAEiBJ,EAFjB,CAEoBC,KAFpB,CAE0B,KAF1B;AAGD,GAtBC,CAAF;AAwBAH,EAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5CV,IAAAA,SAAS,GACNI,IADH,CACQ,OADR,EAEGC,KAFH,GAGGC,QAHH,CAGY,OAHZ;AAKArB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AAEAV,IAAAA,WAAW;AAEXlB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AAEAV,IAAAA,WAAW;AAEXlB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AAEAV,IAAAA,WAAW;AAEXlB,IAAAA,MAAM,CAACe,SAAS,GACbI,IADI,CACClB,MADD,EAEJ8B,IAFI,CAEC,MAFD,CAAD,CAAN,CAEiBJ,EAFjB,CAEoBC,KAFpB,CAE0B,KAF1B;AAGD,GArBC,CAAF;AAuBAH,EAAAA,EAAE,CAAC,gCAAD,EAAoCO,IAAD,IAAU;AAC7CjB,IAAAA,SAAS,GACNI,IADH,CACQ,OADR,EAEGC,KAFH,GAGGC,QAHH,CAGY,OAHZ;AAKArB,IAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AAEAV,IAAAA,WAAW,GARkC,CAU7C;;AACAe,IAAAA,UAAU,CAAC,MAAM;AACflB,MAAAA,SAAS,GAAGmB,MAAZ;AAEAlC,MAAAA,MAAM,CAACe,SAAS,GAAGI,IAAZ,CAAiB,mBAAjB,EAAsCO,MAAvC,CAAN,CAAqDC,EAArD,CAAwDC,KAAxD,CAA8D,CAA9D;AACA5B,MAAAA,MAAM,CAACe,SAAS,GACbI,IADI,CACC,mBADD,EAEJU,IAFI,EAAD,CAAN,CAEWF,EAFX,CAEcC,KAFd,CAEoB,iBAFpB;AAIAV,MAAAA,WAAW;AAEXlB,MAAAA,MAAM,CAACe,SAAS,GACbI,IADI,CACClB,MADD,EAEJ8B,IAFI,CAEC,MAFD,CAAD,CAAN,CAEiBJ,EAFjB,CAEoBC,KAFpB,CAE0B,KAF1B;AAIAI,MAAAA,IAAI;AACL,KAfS,EAeP,CAfO,CAAV;AAgBD,GA3BC,CAAF;AA4BD,CA5HO,CAAR","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React, { useContext } from 'react';\nimport { expect } from 'chai';\nimport Dialog from '@material-ui/core/Dialog';\n\nimport getMountedComponent from 'core/utils/testHelpers/getMountedComponent';\n\nimport ModalManager from '../ModalManager';\nimport ModalManagerContext from '../ModalManagerContext';\n\nconst TestComp = () => {\n  const { openModal } = useContext(ModalManagerContext);\n  return (\n    <div>\n      <button\n        id=\"btn1\"\n        type=\"button\"\n        onClick={() =>\n          openModal({\n            content: <div className=\"dialog-1-content\">Hello world</div>,\n          })\n        }\n      >\n        Click me\n      </button>\n      <button\n        id=\"btn2\"\n        type=\"button\"\n        onClick={() =>\n          openModal({\n            content: <div className=\"dialog-2-content\">Hello world</div>,\n          })\n        }\n      >\n        Click me\n      </button>\n      <button\n        id=\"btn3\"\n        type=\"button\"\n        onClick={() =>\n          openModal([\n            { content: <div className=\"dialog-3-content\">Hello world</div> },\n            { content: <div className=\"dialog-4-content\">Hello world</div> },\n            { content: <div className=\"dialog-5-content\">Hello world</div> },\n          ])\n        }\n      >\n        Click me\n      </button>\n      <button\n        id=\"btn4\"\n        type=\"button\"\n        onClick={() =>\n          openModal([\n            {\n              content: <div className=\"dialog-6-content\">Hello world</div>,\n              actions: ({ closeModal }) => (\n                <button\n                  type=\"button\"\n                  className=\"dialog-close\"\n                  onClick={() =>\n                    new Promise((res) => {\n                      res('Promise worked!');\n                    }).then(closeModal)\n                  }\n                >\n                  Close me\n                </button>\n              ),\n            },\n            {\n              content: ({ returnValue }) => (\n                <div className=\"dialog-7-content\">{returnValue}</div>\n              ),\n            },\n          ])\n        }\n      >\n        Click me\n      </button>\n    </div>\n  );\n};\n\ndescribe('ModalManager', () => {\n  const component = () =>\n    getMountedComponent({\n      Component: props => (\n        <ModalManager>\n          <TestComp {...props} />\n        </ModalManager>\n      ),\n    });\n\n  const closeDialog = () =>\n    component()\n      .find('.dialog-close')\n      .first()\n      .simulate('click');\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n  });\n\n  after(() => {\n    // Avoid polluting test reporting UI with an open Modal\n    closeDialog();\n  });\n\n  it('opens a modal', () => {\n    component()\n      .find('button')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n    expect(component()\n      .find('.dialog-1-content')\n      .text()).to.equal('Hello world');\n  });\n\n  it('closes a modal', () => {\n    component()\n      .find('button')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n    closeDialog();\n\n    expect(component().find('.dialog-1-content').length).to.equal(0);\n  });\n\n  it('opens 2 modals one after the other', () => {\n    component()\n      .find('#btn1')\n      .first()\n      .simulate('click');\n\n    component()\n      .find('#btn2')\n      .last()\n      .simulate('click');\n\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component().find('.dialog-2-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component()\n      .find(Dialog)\n      .prop('open')).to.equal(false);\n  });\n\n  it('allows passing an array of modals', () => {\n    component()\n      .find('#btn3')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-3-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component().find('.dialog-4-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component().find('.dialog-5-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component()\n      .find(Dialog)\n      .prop('open')).to.equal(false);\n  });\n\n  it('can pass values between modals', (done) => {\n    component()\n      .find('#btn4')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-6-content').length).to.equal(1);\n\n    closeDialog();\n\n    // Wait for the promise to resolve\n    setTimeout(() => {\n      component().update();\n\n      expect(component().find('.dialog-7-content').length).to.equal(1);\n      expect(component()\n        .find('.dialog-7-content')\n        .text()).to.equal('Promise worked!');\n\n      closeDialog();\n\n      expect(component()\n        .find(Dialog)\n        .prop('open')).to.equal(false);\n\n      done();\n    }, 0);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/ModalManager/test/ModalManager.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/ModalManager/test/ModalManager.spec.jsx"}},"code":"var React, useContext;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  useContext: function (v) {\n    useContext = v;\n  }\n}, 0);\nvar expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 1);\nvar Dialog;\nmodule.link(\"@material-ui/core/Dialog\", {\n  \"default\": function (v) {\n    Dialog = v;\n  }\n}, 2);\nvar getMountedComponent;\nmodule.link(\"../../../utils/testHelpers/getMountedComponent\", {\n  \"default\": function (v) {\n    getMountedComponent = v;\n  }\n}, 3);\nvar ModalManager;\nmodule.link(\"../ModalManager\", {\n  \"default\": function (v) {\n    ModalManager = v;\n  }\n}, 4);\nvar ModalManagerContext;\nmodule.link(\"../ModalManagerContext\", {\n  \"default\": function (v) {\n    ModalManagerContext = v;\n  }\n}, 5);\n\nvar TestComp = function () {\n  var _useContext = useContext(ModalManagerContext),\n      openModal = _useContext.openModal;\n\n  return React.createElement(\"div\", null, React.createElement(\"button\", {\n    id: \"btn1\",\n    type: \"button\",\n    onClick: function () {\n      return openModal({\n        content: React.createElement(\"div\", {\n          className: \"dialog-1-content\"\n        }, \"Hello world\")\n      });\n    }\n  }, \"Click me\"), React.createElement(\"button\", {\n    id: \"btn2\",\n    type: \"button\",\n    onClick: function () {\n      return openModal({\n        content: React.createElement(\"div\", {\n          className: \"dialog-2-content\"\n        }, \"Hello world\")\n      });\n    }\n  }, \"Click me\"), React.createElement(\"button\", {\n    id: \"btn3\",\n    type: \"button\",\n    onClick: function () {\n      return openModal([{\n        content: React.createElement(\"div\", {\n          className: \"dialog-3-content\"\n        }, \"Hello world\")\n      }, {\n        content: React.createElement(\"div\", {\n          className: \"dialog-4-content\"\n        }, \"Hello world\")\n      }, {\n        content: React.createElement(\"div\", {\n          className: \"dialog-5-content\"\n        }, \"Hello world\")\n      }]);\n    }\n  }, \"Click me\"), React.createElement(\"button\", {\n    id: \"btn4\",\n    type: \"button\",\n    onClick: function () {\n      return openModal([{\n        content: React.createElement(\"div\", {\n          className: \"dialog-6-content\"\n        }, \"Hello world\"),\n        actions: function (_ref) {\n          var closeModal = _ref.closeModal;\n          return React.createElement(\"button\", {\n            type: \"button\",\n            className: \"dialog-close\",\n            onClick: function () {\n              return new Promise(function (res) {\n                res('Promise worked!');\n              }).then(closeModal);\n            }\n          }, \"Close me\");\n        }\n      }, {\n        content: function (_ref2) {\n          var returnValue = _ref2.returnValue;\n          return React.createElement(\"div\", {\n            className: \"dialog-7-content\"\n          }, returnValue);\n        }\n      }]);\n    }\n  }, \"Click me\"));\n};\n\ndescribe('ModalManager', function () {\n  var component = function () {\n    return getMountedComponent({\n      Component: function (props) {\n        return React.createElement(ModalManager, null, React.createElement(TestComp, props));\n      }\n    });\n  };\n\n  var closeDialog = function () {\n    return component().find('.dialog-close').first().simulate('click');\n  };\n\n  beforeEach(function () {\n    getMountedComponent.reset();\n  });\n  after(function () {\n    // Avoid polluting test reporting UI with an open Modal\n    closeDialog();\n  });\n  it('opens a modal', function () {\n    component().find('button').first().simulate('click');\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n    expect(component().find('.dialog-1-content').text()).to.equal('Hello world');\n  });\n  it('closes a modal', function () {\n    component().find('button').first().simulate('click');\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n    closeDialog();\n    expect(component().find('.dialog-1-content').length).to.equal(0);\n  });\n  it('opens 2 modals one after the other', function () {\n    component().find('#btn1').first().simulate('click');\n    component().find('#btn2').last().simulate('click');\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n    closeDialog();\n    expect(component().find('.dialog-2-content').length).to.equal(1);\n    closeDialog();\n    expect(component().find(Dialog).prop('open')).to.equal(false);\n  });\n  it('allows passing an array of modals', function () {\n    component().find('#btn3').first().simulate('click');\n    expect(component().find('.dialog-3-content').length).to.equal(1);\n    closeDialog();\n    expect(component().find('.dialog-4-content').length).to.equal(1);\n    closeDialog();\n    expect(component().find('.dialog-5-content').length).to.equal(1);\n    closeDialog();\n    expect(component().find(Dialog).prop('open')).to.equal(false);\n  });\n  it('can pass values between modals', function (done) {\n    component().find('#btn4').first().simulate('click');\n    expect(component().find('.dialog-6-content').length).to.equal(1);\n    closeDialog(); // Wait for the promise to resolve\n\n    setTimeout(function () {\n      component().update();\n      expect(component().find('.dialog-7-content').length).to.equal(1);\n      expect(component().find('.dialog-7-content').text()).to.equal('Promise worked!');\n      closeDialog();\n      expect(component().find(Dialog).prop('open')).to.equal(false);\n      done();\n    }, 0);\n  });\n});","map":{"version":3,"sources":["imports/core/components/ModalManager/test/ModalManager.spec.jsx"],"names":["TestComp","openModal","useContext","content","actions","closeModal","res","returnValue","describe","component","getMountedComponent","Component","props","closeDialog","beforeEach","after","it","expect","done","setTimeout"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React, { useContext } from 'react';\nimport { expect } from 'chai';\nimport Dialog from '@material-ui/core/Dialog';\n\nimport getMountedComponent from 'core/utils/testHelpers/getMountedComponent';\n\nimport ModalManager from '../ModalManager';\nimport ModalManagerContext from '../ModalManagerContext';\n\nconst TestComp = () => {\n  const { openModal } = useContext(ModalManagerContext);\n  return (\n    <div>\n      <button\n        id=\"btn1\"\n        type=\"button\"\n        onClick={() =>\n          openModal({\n            content: <div className=\"dialog-1-content\">Hello world</div>,\n          })\n        }\n      >\n        Click me\n      </button>\n      <button\n        id=\"btn2\"\n        type=\"button\"\n        onClick={() =>\n          openModal({\n            content: <div className=\"dialog-2-content\">Hello world</div>,\n          })\n        }\n      >\n        Click me\n      </button>\n      <button\n        id=\"btn3\"\n        type=\"button\"\n        onClick={() =>\n          openModal([\n            { content: <div className=\"dialog-3-content\">Hello world</div> },\n            { content: <div className=\"dialog-4-content\">Hello world</div> },\n            { content: <div className=\"dialog-5-content\">Hello world</div> },\n          ])\n        }\n      >\n        Click me\n      </button>\n      <button\n        id=\"btn4\"\n        type=\"button\"\n        onClick={() =>\n          openModal([\n            {\n              content: <div className=\"dialog-6-content\">Hello world</div>,\n              actions: ({ closeModal }) => (\n                <button\n                  type=\"button\"\n                  className=\"dialog-close\"\n                  onClick={() =>\n                    new Promise((res) => {\n                      res('Promise worked!');\n                    }).then(closeModal)\n                  }\n                >\n                  Close me\n                </button>\n              ),\n            },\n            {\n              content: ({ returnValue }) => (\n                <div className=\"dialog-7-content\">{returnValue}</div>\n              ),\n            },\n          ])\n        }\n      >\n        Click me\n      </button>\n    </div>\n  );\n};\n\ndescribe('ModalManager', () => {\n  const component = () =>\n    getMountedComponent({\n      Component: props => (\n        <ModalManager>\n          <TestComp {...props} />\n        </ModalManager>\n      ),\n    });\n\n  const closeDialog = () =>\n    component()\n      .find('.dialog-close')\n      .first()\n      .simulate('click');\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n  });\n\n  after(() => {\n    // Avoid polluting test reporting UI with an open Modal\n    closeDialog();\n  });\n\n  it('opens a modal', () => {\n    component()\n      .find('button')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n    expect(component()\n      .find('.dialog-1-content')\n      .text()).to.equal('Hello world');\n  });\n\n  it('closes a modal', () => {\n    component()\n      .find('button')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n    closeDialog();\n\n    expect(component().find('.dialog-1-content').length).to.equal(0);\n  });\n\n  it('opens 2 modals one after the other', () => {\n    component()\n      .find('#btn1')\n      .first()\n      .simulate('click');\n\n    component()\n      .find('#btn2')\n      .last()\n      .simulate('click');\n\n    expect(component().find('.dialog-1-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component().find('.dialog-2-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component()\n      .find(Dialog)\n      .prop('open')).to.equal(false);\n  });\n\n  it('allows passing an array of modals', () => {\n    component()\n      .find('#btn3')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-3-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component().find('.dialog-4-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component().find('.dialog-5-content').length).to.equal(1);\n\n    closeDialog();\n\n    expect(component()\n      .find(Dialog)\n      .prop('open')).to.equal(false);\n  });\n\n  it('can pass values between modals', (done) => {\n    component()\n      .find('#btn4')\n      .first()\n      .simulate('click');\n\n    expect(component().find('.dialog-6-content').length).to.equal(1);\n\n    closeDialog();\n\n    // Wait for the promise to resolve\n    setTimeout(() => {\n      component().update();\n\n      expect(component().find('.dialog-7-content').length).to.equal(1);\n      expect(component()\n        .find('.dialog-7-content')\n        .text()).to.equal('Promise worked!');\n\n      closeDialog();\n\n      expect(component()\n        .find(Dialog)\n        .prop('open')).to.equal(false);\n\n      done();\n    }, 0);\n  });\n});\n"]},"sourceType":"script","hash":"a12f45a9439a0ed95a5b2518d8825a1c1c6952e5"}

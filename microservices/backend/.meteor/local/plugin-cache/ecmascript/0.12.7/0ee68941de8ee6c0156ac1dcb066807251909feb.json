{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/organisations/server/exposures.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/organisations/server/exposures.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/organisations/server/exposures.js","inputSourceMap":{"version":3,"sources":["imports/core/api/organisations/server/exposures.js"],"names":["Match","exposeQuery","SecurityService","adminOrganisations","organisationSearch","proOrganisation","userOrganisations","makeFilter","param","field","filters","Array","isArray","length","$in","query","overrides","validateParams","features","Maybe","OneOf","String","tags","type","hasRules","Boolean","embody","body","params","$filter","_id","lenderRulesCount","$gte","$options","sort","name","options","allowFilterById","firewall","checkCurrentUserIsAdmin","searchQuery","userId","checkUserIsPro","organisationId","$body","Object","checkUserLoggedIn"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport {\n  adminOrganisations,\n  organisationSearch,\n  proOrganisation,\n  userOrganisations,\n} from '../queries';\n\nconst makeFilter = ({ param, field, filters }) => {\n  if (param && !(Array.isArray(param) && !param.length)) {\n    filters[field] = { $in: Array.isArray(param) ? param : [param] };\n  }\n};\n\nexposeQuery({\n  query: adminOrganisations,\n  overrides: {\n    validateParams: {\n      features: Match.Maybe(Match.OneOf(String, [String])),\n      tags: Match.Maybe(Match.OneOf(String, [String])),\n      type: Match.Maybe(Match.OneOf(String, [String])),\n      hasRules: Match.Maybe(Boolean),\n    },\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: { features, tags, type, _id, hasRules },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (hasRules) {\n          filters.lenderRulesCount = { $gte: 1 };\n        }\n\n        makeFilter({ param: features, field: 'features', filters });\n        makeFilter({ param: tags, field: 'tags', filters });\n        makeFilter({ param: type, field: 'type', filters });\n      };\n      body.$options = { sort: { name: 1 } };\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: organisationSearch,\n  overrides: {\n    firewall: () => {\n      SecurityService.checkCurrentUserIsAdmin();\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proOrganisation,\n  overrides: {\n    firewall: (userId) => {\n      SecurityService.checkUserIsPro(userId);\n    },\n    validateParams: { organisationId: String, $body: Match.Maybe(Object) },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { organisationId } }) => {\n        filters._id = organisationId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: userOrganisations,\n  overrides: {\n    firewall: (userId) => {\n      SecurityService.checkUserLoggedIn(userId);\n    },\n    validateParams: {},\n  },\n});\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/organisations/server/exposures.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/organisations/server/exposures.js"}},"code":"let Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet exposeQuery;\nmodule.link(\"../../queries/queryHelpers\", {\n  exposeQuery(v) {\n    exposeQuery = v;\n  }\n\n}, 1);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 2);\nlet adminOrganisations, organisationSearch, proOrganisation, userOrganisations;\nmodule.link(\"../queries\", {\n  adminOrganisations(v) {\n    adminOrganisations = v;\n  },\n\n  organisationSearch(v) {\n    organisationSearch = v;\n  },\n\n  proOrganisation(v) {\n    proOrganisation = v;\n  },\n\n  userOrganisations(v) {\n    userOrganisations = v;\n  }\n\n}, 3);\n\nconst makeFilter = ({\n  param,\n  field,\n  filters\n}) => {\n  if (param && !(Array.isArray(param) && !param.length)) {\n    filters[field] = {\n      $in: Array.isArray(param) ? param : [param]\n    };\n  }\n};\n\nexposeQuery({\n  query: adminOrganisations,\n  overrides: {\n    validateParams: {\n      features: Match.Maybe(Match.OneOf(String, [String])),\n      tags: Match.Maybe(Match.OneOf(String, [String])),\n      type: Match.Maybe(Match.OneOf(String, [String])),\n      hasRules: Match.Maybe(Boolean)\n    },\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: {\n          features,\n          tags,\n          type,\n          _id,\n          hasRules\n        }\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (hasRules) {\n          filters.lenderRulesCount = {\n            $gte: 1\n          };\n        }\n\n        makeFilter({\n          param: features,\n          field: 'features',\n          filters\n        });\n        makeFilter({\n          param: tags,\n          field: 'tags',\n          filters\n        });\n        makeFilter({\n          param: type,\n          field: 'type',\n          filters\n        });\n      };\n\n      body.$options = {\n        sort: {\n          name: 1\n        }\n      };\n    }\n  },\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: organisationSearch,\n  overrides: {\n    firewall: () => {\n      SecurityService.checkCurrentUserIsAdmin();\n    },\n    validateParams: {\n      searchQuery: Match.Maybe(String)\n    }\n  }\n});\nexposeQuery({\n  query: proOrganisation,\n  overrides: {\n    firewall: userId => {\n      SecurityService.checkUserIsPro(userId);\n    },\n    validateParams: {\n      organisationId: String,\n      $body: Match.Maybe(Object)\n    },\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params: {\n          organisationId\n        }\n      }) => {\n        filters._id = organisationId;\n      };\n    }\n  }\n});\nexposeQuery({\n  query: userOrganisations,\n  overrides: {\n    firewall: userId => {\n      SecurityService.checkUserLoggedIn(userId);\n    },\n    validateParams: {}\n  }\n});","map":{"version":3,"sources":["imports/core/api/organisations/server/exposures.js"],"names":["makeFilter","filters","param","Array","$in","exposeQuery","query","overrides","validateParams","features","Match","tags","type","hasRules","embody","body","params","$gte","field","sort","name","options","allowFilterById","firewall","SecurityService","searchQuery","userId","organisationId","$body"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\nimport {\n  adminOrganisations,\n  organisationSearch,\n  proOrganisation,\n  userOrganisations,\n} from '../queries';\n\nconst makeFilter = ({ param, field, filters }) => {\n  if (param && !(Array.isArray(param) && !param.length)) {\n    filters[field] = { $in: Array.isArray(param) ? param : [param] };\n  }\n};\n\nexposeQuery({\n  query: adminOrganisations,\n  overrides: {\n    validateParams: {\n      features: Match.Maybe(Match.OneOf(String, [String])),\n      tags: Match.Maybe(Match.OneOf(String, [String])),\n      type: Match.Maybe(Match.OneOf(String, [String])),\n      hasRules: Match.Maybe(Boolean),\n    },\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: { features, tags, type, _id, hasRules },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (hasRules) {\n          filters.lenderRulesCount = { $gte: 1 };\n        }\n\n        makeFilter({ param: features, field: 'features', filters });\n        makeFilter({ param: tags, field: 'tags', filters });\n        makeFilter({ param: type, field: 'type', filters });\n      };\n      body.$options = { sort: { name: 1 } };\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: organisationSearch,\n  overrides: {\n    firewall: () => {\n      SecurityService.checkCurrentUserIsAdmin();\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proOrganisation,\n  overrides: {\n    firewall: (userId) => {\n      SecurityService.checkUserIsPro(userId);\n    },\n    validateParams: { organisationId: String, $body: Match.Maybe(Object) },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { organisationId } }) => {\n        filters._id = organisationId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: userOrganisations,\n  overrides: {\n    firewall: (userId) => {\n      SecurityService.checkUserLoggedIn(userId);\n    },\n    validateParams: {},\n  },\n});\n"]},"sourceType":"script","hash":"0ee68941de8ee6c0156ac1dcb066807251909feb"}

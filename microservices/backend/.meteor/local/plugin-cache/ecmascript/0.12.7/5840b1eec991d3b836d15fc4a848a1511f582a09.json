{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Table/test/Table.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/components/Table/test/Table.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Table/test/Table.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/components/Table/test/Table.spec.js"],"names":["expect","sortData","ORDER","describe","order","orderBy","data","column","beforeEach","ASC","undefined","columns","it","sortedData","newOrderBy","to","deep","equal","label","raw","Date"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { sortData, ORDER } from '../tableHelpers';\n\ndescribe('<Table />', () => {\n  describe('sortData', () => {\n    let order;\n    let orderBy;\n    let data;\n    let column;\n\n    beforeEach(() => {\n      order = ORDER.ASC;\n      orderBy = undefined;\n      column = 0;\n    });\n\n    describe('when data is strings', () => {\n      beforeEach(() => {\n        data = [{ columns: ['3'] }, { columns: ['1'] }, { columns: ['2'] }];\n      });\n\n      it('sorts 2 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n        expect(sortedData).to.deep.equal([\n          { columns: ['1'] },\n          { columns: ['2'] },\n          { columns: ['3'] },\n        ]);\n      });\n\n      it('sorts 2 rows of data descending when the same column is sorted again', () => {\n        // Initially, the data is already sorted by \"column\"\n        orderBy = column;\n\n        const { data: sortedData } = sortData({\n          data,\n          // Sort it again by \"column\"\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: ['3'] },\n          { columns: ['2'] },\n          { columns: ['1'] },\n        ]);\n      });\n\n      it('sorts 3 rows of data ascending', () => {\n        data = [\n          { columns: ['test 2'] },\n          { columns: ['test 3'] },\n          { columns: ['test 1'] },\n        ];\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n        expect(sortedData).to.deep.equal([\n          { columns: ['test 1'] },\n          { columns: ['test 2'] },\n          { columns: ['test 3'] },\n        ]);\n      });\n    });\n\n    describe('when data is numbers', () => {\n      beforeEach(() => {\n        order = ORDER.ASC;\n        data = [{ columns: [3] }, { columns: [2] }];\n      });\n\n      it('sorts 2 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([{ columns: [2] }, { columns: [3] }]);\n      });\n\n      it('sorts 2 rows of data descending', () => {\n        orderBy = column;\n\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([{ columns: [3] }, { columns: [2] }]);\n      });\n    });\n\n    describe('when data is an object', () => {\n      beforeEach(() => {\n        order = ORDER.ASC;\n        data = [\n          { columns: [{ label: 'one', raw: 10 }] },\n          { columns: [{ label: 'three', raw: -2 }] },\n          { columns: [{ label: 'four', raw: 5 }] },\n        ];\n      });\n\n      it('sorts 3 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'three', raw: -2 }] },\n          { columns: [{ label: 'four', raw: 5 }] },\n          { columns: [{ label: 'one', raw: 10 }] },\n        ]);\n      });\n\n      it('sorts 3 rows of data descending', () => {\n        orderBy = column;\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'one', raw: 10 }] },\n          { columns: [{ label: 'four', raw: 5 }] },\n          { columns: [{ label: 'three', raw: -2 }] },\n        ]);\n      });\n    });\n\n    describe('when data is a Date', () => {\n      beforeEach(() => {\n        order = ORDER.ASC;\n        data = [\n          { columns: [{ label: 'one', raw: new Date('02.05.2015') }] },\n          { columns: [{ label: 'three', raw: new Date('01.01.2010') }] },\n          { columns: [{ label: 'four', raw: new Date('04.06.2010') }] },\n        ];\n      });\n\n      it('sorts 3 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'three', raw: new Date('01.01.2010') }] },\n          { columns: [{ label: 'four', raw: new Date('04.06.2010') }] },\n          { columns: [{ label: 'one', raw: new Date('02.05.2015') }] },\n        ]);\n      });\n\n      it('sorts 3 rows of data descending', () => {\n        orderBy = column;\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'one', raw: new Date('02.05.2015') }] },\n          { columns: [{ label: 'four', raw: new Date('04.06.2010') }] },\n          { columns: [{ label: 'three', raw: new Date('01.01.2010') }] },\n        ]);\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Table/test/Table.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/Table/test/Table.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar sortData, ORDER;\nmodule.link(\"../tableHelpers\", {\n  sortData: function (v) {\n    sortData = v;\n  },\n  ORDER: function (v) {\n    ORDER = v;\n  }\n}, 1);\ndescribe('<Table />', function () {\n  describe('sortData', function () {\n    var order;\n    var orderBy;\n    var data;\n    var column;\n    beforeEach(function () {\n      order = ORDER.ASC;\n      orderBy = undefined;\n      column = 0;\n    });\n    describe('when data is strings', function () {\n      beforeEach(function () {\n        data = [{\n          columns: ['3']\n        }, {\n          columns: ['1']\n        }, {\n          columns: ['2']\n        }];\n      });\n      it('sorts 2 rows of data ascending', function () {\n        var _sortData = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: ['1']\n        }, {\n          columns: ['2']\n        }, {\n          columns: ['3']\n        }]);\n      });\n      it('sorts 2 rows of data descending when the same column is sorted again', function () {\n        // Initially, the data is already sorted by \"column\"\n        orderBy = column;\n\n        var _sortData2 = sortData({\n          data: data,\n          // Sort it again by \"column\"\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData2.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: ['3']\n        }, {\n          columns: ['2']\n        }, {\n          columns: ['1']\n        }]);\n      });\n      it('sorts 3 rows of data ascending', function () {\n        data = [{\n          columns: ['test 2']\n        }, {\n          columns: ['test 3']\n        }, {\n          columns: ['test 1']\n        }];\n\n        var _sortData3 = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData3.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: ['test 1']\n        }, {\n          columns: ['test 2']\n        }, {\n          columns: ['test 3']\n        }]);\n      });\n    });\n    describe('when data is numbers', function () {\n      beforeEach(function () {\n        order = ORDER.ASC;\n        data = [{\n          columns: [3]\n        }, {\n          columns: [2]\n        }];\n      });\n      it('sorts 2 rows of data ascending', function () {\n        var _sortData4 = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData4.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: [2]\n        }, {\n          columns: [3]\n        }]);\n      });\n      it('sorts 2 rows of data descending', function () {\n        orderBy = column;\n\n        var _sortData5 = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData5.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: [3]\n        }, {\n          columns: [2]\n        }]);\n      });\n    });\n    describe('when data is an object', function () {\n      beforeEach(function () {\n        order = ORDER.ASC;\n        data = [{\n          columns: [{\n            label: 'one',\n            raw: 10\n          }]\n        }, {\n          columns: [{\n            label: 'three',\n            raw: -2\n          }]\n        }, {\n          columns: [{\n            label: 'four',\n            raw: 5\n          }]\n        }];\n      });\n      it('sorts 3 rows of data ascending', function () {\n        var _sortData6 = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData6.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: [{\n            label: 'three',\n            raw: -2\n          }]\n        }, {\n          columns: [{\n            label: 'four',\n            raw: 5\n          }]\n        }, {\n          columns: [{\n            label: 'one',\n            raw: 10\n          }]\n        }]);\n      });\n      it('sorts 3 rows of data descending', function () {\n        orderBy = column;\n\n        var _sortData7 = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData7.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: [{\n            label: 'one',\n            raw: 10\n          }]\n        }, {\n          columns: [{\n            label: 'four',\n            raw: 5\n          }]\n        }, {\n          columns: [{\n            label: 'three',\n            raw: -2\n          }]\n        }]);\n      });\n    });\n    describe('when data is a Date', function () {\n      beforeEach(function () {\n        order = ORDER.ASC;\n        data = [{\n          columns: [{\n            label: 'one',\n            raw: new Date('02.05.2015')\n          }]\n        }, {\n          columns: [{\n            label: 'three',\n            raw: new Date('01.01.2010')\n          }]\n        }, {\n          columns: [{\n            label: 'four',\n            raw: new Date('04.06.2010')\n          }]\n        }];\n      });\n      it('sorts 3 rows of data ascending', function () {\n        var _sortData8 = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData8.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: [{\n            label: 'three',\n            raw: new Date('01.01.2010')\n          }]\n        }, {\n          columns: [{\n            label: 'four',\n            raw: new Date('04.06.2010')\n          }]\n        }, {\n          columns: [{\n            label: 'one',\n            raw: new Date('02.05.2015')\n          }]\n        }]);\n      });\n      it('sorts 3 rows of data descending', function () {\n        orderBy = column;\n\n        var _sortData9 = sortData({\n          data: data,\n          newOrderBy: column,\n          order: order,\n          orderBy: orderBy\n        }),\n            sortedData = _sortData9.data;\n\n        expect(sortedData).to.deep.equal([{\n          columns: [{\n            label: 'one',\n            raw: new Date('02.05.2015')\n          }]\n        }, {\n          columns: [{\n            label: 'four',\n            raw: new Date('04.06.2010')\n          }]\n        }, {\n          columns: [{\n            label: 'three',\n            raw: new Date('01.01.2010')\n          }]\n        }]);\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/Table/test/Table.spec.js"],"names":["describe","beforeEach","order","ORDER","orderBy","column","data","columns","it","sortedData","sortData","newOrderBy","expect","label","raw"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { sortData, ORDER } from '../tableHelpers';\n\ndescribe('<Table />', () => {\n  describe('sortData', () => {\n    let order;\n    let orderBy;\n    let data;\n    let column;\n\n    beforeEach(() => {\n      order = ORDER.ASC;\n      orderBy = undefined;\n      column = 0;\n    });\n\n    describe('when data is strings', () => {\n      beforeEach(() => {\n        data = [{ columns: ['3'] }, { columns: ['1'] }, { columns: ['2'] }];\n      });\n\n      it('sorts 2 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n        expect(sortedData).to.deep.equal([\n          { columns: ['1'] },\n          { columns: ['2'] },\n          { columns: ['3'] },\n        ]);\n      });\n\n      it('sorts 2 rows of data descending when the same column is sorted again', () => {\n        // Initially, the data is already sorted by \"column\"\n        orderBy = column;\n\n        const { data: sortedData } = sortData({\n          data,\n          // Sort it again by \"column\"\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: ['3'] },\n          { columns: ['2'] },\n          { columns: ['1'] },\n        ]);\n      });\n\n      it('sorts 3 rows of data ascending', () => {\n        data = [\n          { columns: ['test 2'] },\n          { columns: ['test 3'] },\n          { columns: ['test 1'] },\n        ];\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n        expect(sortedData).to.deep.equal([\n          { columns: ['test 1'] },\n          { columns: ['test 2'] },\n          { columns: ['test 3'] },\n        ]);\n      });\n    });\n\n    describe('when data is numbers', () => {\n      beforeEach(() => {\n        order = ORDER.ASC;\n        data = [{ columns: [3] }, { columns: [2] }];\n      });\n\n      it('sorts 2 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([{ columns: [2] }, { columns: [3] }]);\n      });\n\n      it('sorts 2 rows of data descending', () => {\n        orderBy = column;\n\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([{ columns: [3] }, { columns: [2] }]);\n      });\n    });\n\n    describe('when data is an object', () => {\n      beforeEach(() => {\n        order = ORDER.ASC;\n        data = [\n          { columns: [{ label: 'one', raw: 10 }] },\n          { columns: [{ label: 'three', raw: -2 }] },\n          { columns: [{ label: 'four', raw: 5 }] },\n        ];\n      });\n\n      it('sorts 3 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'three', raw: -2 }] },\n          { columns: [{ label: 'four', raw: 5 }] },\n          { columns: [{ label: 'one', raw: 10 }] },\n        ]);\n      });\n\n      it('sorts 3 rows of data descending', () => {\n        orderBy = column;\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'one', raw: 10 }] },\n          { columns: [{ label: 'four', raw: 5 }] },\n          { columns: [{ label: 'three', raw: -2 }] },\n        ]);\n      });\n    });\n\n    describe('when data is a Date', () => {\n      beforeEach(() => {\n        order = ORDER.ASC;\n        data = [\n          { columns: [{ label: 'one', raw: new Date('02.05.2015') }] },\n          { columns: [{ label: 'three', raw: new Date('01.01.2010') }] },\n          { columns: [{ label: 'four', raw: new Date('04.06.2010') }] },\n        ];\n      });\n\n      it('sorts 3 rows of data ascending', () => {\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'three', raw: new Date('01.01.2010') }] },\n          { columns: [{ label: 'four', raw: new Date('04.06.2010') }] },\n          { columns: [{ label: 'one', raw: new Date('02.05.2015') }] },\n        ]);\n      });\n\n      it('sorts 3 rows of data descending', () => {\n        orderBy = column;\n        const { data: sortedData } = sortData({\n          data,\n          newOrderBy: column,\n          order,\n          orderBy,\n        });\n\n        expect(sortedData).to.deep.equal([\n          { columns: [{ label: 'one', raw: new Date('02.05.2015') }] },\n          { columns: [{ label: 'four', raw: new Date('04.06.2010') }] },\n          { columns: [{ label: 'three', raw: new Date('01.01.2010') }] },\n        ]);\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"5840b1eec991d3b836d15fc4a848a1511f582a09"}

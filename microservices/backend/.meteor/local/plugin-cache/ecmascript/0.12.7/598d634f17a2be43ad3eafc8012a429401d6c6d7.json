{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/insertProperty.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/insertProperty.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/insertProperty.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/insertProperty.test.js"],"names":["Meteor","resetDatabase","expect","PropertyService","generator","PROPERTY_CATEGORY","getTimestampAndNonce","fetchAndCheckResponse","makeHeaders","RESTAPI","insertPropertyAPI","api","addEndpoint","insertProperty","body","expectedResponse","status","userId","impersonateUser","timestamp","nonce","query","undefined","url","data","method","headers","JSON","stringify","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","users","_id","_factory","organisations","emails","address","verified","proProperties","externalId","category","PRO","it","property","value","then","message","propertyId","split","insertedProperty","get","to","equal","properties","userLinks","response","returnedProperty","not"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport { PROPERTY_CATEGORY } from '../../../../properties/propertyConstants';\nimport {\n  getTimestampAndNonce,\n  fetchAndCheckResponse,\n  makeHeaders,\n} from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport insertPropertyAPI from '../insertProperty';\n\nconst api = new RESTAPI();\napi.addEndpoint('/properties', 'POST', insertPropertyAPI);\n\nconst insertProperty = ({\n  body,\n  expectedResponse,\n  status,\n  userId,\n  impersonateUser,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: '/properties',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\ndescribe('REST: insertProperty', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: {\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n        emails: [{ address: 'pro@org.com', verified: true }],\n        proProperties: {\n          _id: 'prop',\n          externalId: 'extId',\n          category: PROPERTY_CATEGORY.PRO,\n        },\n      },\n    });\n  });\n\n  it('inserts a property', () => {\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro',\n      body: property,\n    }).then(({ message }) => {\n      const propertyId = message.split('\"')[1];\n      const insertedProperty = PropertyService.get(propertyId);\n      expect(insertedProperty.value).to.equal(property.value);\n      expect(insertedProperty.externalId).to.equal(property.externalId);\n    });\n  });\n\n  it('inserts a property when impersonating users', () => {\n    generator({\n      users: {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n      },\n    });\n\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro2',\n      body: property,\n      impersonateUser: 'pro@org.com',\n    }).then(({ message }) => {\n      const propertyId = message.split('\"')[1];\n      const insertedProperty = PropertyService.get(propertyId);\n      expect(insertedProperty.value).to.equal(property.value);\n      expect(insertedProperty.externalId).to.equal(property.externalId);\n    });\n  });\n\n  it('throws if a property with same externalId already exists', () => {\n    generator({\n      properties: { externalId: '1234', userLinks: [{ _id: 'pro' }] },\n    });\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro',\n      body: property,\n    }).then((response) => {\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(409);\n      expect(message).to.equal('A property with externalId \"1234\" already exists !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('throws if a property with same externalId already exists without returning the existing property', () => {\n    generator({\n      properties: { externalId: '1234' },\n    });\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro',\n      body: property,\n      expectedResponse: {\n        status: 409,\n        message: 'A property with externalId \"1234\" already exists !',\n      },\n    }).then((response) => {\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(409);\n      expect(message).to.equal('A property with externalId \"1234\" already exists !');\n      expect(returnedProperty).to.equal(undefined);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/insertProperty.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/insertProperty.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet PropertyService;\nmodule.link(\"../../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 3);\nlet generator;\nmodule.link(\"../../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 4);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 5);\nlet getTimestampAndNonce, fetchAndCheckResponse, makeHeaders;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  },\n\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  }\n\n}, 6);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 7);\nlet insertPropertyAPI;\nmodule.link(\"../insertProperty\", {\n  default(v) {\n    insertPropertyAPI = v;\n  }\n\n}, 8);\nconst api = new RESTAPI();\napi.addEndpoint('/properties', 'POST', insertPropertyAPI);\n\nconst insertProperty = ({\n  body,\n  expectedResponse,\n  status,\n  userId,\n  impersonateUser\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const query = impersonateUser ? {\n    'impersonate-user': impersonateUser\n  } : undefined;\n  return fetchAndCheckResponse({\n    url: '/properties',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query\n      }),\n      body: JSON.stringify(body)\n    },\n    expectedResponse,\n    status\n  });\n};\n\ndescribe('REST: insertProperty', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: {\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        },\n        emails: [{\n          address: 'pro@org.com',\n          verified: true\n        }],\n        proProperties: {\n          _id: 'prop',\n          externalId: 'extId',\n          category: PROPERTY_CATEGORY.PRO\n        }\n      }\n    });\n  });\n  it('inserts a property', () => {\n    const property = {\n      externalId: '1234',\n      value: 300000\n    };\n    return insertProperty({\n      userId: 'pro',\n      body: property\n    }).then(({\n      message\n    }) => {\n      const propertyId = message.split('\"')[1];\n      const insertedProperty = PropertyService.get(propertyId);\n      expect(insertedProperty.value).to.equal(property.value);\n      expect(insertedProperty.externalId).to.equal(property.externalId);\n    });\n  });\n  it('inserts a property when impersonating users', () => {\n    generator({\n      users: {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        }\n      }\n    });\n    const property = {\n      externalId: '1234',\n      value: 300000\n    };\n    return insertProperty({\n      userId: 'pro2',\n      body: property,\n      impersonateUser: 'pro@org.com'\n    }).then(({\n      message\n    }) => {\n      const propertyId = message.split('\"')[1];\n      const insertedProperty = PropertyService.get(propertyId);\n      expect(insertedProperty.value).to.equal(property.value);\n      expect(insertedProperty.externalId).to.equal(property.externalId);\n    });\n  });\n  it('throws if a property with same externalId already exists', () => {\n    generator({\n      properties: {\n        externalId: '1234',\n        userLinks: [{\n          _id: 'pro'\n        }]\n      }\n    });\n    const property = {\n      externalId: '1234',\n      value: 300000\n    };\n    return insertProperty({\n      userId: 'pro',\n      body: property\n    }).then(response => {\n      const {\n        status,\n        message,\n        property: returnedProperty\n      } = response;\n      expect(status).to.equal(409);\n      expect(message).to.equal('A property with externalId \"1234\" already exists !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n  it('throws if a property with same externalId already exists without returning the existing property', () => {\n    generator({\n      properties: {\n        externalId: '1234'\n      }\n    });\n    const property = {\n      externalId: '1234',\n      value: 300000\n    };\n    return insertProperty({\n      userId: 'pro',\n      body: property,\n      expectedResponse: {\n        status: 409,\n        message: 'A property with externalId \"1234\" already exists !'\n      }\n    }).then(response => {\n      const {\n        status,\n        message,\n        property: returnedProperty\n      } = response;\n      expect(status).to.equal(409);\n      expect(message).to.equal('A property with externalId \"1234\" already exists !');\n      expect(returnedProperty).to.equal(undefined);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/insertProperty.test.js"],"names":["api","insertProperty","impersonateUser","nonce","getTimestampAndNonce","query","fetchAndCheckResponse","url","data","method","headers","makeHeaders","body","JSON","status","describe","before","Meteor","after","beforeEach","resetDatabase","generator","users","_id","_factory","organisations","emails","address","verified","proProperties","externalId","category","PROPERTY_CATEGORY","PRO","it","property","value","userId","message","propertyId","insertedProperty","PropertyService","expect","properties","userLinks","response","returnedProperty","expectedResponse"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport { PROPERTY_CATEGORY } from '../../../../properties/propertyConstants';\nimport {\n  getTimestampAndNonce,\n  fetchAndCheckResponse,\n  makeHeaders,\n} from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport insertPropertyAPI from '../insertProperty';\n\nconst api = new RESTAPI();\napi.addEndpoint('/properties', 'POST', insertPropertyAPI);\n\nconst insertProperty = ({\n  body,\n  expectedResponse,\n  status,\n  userId,\n  impersonateUser,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: '/properties',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\ndescribe('REST: insertProperty', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: {\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n        emails: [{ address: 'pro@org.com', verified: true }],\n        proProperties: {\n          _id: 'prop',\n          externalId: 'extId',\n          category: PROPERTY_CATEGORY.PRO,\n        },\n      },\n    });\n  });\n\n  it('inserts a property', () => {\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro',\n      body: property,\n    }).then(({ message }) => {\n      const propertyId = message.split('\"')[1];\n      const insertedProperty = PropertyService.get(propertyId);\n      expect(insertedProperty.value).to.equal(property.value);\n      expect(insertedProperty.externalId).to.equal(property.externalId);\n    });\n  });\n\n  it('inserts a property when impersonating users', () => {\n    generator({\n      users: {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n      },\n    });\n\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro2',\n      body: property,\n      impersonateUser: 'pro@org.com',\n    }).then(({ message }) => {\n      const propertyId = message.split('\"')[1];\n      const insertedProperty = PropertyService.get(propertyId);\n      expect(insertedProperty.value).to.equal(property.value);\n      expect(insertedProperty.externalId).to.equal(property.externalId);\n    });\n  });\n\n  it('throws if a property with same externalId already exists', () => {\n    generator({\n      properties: { externalId: '1234', userLinks: [{ _id: 'pro' }] },\n    });\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro',\n      body: property,\n    }).then((response) => {\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(409);\n      expect(message).to.equal('A property with externalId \"1234\" already exists !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('throws if a property with same externalId already exists without returning the existing property', () => {\n    generator({\n      properties: { externalId: '1234' },\n    });\n    const property = { externalId: '1234', value: 300000 };\n    return insertProperty({\n      userId: 'pro',\n      body: property,\n      expectedResponse: {\n        status: 409,\n        message: 'A property with externalId \"1234\" already exists !',\n      },\n    }).then((response) => {\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(409);\n      expect(message).to.equal('A property with externalId \"1234\" already exists !');\n      expect(returnedProperty).to.equal(undefined);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"598d634f17a2be43ad3eafc8012a429401d6c6d7"}

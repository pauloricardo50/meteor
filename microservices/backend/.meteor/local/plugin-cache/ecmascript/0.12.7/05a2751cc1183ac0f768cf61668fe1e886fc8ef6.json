{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/sortArrayOfObjects.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/utils/test/sortArrayOfObjects.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/sortArrayOfObjects.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/test/sortArrayOfObjects.spec.js"],"names":["expect","cloneDeep","sortArrayOfObjects","ORDER","describe","it","input","someValue","anotherValue","expectedOutput","ASC","to","deep","equal","DESC","anotherVal","a","b","inputClone","undefined"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport sortArrayOfObjects, { ORDER } from '../sortArrayOfObjects';\n\ndescribe('sortArrayOfObjects', () => {\n  it('sorts objects ascending by root values', () => {\n    const input = [\n      { someValue: 3, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: -2, anotherValue: 0 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: -2, anotherValue: 2 },\n    ];\n    const expectedOutput = [\n      { someValue: -2, anotherValue: 0 },\n      { someValue: -2, anotherValue: 2 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: 3, anotherValue: 2 },\n    ];\n    expect(sortArrayOfObjects(input, 'someValue', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects descending by root values', () => {\n    const input = [\n      { someValue: 3, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: -2, anotherValue: 0 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: -2, anotherValue: 2 },\n    ];\n    const expectedOutput = [\n      { someValue: 3, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: -2, anotherValue: 0 },\n      { someValue: -2, anotherValue: 2 },\n    ];\n    expect(sortArrayOfObjects(input, 'someValue', ORDER.DESC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects ascending by nested values', () => {\n    const input = [\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n      { someValue: 4, a: { b: 'z' } },\n      { someValue: 1, a: { b: 'cc' } },\n      { a: { b: 'dd' }, someValue: 4 },\n    ];\n    const expectedOutput = [\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n      { someValue: 1, a: { b: 'cc' } },\n      { a: { b: 'dd' }, someValue: 4 },\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { someValue: 4, a: { b: 'z' } },\n    ];\n    expect(sortArrayOfObjects(input, 'a.b', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects descending by nested values', () => {\n    const input = [\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n      { someValue: 4, a: { b: 'z' } },\n      { someValue: 1, a: { b: 'cc' } },\n      { a: { b: 'dd' }, someValue: 4 },\n    ];\n    const expectedOutput = [\n      { someValue: 4, a: { b: 'z' } },\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { a: { b: 'dd' }, someValue: 4 },\n      { someValue: 1, a: { b: 'cc' } },\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n    ];\n    expect(sortArrayOfObjects(input, 'a.b', ORDER.DESC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects by case-insensitive string values', () => {\n    const input = [{ a: 'ba' }, { a: 'aa' }, { a: 'Aa' }, { a: 'Zz' }];\n    const expectedOutput = [{ a: 'aa' }, { a: 'Aa' }, { a: 'ba' }, { a: 'Zz' }];\n    expect(sortArrayOfObjects(input, 'a', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects ascending by default', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    const expectedOutput = [{ a: 1 }, { a: 2 }];\n    expect(sortArrayOfObjects(input, 'a')).to.deep.equal(expectedOutput);\n  });\n\n  it('does not mutate the input array', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    const inputClone = cloneDeep(input);\n    sortArrayOfObjects(input, 'a', ORDER.ASC);\n    expect(input).to.deep.equal(inputClone);\n  });\n\n  it('returns the same input when the sort field is undefined', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    expect(sortArrayOfObjects(input, undefined, ORDER.ASC)).to.equal(input);\n  });\n\n  it('returns the same input when the sort field is an empty string', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    expect(sortArrayOfObjects(input, '', ORDER.ASC)).to.equal(input);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/sortArrayOfObjects.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/test/sortArrayOfObjects.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet cloneDeep;\nmodule.link(\"lodash/cloneDeep\", {\n  default(v) {\n    cloneDeep = v;\n  }\n\n}, 1);\nlet sortArrayOfObjects, ORDER;\nmodule.link(\"../sortArrayOfObjects\", {\n  default(v) {\n    sortArrayOfObjects = v;\n  },\n\n  ORDER(v) {\n    ORDER = v;\n  }\n\n}, 2);\ndescribe('sortArrayOfObjects', () => {\n  it('sorts objects ascending by root values', () => {\n    const input = [{\n      someValue: 3,\n      anotherValue: 2\n    }, {\n      someValue: 1,\n      anotherValue: 5\n    }, {\n      someValue: -2,\n      anotherValue: 0\n    }, {\n      someValue: 0,\n      anotherValue: 2\n    }, {\n      someValue: -2,\n      anotherValue: 2\n    }];\n    const expectedOutput = [{\n      someValue: -2,\n      anotherValue: 0\n    }, {\n      someValue: -2,\n      anotherValue: 2\n    }, {\n      someValue: 0,\n      anotherValue: 2\n    }, {\n      someValue: 1,\n      anotherValue: 5\n    }, {\n      someValue: 3,\n      anotherValue: 2\n    }];\n    expect(sortArrayOfObjects(input, 'someValue', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n  it('sorts objects descending by root values', () => {\n    const input = [{\n      someValue: 3,\n      anotherValue: 2\n    }, {\n      someValue: 1,\n      anotherValue: 5\n    }, {\n      someValue: -2,\n      anotherValue: 0\n    }, {\n      someValue: 0,\n      anotherValue: 2\n    }, {\n      someValue: -2,\n      anotherValue: 2\n    }];\n    const expectedOutput = [{\n      someValue: 3,\n      anotherValue: 2\n    }, {\n      someValue: 1,\n      anotherValue: 5\n    }, {\n      someValue: 0,\n      anotherValue: 2\n    }, {\n      someValue: -2,\n      anotherValue: 0\n    }, {\n      someValue: -2,\n      anotherValue: 2\n    }];\n    expect(sortArrayOfObjects(input, 'someValue', ORDER.DESC)).to.deep.equal(expectedOutput);\n  });\n  it('sorts objects ascending by nested values', () => {\n    const input = [{\n      someValue: -3,\n      anotherVal: 'val',\n      a: {\n        b: 'x'\n      }\n    }, {\n      someValue: 2,\n      anotherVal: 'val',\n      a: {\n        b: 'a'\n      }\n    }, {\n      someValue: 4,\n      a: {\n        b: 'z'\n      }\n    }, {\n      someValue: 1,\n      a: {\n        b: 'cc'\n      }\n    }, {\n      a: {\n        b: 'dd'\n      },\n      someValue: 4\n    }];\n    const expectedOutput = [{\n      someValue: 2,\n      anotherVal: 'val',\n      a: {\n        b: 'a'\n      }\n    }, {\n      someValue: 1,\n      a: {\n        b: 'cc'\n      }\n    }, {\n      a: {\n        b: 'dd'\n      },\n      someValue: 4\n    }, {\n      someValue: -3,\n      anotherVal: 'val',\n      a: {\n        b: 'x'\n      }\n    }, {\n      someValue: 4,\n      a: {\n        b: 'z'\n      }\n    }];\n    expect(sortArrayOfObjects(input, 'a.b', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n  it('sorts objects descending by nested values', () => {\n    const input = [{\n      someValue: -3,\n      anotherVal: 'val',\n      a: {\n        b: 'x'\n      }\n    }, {\n      someValue: 2,\n      anotherVal: 'val',\n      a: {\n        b: 'a'\n      }\n    }, {\n      someValue: 4,\n      a: {\n        b: 'z'\n      }\n    }, {\n      someValue: 1,\n      a: {\n        b: 'cc'\n      }\n    }, {\n      a: {\n        b: 'dd'\n      },\n      someValue: 4\n    }];\n    const expectedOutput = [{\n      someValue: 4,\n      a: {\n        b: 'z'\n      }\n    }, {\n      someValue: -3,\n      anotherVal: 'val',\n      a: {\n        b: 'x'\n      }\n    }, {\n      a: {\n        b: 'dd'\n      },\n      someValue: 4\n    }, {\n      someValue: 1,\n      a: {\n        b: 'cc'\n      }\n    }, {\n      someValue: 2,\n      anotherVal: 'val',\n      a: {\n        b: 'a'\n      }\n    }];\n    expect(sortArrayOfObjects(input, 'a.b', ORDER.DESC)).to.deep.equal(expectedOutput);\n  });\n  it('sorts objects by case-insensitive string values', () => {\n    const input = [{\n      a: 'ba'\n    }, {\n      a: 'aa'\n    }, {\n      a: 'Aa'\n    }, {\n      a: 'Zz'\n    }];\n    const expectedOutput = [{\n      a: 'aa'\n    }, {\n      a: 'Aa'\n    }, {\n      a: 'ba'\n    }, {\n      a: 'Zz'\n    }];\n    expect(sortArrayOfObjects(input, 'a', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n  it('sorts objects ascending by default', () => {\n    const input = [{\n      a: 2\n    }, {\n      a: 1\n    }];\n    const expectedOutput = [{\n      a: 1\n    }, {\n      a: 2\n    }];\n    expect(sortArrayOfObjects(input, 'a')).to.deep.equal(expectedOutput);\n  });\n  it('does not mutate the input array', () => {\n    const input = [{\n      a: 2\n    }, {\n      a: 1\n    }];\n    const inputClone = cloneDeep(input);\n    sortArrayOfObjects(input, 'a', ORDER.ASC);\n    expect(input).to.deep.equal(inputClone);\n  });\n  it('returns the same input when the sort field is undefined', () => {\n    const input = [{\n      a: 2\n    }, {\n      a: 1\n    }];\n    expect(sortArrayOfObjects(input, undefined, ORDER.ASC)).to.equal(input);\n  });\n  it('returns the same input when the sort field is an empty string', () => {\n    const input = [{\n      a: 2\n    }, {\n      a: 1\n    }];\n    expect(sortArrayOfObjects(input, '', ORDER.ASC)).to.equal(input);\n  });\n});","map":{"version":3,"sources":["imports/core/utils/test/sortArrayOfObjects.spec.js"],"names":["describe","it","input","someValue","anotherValue","expectedOutput","expect","sortArrayOfObjects","ORDER","anotherVal","a","b","inputClone","cloneDeep"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport sortArrayOfObjects, { ORDER } from '../sortArrayOfObjects';\n\ndescribe('sortArrayOfObjects', () => {\n  it('sorts objects ascending by root values', () => {\n    const input = [\n      { someValue: 3, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: -2, anotherValue: 0 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: -2, anotherValue: 2 },\n    ];\n    const expectedOutput = [\n      { someValue: -2, anotherValue: 0 },\n      { someValue: -2, anotherValue: 2 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: 3, anotherValue: 2 },\n    ];\n    expect(sortArrayOfObjects(input, 'someValue', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects descending by root values', () => {\n    const input = [\n      { someValue: 3, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: -2, anotherValue: 0 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: -2, anotherValue: 2 },\n    ];\n    const expectedOutput = [\n      { someValue: 3, anotherValue: 2 },\n      { someValue: 1, anotherValue: 5 },\n      { someValue: 0, anotherValue: 2 },\n      { someValue: -2, anotherValue: 0 },\n      { someValue: -2, anotherValue: 2 },\n    ];\n    expect(sortArrayOfObjects(input, 'someValue', ORDER.DESC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects ascending by nested values', () => {\n    const input = [\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n      { someValue: 4, a: { b: 'z' } },\n      { someValue: 1, a: { b: 'cc' } },\n      { a: { b: 'dd' }, someValue: 4 },\n    ];\n    const expectedOutput = [\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n      { someValue: 1, a: { b: 'cc' } },\n      { a: { b: 'dd' }, someValue: 4 },\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { someValue: 4, a: { b: 'z' } },\n    ];\n    expect(sortArrayOfObjects(input, 'a.b', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects descending by nested values', () => {\n    const input = [\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n      { someValue: 4, a: { b: 'z' } },\n      { someValue: 1, a: { b: 'cc' } },\n      { a: { b: 'dd' }, someValue: 4 },\n    ];\n    const expectedOutput = [\n      { someValue: 4, a: { b: 'z' } },\n      { someValue: -3, anotherVal: 'val', a: { b: 'x' } },\n      { a: { b: 'dd' }, someValue: 4 },\n      { someValue: 1, a: { b: 'cc' } },\n      { someValue: 2, anotherVal: 'val', a: { b: 'a' } },\n    ];\n    expect(sortArrayOfObjects(input, 'a.b', ORDER.DESC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects by case-insensitive string values', () => {\n    const input = [{ a: 'ba' }, { a: 'aa' }, { a: 'Aa' }, { a: 'Zz' }];\n    const expectedOutput = [{ a: 'aa' }, { a: 'Aa' }, { a: 'ba' }, { a: 'Zz' }];\n    expect(sortArrayOfObjects(input, 'a', ORDER.ASC)).to.deep.equal(expectedOutput);\n  });\n\n  it('sorts objects ascending by default', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    const expectedOutput = [{ a: 1 }, { a: 2 }];\n    expect(sortArrayOfObjects(input, 'a')).to.deep.equal(expectedOutput);\n  });\n\n  it('does not mutate the input array', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    const inputClone = cloneDeep(input);\n    sortArrayOfObjects(input, 'a', ORDER.ASC);\n    expect(input).to.deep.equal(inputClone);\n  });\n\n  it('returns the same input when the sort field is undefined', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    expect(sortArrayOfObjects(input, undefined, ORDER.ASC)).to.equal(input);\n  });\n\n  it('returns the same input when the sort field is an empty string', () => {\n    const input = [{ a: 2 }, { a: 1 }];\n    expect(sortArrayOfObjects(input, '', ORDER.ASC)).to.equal(input);\n  });\n});\n"]},"sourceType":"script","hash":"05a2751cc1183ac0f768cf61668fe1e886fc8ef6"}

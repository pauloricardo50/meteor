{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/lib/dispatchers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/lib/dispatchers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/lib/dispatchers.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/lib/dispatchers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/lib/dispatchers.js"}},"code":"module.export({\n  dispatchInsert: () => dispatchInsert,\n  dispatchUpdate: () => dispatchUpdate,\n  dispatchRemove: () => dispatchRemove\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet DDPServer;\nmodule.link(\"meteor/ddp-server\", {\n  DDPServer(v) {\n    DDPServer = v;\n  }\n\n}, 1);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 2);\nlet Events, RedisPipe;\nmodule.link(\"../../constants\", {\n  Events(v) {\n    Events = v;\n  },\n\n  RedisPipe(v) {\n    RedisPipe = v;\n  }\n\n}, 3);\nlet RedisSubscriptionManager;\nmodule.link(\"../../redis/RedisSubscriptionManager\", {\n  default(v) {\n    RedisSubscriptionManager = v;\n  }\n\n}, 4);\nlet getRedisPusher;\nmodule.link(\"../../redis/getRedisClient\", {\n  getRedisPusher(v) {\n    getRedisPusher = v;\n  }\n\n}, 5);\nlet getDedicatedChannel;\nmodule.link(\"../../utils/getDedicatedChannel\", {\n  default(v) {\n    getDedicatedChannel = v;\n  }\n\n}, 6);\nlet Config;\nmodule.link(\"../../config\", {\n  default(v) {\n    Config = v;\n  }\n\n}, 7);\n\nconst getWriteFence = function (optimistic) {\n  if (optimistic && DDPServer._CurrentWriteFence) {\n    return DDPServer._CurrentWriteFence.get();\n  }\n\n  return null;\n};\n\nconst dispatchEvents = function (fence, collectionName, channels, events) {\n  if (fence) {\n    const write = fence.beginWrite();\n    RedisSubscriptionManager.queue.queueTask(Meteor.bindEnvironment(() => {\n      try {\n        events.forEach(event => {\n          channels.forEach(channelName => {\n            RedisSubscriptionManager.process(channelName, event);\n          });\n          const docId = event[RedisPipe.DOC]._id;\n          const dedicatedChannel = getDedicatedChannel(collectionName, docId);\n          RedisSubscriptionManager.process(dedicatedChannel, event);\n        });\n      } finally {\n        write.committed();\n      }\n    }));\n  }\n\n  if (Config.externalRedisPublisher) {\n    return;\n  }\n\n  Meteor.defer(() => {\n    const client = getRedisPusher();\n    events.forEach(event => {\n      const message = EJSON.stringify(event);\n      channels.forEach(channelName => {\n        client.publish(channelName, message);\n      });\n      const docId = event[RedisPipe.DOC]._id;\n      const dedicatedChannel = getDedicatedChannel(collectionName, docId);\n      client.publish(dedicatedChannel, message);\n    });\n  });\n};\n\nconst dispatchUpdate = function (optimistic, collectionName, channels, docIds, fields) {\n  const fence = getWriteFence(optimistic);\n  const uid = fence ? RedisSubscriptionManager.uid : null;\n  const events = docIds.map(docId => ({\n    [RedisPipe.EVENT]: Events.UPDATE,\n    [RedisPipe.FIELDS]: fields,\n    [RedisPipe.DOC]: {\n      _id: docId\n    },\n    [RedisPipe.UID]: uid\n  }));\n  dispatchEvents(fence, collectionName, channels, events);\n};\n\nconst dispatchRemove = function (optimistic, collectionName, channels, docIds) {\n  const fence = getWriteFence(optimistic);\n  const uid = fence ? RedisSubscriptionManager.uid : null;\n  const events = docIds.map(docId => ({\n    [RedisPipe.EVENT]: Events.REMOVE,\n    [RedisPipe.DOC]: {\n      _id: docId\n    },\n    [RedisPipe.UID]: uid\n  }));\n  dispatchEvents(fence, collectionName, channels, events);\n};\n\nconst dispatchInsert = function (optimistic, collectionName, channels, docId) {\n  const fence = getWriteFence(optimistic);\n  const uid = fence ? RedisSubscriptionManager.uid : null;\n  const event = {\n    [RedisPipe.EVENT]: Events.INSERT,\n    [RedisPipe.DOC]: {\n      _id: docId\n    },\n    [RedisPipe.UID]: uid\n  };\n  dispatchEvents(fence, collectionName, channels, [event]);\n};","map":{"version":3,"sources":["packages/cultofcoders:redis-oplog/lib/mongo/lib/dispatchers.js"],"names":["module","export","dispatchInsert","dispatchUpdate","dispatchRemove","Meteor","link","v","DDPServer","EJSON","Events","RedisPipe","RedisSubscriptionManager","default","getRedisPusher","getDedicatedChannel","Config","getWriteFence","optimistic","_CurrentWriteFence","get","dispatchEvents","fence","collectionName","channels","events","write","beginWrite","queue","queueTask","bindEnvironment","forEach","event","channelName","process","docId","DOC","_id","dedicatedChannel","committed","externalRedisPublisher","defer","client","message","stringify","publish","docIds","fields","uid","map","EVENT","UPDATE","FIELDS","UID","REMOVE","INSERT"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { DDPServer } from 'meteor/ddp-server';\nimport { EJSON } from 'meteor/ejson';\nimport { Events, RedisPipe } from '../../constants';\nimport RedisSubscriptionManager from '../../redis/RedisSubscriptionManager';\nimport { getRedisPusher } from \"../../redis/getRedisClient\";\nimport getDedicatedChannel from '../../utils/getDedicatedChannel';\nimport Config from '../../config';\n\nconst getWriteFence = function (optimistic) {\n    if (optimistic && DDPServer._CurrentWriteFence) {\n        return DDPServer._CurrentWriteFence.get();\n    }\n    return null;\n};\n\nconst dispatchEvents = function (fence, collectionName, channels, events) {\n    if (fence) {\n        const write = fence.beginWrite();\n        RedisSubscriptionManager.queue.queueTask(Meteor.bindEnvironment(() => {\n            try {\n              events.forEach((event) => {\n                channels.forEach(channelName => {\n                  RedisSubscriptionManager.process(channelName, event);\n                });\n                const docId = event[RedisPipe.DOC]._id;\n                const dedicatedChannel = getDedicatedChannel(collectionName, docId);\n                RedisSubscriptionManager.process(dedicatedChannel, event);\n              });\n            } finally {\n              write.committed();\n            }\n        }));\n    }\n\n    if (Config.externalRedisPublisher) {\n        return;\n    }\n\n    Meteor.defer(() => {\n        const client = getRedisPusher();\n        events.forEach((event) => {\n            const message = EJSON.stringify(event);\n            channels.forEach(channelName => {\n                client.publish(channelName, message);\n            });\n            const docId = event[RedisPipe.DOC]._id;\n            const dedicatedChannel = getDedicatedChannel(collectionName, docId);\n            client.publish(dedicatedChannel, message);\n        });\n    });\n};\n\n\nconst dispatchUpdate = function (optimistic, collectionName, channels, docIds, fields) {\n    const fence = getWriteFence(optimistic);\n    const uid = fence ? RedisSubscriptionManager.uid : null;\n    const events = docIds.map(docId => ({\n        [RedisPipe.EVENT]: Events.UPDATE,\n        [RedisPipe.FIELDS]: fields,\n        [RedisPipe.DOC]: { _id: docId },\n        [RedisPipe.UID]: uid,\n    }));\n    dispatchEvents(fence, collectionName, channels, events);\n};\n\nconst dispatchRemove = function (optimistic, collectionName, channels, docIds) {\n    const fence = getWriteFence(optimistic);\n    const uid = fence ? RedisSubscriptionManager.uid : null;\n    const events = docIds.map(docId => ({\n        [RedisPipe.EVENT]: Events.REMOVE,\n        [RedisPipe.DOC]: { _id: docId },\n        [RedisPipe.UID]: uid,\n    }));\n    dispatchEvents(fence, collectionName, channels, events);\n};\n\nconst dispatchInsert = function (optimistic, collectionName, channels, docId) {\n    const fence = getWriteFence(optimistic);\n    const uid = fence ? RedisSubscriptionManager.uid : null;\n    const event = {\n        [RedisPipe.EVENT]: Events.INSERT,\n        [RedisPipe.DOC]: { _id: docId },\n        [RedisPipe.UID]: uid,\n    };\n    dispatchEvents(fence, collectionName, channels, [event]);\n};\n\nexport { dispatchInsert, dispatchUpdate, dispatchRemove };\n"]},"sourceType":"script","hash":"11c119c070f20a45d81039191b07d64e99dd2e07"}

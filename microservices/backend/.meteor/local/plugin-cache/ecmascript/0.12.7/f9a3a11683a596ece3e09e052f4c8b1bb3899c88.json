{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/test/widget1Selectors.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/redux/widget1/test/widget1Selectors.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/test/widget1Selectors.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/redux/widget1/test/widget1Selectors.spec.js"],"names":["expect","makeWidget1Selector","makeSelectValue","selectFields","selectAutoValues","PURCHASE_TYPE","ACQUISITION_FIELDS","REFINANCING_FIELDS","describe","it","myField","widget1","to","equal","value","purchaseType","ACQUISITION","REFINANCING","autoValues","salary","auto","fortune","property","deep","wantedLoan","currentLoan","skip","recomputations"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  makeWidget1Selector,\n  makeSelectValue,\n  selectFields,\n  selectAutoValues,\n} from '../widget1Selectors';\nimport {\n  PURCHASE_TYPE,\n  ACQUISITION_FIELDS,\n  REFINANCING_FIELDS,\n} from '../widget1Constants';\n\ndescribe('selectors', () => {\n  describe('makeWidget1Selector', () => {\n    it('should select widget1', () => {\n      const myField = 'hello world';\n      expect(makeWidget1Selector('myField')({ widget1: { myField } })).to.equal(myField);\n    });\n  });\n\n  describe('makeSelectValue', () => {\n    it('should get the value of a field', () => {\n      const myField = { value: 200 };\n      expect(makeSelectValue('myField')({ widget1: { myField } })).to.equal(myField.value);\n    });\n  });\n\n  describe('selectFields', () => {\n    it('should select the right fields', () => {\n      expect(selectFields({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION },\n      })).to.equal(ACQUISITION_FIELDS);\n      expect(selectFields({\n        widget1: { purchaseType: PURCHASE_TYPE.REFINANCING },\n      })).to.equal(REFINANCING_FIELDS);\n    });\n  });\n\n  describe('selectAutoValues', () => {\n    it('selects all auto values based on purchase type', () => {\n      const autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n      };\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto,\n      });\n    });\n\n    it('selects all auto values based on purchase type', () => {\n      const autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n        wantedLoan: { auto: 4 },\n        currentLoan: { auto: 5 },\n      };\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.REFINANCING, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        property: autoValues.property.auto,\n        currentLoan: autoValues.currentLoan.auto,\n        wantedLoan: autoValues.wantedLoan.auto,\n      });\n    });\n\n    it.skip('memoizes properly, running the same computation only once', () => {\n      let autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n      };\n      expect(selectAutoValues.recomputations()).to.equal(0);\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto,\n      });\n      autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n      };\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto,\n      });\n      expect(selectAutoValues.recomputations()).to.equal(1);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/redux/widget1/test/widget1Selectors.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/redux/widget1/test/widget1Selectors.spec.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet makeWidget1Selector, makeSelectValue, selectFields, selectAutoValues;\nmodule.link(\"../widget1Selectors\", {\n  makeWidget1Selector(v) {\n    makeWidget1Selector = v;\n  },\n\n  makeSelectValue(v) {\n    makeSelectValue = v;\n  },\n\n  selectFields(v) {\n    selectFields = v;\n  },\n\n  selectAutoValues(v) {\n    selectAutoValues = v;\n  }\n\n}, 1);\nlet PURCHASE_TYPE, ACQUISITION_FIELDS, REFINANCING_FIELDS;\nmodule.link(\"../widget1Constants\", {\n  PURCHASE_TYPE(v) {\n    PURCHASE_TYPE = v;\n  },\n\n  ACQUISITION_FIELDS(v) {\n    ACQUISITION_FIELDS = v;\n  },\n\n  REFINANCING_FIELDS(v) {\n    REFINANCING_FIELDS = v;\n  }\n\n}, 2);\ndescribe('selectors', () => {\n  describe('makeWidget1Selector', () => {\n    it('should select widget1', () => {\n      const myField = 'hello world';\n      expect(makeWidget1Selector('myField')({\n        widget1: {\n          myField\n        }\n      })).to.equal(myField);\n    });\n  });\n  describe('makeSelectValue', () => {\n    it('should get the value of a field', () => {\n      const myField = {\n        value: 200\n      };\n      expect(makeSelectValue('myField')({\n        widget1: {\n          myField\n        }\n      })).to.equal(myField.value);\n    });\n  });\n  describe('selectFields', () => {\n    it('should select the right fields', () => {\n      expect(selectFields({\n        widget1: {\n          purchaseType: PURCHASE_TYPE.ACQUISITION\n        }\n      })).to.equal(ACQUISITION_FIELDS);\n      expect(selectFields({\n        widget1: {\n          purchaseType: PURCHASE_TYPE.REFINANCING\n        }\n      })).to.equal(REFINANCING_FIELDS);\n    });\n  });\n  describe('selectAutoValues', () => {\n    it('selects all auto values based on purchase type', () => {\n      const autoValues = {\n        salary: {\n          auto: 1\n        },\n        fortune: {\n          auto: 2\n        },\n        property: {\n          auto: 3\n        }\n      };\n      expect(selectAutoValues({\n        widget1: (0, _objectSpread2.default)({\n          purchaseType: PURCHASE_TYPE.ACQUISITION\n        }, autoValues)\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto\n      });\n    });\n    it('selects all auto values based on purchase type', () => {\n      const autoValues = {\n        salary: {\n          auto: 1\n        },\n        fortune: {\n          auto: 2\n        },\n        property: {\n          auto: 3\n        },\n        wantedLoan: {\n          auto: 4\n        },\n        currentLoan: {\n          auto: 5\n        }\n      };\n      expect(selectAutoValues({\n        widget1: (0, _objectSpread2.default)({\n          purchaseType: PURCHASE_TYPE.REFINANCING\n        }, autoValues)\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        property: autoValues.property.auto,\n        currentLoan: autoValues.currentLoan.auto,\n        wantedLoan: autoValues.wantedLoan.auto\n      });\n    });\n    it.skip('memoizes properly, running the same computation only once', () => {\n      let autoValues = {\n        salary: {\n          auto: 1\n        },\n        fortune: {\n          auto: 2\n        },\n        property: {\n          auto: 3\n        }\n      };\n      expect(selectAutoValues.recomputations()).to.equal(0);\n      expect(selectAutoValues({\n        widget1: (0, _objectSpread2.default)({\n          purchaseType: PURCHASE_TYPE.ACQUISITION\n        }, autoValues)\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto\n      });\n      autoValues = {\n        salary: {\n          auto: 1\n        },\n        fortune: {\n          auto: 2\n        },\n        property: {\n          auto: 3\n        }\n      };\n      expect(selectAutoValues({\n        widget1: (0, _objectSpread2.default)({\n          purchaseType: PURCHASE_TYPE.ACQUISITION\n        }, autoValues)\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto\n      });\n      expect(selectAutoValues.recomputations()).to.equal(1);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/redux/widget1/test/widget1Selectors.spec.js"],"names":["describe","it","myField","expect","widget1","value","selectFields","purchaseType","PURCHASE_TYPE","ACQUISITION","REFINANCING","autoValues","salary","auto","fortune","property","selectAutoValues","wantedLoan","currentLoan"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  makeWidget1Selector,\n  makeSelectValue,\n  selectFields,\n  selectAutoValues,\n} from '../widget1Selectors';\nimport {\n  PURCHASE_TYPE,\n  ACQUISITION_FIELDS,\n  REFINANCING_FIELDS,\n} from '../widget1Constants';\n\ndescribe('selectors', () => {\n  describe('makeWidget1Selector', () => {\n    it('should select widget1', () => {\n      const myField = 'hello world';\n      expect(makeWidget1Selector('myField')({ widget1: { myField } })).to.equal(myField);\n    });\n  });\n\n  describe('makeSelectValue', () => {\n    it('should get the value of a field', () => {\n      const myField = { value: 200 };\n      expect(makeSelectValue('myField')({ widget1: { myField } })).to.equal(myField.value);\n    });\n  });\n\n  describe('selectFields', () => {\n    it('should select the right fields', () => {\n      expect(selectFields({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION },\n      })).to.equal(ACQUISITION_FIELDS);\n      expect(selectFields({\n        widget1: { purchaseType: PURCHASE_TYPE.REFINANCING },\n      })).to.equal(REFINANCING_FIELDS);\n    });\n  });\n\n  describe('selectAutoValues', () => {\n    it('selects all auto values based on purchase type', () => {\n      const autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n      };\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto,\n      });\n    });\n\n    it('selects all auto values based on purchase type', () => {\n      const autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n        wantedLoan: { auto: 4 },\n        currentLoan: { auto: 5 },\n      };\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.REFINANCING, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        property: autoValues.property.auto,\n        currentLoan: autoValues.currentLoan.auto,\n        wantedLoan: autoValues.wantedLoan.auto,\n      });\n    });\n\n    it.skip('memoizes properly, running the same computation only once', () => {\n      let autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n      };\n      expect(selectAutoValues.recomputations()).to.equal(0);\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto,\n      });\n      autoValues = {\n        salary: { auto: 1 },\n        fortune: { auto: 2 },\n        property: { auto: 3 },\n      };\n      expect(selectAutoValues({\n        widget1: { purchaseType: PURCHASE_TYPE.ACQUISITION, ...autoValues },\n      })).to.deep.equal({\n        salary: autoValues.salary.auto,\n        fortune: autoValues.fortune.auto,\n        property: autoValues.property.auto,\n      });\n      expect(selectAutoValues.recomputations()).to.equal(1);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"f9a3a11683a596ece3e09e052f4c8b1bb3899c88"}

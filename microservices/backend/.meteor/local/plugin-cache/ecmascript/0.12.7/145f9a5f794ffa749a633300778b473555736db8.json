{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/tasks/server/test/TaskService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/tasks/server/test/TaskService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/tasks/server/test/TaskService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/tasks/server/test/TaskService.test.js"],"names":["expect","resetDatabase","Factory","moment","TASK_STATUS","TaskService","describe","taskId","task","beforeEach","it","create","_id","get","completedAt","to","equal","undefined","update","object","status","COMPLETED","not","date","Date","getTime","ACTIVE","getDueDate","dueAt","currentHours","getHours","nextHours","setDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","newDate","dueAtTime","getMinutes","getSeconds","isValid"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport moment from 'moment';\n\nimport { TASK_STATUS } from '../../taskConstants';\nimport TaskService from '../TaskService';\n\ndescribe('TaskService', () => {\n  let taskId;\n  let task;\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('hooks', () => {\n    it('adds a completedAt date when status changes to COMPLETED', () => {\n      taskId = Factory.create('task')._id;\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.equal(undefined);\n\n      TaskService.update({ taskId, object: { status: TASK_STATUS.COMPLETED } });\n\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.not.equal(false);\n    });\n\n    it('removes the completedAt date when status changes from COMPLETED', () => {\n      const date = new Date();\n      taskId = Factory.create('task', {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: date,\n      })._id;\n      task = TaskService.get(taskId);\n      expect(task.completedAt.getTime()).to.equal(date.getTime());\n\n      TaskService.update({ taskId, object: { status: TASK_STATUS.ACTIVE } });\n\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.equal(null);\n    });\n  });\n\n  describe('getDueDate', () => {\n    it('should return dueAt if provided', () => {\n      const date = new Date();\n      expect(TaskService.getDueDate({ dueAt: date })).to.equal(date);\n    });\n\n    it('should return a date with the right time', () => {\n      const date = new Date();\n      const currentHours = date.getHours();\n      const nextHours = currentHours - 1;\n\n      date.setDate(date.getDate() + 1);\n      date.setHours(nextHours);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n\n      const newDate = TaskService.getDueDate({\n        dueAtTime: `${nextHours}:00`,\n      });\n      expect(newDate.getTime()).to.equal(date.getTime());\n    });\n\n    it('adds date and time if both are provided', () => {\n      const date = new Date();\n      date.setDate(date.getDate() + 2);\n\n      const newDate = TaskService.getDueDate({\n        dueAtTime: '5:30',\n        dueAt: date,\n      });\n\n      expect(newDate.getHours()).to.equal(5);\n      expect(newDate.getMinutes()).to.equal(30);\n      expect(newDate.getSeconds()).to.equal(0);\n      expect(newDate.getDate()).to.equal(date.getDate());\n    });\n\n    it('does not return an invalid date if dueAt is an empty string', () => {\n      const newDate = TaskService.getDueDate({\n        dueAtTime: '5:30',\n        dueAt: '',\n      });\n\n      expect(moment(newDate).isValid()).to.equal(true);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/tasks/server/test/TaskService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/tasks/server/test/TaskService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 3);\nlet TASK_STATUS;\nmodule.link(\"../../taskConstants\", {\n  TASK_STATUS(v) {\n    TASK_STATUS = v;\n  }\n\n}, 4);\nlet TaskService;\nmodule.link(\"../TaskService\", {\n  default(v) {\n    TaskService = v;\n  }\n\n}, 5);\ndescribe('TaskService', () => {\n  let taskId;\n  let task;\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('hooks', () => {\n    it('adds a completedAt date when status changes to COMPLETED', () => {\n      taskId = Factory.create('task')._id;\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.equal(undefined);\n      TaskService.update({\n        taskId,\n        object: {\n          status: TASK_STATUS.COMPLETED\n        }\n      });\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.not.equal(false);\n    });\n    it('removes the completedAt date when status changes from COMPLETED', () => {\n      const date = new Date();\n      taskId = Factory.create('task', {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: date\n      })._id;\n      task = TaskService.get(taskId);\n      expect(task.completedAt.getTime()).to.equal(date.getTime());\n      TaskService.update({\n        taskId,\n        object: {\n          status: TASK_STATUS.ACTIVE\n        }\n      });\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.equal(null);\n    });\n  });\n  describe('getDueDate', () => {\n    it('should return dueAt if provided', () => {\n      const date = new Date();\n      expect(TaskService.getDueDate({\n        dueAt: date\n      })).to.equal(date);\n    });\n    it('should return a date with the right time', () => {\n      const date = new Date();\n      const currentHours = date.getHours();\n      const nextHours = currentHours - 1;\n      date.setDate(date.getDate() + 1);\n      date.setHours(nextHours);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      const newDate = TaskService.getDueDate({\n        dueAtTime: `${nextHours}:00`\n      });\n      expect(newDate.getTime()).to.equal(date.getTime());\n    });\n    it('adds date and time if both are provided', () => {\n      const date = new Date();\n      date.setDate(date.getDate() + 2);\n      const newDate = TaskService.getDueDate({\n        dueAtTime: '5:30',\n        dueAt: date\n      });\n      expect(newDate.getHours()).to.equal(5);\n      expect(newDate.getMinutes()).to.equal(30);\n      expect(newDate.getSeconds()).to.equal(0);\n      expect(newDate.getDate()).to.equal(date.getDate());\n    });\n    it('does not return an invalid date if dueAt is an empty string', () => {\n      const newDate = TaskService.getDueDate({\n        dueAtTime: '5:30',\n        dueAt: ''\n      });\n      expect(moment(newDate).isValid()).to.equal(true);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/tasks/server/test/TaskService.test.js"],"names":["describe","beforeEach","resetDatabase","it","taskId","Factory","task","TaskService","expect","object","status","TASK_STATUS","COMPLETED","date","completedAt","ACTIVE","dueAt","currentHours","nextHours","newDate","dueAtTime","moment"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport moment from 'moment';\n\nimport { TASK_STATUS } from '../../taskConstants';\nimport TaskService from '../TaskService';\n\ndescribe('TaskService', () => {\n  let taskId;\n  let task;\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('hooks', () => {\n    it('adds a completedAt date when status changes to COMPLETED', () => {\n      taskId = Factory.create('task')._id;\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.equal(undefined);\n\n      TaskService.update({ taskId, object: { status: TASK_STATUS.COMPLETED } });\n\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.not.equal(false);\n    });\n\n    it('removes the completedAt date when status changes from COMPLETED', () => {\n      const date = new Date();\n      taskId = Factory.create('task', {\n        status: TASK_STATUS.COMPLETED,\n        completedAt: date,\n      })._id;\n      task = TaskService.get(taskId);\n      expect(task.completedAt.getTime()).to.equal(date.getTime());\n\n      TaskService.update({ taskId, object: { status: TASK_STATUS.ACTIVE } });\n\n      task = TaskService.get(taskId);\n      expect(task.completedAt).to.equal(null);\n    });\n  });\n\n  describe('getDueDate', () => {\n    it('should return dueAt if provided', () => {\n      const date = new Date();\n      expect(TaskService.getDueDate({ dueAt: date })).to.equal(date);\n    });\n\n    it('should return a date with the right time', () => {\n      const date = new Date();\n      const currentHours = date.getHours();\n      const nextHours = currentHours - 1;\n\n      date.setDate(date.getDate() + 1);\n      date.setHours(nextHours);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n\n      const newDate = TaskService.getDueDate({\n        dueAtTime: `${nextHours}:00`,\n      });\n      expect(newDate.getTime()).to.equal(date.getTime());\n    });\n\n    it('adds date and time if both are provided', () => {\n      const date = new Date();\n      date.setDate(date.getDate() + 2);\n\n      const newDate = TaskService.getDueDate({\n        dueAtTime: '5:30',\n        dueAt: date,\n      });\n\n      expect(newDate.getHours()).to.equal(5);\n      expect(newDate.getMinutes()).to.equal(30);\n      expect(newDate.getSeconds()).to.equal(0);\n      expect(newDate.getDate()).to.equal(date.getDate());\n    });\n\n    it('does not return an invalid date if dueAt is an empty string', () => {\n      const newDate = TaskService.getDueDate({\n        dueAtTime: '5:30',\n        dueAt: '',\n      });\n\n      expect(moment(newDate).isValid()).to.equal(true);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"145f9a5f794ffa749a633300778b473555736db8"}

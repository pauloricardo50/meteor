{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/test/PromotionService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/promotions/server/test/PromotionService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/test/PromotionService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/promotions/server/test/PromotionService.test.js"],"names":["expect","resetDatabase","Factory","generator","PROMOTION_LOT_STATUS","checkEmails","PROMOTION_STATUS","EMAIL_IDS","UserService","ROLES","LoanService","PromotionService","PromotionLotService","PromotionOptionService","LotService","PropertyService","describe","timeout","beforeEach","promotionId","it","create","_id","insertPromotionProperty","property","value","update","object","address1","address2","city","zipCode","find","forEach","to","deep","include","canton","promotionOptionId","loanId","promotionLotId","lotId","properties","promotions","promotionLots","propertyLinks","promotionOptions","loan","loans","lots","collection","count","equal","remove","adminId","users","_factory","firstName","lastName","status","OPEN","assignedEmployeeId","newUser","email","phoneNumber","resetToken","userId","isNewUser","proCreateUser","user","inviteUser","pro","then","getByEmail","services","password","reset","token","hasPromotion","emails","length","emailId","response","template","message","global_merge_vars","INVITE_USER_TO_PROMOTION","name","content","startsWith","endsWith","filter","CONFIRM_USER_INVITATION","adminCreateUser","options","sendEnrollmentEmail","phoneNumbers","role","USER","insertPromotionLoan","throw","Object","values","promotionLinks","priorityOrder","removeLoan","get","showAllLots","fetchOne","$filters","promotionOptionLinks","attributedTo","promotionLot","AVAILABLE","attributedToLink","findOne","userLinks","removeProUser","$metadata","invitedBy","undefined","loans1","editPromotionLoan","promotionLotIds"],"mappings":"AAAA;;AACA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,OAAOC,SAAP;AACA,SAASC,oBAAT;AACA,SAASC,WAAT;AACA,SAASC,gBAAT;AACA,SAASC,SAAT;AACA,OAAOC,WAAP;AACA,SAASC,KAAT;AACA,OAAOC,WAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,UAAP;AACA,OAAOC,eAAP;AAEAC,QAAQ,CAAC,kBAAD,EAAqB,YAAY;AACvC,OAAKC,OAAL,CAAa,KAAb;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfjB,IAAAA,aAAa;AACd,GAFS,CAAV;AAIAe,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvB,QAAIG,WAAJ;AAEAC,IAAAA,EAAE,CAAC,oCAAD,EAAuC,MAAM;AAC7CD,MAAAA,WAAW,GAAGjB,OAAO,CAACmB,MAAR,CAAe,WAAf,EAA4BC,GAA1C;AAEAX,MAAAA,gBAAgB,CAACY,uBAAjB,CAAyC;AACvCJ,QAAAA,WADuC;AAEvCK,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAF6B,OAAzC;AAIAd,MAAAA,gBAAgB,CAACY,uBAAjB,CAAyC;AACvCJ,QAAAA,WADuC;AAEvCK,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAF6B,OAAzC;AAKAd,MAAAA,gBAAgB,CAACe,MAAjB,CAAwB;AACtBP,QAAAA,WADsB;AAEtBQ,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE,UADJ;AAENC,UAAAA,QAAQ,EAAE,UAFJ;AAGNC,UAAAA,IAAI,EAAE,QAHA;AAINC,UAAAA,OAAO,EAAE;AAJH;AAFc,OAAxB;AAUAhB,MAAAA,eAAe,CAACiB,IAAhB,CAAqB,EAArB,EAAyBC,OAAzB,CAAkCT,QAAD,IAAc;AAC7CxB,QAAAA,MAAM,CAACwB,QAAD,CAAN,CAAiBU,EAAjB,CAAoBC,IAApB,CAAyBC,OAAzB,CAAiC;AAC/BR,UAAAA,QAAQ,EAAE,UADqB;AAE/BC,UAAAA,QAAQ,EAAE,UAFqB;AAG/BC,UAAAA,IAAI,EAAE,QAHyB;AAI/BC,UAAAA,OAAO,EAAE,IAJsB;AAK/BM,UAAAA,MAAM,EAAE;AALuB,SAAjC;AAOD,OARD;AASD,KA/BC,CAAF;AAgCD,GAnCO,CAAR;AAqCArB,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvB,QAAIsB,iBAAJ;AACA,QAAIC,MAAJ;AACA,QAAIpB,WAAJ;AACA,QAAIqB,cAAJ;AACA,QAAIC,KAAJ;AAEAvB,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,WAAW,GAAG,SAAd;AACAqB,MAAAA,cAAc,GAAG,QAAjB;AACAF,MAAAA,iBAAiB,GAAG,QAApB;AACAC,MAAAA,MAAM,GAAG,QAAT;AACApC,MAAAA,SAAS,CAAC;AACRuC,QAAAA,UAAU,EAAE;AAAEpB,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERqB,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAEH,WADK;AAEVyB,UAAAA,aAAa,EAAE;AACbtB,YAAAA,GAAG,EAAEkB,cADQ;AAEbK,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFF;AAGbwB,YAAAA,gBAAgB,EAAE;AAAExB,cAAAA,GAAG,EAAEgB,iBAAP;AAA0BS,cAAAA,IAAI,EAAE;AAAEzB,gBAAAA,GAAG,EAAEiB;AAAP;AAAhC;AAHL,WAFL;AAOVS,UAAAA,KAAK,EAAE;AAAE1B,YAAAA,GAAG,EAAEiB;AAAP,WAPG;AAQVU,UAAAA,IAAI,EAAE;AARI;AAFJ,OAAD,CAAT;AAaD,KAlBS,CAAV;AAoBA7B,IAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAChCpB,MAAAA,MAAM,CAACW,gBAAgB,CAACuC,UAAjB,CAA4BlB,IAA5B,CAAiC,EAAjC,EAAqCmB,KAArC,EAAD,CAAN,CAAqDjB,EAArD,CAAwDkB,KAAxD,CAA8D,CAA9D;AACAzC,MAAAA,gBAAgB,CAAC0C,MAAjB,CAAwB;AAAElC,QAAAA;AAAF,OAAxB;AACAnB,MAAAA,MAAM,CAACW,gBAAgB,CAACuC,UAAjB,CAA4BlB,IAA5B,CAAiC,EAAjC,EAAqCmB,KAArC,EAAD,CAAN,CAAqDjB,EAArD,CAAwDkB,KAAxD,CAA8D,CAA9D;AACD,KAJC,CAAF;AAMAhC,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCpB,MAAAA,MAAM,CAACY,mBAAmB,CAACsC,UAApB,CAA+BlB,IAA/B,CAAoC,EAApC,EAAwCmB,KAAxC,EAAD,CAAN,CAAwDjB,EAAxD,CAA2DkB,KAA3D,CAAiE,CAAjE;AACAzC,MAAAA,gBAAgB,CAAC0C,MAAjB,CAAwB;AAAElC,QAAAA;AAAF,OAAxB;AACAnB,MAAAA,MAAM,CAACY,mBAAmB,CAACsC,UAApB,CAA+BlB,IAA/B,CAAoC,EAApC,EAAwCmB,KAAxC,EAAD,CAAN,CAAwDjB,EAAxD,CAA2DkB,KAA3D,CAAiE,CAAjE;AACD,KAJC,CAAF;AAMAhC,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCpB,MAAAA,MAAM,CAACa,sBAAsB,CAACqC,UAAvB,CAAkClB,IAAlC,CAAuC,EAAvC,EAA2CmB,KAA3C,EAAD,CAAN,CAA2DjB,EAA3D,CAA8DkB,KAA9D,CAAoE,CAApE;AACAzC,MAAAA,gBAAgB,CAAC0C,MAAjB,CAAwB;AAAElC,QAAAA;AAAF,OAAxB;AACAnB,MAAAA,MAAM,CAACa,sBAAsB,CAACqC,UAAvB,CAAkClB,IAAlC,CAAuC,EAAvC,EAA2CmB,KAA3C,EAAD,CAAN,CAA2DjB,EAA3D,CAA8DkB,KAA9D,CAAoE,CAApE;AACD,KAJC,CAAF;AAMAhC,IAAAA,EAAE,CAAC,kBAAD,EAAqB,MAAM;AAC3BpB,MAAAA,MAAM,CAACc,UAAU,CAACoC,UAAX,CAAsBlB,IAAtB,CAA2B,EAA3B,EAA+BmB,KAA/B,EAAD,CAAN,CAA+CjB,EAA/C,CAAkDkB,KAAlD,CAAwD,CAAxD;AACAzC,MAAAA,gBAAgB,CAAC0C,MAAjB,CAAwB;AAAElC,QAAAA;AAAF,OAAxB;AACAnB,MAAAA,MAAM,CAACc,UAAU,CAACoC,UAAX,CAAsBlB,IAAtB,CAA2B,EAA3B,EAA+BmB,KAA/B,EAAD,CAAN,CAA+CjB,EAA/C,CAAkDkB,KAAlD,CAAwD,CAAxD;AACD,KAJC,CAAF;AAKD,GAlDO,CAAR;AAoDApC,EAAAA,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3B,QAAIG,WAAJ;AACA,QAAImC,OAAJ;AAEApC,IAAAA,UAAU,CAAC,MAAM;AACfoC,MAAAA,OAAO,GAAG,SAAV;AACAnC,MAAAA,WAAW,GAAG,aAAd;AACAhB,MAAAA,SAAS,CAAC;AACRoD,QAAAA,KAAK,EAAE,CACL;AACEjC,UAAAA,GAAG,EAAEgC,OADP;AAEEE,UAAAA,QAAQ,EAAE,OAFZ;AAGEC,UAAAA,SAAS,EAAE,OAHb;AAIEC,UAAAA,QAAQ,EAAE;AAJZ,SADK,EAOL;AACEpC,UAAAA,GAAG,EAAE,OADP;AAEEkC,UAAAA,QAAQ,EAAE,KAFZ;AAGEC,UAAAA,SAAS,EAAE,KAHb;AAIEC,UAAAA,QAAQ,EAAE;AAJZ,SAPK,CADC;AAeRf,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAEH,WADK;AAEVwC,UAAAA,MAAM,EAAErD,gBAAgB,CAACsD,IAFf;AAGVC,UAAAA,kBAAkB,EAAEP;AAHV;AAfJ,OAAD,CAAT;AAqBD,KAxBS,CAAV;AA0BAlC,IAAAA,EAAE,CAAC,oEAAD,EAAuE,MAAM;AAC7E,YAAM0C,OAAO,GAAG;AACdC,QAAAA,KAAK,EAAE,cADO;AAEdN,QAAAA,SAAS,EAAE,KAFG;AAGdC,QAAAA,QAAQ,EAAE,MAHI;AAIdM,QAAAA,WAAW,EAAE;AAJC,OAAhB;AAOA,UAAIC,UAAJ;AAEA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAwB3D,WAAW,CAAC4D,aAAZ,CAA0B;AACtDC,QAAAA,IAAI,EAAEP;AADgD,OAA1B,CAA9B;AAIA,aAAOnD,gBAAgB,CAAC2D,UAAjB,CAA4B;AACjCnD,QAAAA,WADiC;AAEjC+C,QAAAA,MAFiC;AAGjCC,QAAAA,SAHiC;AAIjCI,QAAAA,GAAG,EAAE;AAAEjD,UAAAA,GAAG,EAAE;AAAP;AAJ4B,OAA5B,EAMJkD,IANI,CAMEjC,MAAD,IAAY;AAChB,cAAM8B,IAAI,GAAG7D,WAAW,CAACiE,UAAZ,CAAuBX,OAAO,CAACC,KAA/B,CAAb;AACA,cAAM;AACJW,UAAAA,QAAQ,EAAE;AACRC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA;AAAF;AADC;AADF;AADN,YAMFR,IANJ;AAQAJ,QAAAA,UAAU,GAAGY,KAAb;AAEA7E,QAAAA,MAAM,CAAC,CAAC,CAACuC,MAAH,CAAN,CAAiBL,EAAjB,CAAoBkB,KAApB,CAA0B,IAA1B;AACApD,QAAAA,MAAM,CAAC,CAAC,CAACkE,MAAH,CAAN,CAAiBhC,EAAjB,CAAoBkB,KAApB,CAA0B,IAA1B;AACApD,QAAAA,MAAM,CAACQ,WAAW,CAACsE,YAAZ,CAAyB;AAAEZ,UAAAA,MAAF;AAAU/C,UAAAA;AAAV,SAAzB,CAAD,CAAN,CAA0De,EAA1D,CAA6DkB,KAA7D,CAAmE,IAAnE;AAEA,eAAO/C,WAAW,CAAC,CAAD,CAAlB;AACD,OAvBI,EAwBJmE,IAxBI,CAwBEO,MAAD,IAAY;AAChB/E,QAAAA,MAAM,CAAC+E,MAAM,CAACC,MAAR,CAAN,CAAsB9C,EAAtB,CAAyBkB,KAAzB,CAA+B,CAA/B;AACA,cAAM;AACJ6B,UAAAA,OADI;AAEJC,UAAAA,QAAQ,EAAE;AAAEvB,YAAAA;AAAF,WAFN;AAGJwB,UAAAA,QAAQ,EAAE;AACRC,YAAAA,OAAO,EAAE;AAAEC,cAAAA;AAAF;AADD;AAHN,YAMFN,MAAM,CAAC/C,IAAP,CAAY,CAAC;AAAEiD,UAAAA;AAAF,SAAD,KAAiBA,OAAO,KAAK1E,SAAS,CAAC+E,wBAAnD,CANJ;AAQAtF,QAAAA,MAAM,CAAC2D,MAAD,CAAN,CAAezB,EAAf,CAAkBkB,KAAlB,CAAwB,MAAxB;AACApD,QAAAA,MAAM,CAACiF,OAAD,CAAN,CAAgB/C,EAAhB,CAAmBkB,KAAnB,CAAyB7C,SAAS,CAAC+E,wBAAnC;AACAtF,QAAAA,MAAM,CAACqF,iBAAiB,CAACrD,IAAlB,CAAuB,CAAC;AAAEuD,UAAAA;AAAF,SAAD,KAAcA,IAAI,KAAK,SAA9C,EAAyDC,OAA1D,CAAN,CAAyEtD,EAAzE,CAA4EE,OAA5E,CAAoF6B,UAApF;AACAjE,QAAAA,MAAM,CAACqF,iBAAiB,CACrBrD,IADI,CACC,CAAC;AAAEuD,UAAAA;AAAF,SAAD,KAAcA,IAAI,KAAK,MADxB,EAEJC,OAFI,CAEIC,UAFJ,CAEe,UAFf,CAAD,CAAN,CAEmCvD,EAFnC,CAEsCkB,KAFtC,CAE4C,IAF5C;AAGApD,QAAAA,MAAM,CAACqF,iBAAiB,CACrBrD,IADI,CACC,CAAC;AAAEuD,UAAAA;AAAF,SAAD,KAAcA,IAAI,KAAK,MADxB,EAEJC,OAFI,CAEIE,QAFJ,CAEa,YAFb,CAAD,CAAN,CAEmCxD,EAFnC,CAEsCkB,KAFtC,CAE4C,IAF5C;AAIApD,QAAAA,MAAM,CAAC+E,MAAM,CAACY,MAAP,CAAc,CAAC;AAAEV,UAAAA;AAAF,SAAD,KAAiBA,OAAO,KAAK1E,SAAS,CAACqF,uBAArD,EAA8EZ,MAA/E,CAAN,CAA6F9C,EAA7F,CAAgGkB,KAAhG,CAAsG,CAAtG;AACD,OA7CI,CAAP;AA8CD,KA5DC,CAAF;AA8DAhC,IAAAA,EAAE,CAAC,2CAAD,EAA8C,MAAM;AACpD,YAAM0C,OAAO,GAAG;AACdC,QAAAA,KAAK,EAAE,cADO;AAEdN,QAAAA,SAAS,EAAE,KAFG;AAGdC,QAAAA,QAAQ,EAAE,MAHI;AAIdM,QAAAA,WAAW,EAAE;AAJC,OAAhB;AAOA,YAAME,MAAM,GAAG1D,WAAW,CAACqF,eAAZ,CAA4B;AACzCC,QAAAA,OAAO,EAAE;AACP/B,UAAAA,KAAK,EAAED,OAAO,CAACC,KADR;AAEPgC,UAAAA,mBAAmB,EAAE,KAFd;AAGPtC,UAAAA,SAAS,EAAEK,OAAO,CAACL,SAHZ;AAIPC,UAAAA,QAAQ,EAAEI,OAAO,CAACJ,QAJX;AAKPsC,UAAAA,YAAY,EAAE,CAAClC,OAAO,CAACE,WAAT;AALP,SADgC;AAQzCiC,QAAAA,IAAI,EAAExF,KAAK,CAACyF;AAR6B,OAA5B,CAAf;AAWA,aAAOvF,gBAAgB,CAAC2D,UAAjB,CAA4B;AACjCnD,QAAAA,WADiC;AAEjC+C,QAAAA;AAFiC,OAA5B,EAIJM,IAJI,CAIEjC,MAAD,IAAY;AAChBvC,QAAAA,MAAM,CAAC,CAAC,CAACuC,MAAH,CAAN,CAAiBL,EAAjB,CAAoBkB,KAApB,CAA0B,IAA1B;AACApD,QAAAA,MAAM,CAACQ,WAAW,CAACsE,YAAZ,CAAyB;AAAEZ,UAAAA,MAAF;AAAU/C,UAAAA;AAAV,SAAzB,CAAD,CAAN,CAA0De,EAA1D,CAA6DkB,KAA7D,CAAmE,IAAnE;AAEA,eAAO/C,WAAW,CAAC,CAAD,CAAlB;AACD,OATI,EAUJmE,IAVI,CAUEO,MAAD,IAAY;AAChB/E,QAAAA,MAAM,CAAC+E,MAAM,CAACC,MAAR,CAAN,CAAsB9C,EAAtB,CAAyBkB,KAAzB,CAA+B,CAA/B;AACA,cAAM;AACJ6B,UAAAA,OADI;AAEJC,UAAAA,QAAQ,EAAE;AAAEvB,YAAAA;AAAF;AAFN,YAGFoB,MAAM,CAAC,CAAD,CAHV;AAKA/E,QAAAA,MAAM,CAAC2D,MAAD,CAAN,CAAezB,EAAf,CAAkBkB,KAAlB,CAAwB,MAAxB;AACApD,QAAAA,MAAM,CAACiF,OAAD,CAAN,CAAgB/C,EAAhB,CAAmBkB,KAAnB,CAAyB7C,SAAS,CAAC+E,wBAAnC;AACD,OAnBI,CAAP;AAoBD,KAvCC,CAAF;AAyCAlE,IAAAA,EAAE,CAAC,6DAAD,EAAgE,MAAM;AACtE,YAAM0C,OAAO,GAAG;AACdC,QAAAA,KAAK,EAAE,cADO;AAEdN,QAAAA,SAAS,EAAE,KAFG;AAGdC,QAAAA,QAAQ,EAAE,MAHI;AAIdM,QAAAA,WAAW,EAAE;AAJC,OAAhB;AAOA,YAAME,MAAM,GAAG1D,WAAW,CAACqF,eAAZ,CAA4B;AACzCC,QAAAA,OAAO,EAAE;AACP/B,UAAAA,KAAK,EAAED,OAAO,CAACC,KADR;AAEPgC,UAAAA,mBAAmB,EAAE,KAFd;AAGPtC,UAAAA,SAAS,EAAEK,OAAO,CAACL,SAHZ;AAIPC,UAAAA,QAAQ,EAAEI,OAAO,CAACJ,QAJX;AAKPsC,UAAAA,YAAY,EAAE,CAAClC,OAAO,CAACE,WAAT;AALP,SADgC;AAQzCiC,QAAAA,IAAI,EAAExF,KAAK,CAACyF;AAR6B,OAA5B,CAAf;AAWAxF,MAAAA,WAAW,CAACyF,mBAAZ,CAAgC;AAAEjC,QAAAA,MAAF;AAAU/C,QAAAA;AAAV,OAAhC;AAEAnB,MAAAA,MAAM,CAAC,MACLW,gBAAgB,CAAC2D,UAAjB,CAA4B;AAC1BnD,QAAAA,WAD0B;AAE1BkD,QAAAA,IAAI,EAAEP;AAFoB,OAA5B,CADI,CAAN,CAIM5B,EAJN,CAISkE,KAJT,CAIe,aAJf;AAKD,KA1BC,CAAF;AA4BAhF,IAAAA,EAAE,CAAC,iDAAD,EAAoD,MAAM;AAC1D,YAAM0C,OAAO,GAAG;AACdC,QAAAA,KAAK,EAAE,cADO;AAEdN,QAAAA,SAAS,EAAE,KAFG;AAGdC,QAAAA,QAAQ,EAAE,MAHI;AAIdM,QAAAA,WAAW,EAAE;AAJC,OAAhB;AAOAqC,MAAAA,MAAM,CAACC,MAAP,CAAchG,gBAAd,EACGqF,MADH,CACUhC,MAAM,IAAIA,MAAM,KAAKrD,gBAAgB,CAACsD,IADhD,EAEG3B,OAFH,CAEY0B,MAAD,IAAY;AACnBhD,QAAAA,gBAAgB,CAACe,MAAjB,CAAwB;AACtBP,UAAAA,WADsB;AAEtBQ,UAAAA,MAAM,EAAE;AAAEgC,YAAAA;AAAF;AAFc,SAAxB;AAKA3D,QAAAA,MAAM,CAAC,MACLW,gBAAgB,CAAC2D,UAAjB,CAA4B;AAC1BnD,UAAAA,WAD0B;AAE1BkD,UAAAA,IAAI,EAAEP;AAFoB,SAA5B,CADI,CAAN,CAIM5B,EAJN,CAISkE,KAJT,CAIe,4BAJf;AAKD,OAbH;AAcD,KAtBC,CAAF;AAwBAhF,IAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACnD,YAAM0C,OAAO,GAAG;AACdC,QAAAA,KAAK,EAAE,cADO;AAEdN,QAAAA,SAAS,EAAE,KAFG;AAGdC,QAAAA,QAAQ,EAAE,MAHI;AAIdM,QAAAA,WAAW,EAAE;AAJC,OAAhB;AAOA,YAAM;AAAEE,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAwB3D,WAAW,CAAC4D,aAAZ,CAA0B;AACtDC,QAAAA,IAAI,EAAEP;AADgD,OAA1B,CAA9B;AAIA,aAAOnD,gBAAgB,CAAC2D,UAAjB,CAA4B;AACjCnD,QAAAA,WADiC;AAEjC+C,QAAAA,MAFiC;AAGjCC,QAAAA;AAHiC,OAA5B,EAIJK,IAJI,CAIC,MAAM;AACZ,cAAMH,IAAI,GAAG7D,WAAW,CAACiE,UAAZ,CAAuBX,OAAO,CAACC,KAA/B,CAAb;AACA,cAAM;AAAEF,UAAAA;AAAF,YAAyBQ,IAA/B;AACArE,QAAAA,MAAM,CAAC6D,kBAAD,CAAN,CAA2B3B,EAA3B,CAA8BkB,KAA9B,CAAoCE,OAApC;AAEA,eAAOjD,WAAW,CAAC,CAAD,CAAlB;AACD,OAVM,CAAP;AAWD,KAvBC,CAAF;AAwBD,GAjNO,CAAR;AAmNAW,EAAAA,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3B,QAAIG,WAAJ;AACA,QAAIoB,MAAJ;AACA,QAAIQ,IAAJ;AAEA3B,IAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC9CD,MAAAA,WAAW,GAAGjB,OAAO,CAACmB,MAAR,CAAe,WAAf,EAA4BC,GAA1C;AACAiB,MAAAA,MAAM,GAAGrC,OAAO,CAACmB,MAAR,CAAe,MAAf,EAAuB;AAC9BkF,QAAAA,cAAc,EAAE,CACd;AAAEjF,UAAAA,GAAG,EAAEH,WAAP;AAAoBqF,UAAAA,aAAa,EAAE;AAAnC,SADc,EAEd;AAAElF,UAAAA,GAAG,EAAE,oBAAP;AAA6BkF,UAAAA,aAAa,EAAE;AAA5C,SAFc;AADc,OAAvB,EAKNlF,GALH;AAOAX,MAAAA,gBAAgB,CAAC8F,UAAjB,CAA4B;AAAEtF,QAAAA,WAAF;AAAeoB,QAAAA;AAAf,OAA5B;AAEAQ,MAAAA,IAAI,GAAGrC,WAAW,CAACgG,GAAZ,CAAgBnE,MAAhB,CAAP;AACAvC,MAAAA,MAAM,CAAC+C,IAAI,CAACwD,cAAN,CAAN,CAA4BrE,EAA5B,CAA+BC,IAA/B,CAAoCiB,KAApC,CAA0C,CACxC;AAAE9B,QAAAA,GAAG,EAAE,oBAAP;AAA6BkF,QAAAA,aAAa,EAAE,EAA5C;AAAgDG,QAAAA,WAAW,EAAE;AAA7D,OADwC,CAA1C;AAGD,KAfC,CAAF;AAiBAvF,IAAAA,EAAE,CAAC,4CAAD,EAA+C,MAAM;AACrDjB,MAAAA,SAAS,CAAC;AACRuC,QAAAA,UAAU,EAAE,CAAC;AAAEpB,UAAAA,GAAG,EAAE;AAAP,SAAD,EAAmB;AAAEA,UAAAA,GAAG,EAAE;AAAP,SAAnB,CADJ;AAERqB,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,aADK;AAEVsB,UAAAA,aAAa,EAAE,CACb;AACEE,YAAAA,gBAAgB,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAEzB,gBAAAA,GAAG,EAAE;AAAP;AAAR,aADpB;AAEEuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD;AAFjB,WADa,EAKb;AACEwB,YAAAA,gBAAgB,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAEzB,gBAAAA,GAAG,EAAE;AAAP;AAAR,aADpB;AAEEuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD;AAFjB,WALa,CAFL;AAYV0B,UAAAA,KAAK,EAAE;AAAE1B,YAAAA,GAAG,EAAE;AAAP;AAZG;AAFJ,OAAD,CAAT;AAkBAX,MAAAA,gBAAgB,CAAC8F,UAAjB,CAA4B;AAC1BtF,QAAAA,WAAW,EAAE,aADa;AAE1BoB,QAAAA,MAAM,EAAE;AAFkB,OAA5B;AAIAQ,MAAAA,IAAI,GAAGrC,WAAW,CAACkG,QAAZ,CAAqB;AAC1BC,QAAAA,QAAQ,EAAE;AAAEvF,UAAAA,GAAG,EAAE;AAAP,SADgB;AAE1BwF,QAAAA,oBAAoB,EAAE;AAFI,OAArB,CAAP;AAKA9G,MAAAA,MAAM,CAAC+C,IAAI,CAAC+D,oBAAN,CAAN,CAAkC5E,EAAlC,CAAqCC,IAArC,CAA0CiB,KAA1C,CAAgD,EAAhD;AACApD,MAAAA,MAAM,CAACa,sBAAsB,CAACmB,IAAvB,CAA4B,EAA5B,EAAgCmB,KAAhC,EAAD,CAAN,CAAgDjB,EAAhD,CAAmDkB,KAAnD,CAAyD,CAAzD;AACD,KA9BC,CAAF;AAgCAhC,IAAAA,EAAE,CAAC,sEAAD,EAAyE,MAAM;AAC/EjB,MAAAA,SAAS,CAAC;AACRuC,QAAAA,UAAU,EAAE,CAAC;AAAEpB,UAAAA,GAAG,EAAE;AAAP,SAAD,EAAmB;AAAEA,UAAAA,GAAG,EAAE;AAAP,SAAnB,CADJ;AAERqB,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,aADK;AAEVsB,UAAAA,aAAa,EAAE;AACbtB,YAAAA,GAAG,EAAE,MADQ;AAEbqC,YAAAA,MAAM,EAAE,MAFK;AAGbb,YAAAA,gBAAgB,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAEzB,gBAAAA,GAAG,EAAE;AAAP;AAAR,aAHL;AAIbuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD,CAJF;AAKbyF,YAAAA,YAAY,EAAE;AAAEzF,cAAAA,GAAG,EAAE;AAAP;AALD,WAFL;AASV0B,UAAAA,KAAK,EAAE;AAAE1B,YAAAA,GAAG,EAAE;AAAP;AATG;AAFJ,OAAD,CAAT;AAeAX,MAAAA,gBAAgB,CAAC8F,UAAjB,CAA4B;AAC1BtF,QAAAA,WAAW,EAAE,aADa;AAE1BoB,QAAAA,MAAM,EAAE;AAFkB,OAA5B;AAIA,YAAMyE,YAAY,GAAGpG,mBAAmB,CAAC8F,GAApB,CAAwB,MAAxB,CAArB;AAEA1G,MAAAA,MAAM,CAACgH,YAAY,CAACrD,MAAd,CAAN,CAA4BzB,EAA5B,CAA+BkB,KAA/B,CAAqChD,oBAAoB,CAAC6G,SAA1D;AACAjH,MAAAA,MAAM,CAACgH,YAAY,CAACE,gBAAd,CAAN,CAAsChF,EAAtC,CAAyCC,IAAzC,CAA8CiB,KAA9C,CAAoD,EAApD;AACD,KAxBC,CAAF;AAyBD,GA/EO,CAAR;AAiFApC,EAAAA,QAAQ,CAAC,yBAAD,EAA4B,MAAM;AACxC,QAAIG,WAAJ;AAEAC,IAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC9CD,MAAAA,WAAW,GAAGjB,OAAO,CAACmB,MAAR,CAAe,WAAf,EAA4BC,GAA1C;AAEAX,MAAAA,gBAAgB,CAACY,uBAAjB,CAAyC;AACvCJ,QAAAA,WADuC;AAEvCK,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAF6B,OAAzC;AAKAzB,MAAAA,MAAM,CAACe,eAAe,CAACiB,IAAhB,GAAuBmB,KAAvB,EAAD,CAAN,CAAuCjB,EAAvC,CAA0CkB,KAA1C,CAAgD,CAAhD;AACApD,MAAAA,MAAM,CAACY,mBAAmB,CAACoB,IAApB,GAA2BmB,KAA3B,EAAD,CAAN,CAA2CjB,EAA3C,CAA8CkB,KAA9C,CAAoD,CAApD;AACD,KAVC,CAAF;AAYAhC,IAAAA,EAAE,CAAC,6CAAD,EAAgD,MAAM;AACtDD,MAAAA,WAAW,GAAGjB,OAAO,CAACmB,MAAR,CAAe,WAAf,EAA4B;AACxCO,QAAAA,QAAQ,EAAE,UAD8B;AAExCC,QAAAA,QAAQ,EAAE,UAF8B;AAGxCC,QAAAA,IAAI,EAAE,MAHkC;AAIxCC,QAAAA,OAAO,EAAE;AAJ+B,OAA5B,EAKXT,GALH;AAOAX,MAAAA,gBAAgB,CAACY,uBAAjB,CAAyC;AACvCJ,QAAAA,WADuC;AAEvCK,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAF6B,OAAzC;AAKAzB,MAAAA,MAAM,CAACe,eAAe,CAACoG,OAAhB,EAAD,CAAN,CAAkCjF,EAAlC,CAAqCC,IAArC,CAA0CC,OAA1C,CAAkD;AAChDR,QAAAA,QAAQ,EAAE,UADsC;AAEhDC,QAAAA,QAAQ,EAAE,UAFsC;AAGhDC,QAAAA,IAAI,EAAE,MAH0C;AAIhDC,QAAAA,OAAO,EAAE,IAJuC;AAKhDM,QAAAA,MAAM,EAAE;AALwC,OAAlD;AAOD,KApBC,CAAF;AAqBD,GApCO,CAAR;AAsCArB,EAAAA,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9BI,IAAAA,EAAE,CAAC,oCAAD,EAAuC,MAAM;AAC7CjB,MAAAA,SAAS,CAAC;AACRwC,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,aADK;AAEViC,UAAAA,KAAK,EAAE;AAAEjC,YAAAA,GAAG,EAAE,OAAP;AAAgBkC,YAAAA,QAAQ,EAAE;AAA1B;AAFG;AADJ,OAAD,CAAT;AAOAxD,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,aAArB,EAAoCU,SAApC,CAA8CpC,MAA/C,CAAN,CAA6D9C,EAA7D,CAAgEkB,KAAhE,CAAsE,CAAtE;AAEAzC,MAAAA,gBAAgB,CAAC0G,aAAjB,CAA+B;AAC7BlG,QAAAA,WAAW,EAAE,aADgB;AAE7B+C,QAAAA,MAAM,EAAE;AAFqB,OAA/B;AAKAlE,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,aAArB,EAAoCU,SAApC,CAA8CpC,MAA/C,CAAN,CAA6D9C,EAA7D,CAAgEkB,KAAhE,CAAsE,CAAtE;AACD,KAhBC,CAAF;AAkBAhC,IAAAA,EAAE,CAAC,qDAAD,EAAwD,MAAM;AAC9DjB,MAAAA,SAAS,CAAC;AACRwC,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,aADK;AAEViC,UAAAA,KAAK,EAAE;AAAEjC,YAAAA,GAAG,EAAE,OAAP;AAAgBkC,YAAAA,QAAQ,EAAE;AAA1B,WAFG;AAGVR,UAAAA,KAAK,EAAE,CAAC,EAAD,EAAK,EAAL;AAHG;AADJ,OAAD,CAAT;AAQAhD,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,aAArB,EAAoCU,SAApC,CAA8CpC,MAA/C,CAAN,CAA6D9C,EAA7D,CAAgEkB,KAAhE,CAAsE,CAAtE;AAEAzC,MAAAA,gBAAgB,CAAC0G,aAAjB,CAA+B;AAC7BlG,QAAAA,WAAW,EAAE,aADgB;AAE7B+C,QAAAA,MAAM,EAAE;AAFqB,OAA/B;AAKAlE,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,aAArB,EAAoCU,SAApC,CAA8CpC,MAA/C,CAAN,CAA6D9C,EAA7D,CAAgEkB,KAAhE,CAAsE,CAAtE;AACD,KAjBC,CAAF;AAmBAhC,IAAAA,EAAE,CAAC,6CAAD,EAAgD,MAAM;AACtDjB,MAAAA,SAAS,CAAC;AACRwC,QAAAA,UAAU,EAAE,CACV;AACErB,UAAAA,GAAG,EAAE,aADP;AAEEiC,UAAAA,KAAK,EAAE;AAAEjC,YAAAA,GAAG,EAAE,OAAP;AAAgBkC,YAAAA,QAAQ,EAAE;AAA1B,WAFT;AAGER,UAAAA,KAAK,EAAE;AAAE1B,YAAAA,GAAG,EAAE,QAAP;AAAiBgG,YAAAA,SAAS,EAAE;AAAEC,cAAAA,SAAS,EAAE;AAAb;AAA5B;AAHT,SADU,EAMV;AACEjG,UAAAA,GAAG,EAAE,cADP;AAEEiC,UAAAA,KAAK,EAAE;AAAEjC,YAAAA,GAAG,EAAE;AAAP,WAFT;AAGE0B,UAAAA,KAAK,EAAE;AAAE1B,YAAAA,GAAG,EAAE,SAAP;AAAkBgG,YAAAA,SAAS,EAAE;AAAEC,cAAAA,SAAS,EAAE;AAAb;AAA7B;AAHT,SANU;AADJ,OAAD,CAAT;AAeAvH,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,aAArB,EAAoCU,SAApC,CAA8CpC,MAA/C,CAAN,CAA6D9C,EAA7D,CAAgEkB,KAAhE,CAAsE,CAAtE;AACApD,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,cAArB,EAAqCU,SAArC,CAA+CpC,MAAhD,CAAN,CAA8D9C,EAA9D,CAAiEkB,KAAjE,CAAuE,CAAvE;AAEAzC,MAAAA,gBAAgB,CAAC0G,aAAjB,CAA+B;AAC7BlG,QAAAA,WAAW,EAAE,aADgB;AAE7B+C,QAAAA,MAAM,EAAE;AAFqB,OAA/B;AAKAlE,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,aAArB,EAAoCU,SAApC,CAA8CpC,MAA/C,CAAN,CAA6D9C,EAA7D,CAAgEkB,KAAhE,CAAsE,CAAtE;AACApD,MAAAA,MAAM,CAACW,gBAAgB,CAAC+F,GAAjB,CAAqB,cAArB,EAAqCU,SAArC,CAA+CpC,MAAhD,CAAN,CAA8D9C,EAA9D,CAAiEkB,KAAjE,CAAuE,CAAvE;AACApD,MAAAA,MAAM,CAACU,WAAW,CAACyG,OAAZ,CAAoB,QAApB,EAA8BZ,cAA9B,CAA6C,CAA7C,EAAgDgB,SAAjD,CAAN,CAAkErF,EAAlE,CAAqEkB,KAArE,CAA2EoE,SAA3E;AACAxH,MAAAA,MAAM,CAACU,WAAW,CAACyG,OAAZ,CAAoB,SAApB,EAA+BZ,cAA/B,CAA8C,CAA9C,EAAiDgB,SAAlD,CAAN,CAAmErF,EAAnE,CAAsEkB,KAAtE,CAA4E,OAA5E;AACD,KA5BC,CAAF;AA6BD,GAnEO,CAAR;AAqEApC,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCI,IAAAA,EAAE,CAAC,wDAAD,EAA2D,MAAM;AACjEjB,MAAAA,SAAS,CAAC;AACRuC,QAAAA,UAAU,EAAE;AAAEpB,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERqB,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,SADK;AAEVsB,UAAAA,aAAa,EAAE;AACbtB,YAAAA,GAAG,EAAE,OADQ;AAEbuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFF;AAGbwB,YAAAA,gBAAgB,EAAE;AAAExB,cAAAA,GAAG,EAAE;AAAP;AAHL,WAFL;AAOV0B,UAAAA,KAAK,EAAE;AACL1B,YAAAA,GAAG,EAAE,QADA;AAELgG,YAAAA,SAAS,EAAE;AAAEX,cAAAA,WAAW,EAAE,IAAf;AAAqBH,cAAAA,aAAa,EAAE,CAAC,OAAD;AAApC;AAFN;AAPG;AAFJ,OAAD,CAAT;AAgBA,YAAM;AAAExD,QAAAA,KAAK,EAAEyE;AAAT,UAAoB9G,gBAAgB,CAACiG,QAAjB,CAA0B;AAClDC,QAAAA,QAAQ,EAAE;AAAEvF,UAAAA,GAAG,EAAE;AAAP,SADwC;AAElD0B,QAAAA,KAAK,EAAE;AAAE1B,UAAAA,GAAG,EAAE;AAAP;AAF2C,OAA1B,CAA1B;AAKAtB,MAAAA,MAAM,CAACyH,MAAM,CAAC,CAAD,CAAN,CAAUH,SAAV,CAAoBX,WAArB,CAAN,CAAwCzE,EAAxC,CAA2CkB,KAA3C,CAAiD,IAAjD;AAEApD,MAAAA,MAAM,CAACyH,MAAM,CAAC,CAAD,CAAN,CAAUH,SAAV,CAAoBd,aAArB,CAAN,CAA0CtE,EAA1C,CAA6CC,IAA7C,CAAkDiB,KAAlD,CAAwD,CAAC,OAAD,CAAxD;AAEAzC,MAAAA,gBAAgB,CAAC+G,iBAAjB,CAAmC;AACjCnF,QAAAA,MAAM,EAAE,QADyB;AAEjCpB,QAAAA,WAAW,EAAE,SAFoB;AAGjCwG,QAAAA,eAAe,EAAE,EAHgB;AAIjChB,QAAAA,WAAW,EAAE;AAJoB,OAAnC;AAOA,YAAM;AAAE3D,QAAAA;AAAF,UAAYrC,gBAAgB,CAACiG,QAAjB,CAA0B;AAC1CC,QAAAA,QAAQ,EAAE;AAAEvF,UAAAA,GAAG,EAAE;AAAP,SADgC;AAE1C0B,QAAAA,KAAK,EAAE;AAAE1B,UAAAA,GAAG,EAAE;AAAP;AAFmC,OAA1B,CAAlB;AAKAtB,MAAAA,MAAM,CAACgD,KAAK,CAAC,CAAD,CAAL,CAASsE,SAAT,CAAmBX,WAApB,CAAN,CAAuCzE,EAAvC,CAA0CkB,KAA1C,CAAgD,KAAhD;AACApD,MAAAA,MAAM,CAACgD,KAAK,CAAC,CAAD,CAAL,CAASsE,SAAT,CAAmBd,aAApB,CAAN,CAAyCtE,EAAzC,CAA4CC,IAA5C,CAAiDiB,KAAjD,CAAuD,CAAC,OAAD,CAAvD;AACD,KAxCC,CAAF;AA0CAhC,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCjB,MAAAA,SAAS,CAAC;AACRuC,QAAAA,UAAU,EAAE;AAAEpB,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERqB,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,SADK;AAEVsB,UAAAA,aAAa,EAAE,CACb;AACEtB,YAAAA,GAAG,EAAE,OADP;AAEEuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD;AAFjB,WADa,EAKb;AACEA,YAAAA,GAAG,EAAE,OADP;AAEEuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD;AAFjB,WALa,CAFL;AAYV0B,UAAAA,KAAK,EAAE;AAAE1B,YAAAA,GAAG,EAAE;AAAP;AAZG;AAFJ,OAAD,CAAT;AAkBA,YAAM;AAAE0B,QAAAA,KAAK,EAAEyE;AAAT,UAAoB9G,gBAAgB,CAACiG,QAAjB,CAA0B;AAClDC,QAAAA,QAAQ,EAAE;AAAEvF,UAAAA,GAAG,EAAE;AAAP,SADwC;AAElD0B,QAAAA,KAAK,EAAE;AAAE8D,UAAAA,oBAAoB,EAAE;AAAxB;AAF2C,OAA1B,CAA1B;AAKA9G,MAAAA,MAAM,CAACyH,MAAM,CAAC,CAAD,CAAN,CAAUX,oBAAV,CAA+B9B,MAAhC,CAAN,CAA8C9C,EAA9C,CAAiDkB,KAAjD,CAAuD,CAAvD;AAEAzC,MAAAA,gBAAgB,CAAC+G,iBAAjB,CAAmC;AACjCnF,QAAAA,MAAM,EAAE,QADyB;AAEjCpB,QAAAA,WAAW,EAAE,SAFoB;AAGjCwG,QAAAA,eAAe,EAAE,CAAC,OAAD;AAHgB,OAAnC;AAMA,YAAM;AAAE3E,QAAAA;AAAF,UAAYrC,gBAAgB,CAACiG,QAAjB,CAA0B;AAC1CC,QAAAA,QAAQ,EAAE;AAAEvF,UAAAA,GAAG,EAAE;AAAP,SADgC;AAE1C0B,QAAAA,KAAK,EAAE;AAAEF,UAAAA,gBAAgB,EAAE;AAAEF,YAAAA,aAAa,EAAE;AAAEtB,cAAAA,GAAG,EAAE;AAAP;AAAjB;AAApB;AAFmC,OAA1B,CAAlB;AAKAtB,MAAAA,MAAM,CAACgD,KAAK,CAAC,CAAD,CAAL,CAASF,gBAAT,CAA0BkC,MAA3B,CAAN,CAAyC9C,EAAzC,CAA4CkB,KAA5C,CAAkD,CAAlD;AACApD,MAAAA,MAAM,CAACgD,KAAK,CAAC,CAAD,CAAL,CAASF,gBAAT,CAA0B,CAA1B,EAA6BF,aAA7B,CAA2C,CAA3C,EAA8CtB,GAA/C,CAAN,CAA0DY,EAA1D,CAA6DkB,KAA7D,CAAmE,OAAnE;AACD,KAvCC,CAAF;AAyCAhC,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CjB,MAAAA,SAAS,CAAC;AACRuC,QAAAA,UAAU,EAAE;AAAEpB,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERqB,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,SADK;AAEVsB,UAAAA,aAAa,EAAE,CACb;AACEtB,YAAAA,GAAG,EAAE,OADP;AAEEuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFjB;AAGEwB,YAAAA,gBAAgB,EAAE;AAAExB,cAAAA,GAAG,EAAE;AAAP;AAHpB,WADa,EAMb;AACEA,YAAAA,GAAG,EAAE,OADP;AAEEuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFjB;AAGEwB,YAAAA,gBAAgB,EAAE;AAAExB,cAAAA,GAAG,EAAE;AAAP;AAHpB,WANa,CAFL;AAcV0B,UAAAA,KAAK,EAAE;AACL1B,YAAAA,GAAG,EAAE,QADA;AAELwB,YAAAA,gBAAgB,EAAE,CAAC;AAAExB,cAAAA,GAAG,EAAE;AAAP,aAAD,EAAmB;AAAEA,cAAAA,GAAG,EAAE;AAAP,aAAnB;AAFb;AAdG;AAFJ,OAAD,CAAT;AAuBA,YAAM;AAAE0B,QAAAA,KAAK,EAAEyE;AAAT,UAAoB9G,gBAAgB,CAACiG,QAAjB,CAA0B;AAClDC,QAAAA,QAAQ,EAAE;AAAEvF,UAAAA,GAAG,EAAE;AAAP,SADwC;AAElD0B,QAAAA,KAAK,EAAE;AAAE8D,UAAAA,oBAAoB,EAAE;AAAxB;AAF2C,OAA1B,CAA1B;AAKA9G,MAAAA,MAAM,CAACyH,MAAM,CAAC,CAAD,CAAN,CAAUX,oBAAV,CAA+B9B,MAAhC,CAAN,CAA8C9C,EAA9C,CAAiDkB,KAAjD,CAAuD,CAAvD;AAEAzC,MAAAA,gBAAgB,CAAC+G,iBAAjB,CAAmC;AACjCnF,QAAAA,MAAM,EAAE,QADyB;AAEjCpB,QAAAA,WAAW,EAAE,SAFoB;AAGjCwG,QAAAA,eAAe,EAAE,CAAC,OAAD;AAHgB,OAAnC;AAMA,YAAM;AAAE3E,QAAAA;AAAF,UAAYrC,gBAAgB,CAACiG,QAAjB,CAA0B;AAC1CC,QAAAA,QAAQ,EAAE;AAAEvF,UAAAA,GAAG,EAAE;AAAP,SADgC;AAE1C0B,QAAAA,KAAK,EAAE;AAAEF,UAAAA,gBAAgB,EAAE;AAAEF,YAAAA,aAAa,EAAE;AAAEtB,cAAAA,GAAG,EAAE;AAAP;AAAjB;AAApB;AAFmC,OAA1B,CAAlB;AAKAtB,MAAAA,MAAM,CAACgD,KAAK,CAAC,CAAD,CAAL,CAASF,gBAAT,CAA0BkC,MAA3B,CAAN,CAAyC9C,EAAzC,CAA4CkB,KAA5C,CAAkD,CAAlD;AACApD,MAAAA,MAAM,CAACgD,KAAK,CAAC,CAAD,CAAL,CAASF,gBAAT,CAA0B,CAA1B,EAA6BF,aAA7B,CAA2C,CAA3C,EAA8CtB,GAA/C,CAAN,CAA0DY,EAA1D,CAA6DkB,KAA7D,CAAmE,OAAnE;AACD,KA5CC,CAAF;AA8CAhC,IAAAA,EAAE,CAAC,kEAAD,EAAqE,MAAM;AAC3EjB,MAAAA,SAAS,CAAC;AACRuC,QAAAA,UAAU,EAAE;AAAEpB,UAAAA,GAAG,EAAE,MAAP;AAAeiE,UAAAA,IAAI,EAAE;AAArB,SADJ;AAER5C,QAAAA,UAAU,EAAE;AACVrB,UAAAA,GAAG,EAAE,SADK;AAEVsB,UAAAA,aAAa,EAAE,CACb;AACEtB,YAAAA,GAAG,EAAE,OADP;AAEEuB,YAAAA,aAAa,EAAE,CAAC;AAAEvB,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFjB;AAGEwB,YAAAA,gBAAgB,EAAE;AAAExB,cAAAA,GAAG,EAAE;AAAP,aAHpB;AAIEyF,YAAAA,YAAY,EAAE;AACZzF,cAAAA,GAAG,EAAE,QADO;AAEZwB,cAAAA,gBAAgB,EAAE,CAAC;AAAExB,gBAAAA,GAAG,EAAE;AAAP,eAAD;AAFN;AAJhB,WADa,CAFL;AAaV0B,UAAAA,KAAK,EAAE;AAAE1B,YAAAA,GAAG,EAAE;AAAP;AAbG;AAFJ,OAAD,CAAT;AAmBAtB,MAAAA,MAAM,CAAC,MACLW,gBAAgB,CAAC+G,iBAAjB,CAAmC;AACjCnF,QAAAA,MAAM,EAAE,QADyB;AAEjCpB,QAAAA,WAAW,EAAE,SAFoB;AAGjCwG,QAAAA,eAAe,EAAE;AAHgB,OAAnC,CADI,CAAN,CAKMzF,EALN,CAKSkE,KALT,CAKe,SALf;AAMD,KA1BC,CAAF;AA2BD,GA7JO,CAAR;AA8JD,CA7oBO,CAAR","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from 'core/api/factories';\nimport { PROMOTION_LOT_STATUS } from 'core/api/promotionLots/promotionLotConstants';\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport { PROMOTION_STATUS } from '../../../constants';\nimport { EMAIL_IDS } from '../../../email/emailConstants';\nimport UserService from '../../../users/server/UserService';\nimport { ROLES } from '../../../users/userConstants';\nimport LoanService from '../../../loans/server/LoanService';\nimport PromotionService from '../PromotionService';\nimport PromotionLotService from '../../../promotionLots/server/PromotionLotService';\nimport PromotionOptionService from '../../../promotionOptions/server/PromotionOptionService';\nimport LotService from '../../../lots/server/LotService';\nimport PropertyService from '../../../properties/server/PropertyService';\n\ndescribe('PromotionService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('update', () => {\n    let promotionId;\n\n    it('sets the address on all properties', () => {\n      promotionId = Factory.create('promotion')._id;\n\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 500000 },\n      });\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 1000000 },\n      });\n\n      PromotionService.update({\n        promotionId,\n        object: {\n          address1: 'address1',\n          address2: 'address2',\n          city: 'Geneva',\n          zipCode: 1200,\n        },\n      });\n\n      PropertyService.find({}).forEach((property) => {\n        expect(property).to.deep.include({\n          address1: 'address1',\n          address2: 'address2',\n          city: 'Geneva',\n          zipCode: 1200,\n          canton: 'GE',\n        });\n      });\n    });\n  });\n\n  describe('remove', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n    let lotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n          loans: { _id: loanId },\n          lots: {},\n        },\n      });\n    });\n\n    it('deletes the promotion', () => {\n      expect(PromotionService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(PromotionService.collection.find({}).count()).to.equal(0);\n    });\n\n    it('deletes all promotionLots', () => {\n      expect(PromotionLotService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(PromotionLotService.collection.find({}).count()).to.equal(0);\n    });\n\n    it('deletes all promotionOptions', () => {\n      expect(PromotionOptionService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(PromotionOptionService.collection.find({}).count()).to.equal(0);\n    });\n\n    it('deletes all lots', () => {\n      expect(LotService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(LotService.collection.find({}).count()).to.equal(0);\n    });\n  });\n\n  describe('inviteUser', () => {\n    let promotionId;\n    let adminId;\n\n    beforeEach(() => {\n      adminId = 'adminId';\n      promotionId = 'promotionId';\n      generator({\n        users: [\n          {\n            _id: adminId,\n            _factory: 'admin',\n            firstName: 'Admin',\n            lastName: 'User',\n          },\n          {\n            _id: 'proId',\n            _factory: 'pro',\n            firstName: 'Pro',\n            lastName: 'User',\n          },\n        ],\n        promotions: {\n          _id: promotionId,\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: adminId,\n        },\n      });\n    });\n\n    it('creates user and sends the invitation email if user does not exist', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      let resetToken;\n\n      const { userId, isNewUser } = UserService.proCreateUser({\n        user: newUser,\n      });\n\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n        isNewUser,\n        pro: { _id: 'proId' },\n      })\n        .then((loanId) => {\n          const user = UserService.getByEmail(newUser.email);\n          const {\n            services: {\n              password: {\n                reset: { token },\n              },\n            },\n          } = user;\n\n          resetToken = token;\n\n          expect(!!loanId).to.equal(true);\n          expect(!!userId).to.equal(true);\n          expect(UserService.hasPromotion({ userId, promotionId })).to.equal(true);\n\n          return checkEmails(2);\n        })\n        .then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            response: { status },\n            template: {\n              message: { global_merge_vars },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n          expect(global_merge_vars.find(({ name }) => name === 'CTA_URL').content).to.include(resetToken);\n          expect(global_merge_vars\n            .find(({ name }) => name === 'BODY')\n            .content.startsWith('Pro User')).to.equal(true);\n          expect(global_merge_vars\n            .find(({ name }) => name === 'BODY')\n            .content.endsWith('Admin User')).to.equal(true);\n\n          expect(emails.filter(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION).length).to.equal(1);\n        });\n    });\n\n    it('sends the invitation email if user exists', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      const userId = UserService.adminCreateUser({\n        options: {\n          email: newUser.email,\n          sendEnrollmentEmail: false,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          phoneNumbers: [newUser.phoneNumber],\n        },\n        role: ROLES.USER,\n      });\n\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n      })\n        .then((loanId) => {\n          expect(!!loanId).to.equal(true);\n          expect(UserService.hasPromotion({ userId, promotionId })).to.equal(true);\n\n          return checkEmails(1);\n        })\n        .then((emails) => {\n          expect(emails.length).to.equal(1);\n          const {\n            emailId,\n            response: { status },\n          } = emails[0];\n\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n        });\n    });\n\n    it('throws an error if user is already invited to the promotion', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      const userId = UserService.adminCreateUser({\n        options: {\n          email: newUser.email,\n          sendEnrollmentEmail: false,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          phoneNumbers: [newUser.phoneNumber],\n        },\n        role: ROLES.USER,\n      });\n\n      LoanService.insertPromotionLoan({ userId, promotionId });\n\n      expect(() =>\n        PromotionService.inviteUser({\n          promotionId,\n          user: newUser,\n        })).to.throw('déjà invité');\n    });\n\n    it('throws an error if promotion status is not OPEN', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      Object.values(PROMOTION_STATUS)\n        .filter(status => status !== PROMOTION_STATUS.OPEN)\n        .forEach((status) => {\n          PromotionService.update({\n            promotionId,\n            object: { status },\n          });\n\n          expect(() =>\n            PromotionService.inviteUser({\n              promotionId,\n              user: newUser,\n            })).to.throw('Vous ne pouvez pas inviter');\n        });\n    });\n\n    it('assigns the assignedEmployee to the user', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      const { userId, isNewUser } = UserService.proCreateUser({\n        user: newUser,\n      });\n\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n        isNewUser,\n      }).then(() => {\n        const user = UserService.getByEmail(newUser.email);\n        const { assignedEmployeeId } = user;\n        expect(assignedEmployeeId).to.equal(adminId);\n\n        return checkEmails(1);\n      });\n    });\n  });\n\n  describe('removeLoan', () => {\n    let promotionId;\n    let loanId;\n    let loan;\n\n    it('removes the promotion from the loan', () => {\n      promotionId = Factory.create('promotion')._id;\n      loanId = Factory.create('loan', {\n        promotionLinks: [\n          { _id: promotionId, priorityOrder: [] },\n          { _id: 'someOtherPromotion', priorityOrder: [] },\n        ],\n      })._id;\n\n      PromotionService.removeLoan({ promotionId, loanId });\n\n      loan = LoanService.get(loanId);\n      expect(loan.promotionLinks).to.deep.equal([\n        { _id: 'someOtherPromotion', priorityOrder: [], showAllLots: true },\n      ]);\n    });\n\n    it('removes all promotionOptions from the loan', () => {\n      generator({\n        properties: [{ _id: 'prop1' }, { _id: 'prop2' }],\n        promotions: {\n          _id: 'promotionId',\n          promotionLots: [\n            {\n              promotionOptions: { loan: { _id: 'loanId' } },\n              propertyLinks: [{ _id: 'prop1' }],\n            },\n            {\n              promotionOptions: { loan: { _id: 'loanId' } },\n              propertyLinks: [{ _id: 'prop2' }],\n            },\n          ],\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      PromotionService.removeLoan({\n        promotionId: 'promotionId',\n        loanId: 'loanId',\n      });\n      loan = LoanService.fetchOne({\n        $filters: { _id: 'loanId' },\n        promotionOptionLinks: 1,\n      });\n\n      expect(loan.promotionOptionLinks).to.deep.equal([]);\n      expect(PromotionOptionService.find({}).count()).to.equal(0);\n    });\n\n    it('removes any status from the promotionLot as well as the attributedTo', () => {\n      generator({\n        properties: [{ _id: 'prop1' }, { _id: 'prop2' }],\n        promotions: {\n          _id: 'promotionId',\n          promotionLots: {\n            _id: 'lot1',\n            status: 'SOLD',\n            promotionOptions: { loan: { _id: 'loanId' } },\n            propertyLinks: [{ _id: 'prop1' }],\n            attributedTo: { _id: 'loanId' },\n          },\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      PromotionService.removeLoan({\n        promotionId: 'promotionId',\n        loanId: 'loanId',\n      });\n      const promotionLot = PromotionLotService.get('lot1');\n\n      expect(promotionLot.status).to.equal(PROMOTION_LOT_STATUS.AVAILABLE);\n      expect(promotionLot.attributedToLink).to.deep.equal({});\n    });\n  });\n\n  describe('insertPromotionProperty', () => {\n    let promotionId;\n\n    it('inserts a property and promotionLot', () => {\n      promotionId = Factory.create('promotion')._id;\n\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 1000000 },\n      });\n\n      expect(PropertyService.find().count()).to.equal(1);\n      expect(PromotionLotService.find().count()).to.equal(1);\n    });\n\n    it('adds the promotions address on the property', () => {\n      promotionId = Factory.create('promotion', {\n        address1: 'address1',\n        address2: 'address2',\n        city: 'city',\n        zipCode: 1400,\n      })._id;\n\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 1000000 },\n      });\n\n      expect(PropertyService.findOne()).to.deep.include({\n        address1: 'address1',\n        address2: 'address2',\n        city: 'city',\n        zipCode: 1400,\n        canton: 'VD',\n      });\n    });\n  });\n\n  describe('removeProUser', () => {\n    it('removes the pro from the promotion', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          users: { _id: 'proId', _factory: 'pro' },\n        },\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId',\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n    });\n\n    it('does not fail if no loans are attributed to the pro', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          users: { _id: 'proId', _factory: 'pro' },\n          loans: [{}, {}],\n        },\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId',\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n    });\n\n    it('only removes him from the current promotion', () => {\n      generator({\n        promotions: [\n          {\n            _id: 'promotionId',\n            users: { _id: 'proId', _factory: 'pro' },\n            loans: { _id: 'loanId', $metadata: { invitedBy: 'proId' } },\n          },\n          {\n            _id: 'promotionId2',\n            users: { _id: 'proId' },\n            loans: { _id: 'loanId2', $metadata: { invitedBy: 'proId' } },\n          },\n        ],\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n      expect(PromotionService.get('promotionId2').userLinks.length).to.equal(1);\n\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId',\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n      expect(PromotionService.get('promotionId2').userLinks.length).to.equal(1);\n      expect(LoanService.findOne('loanId').promotionLinks[0].invitedBy).to.equal(undefined);\n      expect(LoanService.findOne('loanId2').promotionLinks[0].invitedBy).to.equal('proId');\n    });\n  });\n\n  describe('editPromotionLoan', () => {\n    it('updates showAllLots without overwriting other metadata', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: {\n            _id: 'pLot1',\n            propertyLinks: [{ _id: 'prop' }],\n            promotionOptions: { _id: 'pOpt1' },\n          },\n          loans: {\n            _id: 'loanId',\n            $metadata: { showAllLots: true, priorityOrder: ['pOpt1'] },\n          },\n        },\n      });\n\n      const { loans: loans1 } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { _id: 1 },\n      });\n\n      expect(loans1[0].$metadata.showAllLots).to.equal(true);\n\n      expect(loans1[0].$metadata.priorityOrder).to.deep.equal(['pOpt1']);\n\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: [],\n        showAllLots: false,\n      });\n\n      const { loans } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { _id: 1 },\n      });\n\n      expect(loans[0].$metadata.showAllLots).to.equal(false);\n      expect(loans[0].$metadata.priorityOrder).to.deep.equal(['pOpt1']);\n    });\n\n    it('adds new promotionOptions', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [\n            {\n              _id: 'pLot1',\n              propertyLinks: [{ _id: 'prop' }],\n            },\n            {\n              _id: 'pLot2',\n              propertyLinks: [{ _id: 'prop' }],\n            },\n          ],\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      const { loans: loans1 } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptionLinks: 1 },\n      });\n\n      expect(loans1[0].promotionOptionLinks.length).to.equal(0);\n\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: ['pLot2'],\n      });\n\n      const { loans } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptions: { promotionLots: { _id: 1 } } },\n      });\n\n      expect(loans[0].promotionOptions.length).to.equal(1);\n      expect(loans[0].promotionOptions[0].promotionLots[0]._id).to.equal('pLot2');\n    });\n\n    it('removes any old promotionOptions', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [\n            {\n              _id: 'pLot1',\n              propertyLinks: [{ _id: 'prop' }],\n              promotionOptions: { _id: 'pOpt1' },\n            },\n            {\n              _id: 'pLot2',\n              propertyLinks: [{ _id: 'prop' }],\n              promotionOptions: { _id: 'pOpt2' },\n            },\n          ],\n          loans: {\n            _id: 'loanId',\n            promotionOptions: [{ _id: 'pOpt1' }, { _id: 'pOpt2' }],\n          },\n        },\n      });\n\n      const { loans: loans1 } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptionLinks: 1 },\n      });\n\n      expect(loans1[0].promotionOptionLinks.length).to.equal(2);\n\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: ['pLot2'],\n      });\n\n      const { loans } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptions: { promotionLots: { _id: 1 } } },\n      });\n\n      expect(loans[0].promotionOptions.length).to.equal(1);\n      expect(loans[0].promotionOptions[0].promotionLots[0]._id).to.equal('pLot2');\n    });\n\n    it('throws if one of the promotionOptions is attributed to this loan', () => {\n      generator({\n        properties: { _id: 'prop', name: 'lot 1' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [\n            {\n              _id: 'pLot1',\n              propertyLinks: [{ _id: 'prop' }],\n              promotionOptions: { _id: 'pOpt1' },\n              attributedTo: {\n                _id: 'loanId',\n                promotionOptions: [{ _id: 'pOpt1' }],\n              },\n            },\n          ],\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      expect(() =>\n        PromotionService.editPromotionLoan({\n          loanId: 'loanId',\n          promotionId: 'promoId',\n          promotionLotIds: [],\n        })).to.throw('\"lot 1\"');\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotions/server/test/PromotionService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/promotions/server/test/PromotionService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 3);\nlet PROMOTION_LOT_STATUS;\nmodule.link(\"../../../promotionLots/promotionLotConstants\", {\n  PROMOTION_LOT_STATUS(v) {\n    PROMOTION_LOT_STATUS = v;\n  }\n\n}, 4);\nlet checkEmails;\nmodule.link(\"../../../../utils/testHelpers\", {\n  checkEmails(v) {\n    checkEmails = v;\n  }\n\n}, 5);\nlet PROMOTION_STATUS;\nmodule.link(\"../../../constants\", {\n  PROMOTION_STATUS(v) {\n    PROMOTION_STATUS = v;\n  }\n\n}, 6);\nlet EMAIL_IDS;\nmodule.link(\"../../../email/emailConstants\", {\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  }\n\n}, 7);\nlet UserService;\nmodule.link(\"../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 8);\nlet ROLES;\nmodule.link(\"../../../users/userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 9);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 10);\nlet PromotionService;\nmodule.link(\"../PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 11);\nlet PromotionLotService;\nmodule.link(\"../../../promotionLots/server/PromotionLotService\", {\n  default(v) {\n    PromotionLotService = v;\n  }\n\n}, 12);\nlet PromotionOptionService;\nmodule.link(\"../../../promotionOptions/server/PromotionOptionService\", {\n  default(v) {\n    PromotionOptionService = v;\n  }\n\n}, 13);\nlet LotService;\nmodule.link(\"../../../lots/server/LotService\", {\n  default(v) {\n    LotService = v;\n  }\n\n}, 14);\nlet PropertyService;\nmodule.link(\"../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 15);\ndescribe('PromotionService', function () {\n  this.timeout(10000);\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('update', () => {\n    let promotionId;\n    it('sets the address on all properties', () => {\n      promotionId = Factory.create('promotion')._id;\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: {\n          value: 500000\n        }\n      });\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: {\n          value: 1000000\n        }\n      });\n      PromotionService.update({\n        promotionId,\n        object: {\n          address1: 'address1',\n          address2: 'address2',\n          city: 'Geneva',\n          zipCode: 1200\n        }\n      });\n      PropertyService.find({}).forEach(property => {\n        expect(property).to.deep.include({\n          address1: 'address1',\n          address2: 'address2',\n          city: 'Geneva',\n          zipCode: 1200,\n          canton: 'GE'\n        });\n      });\n    });\n  });\n  describe('remove', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n    let lotId;\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: {\n          _id: 'propId'\n        },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{\n              _id: 'propId'\n            }],\n            promotionOptions: {\n              _id: promotionOptionId,\n              loan: {\n                _id: loanId\n              }\n            }\n          },\n          loans: {\n            _id: loanId\n          },\n          lots: {}\n        }\n      });\n    });\n    it('deletes the promotion', () => {\n      expect(PromotionService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({\n        promotionId\n      });\n      expect(PromotionService.collection.find({}).count()).to.equal(0);\n    });\n    it('deletes all promotionLots', () => {\n      expect(PromotionLotService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({\n        promotionId\n      });\n      expect(PromotionLotService.collection.find({}).count()).to.equal(0);\n    });\n    it('deletes all promotionOptions', () => {\n      expect(PromotionOptionService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({\n        promotionId\n      });\n      expect(PromotionOptionService.collection.find({}).count()).to.equal(0);\n    });\n    it('deletes all lots', () => {\n      expect(LotService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({\n        promotionId\n      });\n      expect(LotService.collection.find({}).count()).to.equal(0);\n    });\n  });\n  describe('inviteUser', () => {\n    let promotionId;\n    let adminId;\n    beforeEach(() => {\n      adminId = 'adminId';\n      promotionId = 'promotionId';\n      generator({\n        users: [{\n          _id: adminId,\n          _factory: 'admin',\n          firstName: 'Admin',\n          lastName: 'User'\n        }, {\n          _id: 'proId',\n          _factory: 'pro',\n          firstName: 'Pro',\n          lastName: 'User'\n        }],\n        promotions: {\n          _id: promotionId,\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: adminId\n        }\n      });\n    });\n    it('creates user and sends the invitation email if user does not exist', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234'\n      };\n      let resetToken;\n      const {\n        userId,\n        isNewUser\n      } = UserService.proCreateUser({\n        user: newUser\n      });\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n        isNewUser,\n        pro: {\n          _id: 'proId'\n        }\n      }).then(loanId => {\n        const user = UserService.getByEmail(newUser.email);\n        const {\n          services: {\n            password: {\n              reset: {\n                token\n              }\n            }\n          }\n        } = user;\n        resetToken = token;\n        expect(!!loanId).to.equal(true);\n        expect(!!userId).to.equal(true);\n        expect(UserService.hasPromotion({\n          userId,\n          promotionId\n        })).to.equal(true);\n        return checkEmails(2);\n      }).then(emails => {\n        expect(emails.length).to.equal(2);\n        const {\n          emailId,\n          response: {\n            status\n          },\n          template: {\n            message: {\n              global_merge_vars\n            }\n          }\n        } = emails.find(({\n          emailId\n        }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n        expect(global_merge_vars.find(({\n          name\n        }) => name === 'CTA_URL').content).to.include(resetToken);\n        expect(global_merge_vars.find(({\n          name\n        }) => name === 'BODY').content.startsWith('Pro User')).to.equal(true);\n        expect(global_merge_vars.find(({\n          name\n        }) => name === 'BODY').content.endsWith('Admin User')).to.equal(true);\n        expect(emails.filter(({\n          emailId\n        }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION).length).to.equal(1);\n      });\n    });\n    it('sends the invitation email if user exists', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234'\n      };\n      const userId = UserService.adminCreateUser({\n        options: {\n          email: newUser.email,\n          sendEnrollmentEmail: false,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          phoneNumbers: [newUser.phoneNumber]\n        },\n        role: ROLES.USER\n      });\n      return PromotionService.inviteUser({\n        promotionId,\n        userId\n      }).then(loanId => {\n        expect(!!loanId).to.equal(true);\n        expect(UserService.hasPromotion({\n          userId,\n          promotionId\n        })).to.equal(true);\n        return checkEmails(1);\n      }).then(emails => {\n        expect(emails.length).to.equal(1);\n        const {\n          emailId,\n          response: {\n            status\n          }\n        } = emails[0];\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n      });\n    });\n    it('throws an error if user is already invited to the promotion', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234'\n      };\n      const userId = UserService.adminCreateUser({\n        options: {\n          email: newUser.email,\n          sendEnrollmentEmail: false,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          phoneNumbers: [newUser.phoneNumber]\n        },\n        role: ROLES.USER\n      });\n      LoanService.insertPromotionLoan({\n        userId,\n        promotionId\n      });\n      expect(() => PromotionService.inviteUser({\n        promotionId,\n        user: newUser\n      })).to.throw('déjà invité');\n    });\n    it('throws an error if promotion status is not OPEN', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234'\n      };\n      Object.values(PROMOTION_STATUS).filter(status => status !== PROMOTION_STATUS.OPEN).forEach(status => {\n        PromotionService.update({\n          promotionId,\n          object: {\n            status\n          }\n        });\n        expect(() => PromotionService.inviteUser({\n          promotionId,\n          user: newUser\n        })).to.throw('Vous ne pouvez pas inviter');\n      });\n    });\n    it('assigns the assignedEmployee to the user', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234'\n      };\n      const {\n        userId,\n        isNewUser\n      } = UserService.proCreateUser({\n        user: newUser\n      });\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n        isNewUser\n      }).then(() => {\n        const user = UserService.getByEmail(newUser.email);\n        const {\n          assignedEmployeeId\n        } = user;\n        expect(assignedEmployeeId).to.equal(adminId);\n        return checkEmails(1);\n      });\n    });\n  });\n  describe('removeLoan', () => {\n    let promotionId;\n    let loanId;\n    let loan;\n    it('removes the promotion from the loan', () => {\n      promotionId = Factory.create('promotion')._id;\n      loanId = Factory.create('loan', {\n        promotionLinks: [{\n          _id: promotionId,\n          priorityOrder: []\n        }, {\n          _id: 'someOtherPromotion',\n          priorityOrder: []\n        }]\n      })._id;\n      PromotionService.removeLoan({\n        promotionId,\n        loanId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.promotionLinks).to.deep.equal([{\n        _id: 'someOtherPromotion',\n        priorityOrder: [],\n        showAllLots: true\n      }]);\n    });\n    it('removes all promotionOptions from the loan', () => {\n      generator({\n        properties: [{\n          _id: 'prop1'\n        }, {\n          _id: 'prop2'\n        }],\n        promotions: {\n          _id: 'promotionId',\n          promotionLots: [{\n            promotionOptions: {\n              loan: {\n                _id: 'loanId'\n              }\n            },\n            propertyLinks: [{\n              _id: 'prop1'\n            }]\n          }, {\n            promotionOptions: {\n              loan: {\n                _id: 'loanId'\n              }\n            },\n            propertyLinks: [{\n              _id: 'prop2'\n            }]\n          }],\n          loans: {\n            _id: 'loanId'\n          }\n        }\n      });\n      PromotionService.removeLoan({\n        promotionId: 'promotionId',\n        loanId: 'loanId'\n      });\n      loan = LoanService.fetchOne({\n        $filters: {\n          _id: 'loanId'\n        },\n        promotionOptionLinks: 1\n      });\n      expect(loan.promotionOptionLinks).to.deep.equal([]);\n      expect(PromotionOptionService.find({}).count()).to.equal(0);\n    });\n    it('removes any status from the promotionLot as well as the attributedTo', () => {\n      generator({\n        properties: [{\n          _id: 'prop1'\n        }, {\n          _id: 'prop2'\n        }],\n        promotions: {\n          _id: 'promotionId',\n          promotionLots: {\n            _id: 'lot1',\n            status: 'SOLD',\n            promotionOptions: {\n              loan: {\n                _id: 'loanId'\n              }\n            },\n            propertyLinks: [{\n              _id: 'prop1'\n            }],\n            attributedTo: {\n              _id: 'loanId'\n            }\n          },\n          loans: {\n            _id: 'loanId'\n          }\n        }\n      });\n      PromotionService.removeLoan({\n        promotionId: 'promotionId',\n        loanId: 'loanId'\n      });\n      const promotionLot = PromotionLotService.get('lot1');\n      expect(promotionLot.status).to.equal(PROMOTION_LOT_STATUS.AVAILABLE);\n      expect(promotionLot.attributedToLink).to.deep.equal({});\n    });\n  });\n  describe('insertPromotionProperty', () => {\n    let promotionId;\n    it('inserts a property and promotionLot', () => {\n      promotionId = Factory.create('promotion')._id;\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: {\n          value: 1000000\n        }\n      });\n      expect(PropertyService.find().count()).to.equal(1);\n      expect(PromotionLotService.find().count()).to.equal(1);\n    });\n    it('adds the promotions address on the property', () => {\n      promotionId = Factory.create('promotion', {\n        address1: 'address1',\n        address2: 'address2',\n        city: 'city',\n        zipCode: 1400\n      })._id;\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: {\n          value: 1000000\n        }\n      });\n      expect(PropertyService.findOne()).to.deep.include({\n        address1: 'address1',\n        address2: 'address2',\n        city: 'city',\n        zipCode: 1400,\n        canton: 'VD'\n      });\n    });\n  });\n  describe('removeProUser', () => {\n    it('removes the pro from the promotion', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          users: {\n            _id: 'proId',\n            _factory: 'pro'\n          }\n        }\n      });\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId'\n      });\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n    });\n    it('does not fail if no loans are attributed to the pro', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          users: {\n            _id: 'proId',\n            _factory: 'pro'\n          },\n          loans: [{}, {}]\n        }\n      });\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId'\n      });\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n    });\n    it('only removes him from the current promotion', () => {\n      generator({\n        promotions: [{\n          _id: 'promotionId',\n          users: {\n            _id: 'proId',\n            _factory: 'pro'\n          },\n          loans: {\n            _id: 'loanId',\n            $metadata: {\n              invitedBy: 'proId'\n            }\n          }\n        }, {\n          _id: 'promotionId2',\n          users: {\n            _id: 'proId'\n          },\n          loans: {\n            _id: 'loanId2',\n            $metadata: {\n              invitedBy: 'proId'\n            }\n          }\n        }]\n      });\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n      expect(PromotionService.get('promotionId2').userLinks.length).to.equal(1);\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId'\n      });\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n      expect(PromotionService.get('promotionId2').userLinks.length).to.equal(1);\n      expect(LoanService.findOne('loanId').promotionLinks[0].invitedBy).to.equal(undefined);\n      expect(LoanService.findOne('loanId2').promotionLinks[0].invitedBy).to.equal('proId');\n    });\n  });\n  describe('editPromotionLoan', () => {\n    it('updates showAllLots without overwriting other metadata', () => {\n      generator({\n        properties: {\n          _id: 'prop'\n        },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: {\n            _id: 'pLot1',\n            propertyLinks: [{\n              _id: 'prop'\n            }],\n            promotionOptions: {\n              _id: 'pOpt1'\n            }\n          },\n          loans: {\n            _id: 'loanId',\n            $metadata: {\n              showAllLots: true,\n              priorityOrder: ['pOpt1']\n            }\n          }\n        }\n      });\n      const {\n        loans: loans1\n      } = PromotionService.fetchOne({\n        $filters: {\n          _id: 'promoId'\n        },\n        loans: {\n          _id: 1\n        }\n      });\n      expect(loans1[0].$metadata.showAllLots).to.equal(true);\n      expect(loans1[0].$metadata.priorityOrder).to.deep.equal(['pOpt1']);\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: [],\n        showAllLots: false\n      });\n      const {\n        loans\n      } = PromotionService.fetchOne({\n        $filters: {\n          _id: 'promoId'\n        },\n        loans: {\n          _id: 1\n        }\n      });\n      expect(loans[0].$metadata.showAllLots).to.equal(false);\n      expect(loans[0].$metadata.priorityOrder).to.deep.equal(['pOpt1']);\n    });\n    it('adds new promotionOptions', () => {\n      generator({\n        properties: {\n          _id: 'prop'\n        },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [{\n            _id: 'pLot1',\n            propertyLinks: [{\n              _id: 'prop'\n            }]\n          }, {\n            _id: 'pLot2',\n            propertyLinks: [{\n              _id: 'prop'\n            }]\n          }],\n          loans: {\n            _id: 'loanId'\n          }\n        }\n      });\n      const {\n        loans: loans1\n      } = PromotionService.fetchOne({\n        $filters: {\n          _id: 'promoId'\n        },\n        loans: {\n          promotionOptionLinks: 1\n        }\n      });\n      expect(loans1[0].promotionOptionLinks.length).to.equal(0);\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: ['pLot2']\n      });\n      const {\n        loans\n      } = PromotionService.fetchOne({\n        $filters: {\n          _id: 'promoId'\n        },\n        loans: {\n          promotionOptions: {\n            promotionLots: {\n              _id: 1\n            }\n          }\n        }\n      });\n      expect(loans[0].promotionOptions.length).to.equal(1);\n      expect(loans[0].promotionOptions[0].promotionLots[0]._id).to.equal('pLot2');\n    });\n    it('removes any old promotionOptions', () => {\n      generator({\n        properties: {\n          _id: 'prop'\n        },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [{\n            _id: 'pLot1',\n            propertyLinks: [{\n              _id: 'prop'\n            }],\n            promotionOptions: {\n              _id: 'pOpt1'\n            }\n          }, {\n            _id: 'pLot2',\n            propertyLinks: [{\n              _id: 'prop'\n            }],\n            promotionOptions: {\n              _id: 'pOpt2'\n            }\n          }],\n          loans: {\n            _id: 'loanId',\n            promotionOptions: [{\n              _id: 'pOpt1'\n            }, {\n              _id: 'pOpt2'\n            }]\n          }\n        }\n      });\n      const {\n        loans: loans1\n      } = PromotionService.fetchOne({\n        $filters: {\n          _id: 'promoId'\n        },\n        loans: {\n          promotionOptionLinks: 1\n        }\n      });\n      expect(loans1[0].promotionOptionLinks.length).to.equal(2);\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: ['pLot2']\n      });\n      const {\n        loans\n      } = PromotionService.fetchOne({\n        $filters: {\n          _id: 'promoId'\n        },\n        loans: {\n          promotionOptions: {\n            promotionLots: {\n              _id: 1\n            }\n          }\n        }\n      });\n      expect(loans[0].promotionOptions.length).to.equal(1);\n      expect(loans[0].promotionOptions[0].promotionLots[0]._id).to.equal('pLot2');\n    });\n    it('throws if one of the promotionOptions is attributed to this loan', () => {\n      generator({\n        properties: {\n          _id: 'prop',\n          name: 'lot 1'\n        },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [{\n            _id: 'pLot1',\n            propertyLinks: [{\n              _id: 'prop'\n            }],\n            promotionOptions: {\n              _id: 'pOpt1'\n            },\n            attributedTo: {\n              _id: 'loanId',\n              promotionOptions: [{\n                _id: 'pOpt1'\n              }]\n            }\n          }],\n          loans: {\n            _id: 'loanId'\n          }\n        }\n      });\n      expect(() => PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: []\n      })).to.throw('\"lot 1\"');\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/promotions/server/test/PromotionService.test.js"],"names":["describe","beforeEach","resetDatabase","it","promotionId","Factory","PromotionService","property","value","object","address1","address2","city","zipCode","PropertyService","expect","canton","promotionLotId","promotionOptionId","loanId","generator","properties","_id","promotions","promotionLots","propertyLinks","promotionOptions","loan","loans","lots","PromotionLotService","PromotionOptionService","LotService","adminId","users","_factory","firstName","lastName","status","PROMOTION_STATUS","assignedEmployeeId","newUser","email","phoneNumber","isNewUser","user","pro","UserService","services","password","reset","token","resetToken","checkEmails","emails","response","template","message","global_merge_vars","emailId","EMAIL_IDS","name","userId","options","sendEnrollmentEmail","phoneNumbers","role","ROLES","USER","LoanService","Object","promotionLinks","priorityOrder","showAllLots","$filters","promotionOptionLinks","attributedTo","promotionLot","PROMOTION_LOT_STATUS","$metadata","invitedBy","loans1","promotionLotIds"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from 'core/api/factories';\nimport { PROMOTION_LOT_STATUS } from 'core/api/promotionLots/promotionLotConstants';\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport { PROMOTION_STATUS } from '../../../constants';\nimport { EMAIL_IDS } from '../../../email/emailConstants';\nimport UserService from '../../../users/server/UserService';\nimport { ROLES } from '../../../users/userConstants';\nimport LoanService from '../../../loans/server/LoanService';\nimport PromotionService from '../PromotionService';\nimport PromotionLotService from '../../../promotionLots/server/PromotionLotService';\nimport PromotionOptionService from '../../../promotionOptions/server/PromotionOptionService';\nimport LotService from '../../../lots/server/LotService';\nimport PropertyService from '../../../properties/server/PropertyService';\n\ndescribe('PromotionService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('update', () => {\n    let promotionId;\n\n    it('sets the address on all properties', () => {\n      promotionId = Factory.create('promotion')._id;\n\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 500000 },\n      });\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 1000000 },\n      });\n\n      PromotionService.update({\n        promotionId,\n        object: {\n          address1: 'address1',\n          address2: 'address2',\n          city: 'Geneva',\n          zipCode: 1200,\n        },\n      });\n\n      PropertyService.find({}).forEach((property) => {\n        expect(property).to.deep.include({\n          address1: 'address1',\n          address2: 'address2',\n          city: 'Geneva',\n          zipCode: 1200,\n          canton: 'GE',\n        });\n      });\n    });\n  });\n\n  describe('remove', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n    let lotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n          loans: { _id: loanId },\n          lots: {},\n        },\n      });\n    });\n\n    it('deletes the promotion', () => {\n      expect(PromotionService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(PromotionService.collection.find({}).count()).to.equal(0);\n    });\n\n    it('deletes all promotionLots', () => {\n      expect(PromotionLotService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(PromotionLotService.collection.find({}).count()).to.equal(0);\n    });\n\n    it('deletes all promotionOptions', () => {\n      expect(PromotionOptionService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(PromotionOptionService.collection.find({}).count()).to.equal(0);\n    });\n\n    it('deletes all lots', () => {\n      expect(LotService.collection.find({}).count()).to.equal(1);\n      PromotionService.remove({ promotionId });\n      expect(LotService.collection.find({}).count()).to.equal(0);\n    });\n  });\n\n  describe('inviteUser', () => {\n    let promotionId;\n    let adminId;\n\n    beforeEach(() => {\n      adminId = 'adminId';\n      promotionId = 'promotionId';\n      generator({\n        users: [\n          {\n            _id: adminId,\n            _factory: 'admin',\n            firstName: 'Admin',\n            lastName: 'User',\n          },\n          {\n            _id: 'proId',\n            _factory: 'pro',\n            firstName: 'Pro',\n            lastName: 'User',\n          },\n        ],\n        promotions: {\n          _id: promotionId,\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: adminId,\n        },\n      });\n    });\n\n    it('creates user and sends the invitation email if user does not exist', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      let resetToken;\n\n      const { userId, isNewUser } = UserService.proCreateUser({\n        user: newUser,\n      });\n\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n        isNewUser,\n        pro: { _id: 'proId' },\n      })\n        .then((loanId) => {\n          const user = UserService.getByEmail(newUser.email);\n          const {\n            services: {\n              password: {\n                reset: { token },\n              },\n            },\n          } = user;\n\n          resetToken = token;\n\n          expect(!!loanId).to.equal(true);\n          expect(!!userId).to.equal(true);\n          expect(UserService.hasPromotion({ userId, promotionId })).to.equal(true);\n\n          return checkEmails(2);\n        })\n        .then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            response: { status },\n            template: {\n              message: { global_merge_vars },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n          expect(global_merge_vars.find(({ name }) => name === 'CTA_URL').content).to.include(resetToken);\n          expect(global_merge_vars\n            .find(({ name }) => name === 'BODY')\n            .content.startsWith('Pro User')).to.equal(true);\n          expect(global_merge_vars\n            .find(({ name }) => name === 'BODY')\n            .content.endsWith('Admin User')).to.equal(true);\n\n          expect(emails.filter(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION).length).to.equal(1);\n        });\n    });\n\n    it('sends the invitation email if user exists', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      const userId = UserService.adminCreateUser({\n        options: {\n          email: newUser.email,\n          sendEnrollmentEmail: false,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          phoneNumbers: [newUser.phoneNumber],\n        },\n        role: ROLES.USER,\n      });\n\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n      })\n        .then((loanId) => {\n          expect(!!loanId).to.equal(true);\n          expect(UserService.hasPromotion({ userId, promotionId })).to.equal(true);\n\n          return checkEmails(1);\n        })\n        .then((emails) => {\n          expect(emails.length).to.equal(1);\n          const {\n            emailId,\n            response: { status },\n          } = emails[0];\n\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROMOTION);\n        });\n    });\n\n    it('throws an error if user is already invited to the promotion', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      const userId = UserService.adminCreateUser({\n        options: {\n          email: newUser.email,\n          sendEnrollmentEmail: false,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          phoneNumbers: [newUser.phoneNumber],\n        },\n        role: ROLES.USER,\n      });\n\n      LoanService.insertPromotionLoan({ userId, promotionId });\n\n      expect(() =>\n        PromotionService.inviteUser({\n          promotionId,\n          user: newUser,\n        })).to.throw('déjà invité');\n    });\n\n    it('throws an error if promotion status is not OPEN', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      Object.values(PROMOTION_STATUS)\n        .filter(status => status !== PROMOTION_STATUS.OPEN)\n        .forEach((status) => {\n          PromotionService.update({\n            promotionId,\n            object: { status },\n          });\n\n          expect(() =>\n            PromotionService.inviteUser({\n              promotionId,\n              user: newUser,\n            })).to.throw('Vous ne pouvez pas inviter');\n        });\n    });\n\n    it('assigns the assignedEmployee to the user', () => {\n      const newUser = {\n        email: 'new@user.com',\n        firstName: 'New',\n        lastName: 'User',\n        phoneNumber: '1234',\n      };\n\n      const { userId, isNewUser } = UserService.proCreateUser({\n        user: newUser,\n      });\n\n      return PromotionService.inviteUser({\n        promotionId,\n        userId,\n        isNewUser,\n      }).then(() => {\n        const user = UserService.getByEmail(newUser.email);\n        const { assignedEmployeeId } = user;\n        expect(assignedEmployeeId).to.equal(adminId);\n\n        return checkEmails(1);\n      });\n    });\n  });\n\n  describe('removeLoan', () => {\n    let promotionId;\n    let loanId;\n    let loan;\n\n    it('removes the promotion from the loan', () => {\n      promotionId = Factory.create('promotion')._id;\n      loanId = Factory.create('loan', {\n        promotionLinks: [\n          { _id: promotionId, priorityOrder: [] },\n          { _id: 'someOtherPromotion', priorityOrder: [] },\n        ],\n      })._id;\n\n      PromotionService.removeLoan({ promotionId, loanId });\n\n      loan = LoanService.get(loanId);\n      expect(loan.promotionLinks).to.deep.equal([\n        { _id: 'someOtherPromotion', priorityOrder: [], showAllLots: true },\n      ]);\n    });\n\n    it('removes all promotionOptions from the loan', () => {\n      generator({\n        properties: [{ _id: 'prop1' }, { _id: 'prop2' }],\n        promotions: {\n          _id: 'promotionId',\n          promotionLots: [\n            {\n              promotionOptions: { loan: { _id: 'loanId' } },\n              propertyLinks: [{ _id: 'prop1' }],\n            },\n            {\n              promotionOptions: { loan: { _id: 'loanId' } },\n              propertyLinks: [{ _id: 'prop2' }],\n            },\n          ],\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      PromotionService.removeLoan({\n        promotionId: 'promotionId',\n        loanId: 'loanId',\n      });\n      loan = LoanService.fetchOne({\n        $filters: { _id: 'loanId' },\n        promotionOptionLinks: 1,\n      });\n\n      expect(loan.promotionOptionLinks).to.deep.equal([]);\n      expect(PromotionOptionService.find({}).count()).to.equal(0);\n    });\n\n    it('removes any status from the promotionLot as well as the attributedTo', () => {\n      generator({\n        properties: [{ _id: 'prop1' }, { _id: 'prop2' }],\n        promotions: {\n          _id: 'promotionId',\n          promotionLots: {\n            _id: 'lot1',\n            status: 'SOLD',\n            promotionOptions: { loan: { _id: 'loanId' } },\n            propertyLinks: [{ _id: 'prop1' }],\n            attributedTo: { _id: 'loanId' },\n          },\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      PromotionService.removeLoan({\n        promotionId: 'promotionId',\n        loanId: 'loanId',\n      });\n      const promotionLot = PromotionLotService.get('lot1');\n\n      expect(promotionLot.status).to.equal(PROMOTION_LOT_STATUS.AVAILABLE);\n      expect(promotionLot.attributedToLink).to.deep.equal({});\n    });\n  });\n\n  describe('insertPromotionProperty', () => {\n    let promotionId;\n\n    it('inserts a property and promotionLot', () => {\n      promotionId = Factory.create('promotion')._id;\n\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 1000000 },\n      });\n\n      expect(PropertyService.find().count()).to.equal(1);\n      expect(PromotionLotService.find().count()).to.equal(1);\n    });\n\n    it('adds the promotions address on the property', () => {\n      promotionId = Factory.create('promotion', {\n        address1: 'address1',\n        address2: 'address2',\n        city: 'city',\n        zipCode: 1400,\n      })._id;\n\n      PromotionService.insertPromotionProperty({\n        promotionId,\n        property: { value: 1000000 },\n      });\n\n      expect(PropertyService.findOne()).to.deep.include({\n        address1: 'address1',\n        address2: 'address2',\n        city: 'city',\n        zipCode: 1400,\n        canton: 'VD',\n      });\n    });\n  });\n\n  describe('removeProUser', () => {\n    it('removes the pro from the promotion', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          users: { _id: 'proId', _factory: 'pro' },\n        },\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId',\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n    });\n\n    it('does not fail if no loans are attributed to the pro', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          users: { _id: 'proId', _factory: 'pro' },\n          loans: [{}, {}],\n        },\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId',\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n    });\n\n    it('only removes him from the current promotion', () => {\n      generator({\n        promotions: [\n          {\n            _id: 'promotionId',\n            users: { _id: 'proId', _factory: 'pro' },\n            loans: { _id: 'loanId', $metadata: { invitedBy: 'proId' } },\n          },\n          {\n            _id: 'promotionId2',\n            users: { _id: 'proId' },\n            loans: { _id: 'loanId2', $metadata: { invitedBy: 'proId' } },\n          },\n        ],\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(1);\n      expect(PromotionService.get('promotionId2').userLinks.length).to.equal(1);\n\n      PromotionService.removeProUser({\n        promotionId: 'promotionId',\n        userId: 'proId',\n      });\n\n      expect(PromotionService.get('promotionId').userLinks.length).to.equal(0);\n      expect(PromotionService.get('promotionId2').userLinks.length).to.equal(1);\n      expect(LoanService.findOne('loanId').promotionLinks[0].invitedBy).to.equal(undefined);\n      expect(LoanService.findOne('loanId2').promotionLinks[0].invitedBy).to.equal('proId');\n    });\n  });\n\n  describe('editPromotionLoan', () => {\n    it('updates showAllLots without overwriting other metadata', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: {\n            _id: 'pLot1',\n            propertyLinks: [{ _id: 'prop' }],\n            promotionOptions: { _id: 'pOpt1' },\n          },\n          loans: {\n            _id: 'loanId',\n            $metadata: { showAllLots: true, priorityOrder: ['pOpt1'] },\n          },\n        },\n      });\n\n      const { loans: loans1 } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { _id: 1 },\n      });\n\n      expect(loans1[0].$metadata.showAllLots).to.equal(true);\n\n      expect(loans1[0].$metadata.priorityOrder).to.deep.equal(['pOpt1']);\n\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: [],\n        showAllLots: false,\n      });\n\n      const { loans } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { _id: 1 },\n      });\n\n      expect(loans[0].$metadata.showAllLots).to.equal(false);\n      expect(loans[0].$metadata.priorityOrder).to.deep.equal(['pOpt1']);\n    });\n\n    it('adds new promotionOptions', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [\n            {\n              _id: 'pLot1',\n              propertyLinks: [{ _id: 'prop' }],\n            },\n            {\n              _id: 'pLot2',\n              propertyLinks: [{ _id: 'prop' }],\n            },\n          ],\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      const { loans: loans1 } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptionLinks: 1 },\n      });\n\n      expect(loans1[0].promotionOptionLinks.length).to.equal(0);\n\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: ['pLot2'],\n      });\n\n      const { loans } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptions: { promotionLots: { _id: 1 } } },\n      });\n\n      expect(loans[0].promotionOptions.length).to.equal(1);\n      expect(loans[0].promotionOptions[0].promotionLots[0]._id).to.equal('pLot2');\n    });\n\n    it('removes any old promotionOptions', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [\n            {\n              _id: 'pLot1',\n              propertyLinks: [{ _id: 'prop' }],\n              promotionOptions: { _id: 'pOpt1' },\n            },\n            {\n              _id: 'pLot2',\n              propertyLinks: [{ _id: 'prop' }],\n              promotionOptions: { _id: 'pOpt2' },\n            },\n          ],\n          loans: {\n            _id: 'loanId',\n            promotionOptions: [{ _id: 'pOpt1' }, { _id: 'pOpt2' }],\n          },\n        },\n      });\n\n      const { loans: loans1 } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptionLinks: 1 },\n      });\n\n      expect(loans1[0].promotionOptionLinks.length).to.equal(2);\n\n      PromotionService.editPromotionLoan({\n        loanId: 'loanId',\n        promotionId: 'promoId',\n        promotionLotIds: ['pLot2'],\n      });\n\n      const { loans } = PromotionService.fetchOne({\n        $filters: { _id: 'promoId' },\n        loans: { promotionOptions: { promotionLots: { _id: 1 } } },\n      });\n\n      expect(loans[0].promotionOptions.length).to.equal(1);\n      expect(loans[0].promotionOptions[0].promotionLots[0]._id).to.equal('pLot2');\n    });\n\n    it('throws if one of the promotionOptions is attributed to this loan', () => {\n      generator({\n        properties: { _id: 'prop', name: 'lot 1' },\n        promotions: {\n          _id: 'promoId',\n          promotionLots: [\n            {\n              _id: 'pLot1',\n              propertyLinks: [{ _id: 'prop' }],\n              promotionOptions: { _id: 'pOpt1' },\n              attributedTo: {\n                _id: 'loanId',\n                promotionOptions: [{ _id: 'pOpt1' }],\n              },\n            },\n          ],\n          loans: { _id: 'loanId' },\n        },\n      });\n\n      expect(() =>\n        PromotionService.editPromotionLoan({\n          loanId: 'loanId',\n          promotionId: 'promoId',\n          promotionLotIds: [],\n        })).to.throw('\"lot 1\"');\n    });\n  });\n});\n"]},"sourceType":"script","hash":"14422f216b42b1e2227a6c1b407c1a70ed9e6a9a"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/userFunctions.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/test/userFunctions.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/userFunctions.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/test/userFunctions.spec.js"],"names":["expect","getUserDisplayName","describe","firstName","lastName","username","emails","address","it","to","equal"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SAASC,kBAAT;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/B,QAAMC,SAAS,GAAG,WAAlB;AACA,QAAMC,QAAQ,GAAG,UAAjB;AACA,QAAMC,QAAQ,GAAG,UAAjB;AACA,QAAMC,MAAM,GAAG,CAAC;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAf;AAEAL,EAAAA,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnCM,IAAAA,EAAE,CAAC,4DAAD,EAA+D,MAAM;AACrER,MAAAA,MAAM,CAACC,kBAAkB,CAAC,EAAD,CAAnB,CAAN,CAA+BQ,EAA/B,CAAkCC,KAAlC,CAAwC,EAAxC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,sDAAD,EAAyD,MAAM;AAC/DR,MAAAA,MAAM,CAACC,kBAAkB,CAAC;AAAEE,QAAAA,SAAF;AAAaC,QAAAA;AAAb,OAAD,CAAnB,CAAN,CAAoDK,EAApD,CAAuDC,KAAvD,CAA8D,GAAEP,SAAU,IAAGC,QAAS,EAAtF;AACD,KAFC,CAAF;AAIAI,IAAAA,EAAE,CAAC,iEAAD,EAAoE,MAAM;AAC1ER,MAAAA,MAAM,CAACC,kBAAkB,CAAC;AAAEE,QAAAA;AAAF,OAAD,CAAnB,CAAN,CAA0CM,EAA1C,CAA6CC,KAA7C,CAAmDP,SAAnD;AACD,KAFC,CAAF;AAIAK,IAAAA,EAAE,CAAC,6FAAD,EAAgG,MAAM;AACtGR,MAAAA,MAAM,CAACC,kBAAkB,CAAC;AAAEK,QAAAA;AAAF,OAAD,CAAnB,CAAN,CAAuCG,EAAvC,CAA0CC,KAA1C,CAAgDJ,MAAM,CAAC,CAAD,CAAN,CAAUC,OAA1D;AACD,KAFC,CAAF;AAGD,GAhBO,CAAR;AAiBD,CAvBO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { getUserDisplayName } from '../userFunctions';\n\ndescribe('User Functions', () => {\n  const firstName = 'firstName';\n  const lastName = 'lastName';\n  const username = 'username';\n  const emails = [{ address: 'email@email.com' }];\n\n  describe('getUserDisplayName', () => {\n    it('should return an empty string when no arguments are passed', () => {\n      expect(getUserDisplayName({})).to.equal('');\n    });\n\n    it(\"should return the user's names when they are defined\", () => {\n      expect(getUserDisplayName({ firstName, lastName })).to.equal(`${firstName} ${lastName}`);\n    });\n\n    it('should return just the firstName when the lastName is undefined', () => {\n      expect(getUserDisplayName({ firstName })).to.equal(firstName);\n    });\n\n    it('should return the email address when it is defined and the names and username are undefined', () => {\n      expect(getUserDisplayName({ emails })).to.equal(emails[0].address);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/userFunctions.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/test/userFunctions.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar getUserDisplayName;\nmodule.link(\"../userFunctions\", {\n  getUserDisplayName: function (v) {\n    getUserDisplayName = v;\n  }\n}, 1);\ndescribe('User Functions', function () {\n  var firstName = 'firstName';\n  var lastName = 'lastName';\n  var username = 'username';\n  var emails = [{\n    address: 'email@email.com'\n  }];\n  describe('getUserDisplayName', function () {\n    it('should return an empty string when no arguments are passed', function () {\n      expect(getUserDisplayName({})).to.equal('');\n    });\n    it(\"should return the user's names when they are defined\", function () {\n      expect(getUserDisplayName({\n        firstName: firstName,\n        lastName: lastName\n      })).to.equal(firstName + \" \" + lastName);\n    });\n    it('should return just the firstName when the lastName is undefined', function () {\n      expect(getUserDisplayName({\n        firstName: firstName\n      })).to.equal(firstName);\n    });\n    it('should return the email address when it is defined and the names and username are undefined', function () {\n      expect(getUserDisplayName({\n        emails: emails\n      })).to.equal(emails[0].address);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/test/userFunctions.spec.js"],"names":["describe","firstName","lastName","username","emails","address","it","expect","getUserDisplayName"],"mappings":"AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,YAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,kBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,kBAAA,YAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAKAA,QAAQ,CAAA,gBAAA,EAAmB,YAAM;AAC/B,MAAMC,SAAS,GAAf,WAAA;AACA,MAAMC,QAAQ,GAAd,UAAA;AACA,MAAMC,QAAQ,GAAd,UAAA;AACA,MAAMC,MAAM,GAAG,CAAC;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAf;AAEAL,EAAAA,QAAQ,CAAA,oBAAA,EAAuB,YAAM;AACnCM,IAAAA,EAAE,CAAA,4DAAA,EAA+D,YAAM;AACrEC,MAAAA,MAAM,CAACC,kBAAkB,CAAzBD,EAAyB,CAAnB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,EAAAA;AADFD,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,sDAAA,EAAyD,YAAM;AAC/DC,MAAAA,MAAM,CAACC,kBAAkB,CAAC;AAAEP,QAAAA,SAAF,EAAEA,SAAF;AAAaC,QAAAA,QAAAA,EAAAA;AAAb,OAAD,CAAnB,CAANK,CAAAA,EAAAA,CAAAA,KAAAA,CAAgEN,SAAhEM,SAAAA,QAAAA;AADFD,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,iEAAA,EAAoE,YAAM;AAC1EC,MAAAA,MAAM,CAACC,kBAAkB,CAAC;AAAEP,QAAAA,SAAAA,EAAAA;AAAF,OAAD,CAAnB,CAANM,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,SAAAA;AADFD,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,6FAAA,EAAgG,YAAM;AACtGC,MAAAA,MAAM,CAACC,kBAAkB,CAAC;AAAEJ,QAAAA,MAAAA,EAAAA;AAAF,OAAD,CAAnB,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAgDH,MAAM,CAANA,CAAM,CAANA,CAAhDG,OAAAA;AADFD,KAAE,CAAFA;AAbFN,GAAQ,CAARA;AANFA,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { getUserDisplayName } from '../userFunctions';\n\ndescribe('User Functions', () => {\n  const firstName = 'firstName';\n  const lastName = 'lastName';\n  const username = 'username';\n  const emails = [{ address: 'email@email.com' }];\n\n  describe('getUserDisplayName', () => {\n    it('should return an empty string when no arguments are passed', () => {\n      expect(getUserDisplayName({})).to.equal('');\n    });\n\n    it(\"should return the user's names when they are defined\", () => {\n      expect(getUserDisplayName({ firstName, lastName })).to.equal(`${firstName} ${lastName}`);\n    });\n\n    it('should return just the firstName when the lastName is undefined', () => {\n      expect(getUserDisplayName({ firstName })).to.equal(firstName);\n    });\n\n    it('should return the email address when it is defined and the names and username are undefined', () => {\n      expect(getUserDisplayName({ emails })).to.equal(emails[0].address);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"981504866a92257568feb5266cb4342c72a91126"}

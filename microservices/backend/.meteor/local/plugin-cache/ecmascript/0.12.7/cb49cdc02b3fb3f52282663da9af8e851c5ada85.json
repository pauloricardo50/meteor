{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/referCustomer.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/referCustomer.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/referCustomer.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/referCustomer.test.js"],"names":["Meteor","resetDatabase","expect","sinon","SlackService","UserService","generator","RESTAPI","referCustomerAPI","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","customerToRefer","email","firstName","lastName","phoneNumber","api","addEndpoint","referCustomer","userData","impersonateUser","expectedResponse","shareSolvency","timestamp","nonce","body","user","query","undefined","url","data","method","headers","userId","JSON","stringify","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","users","_factory","_id","organisations","$metadata","isMain","title","name","emails","address","verified","it","message","then","customer","fetchOne","$filters","$in","referredByUserLink","referredByOrganisationLink","loans","to","equal","getByEmail","status","spy","stub","callsFake","calledOnce","args","username","attachments","send","restore"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nimport SlackService from 'core/api/slack/server/SlackService';\nimport UserService from '../../../../users/server/UserService';\nimport generator from '../../../../factories/index';\nimport RESTAPI from '../../RESTAPI';\nimport referCustomerAPI from '../referCustomer';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nconst customerToRefer = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '1234',\n};\n\nconst api = new RESTAPI();\napi.addEndpoint('/users', 'POST', referCustomerAPI);\n\nconst referCustomer = ({\n  userData,\n  impersonateUser,\n  expectedResponse,\n  shareSolvency,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const body = { user: userData || customerToRefer, shareSolvency };\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: '/users',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n  });\n};\n\ndescribe('REST: referCustomer', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          organisations: [\n            {\n              _id: 'org',\n              $metadata: { isMain: true, title: 'CTO' },\n              name: 'Main Org',\n            },\n            { _id: 'org3' },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          emails: [{ address: 'pro2@org.com', verified: true }],\n          organisations: [{ _id: 'org', $metadata: { isMain: true } }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro3',\n          emails: [{ address: 'pro3@org2.com', verified: true }],\n          organisations: [{ _id: 'org2', $metadata: { isMain: true } }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro4',\n          emails: [{ address: 'pro4@org3.com', verified: true }],\n          organisations: [\n            { _id: 'org3', $metadata: { isMain: true, title: 'CEO' } },\n          ],\n        },\n      ],\n    });\n  });\n\n  it('refers a customer', () =>\n    referCustomer({\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToRefer.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n      expect(customer.referredByUserLink).to.equal('pro');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n      expect(customer.loans[0].shareSolvency).to.equal(undefined);\n    }));\n\n  it('refers a customer with solvency sharing', () =>\n    referCustomer({\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToRefer.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n      expect(customer.referredByUserLink).to.equal('pro');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n      expect(customer.loans[0].shareSolvency).to.equal(true);\n    }));\n\n  it('refers a customer with impersonateUser', () =>\n    referCustomer({\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.getByEmail(customerToRefer.email);\n      expect(customer.referredByUserLink).to.equal('pro2');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n    }));\n\n  it('refers a customer with impersonateUser in another org', () =>\n    referCustomer({\n      impersonateUser: 'pro4@org3.com',\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.getByEmail(customerToRefer.email);\n      expect(customer.referredByUserLink).to.equal('pro4');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n    }));\n\n  it('returns an error when impersonateUser is not in the same organisation', () =>\n    referCustomer({\n      impersonateUser: 'pro3@org2.com',\n      expectedResponse: {\n        status: 400,\n        message:\n          '[User with email address \"pro3@org2.com\" is not part of your organisation]',\n      },\n    }));\n\n  it('returns an error if the user already exists', () => {\n    generator({\n      users: { emails: [{ address: customerToRefer.email, verified: false }] },\n    });\n    return referCustomer({\n      expectedResponse: {\n        status: 400,\n        message:\n          \"[Ce client existe déjà. Vous ne pouvez pas le référer, mais vous pouvez l'inviter sur un de vos biens immobiliers.]\",\n      },\n    });\n  });\n\n  describe('Slack notifications', () => {\n    it('sends a properly formatted slack notification', async () => {\n      const spy = sinon.spy();\n      sinon.stub(SlackService, 'send').callsFake(spy);\n\n      await referCustomer({\n        impersonateUser: 'pro4@org3.com',\n        expectedResponse: {\n          message: `Successfully referred user \"${customerToRefer.email}\"`,\n        },\n      });\n\n      expect(spy.calledOnce).to.equal(true);\n      expect(spy.args[0][0].username).to.equal('TestFirstName TestLastName (API Main Org)');\n      expect(spy.args[0][0].attachments[0].title).to.equal('Test User a été invité sur e-Potek en referral uniquement');\n\n      SlackService.send.restore();\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/referCustomer.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/referCustomer.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet sinon;\nmodule.link(\"sinon\", {\n  default(v) {\n    sinon = v;\n  }\n\n}, 3);\nlet SlackService;\nmodule.link(\"../../../../slack/server/SlackService\", {\n  default(v) {\n    SlackService = v;\n  }\n\n}, 4);\nlet UserService;\nmodule.link(\"../../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 5);\nlet generator;\nmodule.link(\"../../../../factories/index\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 6);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 7);\nlet referCustomerAPI;\nmodule.link(\"../referCustomer\", {\n  default(v) {\n    referCustomerAPI = v;\n  }\n\n}, 8);\nlet fetchAndCheckResponse, makeHeaders, getTimestampAndNonce;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  }\n\n}, 9);\nconst customerToRefer = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '1234'\n};\nconst api = new RESTAPI();\napi.addEndpoint('/users', 'POST', referCustomerAPI);\n\nconst referCustomer = ({\n  userData,\n  impersonateUser,\n  expectedResponse,\n  shareSolvency\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const body = {\n    user: userData || customerToRefer,\n    shareSolvency\n  };\n  const query = impersonateUser ? {\n    'impersonate-user': impersonateUser\n  } : undefined;\n  return fetchAndCheckResponse({\n    url: '/users',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query\n      }),\n      body: JSON.stringify(body)\n    },\n    expectedResponse\n  });\n};\n\ndescribe('REST: referCustomer', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [{\n        _factory: 'pro',\n        _id: 'pro',\n        organisations: [{\n          _id: 'org',\n          $metadata: {\n            isMain: true,\n            title: 'CTO'\n          },\n          name: 'Main Org'\n        }, {\n          _id: 'org3'\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro2',\n        emails: [{\n          address: 'pro2@org.com',\n          verified: true\n        }],\n        organisations: [{\n          _id: 'org',\n          $metadata: {\n            isMain: true\n          }\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro3',\n        emails: [{\n          address: 'pro3@org2.com',\n          verified: true\n        }],\n        organisations: [{\n          _id: 'org2',\n          $metadata: {\n            isMain: true\n          }\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro4',\n        emails: [{\n          address: 'pro4@org3.com',\n          verified: true\n        }],\n        organisations: [{\n          _id: 'org3',\n          $metadata: {\n            isMain: true,\n            title: 'CEO'\n          }\n        }]\n      }]\n    });\n  });\n  it('refers a customer', () => referCustomer({\n    expectedResponse: {\n      message: `Successfully referred user \"${customerToRefer.email}\"`\n    }\n  }).then(() => {\n    const customer = UserService.fetchOne({\n      $filters: {\n        'emails.address': {\n          $in: [customerToRefer.email]\n        }\n      },\n      referredByUserLink: 1,\n      referredByOrganisationLink: 1,\n      loans: {\n        shareSolvency: 1\n      }\n    });\n    expect(customer.referredByUserLink).to.equal('pro');\n    expect(customer.referredByOrganisationLink).to.equal('org');\n    expect(customer.loans[0].shareSolvency).to.equal(undefined);\n  }));\n  it('refers a customer with solvency sharing', () => referCustomer({\n    shareSolvency: true,\n    expectedResponse: {\n      message: `Successfully referred user \"${customerToRefer.email}\"`\n    }\n  }).then(() => {\n    const customer = UserService.fetchOne({\n      $filters: {\n        'emails.address': {\n          $in: [customerToRefer.email]\n        }\n      },\n      referredByUserLink: 1,\n      referredByOrganisationLink: 1,\n      loans: {\n        shareSolvency: 1\n      }\n    });\n    expect(customer.referredByUserLink).to.equal('pro');\n    expect(customer.referredByOrganisationLink).to.equal('org');\n    expect(customer.loans[0].shareSolvency).to.equal(true);\n  }));\n  it('refers a customer with impersonateUser', () => referCustomer({\n    impersonateUser: 'pro2@org.com',\n    expectedResponse: {\n      message: `Successfully referred user \"${customerToRefer.email}\"`\n    }\n  }).then(() => {\n    const customer = UserService.getByEmail(customerToRefer.email);\n    expect(customer.referredByUserLink).to.equal('pro2');\n    expect(customer.referredByOrganisationLink).to.equal('org');\n  }));\n  it('refers a customer with impersonateUser in another org', () => referCustomer({\n    impersonateUser: 'pro4@org3.com',\n    expectedResponse: {\n      message: `Successfully referred user \"${customerToRefer.email}\"`\n    }\n  }).then(() => {\n    const customer = UserService.getByEmail(customerToRefer.email);\n    expect(customer.referredByUserLink).to.equal('pro4');\n    expect(customer.referredByOrganisationLink).to.equal('org');\n  }));\n  it('returns an error when impersonateUser is not in the same organisation', () => referCustomer({\n    impersonateUser: 'pro3@org2.com',\n    expectedResponse: {\n      status: 400,\n      message: '[User with email address \"pro3@org2.com\" is not part of your organisation]'\n    }\n  }));\n  it('returns an error if the user already exists', () => {\n    generator({\n      users: {\n        emails: [{\n          address: customerToRefer.email,\n          verified: false\n        }]\n      }\n    });\n    return referCustomer({\n      expectedResponse: {\n        status: 400,\n        message: \"[Ce client existe déjà. Vous ne pouvez pas le référer, mais vous pouvez l'inviter sur un de vos biens immobiliers.]\"\n      }\n    });\n  });\n  describe('Slack notifications', () => {\n    it('sends a properly formatted slack notification', () => Promise.asyncApply(() => {\n      const spy = sinon.spy();\n      sinon.stub(SlackService, 'send').callsFake(spy);\n      Promise.await(referCustomer({\n        impersonateUser: 'pro4@org3.com',\n        expectedResponse: {\n          message: `Successfully referred user \"${customerToRefer.email}\"`\n        }\n      }));\n      expect(spy.calledOnce).to.equal(true);\n      expect(spy.args[0][0].username).to.equal('TestFirstName TestLastName (API Main Org)');\n      expect(spy.args[0][0].attachments[0].title).to.equal('Test User a été invité sur e-Potek en referral uniquement');\n      SlackService.send.restore();\n    }));\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/referCustomer.test.js"],"names":["customerToRefer","email","firstName","lastName","phoneNumber","api","referCustomer","shareSolvency","nonce","getTimestampAndNonce","body","user","userData","query","impersonateUser","fetchAndCheckResponse","url","data","method","headers","makeHeaders","userId","JSON","expectedResponse","describe","before","Meteor","after","beforeEach","resetDatabase","generator","users","_factory","_id","organisations","$metadata","isMain","title","name","emails","address","verified","it","message","customer","$filters","$in","referredByUserLink","referredByOrganisationLink","loans","expect","UserService","status","spy","sinon","SlackService"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nimport SlackService from 'core/api/slack/server/SlackService';\nimport UserService from '../../../../users/server/UserService';\nimport generator from '../../../../factories/index';\nimport RESTAPI from '../../RESTAPI';\nimport referCustomerAPI from '../referCustomer';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nconst customerToRefer = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '1234',\n};\n\nconst api = new RESTAPI();\napi.addEndpoint('/users', 'POST', referCustomerAPI);\n\nconst referCustomer = ({\n  userData,\n  impersonateUser,\n  expectedResponse,\n  shareSolvency,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n\n  const body = { user: userData || customerToRefer, shareSolvency };\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: '/users',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n  });\n};\n\ndescribe('REST: referCustomer', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          organisations: [\n            {\n              _id: 'org',\n              $metadata: { isMain: true, title: 'CTO' },\n              name: 'Main Org',\n            },\n            { _id: 'org3' },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          emails: [{ address: 'pro2@org.com', verified: true }],\n          organisations: [{ _id: 'org', $metadata: { isMain: true } }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro3',\n          emails: [{ address: 'pro3@org2.com', verified: true }],\n          organisations: [{ _id: 'org2', $metadata: { isMain: true } }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro4',\n          emails: [{ address: 'pro4@org3.com', verified: true }],\n          organisations: [\n            { _id: 'org3', $metadata: { isMain: true, title: 'CEO' } },\n          ],\n        },\n      ],\n    });\n  });\n\n  it('refers a customer', () =>\n    referCustomer({\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToRefer.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n      expect(customer.referredByUserLink).to.equal('pro');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n      expect(customer.loans[0].shareSolvency).to.equal(undefined);\n    }));\n\n  it('refers a customer with solvency sharing', () =>\n    referCustomer({\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToRefer.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n      expect(customer.referredByUserLink).to.equal('pro');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n      expect(customer.loans[0].shareSolvency).to.equal(true);\n    }));\n\n  it('refers a customer with impersonateUser', () =>\n    referCustomer({\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.getByEmail(customerToRefer.email);\n      expect(customer.referredByUserLink).to.equal('pro2');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n    }));\n\n  it('refers a customer with impersonateUser in another org', () =>\n    referCustomer({\n      impersonateUser: 'pro4@org3.com',\n      expectedResponse: {\n        message: `Successfully referred user \"${customerToRefer.email}\"`,\n      },\n    }).then(() => {\n      const customer = UserService.getByEmail(customerToRefer.email);\n      expect(customer.referredByUserLink).to.equal('pro4');\n      expect(customer.referredByOrganisationLink).to.equal('org');\n    }));\n\n  it('returns an error when impersonateUser is not in the same organisation', () =>\n    referCustomer({\n      impersonateUser: 'pro3@org2.com',\n      expectedResponse: {\n        status: 400,\n        message:\n          '[User with email address \"pro3@org2.com\" is not part of your organisation]',\n      },\n    }));\n\n  it('returns an error if the user already exists', () => {\n    generator({\n      users: { emails: [{ address: customerToRefer.email, verified: false }] },\n    });\n    return referCustomer({\n      expectedResponse: {\n        status: 400,\n        message:\n          \"[Ce client existe déjà. Vous ne pouvez pas le référer, mais vous pouvez l'inviter sur un de vos biens immobiliers.]\",\n      },\n    });\n  });\n\n  describe('Slack notifications', () => {\n    it('sends a properly formatted slack notification', async () => {\n      const spy = sinon.spy();\n      sinon.stub(SlackService, 'send').callsFake(spy);\n\n      await referCustomer({\n        impersonateUser: 'pro4@org3.com',\n        expectedResponse: {\n          message: `Successfully referred user \"${customerToRefer.email}\"`,\n        },\n      });\n\n      expect(spy.calledOnce).to.equal(true);\n      expect(spy.args[0][0].username).to.equal('TestFirstName TestLastName (API Main Org)');\n      expect(spy.args[0][0].attachments[0].title).to.equal('Test User a été invité sur e-Potek en referral uniquement');\n\n      SlackService.send.restore();\n    });\n  });\n});\n"]},"sourceType":"script","hash":"cb49cdc02b3fb3f52282663da9af8e851c5ada85"}

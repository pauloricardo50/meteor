{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/methods/server/test/methods.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/methods/server/test/methods.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/methods/server/test/methods.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/methods/server/test/methods.test.js"],"names":["expect","resetDatabase","checkEmails","methods","getRateLimitedMethods","submitContactForm","EMAIL_IDS","describe","timeout","beforeEach","Object","keys","forEach","methodName","method","it","run","catch","error","to","not","equal","address","name","email","phoneNumber","then","emails","length","ids","map","emailId","include","CONTACT_US","CONTACT_US_ADMIN"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,WAAT;AACA,OAAOC,OAAP;AACA,SAASC,qBAAT;AACA,SAASC,iBAAT;AACA,SAASC,SAAT;AAEAC,QAAQ,CAAC,SAAD,EAAY,YAAY;AAC9B,OAAKC,OAAL,CAAa,KAAb;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfR,IAAAA,aAAa;AACd,GAFS,CAAV;AAIAS,EAAAA,MAAM,CAACC,IAAP,CAAYR,OAAZ,EAAqBS,OAArB,CAA8BC,UAAD,IAAgB;AAC3C,UAAMC,MAAM,GAAGX,OAAO,CAACU,UAAD,CAAtB;AACAN,IAAAA,QAAQ,CAAE,UAASM,UAAW,EAAtB,EAAyB,MAAM;AACrCE,MAAAA,EAAE,CAAC,YAAD,EAAe,MACfD,MAAM,CAACE,GAAP,CAAW,EAAX,EAAeC,KAAf,CAAsBC,KAAD,IAAW;AAC9BlB,QAAAA,MAAM,CAACkB,KAAK,CAACA,KAAP,CAAN,CAAoBC,EAApB,CAAuBC,GAAvB,CAA2BC,KAA3B,CAAiC,GAAjC;AACD,OAFD,CADA,CAAF,CADqC,CAMrC;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAbO,CAAR;AAcD,GAhBD;AAkBAd,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCQ,IAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/B,YAAMO,OAAO,GAAG,oBAAhB;AACA,aAAOjB,iBAAiB,CACrBW,GADI,CACA;AACHO,QAAAA,IAAI,EAAE,mBADH;AAEHC,QAAAA,KAAK,EAAEF,OAFJ;AAGHG,QAAAA,WAAW,EAAE;AAHV,OADA,EAMJC,IANI,CAMC,MAAMxB,WAAW,CAAC,CAAD,CANlB,EAOJwB,IAPI,CAOEC,MAAD,IAAY;AAChB3B,QAAAA,MAAM,CAAC2B,MAAM,CAACC,MAAR,CAAN,CAAsBT,EAAtB,CAAyBE,KAAzB,CAA+B,CAA/B;AACA,cAAMQ,GAAG,GAAGF,MAAM,CAACG,GAAP,CAAW,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAiBA,OAA5B,CAAZ;AACA/B,QAAAA,MAAM,CAAC6B,GAAD,CAAN,CAAYV,EAAZ,CAAea,OAAf,CAAuB1B,SAAS,CAAC2B,UAAjC;AACAjC,QAAAA,MAAM,CAAC6B,GAAD,CAAN,CAAYV,EAAZ,CAAea,OAAf,CAAuB1B,SAAS,CAAC4B,gBAAjC;AACD,OAZI,CAAP;AAaD,KAfC,CAAF;AAgBD,GAjBO,CAAR;AAkBD,CA3CO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { checkEmails } from 'core/utils/testHelpers/index';\nimport methods from '../../registerMethodDefinitions';\nimport { getRateLimitedMethods } from '../../../../utils/rate-limit';\nimport { submitContactForm } from '../../methodDefinitions';\nimport { EMAIL_IDS } from '../../../email/emailConstants';\n\ndescribe('methods', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  Object.keys(methods).forEach((methodName) => {\n    const method = methods[methodName];\n    describe(`method ${methodName}`, () => {\n      it('is defined', () =>\n        method.run({}).catch((error) => {\n          expect(error.error).to.not.equal(404);\n        }));\n\n      // In the future, remove the if conditional to test that all methods\n      // are rate-limited\n      // if (methodName === 'impersonateUser') {\n      //   it('is rate-limited', () => {\n      //     expect(getRateLimitedMethods()).to.include(methodName);\n      //   });\n      // }\n    });\n  });\n\n  describe('submitContactForm', () => {\n    it('should send 2 emails', () => {\n      const address = 'digital@e-potek.ch';\n      return submitContactForm\n        .run({\n          name: 'Florian Bienefelt',\n          email: address,\n          phoneNumber: '+41 22 566 01 10',\n        })\n        .then(() => checkEmails(2))\n        .then((emails) => {\n          expect(emails.length).to.equal(2);\n          const ids = emails.map(({ emailId }) => emailId);\n          expect(ids).to.include(EMAIL_IDS.CONTACT_US);\n          expect(ids).to.include(EMAIL_IDS.CONTACT_US_ADMIN);\n        });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/methods/server/test/methods.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/methods/server/test/methods.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet checkEmails;\nmodule.link(\"../../../../utils/testHelpers\", {\n  checkEmails(v) {\n    checkEmails = v;\n  }\n\n}, 2);\nlet methods;\nmodule.link(\"../../registerMethodDefinitions\", {\n  default(v) {\n    methods = v;\n  }\n\n}, 3);\nlet getRateLimitedMethods;\nmodule.link(\"../../../../utils/rate-limit\", {\n  getRateLimitedMethods(v) {\n    getRateLimitedMethods = v;\n  }\n\n}, 4);\nlet submitContactForm;\nmodule.link(\"../../methodDefinitions\", {\n  submitContactForm(v) {\n    submitContactForm = v;\n  }\n\n}, 5);\nlet EMAIL_IDS;\nmodule.link(\"../../../email/emailConstants\", {\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  }\n\n}, 6);\ndescribe('methods', function () {\n  this.timeout(10000);\n  beforeEach(() => {\n    resetDatabase();\n  });\n  Object.keys(methods).forEach(methodName => {\n    const method = methods[methodName];\n    describe(`method ${methodName}`, () => {\n      it('is defined', () => method.run({}).catch(error => {\n        expect(error.error).to.not.equal(404);\n      })); // In the future, remove the if conditional to test that all methods\n      // are rate-limited\n      // if (methodName === 'impersonateUser') {\n      //   it('is rate-limited', () => {\n      //     expect(getRateLimitedMethods()).to.include(methodName);\n      //   });\n      // }\n    });\n  });\n  describe('submitContactForm', () => {\n    it('should send 2 emails', () => {\n      const address = 'digital@e-potek.ch';\n      return submitContactForm.run({\n        name: 'Florian Bienefelt',\n        email: address,\n        phoneNumber: '+41 22 566 01 10'\n      }).then(() => checkEmails(2)).then(emails => {\n        expect(emails.length).to.equal(2);\n        const ids = emails.map(({\n          emailId\n        }) => emailId);\n        expect(ids).to.include(EMAIL_IDS.CONTACT_US);\n        expect(ids).to.include(EMAIL_IDS.CONTACT_US_ADMIN);\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/methods/server/test/methods.test.js"],"names":["describe","beforeEach","resetDatabase","Object","methodName","method","methods","it","error","expect","address","name","email","phoneNumber","checkEmails","emails","ids","emailId","EMAIL_IDS"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { checkEmails } from 'core/utils/testHelpers/index';\nimport methods from '../../registerMethodDefinitions';\nimport { getRateLimitedMethods } from '../../../../utils/rate-limit';\nimport { submitContactForm } from '../../methodDefinitions';\nimport { EMAIL_IDS } from '../../../email/emailConstants';\n\ndescribe('methods', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  Object.keys(methods).forEach((methodName) => {\n    const method = methods[methodName];\n    describe(`method ${methodName}`, () => {\n      it('is defined', () =>\n        method.run({}).catch((error) => {\n          expect(error.error).to.not.equal(404);\n        }));\n\n      // In the future, remove the if conditional to test that all methods\n      // are rate-limited\n      // if (methodName === 'impersonateUser') {\n      //   it('is rate-limited', () => {\n      //     expect(getRateLimitedMethods()).to.include(methodName);\n      //   });\n      // }\n    });\n  });\n\n  describe('submitContactForm', () => {\n    it('should send 2 emails', () => {\n      const address = 'digital@e-potek.ch';\n      return submitContactForm\n        .run({\n          name: 'Florian Bienefelt',\n          email: address,\n          phoneNumber: '+41 22 566 01 10',\n        })\n        .then(() => checkEmails(2))\n        .then((emails) => {\n          expect(emails.length).to.equal(2);\n          const ids = emails.map(({ emailId }) => emailId);\n          expect(ids).to.include(EMAIL_IDS.CONTACT_US);\n          expect(ids).to.include(EMAIL_IDS.CONTACT_US_ADMIN);\n        });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"7b2b25d69ecccc2cbc255bc03fd882919310e1b9"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/SyntheticMutator.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/SyntheticMutator.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/SyntheticMutator.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/SyntheticMutator.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/SyntheticMutator.js"}},"code":"module.export({\n  default: () => SyntheticMutator\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet getRedisPusher;\nmodule.link(\"../redis/getRedisClient\", {\n  getRedisPusher(v) {\n    getRedisPusher = v;\n  }\n\n}, 2);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 3);\nlet getFields;\nmodule.link(\"../utils/getFields\", {\n  default(v) {\n    getFields = v;\n  }\n\n}, 4);\nlet Events, RedisPipe;\nmodule.link(\"../constants\", {\n  Events(v) {\n    Events = v;\n  },\n\n  RedisPipe(v) {\n    RedisPipe = v;\n  }\n\n}, 5);\nlet containsOperators;\nmodule.link(\"../mongo/lib/containsOperators\", {\n  default(v) {\n    containsOperators = v;\n  }\n\n}, 6);\n\nclass SyntheticMutator {\n  /**\n   * @param channels\n   * @param data\n   */\n  static publish(channels, data) {\n    const client = getRedisPusher();\n    channels.forEach(channel => {\n      client.publish(channel, EJSON.stringify(data));\n    });\n  }\n  /**\n   * @param channels\n   * @param data\n   */\n\n\n  static insert(channels, data) {\n    channels = SyntheticMutator._extractChannels(channels);\n\n    if (!data._id) {\n      data._id = Random.id();\n    }\n\n    SyntheticMutator.publish(channels, {\n      [RedisPipe.EVENT]: Events.INSERT,\n      [RedisPipe.SYNTHETIC]: true,\n      [RedisPipe.DOC]: data\n    });\n  }\n  /**\n   * @param channels\n   * @param _id\n   * @param modifier\n   */\n\n\n  static update(channels, _id, modifier) {\n    channels = SyntheticMutator._extractChannels(channels);\n\n    if (!containsOperators(modifier)) {\n      throw new Meteor.Error('Synthetic update can only be done through MongoDB operators.');\n    }\n\n    const {\n      topLevelFields\n    } = getFields(modifier);\n    let message = {\n      [RedisPipe.EVENT]: Events.UPDATE,\n      [RedisPipe.SYNTHETIC]: true,\n      [RedisPipe.DOC]: {\n        _id\n      },\n      [RedisPipe.MODIFIER]: modifier,\n      [RedisPipe.MODIFIED_TOP_LEVEL_FIELDS]: topLevelFields\n    };\n    SyntheticMutator.publish(channels, message);\n  }\n  /**\n   * @param channels\n   * @param _id\n   */\n\n\n  static remove(channels, _id) {\n    channels = SyntheticMutator._extractChannels(channels);\n    SyntheticMutator.publish(channels, {\n      [RedisPipe.EVENT]: Events.REMOVE,\n      [RedisPipe.SYNTHETIC]: true,\n      [RedisPipe.DOC]: {\n        _id\n      }\n    });\n  }\n  /**\n   * @param channels\n   * @param _id\n   * @returns {*}\n   * @private\n   */\n\n\n  static _extractChannels(channels, _id) {\n    if (!_.isArray(channels)) {\n      if (channels instanceof Mongo.Collection) {\n        const name = channels._name;\n        channels = [name];\n\n        if (_id) {\n          channels.push(`${name}::${_id}`);\n        }\n      }\n\n      channels = [channels];\n    }\n\n    return channels;\n  }\n\n}","map":{"version":3,"sources":["packages/cultofcoders:redis-oplog/lib/mongo/SyntheticMutator.js"],"names":["module","export","default","SyntheticMutator","Mongo","link","v","Random","getRedisPusher","EJSON","getFields","Events","RedisPipe","containsOperators","publish","channels","data","client","forEach","channel","stringify","insert","_extractChannels","_id","id","EVENT","INSERT","SYNTHETIC","DOC","update","modifier","Meteor","Error","topLevelFields","message","UPDATE","MODIFIER","MODIFIED_TOP_LEVEL_FIELDS","remove","REMOVE","_","isArray","Collection","name","_name","push"],"mappings":"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","sourcesContent":["import {Mongo} from 'meteor/mongo';\nimport {Random} from 'meteor/random';\nimport { getRedisPusher } from '../redis/getRedisClient';\nimport {EJSON} from 'meteor/ejson';\nimport getFields from '../utils/getFields';\nimport {Events, RedisPipe} from '../constants';\nimport containsOperators from '../mongo/lib/containsOperators';\n\n/**\n * call(Mongo.Collection).insert(data)\n * @param channelOrCollection {Mongo.Collection|string}\n */\nexport default class SyntheticMutator {\n    /**\n     * @param channels\n     * @param data\n     */\n    static publish(channels, data) {\n        const client = getRedisPusher();\n\n        channels.forEach(channel => {\n            client.publish(channel, EJSON.stringify(data));\n        })\n    }\n\n    /**\n     * @param channels\n     * @param data\n     */\n    static insert(channels, data) {\n        channels = SyntheticMutator._extractChannels(channels);\n\n        if (!data._id) {\n            data._id = Random.id();\n        }\n\n        SyntheticMutator.publish(channels, {\n            [RedisPipe.EVENT]: Events.INSERT,\n            [RedisPipe.SYNTHETIC]: true,\n            [RedisPipe.DOC]: data\n        })\n    }\n\n    /**\n     * @param channels\n     * @param _id\n     * @param modifier\n     */\n    static update(channels, _id, modifier) {\n        channels = SyntheticMutator._extractChannels(channels);\n\n        if (!containsOperators(modifier)) {\n            throw new Meteor.Error('Synthetic update can only be done through MongoDB operators.');\n        }\n\n        const { topLevelFields } = getFields(modifier);\n\n        let message = {\n            [RedisPipe.EVENT]: Events.UPDATE,\n            [RedisPipe.SYNTHETIC]: true,\n            [RedisPipe.DOC]: { _id },\n            [RedisPipe.MODIFIER]: modifier,\n            [RedisPipe.MODIFIED_TOP_LEVEL_FIELDS]: topLevelFields\n        };\n\n        SyntheticMutator.publish(channels, message);\n    }\n\n    /**\n     * @param channels\n     * @param _id\n     */\n    static remove(channels, _id) {\n        channels = SyntheticMutator._extractChannels(channels);\n\n        SyntheticMutator.publish(channels, {\n            [RedisPipe.EVENT]: Events.REMOVE,\n            [RedisPipe.SYNTHETIC]: true,\n            [RedisPipe.DOC]: {_id}\n        });\n    }\n\n    /**\n     * @param channels\n     * @param _id\n     * @returns {*}\n     * @private\n     */\n    static _extractChannels(channels, _id) {\n        if (!_.isArray(channels)) {\n            if (channels instanceof Mongo.Collection) {\n                const name = channels._name;\n                channels = [name];\n                if (_id) {\n                    channels.push(`${name}::${_id}`);\n                }\n            }\n\n            channels = [channels];\n        }\n\n        return channels;\n    }\n}"]},"sourceType":"script","hash":"61d5b1116484e9e720231e4bde4ef3fb1779ba75"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/LenderRulesPdfPage/lenderRulesArrays.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/LenderRulesPdfPage/lenderRulesArrays.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/LenderRulesPdfPage/lenderRulesArrays.jsx","inputSourceMap":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/LenderRulesPdfPage/lenderRulesArrays.jsx"],"names":["React","SimpleSchema","T","Percent","incomeConsideration","theoreticalExpenses","cutOffCriteria","classes","ROW_TYPES","RULE_TYPES","SELECT","PERCENT","NUMBER","getRuleArray","schemaPart","Object","keys","map","ruleName","rule","type","Number","id","String","Array","Integer","makeMapRule","loan","calculator","uniforms","includes","ruleOrigin","getOriginOfRule","mappedRule","label","detail","name","value","isArray","v","index","intlId","formatRuleIntoRow","REGULAR","getTableRows","filter","x","getExpenseRules","getTheoreticalExpenseRules","getCutOffCriteriaRules"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SimpleSchema from 'simpl-schema';\n\nimport T, { Percent } from '../../../../../../components/Translation';\nimport {\n  incomeConsideration,\n  theoreticalExpenses,\n  cutOffCriteria,\n} from '../../../../../lenderRules/schemas/lenderRulesSchema';\nimport { classes, ROW_TYPES } from '../../PdfTable/PdfTable';\n\nconst RULE_TYPES = {\n  SELECT: 'SELECT',\n  PERCENT: 'PERCENT',\n  NUMBER: 'NUMBER',\n};\n\nconst getRuleArray = schemaPart =>\n  Object.keys(schemaPart).map((ruleName) => {\n    const rule = schemaPart[ruleName];\n\n    switch (rule.type) {\n    case Number:\n      return { ...rule, id: ruleName, type: RULE_TYPES.PERCENT };\n    case String:\n      return { ...rule, id: ruleName, type: RULE_TYPES.SELECT };\n    case Array:\n      return { ...rule, id: ruleName, type: RULE_TYPES.SELECT };\n    case SimpleSchema.Integer:\n      return { ...rule, id: ruleName, type: RULE_TYPES.NUMBER };\n    default:\n      return null;\n    }\n  });\n\nconst makeMapRule = ({ loan, calculator }) => ({ id, type, uniforms }) => {\n  if (id.includes('$')) {\n    return null;\n  }\n\n  const ruleOrigin = calculator.getOriginOfRule(id);\n\n  const mappedRule = {\n    label: <T id={`Forms.${id}`} />,\n    detail: ruleOrigin && ruleOrigin.name,\n  };\n  switch (type) {\n  case RULE_TYPES.SELECT:\n    return {\n      ...mappedRule,\n      value: Array.isArray(calculator[id]) ? (\n        calculator[id].map((v, index) => [\n          index !== 0 && <span>,&nbsp;</span>,\n          <T\n            id={`Forms.${(uniforms && uniforms.intlId) || id}.${v}`}\n            key={index}\n          />,\n        ])\n      ) : (\n        <T id={`Forms.${id}.${calculator[id]}`} />\n      ),\n    };\n  case RULE_TYPES.PERCENT:\n    return {\n      ...mappedRule,\n      value: <Percent value={calculator[id]} />,\n    };\n  case RULE_TYPES.NUMBER:\n    return { ...mappedRule, value: calculator[id] };\n  default:\n    return null;\n  }\n};\n\nconst formatRuleIntoRow = ({ label, value, detail }, index) => (\n  <tr key={index} className={classes[ROW_TYPES.REGULAR]}>\n    <td>{label}</td>\n    <td>{value}</td>\n    <td>{detail}</td>\n  </tr>\n);\n\nconst getTableRows = ({ loan, calculator, schemaPart }) =>\n  getRuleArray(schemaPart)\n    .filter(x => x)\n    .map(makeMapRule({ loan, calculator }))\n    .filter(x => x)\n    .map(formatRuleIntoRow);\n\nexport const getExpenseRules = ({ loan, calculator }) =>\n  getTableRows({ loan, calculator, schemaPart: incomeConsideration });\n\nexport const getTheoreticalExpenseRules = ({ loan, calculator }) =>\n  getTableRows({ loan, calculator, schemaPart: theoreticalExpenses });\n\nexport const getCutOffCriteriaRules = ({ loan, calculator }) =>\n  getTableRows({ loan, calculator, schemaPart: cutOffCriteria });\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/LenderRulesPdfPage/lenderRulesArrays.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/LenderRulesPdfPage/lenderRulesArrays.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  getExpenseRules: () => getExpenseRules,\n  getTheoreticalExpenseRules: () => getTheoreticalExpenseRules,\n  getCutOffCriteriaRules: () => getCutOffCriteriaRules\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet T, Percent;\nmodule.link(\"../../../../../../components/Translation\", {\n  default(v) {\n    T = v;\n  },\n\n  Percent(v) {\n    Percent = v;\n  }\n\n}, 2);\nlet incomeConsideration, theoreticalExpenses, cutOffCriteria;\nmodule.link(\"../../../../../lenderRules/schemas/lenderRulesSchema\", {\n  incomeConsideration(v) {\n    incomeConsideration = v;\n  },\n\n  theoreticalExpenses(v) {\n    theoreticalExpenses = v;\n  },\n\n  cutOffCriteria(v) {\n    cutOffCriteria = v;\n  }\n\n}, 3);\nlet classes, ROW_TYPES;\nmodule.link(\"../../PdfTable/PdfTable\", {\n  classes(v) {\n    classes = v;\n  },\n\n  ROW_TYPES(v) {\n    ROW_TYPES = v;\n  }\n\n}, 4);\nconst RULE_TYPES = {\n  SELECT: 'SELECT',\n  PERCENT: 'PERCENT',\n  NUMBER: 'NUMBER'\n};\n\nconst getRuleArray = schemaPart => Object.keys(schemaPart).map(ruleName => {\n  const rule = schemaPart[ruleName];\n\n  switch (rule.type) {\n    case Number:\n      return (0, _objectSpread2.default)({}, rule, {\n        id: ruleName,\n        type: RULE_TYPES.PERCENT\n      });\n\n    case String:\n      return (0, _objectSpread2.default)({}, rule, {\n        id: ruleName,\n        type: RULE_TYPES.SELECT\n      });\n\n    case Array:\n      return (0, _objectSpread2.default)({}, rule, {\n        id: ruleName,\n        type: RULE_TYPES.SELECT\n      });\n\n    case SimpleSchema.Integer:\n      return (0, _objectSpread2.default)({}, rule, {\n        id: ruleName,\n        type: RULE_TYPES.NUMBER\n      });\n\n    default:\n      return null;\n  }\n});\n\nconst makeMapRule = ({\n  loan,\n  calculator\n}) => ({\n  id,\n  type,\n  uniforms\n}) => {\n  if (id.includes('$')) {\n    return null;\n  }\n\n  const ruleOrigin = calculator.getOriginOfRule(id);\n  const mappedRule = {\n    label: React.createElement(T, {\n      id: `Forms.${id}`\n    }),\n    detail: ruleOrigin && ruleOrigin.name\n  };\n\n  switch (type) {\n    case RULE_TYPES.SELECT:\n      return (0, _objectSpread2.default)({}, mappedRule, {\n        value: Array.isArray(calculator[id]) ? calculator[id].map((v, index) => [index !== 0 && React.createElement(\"span\", null, \",\\xA0\"), React.createElement(T, {\n          id: `Forms.${uniforms && uniforms.intlId || id}.${v}`,\n          key: index\n        })]) : React.createElement(T, {\n          id: `Forms.${id}.${calculator[id]}`\n        })\n      });\n\n    case RULE_TYPES.PERCENT:\n      return (0, _objectSpread2.default)({}, mappedRule, {\n        value: React.createElement(Percent, {\n          value: calculator[id]\n        })\n      });\n\n    case RULE_TYPES.NUMBER:\n      return (0, _objectSpread2.default)({}, mappedRule, {\n        value: calculator[id]\n      });\n\n    default:\n      return null;\n  }\n};\n\nconst formatRuleIntoRow = ({\n  label,\n  value,\n  detail\n}, index) => React.createElement(\"tr\", {\n  key: index,\n  className: classes[ROW_TYPES.REGULAR]\n}, React.createElement(\"td\", null, label), React.createElement(\"td\", null, value), React.createElement(\"td\", null, detail));\n\nconst getTableRows = ({\n  loan,\n  calculator,\n  schemaPart\n}) => getRuleArray(schemaPart).filter(x => x).map(makeMapRule({\n  loan,\n  calculator\n})).filter(x => x).map(formatRuleIntoRow);\n\nconst getExpenseRules = ({\n  loan,\n  calculator\n}) => getTableRows({\n  loan,\n  calculator,\n  schemaPart: incomeConsideration\n});\n\nconst getTheoreticalExpenseRules = ({\n  loan,\n  calculator\n}) => getTableRows({\n  loan,\n  calculator,\n  schemaPart: theoreticalExpenses\n});\n\nconst getCutOffCriteriaRules = ({\n  loan,\n  calculator\n}) => getTableRows({\n  loan,\n  calculator,\n  schemaPart: cutOffCriteria\n});","map":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/LenderRulesPdfPage/lenderRulesArrays.jsx"],"names":["RULE_TYPES","SELECT","PERCENT","NUMBER","getRuleArray","schemaPart","ruleName","rule","id","type","SimpleSchema","makeMapRule","calculator","uniforms","ruleOrigin","mappedRule","label","detail","name","value","Array","index","v","formatRuleIntoRow","classes","ROW_TYPES","getTableRows","x","getExpenseRules","incomeConsideration","getTheoreticalExpenseRules","theoreticalExpenses","getCutOffCriteriaRules","cutOffCriteria"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SimpleSchema from 'simpl-schema';\n\nimport T, { Percent } from '../../../../../../components/Translation';\nimport {\n  incomeConsideration,\n  theoreticalExpenses,\n  cutOffCriteria,\n} from '../../../../../lenderRules/schemas/lenderRulesSchema';\nimport { classes, ROW_TYPES } from '../../PdfTable/PdfTable';\n\nconst RULE_TYPES = {\n  SELECT: 'SELECT',\n  PERCENT: 'PERCENT',\n  NUMBER: 'NUMBER',\n};\n\nconst getRuleArray = schemaPart =>\n  Object.keys(schemaPart).map((ruleName) => {\n    const rule = schemaPart[ruleName];\n\n    switch (rule.type) {\n    case Number:\n      return { ...rule, id: ruleName, type: RULE_TYPES.PERCENT };\n    case String:\n      return { ...rule, id: ruleName, type: RULE_TYPES.SELECT };\n    case Array:\n      return { ...rule, id: ruleName, type: RULE_TYPES.SELECT };\n    case SimpleSchema.Integer:\n      return { ...rule, id: ruleName, type: RULE_TYPES.NUMBER };\n    default:\n      return null;\n    }\n  });\n\nconst makeMapRule = ({ loan, calculator }) => ({ id, type, uniforms }) => {\n  if (id.includes('$')) {\n    return null;\n  }\n\n  const ruleOrigin = calculator.getOriginOfRule(id);\n\n  const mappedRule = {\n    label: <T id={`Forms.${id}`} />,\n    detail: ruleOrigin && ruleOrigin.name,\n  };\n  switch (type) {\n  case RULE_TYPES.SELECT:\n    return {\n      ...mappedRule,\n      value: Array.isArray(calculator[id]) ? (\n        calculator[id].map((v, index) => [\n          index !== 0 && <span>,&nbsp;</span>,\n          <T\n            id={`Forms.${(uniforms && uniforms.intlId) || id}.${v}`}\n            key={index}\n          />,\n        ])\n      ) : (\n        <T id={`Forms.${id}.${calculator[id]}`} />\n      ),\n    };\n  case RULE_TYPES.PERCENT:\n    return {\n      ...mappedRule,\n      value: <Percent value={calculator[id]} />,\n    };\n  case RULE_TYPES.NUMBER:\n    return { ...mappedRule, value: calculator[id] };\n  default:\n    return null;\n  }\n};\n\nconst formatRuleIntoRow = ({ label, value, detail }, index) => (\n  <tr key={index} className={classes[ROW_TYPES.REGULAR]}>\n    <td>{label}</td>\n    <td>{value}</td>\n    <td>{detail}</td>\n  </tr>\n);\n\nconst getTableRows = ({ loan, calculator, schemaPart }) =>\n  getRuleArray(schemaPart)\n    .filter(x => x)\n    .map(makeMapRule({ loan, calculator }))\n    .filter(x => x)\n    .map(formatRuleIntoRow);\n\nexport const getExpenseRules = ({ loan, calculator }) =>\n  getTableRows({ loan, calculator, schemaPart: incomeConsideration });\n\nexport const getTheoreticalExpenseRules = ({ loan, calculator }) =>\n  getTableRows({ loan, calculator, schemaPart: theoreticalExpenses });\n\nexport const getCutOffCriteriaRules = ({ loan, calculator }) =>\n  getTableRows({ loan, calculator, schemaPart: cutOffCriteria });\n"]},"sourceType":"script","hash":"b2fb1ec4b3b5e0fd24ae548cbbc6b0a23d6bb4ed"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/epotek:accounts-ui/imports/ui/components/LoginForm.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/epotek:accounts-ui/imports/ui/components/LoginForm.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/epotek:accounts-ui/imports/ui/components/LoginForm.jsx","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/epotek:accounts-ui/imports/ui/components/LoginForm.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/epotek:accounts-ui/imports/ui/components/LoginForm.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet React, Component;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n\n  Component(v) {\n    Component = v;\n  }\n\n}, 0);\nlet PropTypes;\nmodule.link(\"prop-types\", {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 1);\nlet ReactDOM;\nmodule.link(\"react-dom\", {\n  default(v) {\n    ReactDOM = v;\n  }\n\n}, 2);\nlet withTracker;\nmodule.link(\"meteor/react-meteor-data\", {\n  withTracker(v) {\n    withTracker = v;\n  }\n\n}, 3);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 4);\nlet T9n;\nmodule.link(\"meteor-accounts-t9n\", {\n  T9n(v) {\n    T9n = v;\n  }\n\n}, 5);\nlet KEY_PREFIX;\nmodule.link(\"../../login_session.js\", {\n  KEY_PREFIX(v) {\n    KEY_PREFIX = v;\n  }\n\n}, 6);\nmodule.link(\"./Form.jsx\");\nlet STATES, passwordSignupFields, validateEmail, validatePassword, validateUsername, loginResultCallback, getLoginServices, hasPasswordService, capitalize;\nmodule.link(\"../../helpers.js\", {\n  STATES(v) {\n    STATES = v;\n  },\n\n  passwordSignupFields(v) {\n    passwordSignupFields = v;\n  },\n\n  validateEmail(v) {\n    validateEmail = v;\n  },\n\n  validatePassword(v) {\n    validatePassword = v;\n  },\n\n  validateUsername(v) {\n    validateUsername = v;\n  },\n\n  loginResultCallback(v) {\n    loginResultCallback = v;\n  },\n\n  getLoginServices(v) {\n    getLoginServices = v;\n  },\n\n  hasPasswordService(v) {\n    hasPasswordService = v;\n  },\n\n  capitalize(v) {\n    capitalize = v;\n  }\n\n}, 7);\n\nfunction indexBy(array, key) {\n  const result = {};\n  array.forEach(function (obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      formState,\n      loginPath,\n      signUpPath,\n      resetPasswordPath,\n      profilePath,\n      changePasswordPath\n    } = props;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn('Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.');\n    } // Set inital state.\n\n\n    this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState ? formState : Accounts.user() ? STATES.PROFILE : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook: props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook: props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook: props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook: props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook\n    };\n    this.translate = this.translate.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      waiting: false,\n      ready: true\n    }));\n    let changeState = Session.get(KEY_PREFIX + 'state');\n\n    switch (changeState) {\n      case 'enrollAccountToken':\n        this.setState(prevState => ({\n          formState: STATES.ENROLL_ACCOUNT\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'resetPasswordToken':\n        this.setState(prevState => ({\n          formState: STATES.PASSWORD_CHANGE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'justVerifiedEmail':\n        this.setState(prevState => ({\n          formState: STATES.PROFILE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n    } // Add default field values once the form did mount on the client\n\n\n    this.setState(prevState => (0, _objectSpread2.default)({}, this.getDefaultFieldValues()));\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\n      this.setState((0, _objectSpread2.default)({\n        formState: nextProps.formState\n      }, this.getDefaultFieldValues()));\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.user !== !this.props.user) {\n      this.setState({\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n      });\n    }\n  }\n\n  translate(text) {\n    // if (this.props.t) {\n    //   return this.props.t(text);\n    // }\n    return T9n.get(text);\n  }\n\n  validateField(field, value) {\n    const {\n      formState\n    } = this.state;\n\n    switch (field) {\n      case 'email':\n        return validateEmail(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n      case 'password':\n        return validatePassword(value, this.showMessage.bind(this), this.clearMessage.bind(this));\n\n      case 'username':\n        return validateUsername(value, this.showMessage.bind(this), this.clearMessage.bind(this), formState);\n    }\n  }\n\n  getUsernameOrEmailField() {\n    return {\n      id: 'usernameOrEmail',\n      hint: this.translate('enterUsernameOrEmail'),\n      label: this.translate('usernameOrEmail'),\n      required: true,\n      defaultValue: this.state.username || '',\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n      message: this.getMessageForField('usernameOrEmail')\n    };\n  }\n\n  getUsernameField() {\n    return {\n      id: 'username',\n      hint: this.translate('enterUsername'),\n      label: this.translate('username'),\n      required: true,\n      defaultValue: this.state.username || '',\n      onChange: this.handleChange.bind(this, 'username'),\n      message: this.getMessageForField('username')\n    };\n  }\n\n  getEmailField() {\n    return {\n      id: 'email',\n      hint: this.translate('enterEmail'),\n      label: this.translate('email'),\n      type: 'email',\n      required: true,\n      defaultValue: this.state.email || '',\n      onChange: this.handleChange.bind(this, 'email'),\n      message: this.getMessageForField('email')\n    };\n  }\n\n  getPasswordField() {\n    return {\n      id: 'password',\n      hint: this.translate('enterPassword'),\n      label: this.translate('password'),\n      type: 'password',\n      required: true,\n      defaultValue: this.state.password || '',\n      onChange: this.handleChange.bind(this, 'password'),\n      message: this.getMessageForField('password')\n    };\n  }\n\n  getSetPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterPassword'),\n      label: this.translate('choosePassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword')\n    };\n  }\n\n  getNewPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterNewPassword'),\n      label: this.translate('newPassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword'),\n      message: this.getMessageForField('newPassword')\n    };\n  }\n\n  handleChange(field, evt) {\n    let value = evt.target.value;\n\n    switch (field) {\n      case 'password':\n        break;\n\n      default:\n        value = value.trim();\n        break;\n    }\n\n    this.setState({\n      [field]: value\n    });\n    this.setDefaultFieldValues({\n      [field]: value\n    });\n  }\n\n  fields() {\n    const loginFields = [];\n    const {\n      formState\n    } = this.state;\n\n    if (!hasPasswordService() && getLoginServices().length == 0) {\n      loginFields.push({\n        label: 'No login service added, i.e. accounts-password',\n        type: 'notice'\n      });\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\n      if (['USERNAME_AND_EMAIL', 'USERNAME_AND_OPTIONAL_EMAIL', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameOrEmailField());\n      }\n\n      if (passwordSignupFields() === 'USERNAME_ONLY') {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if (['EMAIL_ONLY', 'EMAIL_ONLY_NO_PASSWORD'].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (!['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\n      if (['USERNAME_AND_EMAIL', 'USERNAME_AND_OPTIONAL_EMAIL', 'USERNAME_ONLY', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if (['USERNAME_AND_EMAIL', 'EMAIL_ONLY', 'EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (['USERNAME_AND_OPTIONAL_EMAIL'].includes(passwordSignupFields())) {\n        loginFields.push(Object.assign(this.getEmailField(), {\n          required: false\n        }));\n      }\n\n      if (!['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginFields.push(this.getEmailField());\n    }\n\n    if (this.showPasswordChangeForm()) {\n      if (Meteor.isClient && !Accounts._loginButtonsSession.get('resetPasswordToken')) {\n        loginFields.push(this.getPasswordField());\n      }\n\n      loginFields.push(this.getNewPasswordField());\n    }\n\n    if (this.showEnrollAccountForm()) {\n      loginFields.push(this.getSetPasswordField());\n    }\n\n    return indexBy(loginFields, 'id');\n  }\n\n  buttons() {\n    const {\n      loginPath = Accounts.ui._options.loginPath,\n      signUpPath = Accounts.ui._options.signUpPath,\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\n      profilePath = Accounts.ui._options.profilePath\n    } = this.props;\n    const {\n      user\n    } = this.props;\n    const {\n      formState,\n      waiting\n    } = this.state;\n    let loginButtons = [];\n\n    if (user && formState == STATES.PROFILE) {\n      loginButtons.push({\n        id: 'signOut',\n        label: this.translate('signOut'),\n        disabled: waiting,\n        onClick: this.signOut.bind(this)\n      });\n    }\n\n    if (this.showCreateAccountLink()) {\n      loginButtons.push({\n        id: 'switchToSignUp',\n        label: this.translate('signUp'),\n        type: 'link',\n        href: signUpPath,\n        onClick: this.switchToSignUp.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'switchToSignIn',\n        label: this.translate('signIn'),\n        type: 'link',\n        href: loginPath,\n        onClick: this.switchToSignIn.bind(this)\n      });\n    }\n\n    if (this.showForgotPasswordLink()) {\n      loginButtons.push({\n        id: 'switchToPasswordReset',\n        label: this.translate('forgotPassword'),\n        type: 'link',\n        href: resetPasswordPath,\n        onClick: this.switchToPasswordReset.bind(this)\n      });\n    }\n\n    if (user && !['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields()) && formState == STATES.PROFILE && user.services && 'password' in user.services) {\n      loginButtons.push({\n        id: 'switchToChangePassword',\n        label: this.translate('changePassword'),\n        type: 'link',\n        href: changePasswordPath,\n        onClick: this.switchToChangePassword.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP) {\n      loginButtons.push({\n        id: 'signUp',\n        label: this.translate('signUp'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n      });\n    }\n\n    if (this.showSignInLink()) {\n      loginButtons.push({\n        id: 'signIn',\n        label: this.translate('signIn'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\n      });\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'emailResetLink',\n        label: this.translate('resetYourPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordReset.bind(this)\n      });\n    }\n\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n      loginButtons.push({\n        id: 'changePassword',\n        label: this.showPasswordChangeForm() ? this.translate('changePassword') : this.translate('setPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordChange.bind(this)\n      });\n\n      if (Accounts.user()) {\n        loginButtons.push({\n          id: 'switchToSignOut',\n          label: this.translate('cancel'),\n          type: 'link',\n          href: profilePath,\n          onClick: this.switchToSignOut.bind(this)\n        });\n      } else {\n        loginButtons.push({\n          id: 'cancelResetPassword',\n          label: this.translate('cancel'),\n          type: 'link',\n          onClick: this.cancelResetPassword.bind(this)\n        });\n      }\n    } // Sort the button array so that the submit button always comes first, and\n    // buttons should also come before links.\n\n\n    loginButtons.sort((a, b) => {\n      return (b.type == 'submit' && a.type != undefined) - (a.type == 'submit' && b.type != undefined);\n    });\n    return indexBy(loginButtons, 'id');\n  }\n\n  showSignInLink() {\n    return this.state.formState == STATES.SIGN_IN && Package['accounts-password'];\n  }\n\n  showPasswordChangeForm() {\n    return Package['accounts-password'] && this.state.formState == STATES.PASSWORD_CHANGE;\n  }\n\n  showEnrollAccountForm() {\n    return Package['accounts-password'] && this.state.formState == STATES.ENROLL_ACCOUNT;\n  }\n\n  showCreateAccountLink() {\n    return this.state.formState == STATES.SIGN_IN && !Accounts._options.forbidClientAccountCreation && Package['accounts-password'];\n  }\n\n  showForgotPasswordLink() {\n    return !this.props.user && this.state.formState == STATES.SIGN_IN && ['USERNAME_AND_EMAIL', 'USERNAME_AND_OPTIONAL_EMAIL', 'EMAIL_ONLY'].includes(passwordSignupFields());\n  }\n  /**\n   * Helper to store field values while using the form.\n   */\n\n\n  setDefaultFieldValues(defaults) {\n    if (typeof defaults !== 'object') {\n      throw new Error('Argument to setDefaultFieldValues is not of type object');\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.setItem('accounts_ui', JSON.stringify((0, _objectSpread2.default)({\n        passwordSignupFields: passwordSignupFields()\n      }, this.getDefaultFieldValues(), defaults)));\n    }\n  }\n  /**\n   * Helper to get field values when switching states in the form.\n   */\n\n\n  getDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      const defaultFieldValues = JSON.parse(localStorage.getItem('accounts_ui') || null);\n\n      if (defaultFieldValues && defaultFieldValues.passwordSignupFields === passwordSignupFields()) {\n        return defaultFieldValues;\n      }\n    }\n  }\n  /**\n   * Helper to clear field values when signing in, up or out.\n   */\n\n\n  clearDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.removeItem('accounts_ui');\n    }\n  }\n\n  switchToSignUp(event) {\n    event.preventDefault();\n    this.setState((0, _objectSpread2.default)({\n      formState: STATES.SIGN_UP\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToSignIn(event) {\n    event.preventDefault();\n    this.setState((0, _objectSpread2.default)({\n      formState: STATES.SIGN_IN\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToPasswordReset(event) {\n    event.preventDefault();\n    this.setState((0, _objectSpread2.default)({\n      formState: STATES.PASSWORD_RESET\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToChangePassword(event) {\n    event.preventDefault();\n    this.setState((0, _objectSpread2.default)({\n      formState: STATES.PASSWORD_CHANGE\n    }, this.getDefaultFieldValues()));\n    this.clearMessages();\n  }\n\n  switchToSignOut(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PROFILE\n    });\n    this.clearMessages();\n  }\n\n  cancelResetPassword(event) {\n    event.preventDefault();\n\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n    this.setState({\n      formState: STATES.SIGN_IN,\n      messages: []\n    });\n  }\n\n  signOut() {\n    Meteor.logout(() => {\n      this.setState({\n        formState: STATES.SIGN_IN,\n        password: null\n      });\n      this.state.onSignedOutHook();\n      this.clearMessages();\n      this.clearDefaultFieldValues();\n    });\n  }\n\n  signIn() {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    let loginSelector;\n    this.clearMessages();\n\n    if (usernameOrEmail !== null) {\n      if (!this.validateField('username', usernameOrEmail)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook('error.accounts.usernameRequired', this.state.formState);\n        }\n\n        error = true;\n      } else {\n        if (['USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          return;\n        } else {\n          loginSelector = usernameOrEmail;\n        }\n      }\n    } else if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook('error.accounts.usernameRequired', this.state.formState);\n        }\n\n        error = true;\n      } else {\n        loginSelector = {\n          username: username\n        };\n      }\n    } else if (usernameOrEmail == null) {\n      if (!this.validateField('email', email)) {\n        error = true;\n      } else {\n        if (['EMAIL_ONLY_NO_PASSWORD'].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          error = true;\n        } else {\n          loginSelector = {\n            email\n          };\n        }\n      }\n    }\n\n    if (!['EMAIL_ONLY_NO_PASSWORD'].includes(passwordSignupFields()) && !this.validateField('password', password)) {\n      error = true;\n    }\n\n    if (!error) {\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n        onSubmitHook(error, formState);\n\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || 'unknown_error', 'error');\n        } else {\n          loginResultCallback(() => this.state.onSignedInHook());\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  oauthButtons() {\n    const {\n      formState,\n      waiting\n    } = this.state;\n    let oauthButtons = [];\n\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP) {\n      if (Accounts.oauth) {\n        Accounts.oauth.serviceNames().map(service => {\n          oauthButtons.push({\n            id: service,\n            label: capitalize(service),\n            disabled: waiting,\n            type: 'button',\n            className: `btn-${service} ${service}`,\n            onClick: this.oauthSignIn.bind(this, service)\n          });\n        });\n      }\n    }\n\n    return indexBy(oauthButtons, 'id');\n  }\n\n  oauthSignIn(serviceName) {\n    const {\n      user\n    } = this.props;\n    const {\n      formState,\n      waiting,\n      onSubmitHook\n    } = this.state; //Thanks Josh Owens for this one.\n\n    function capitalService() {\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n    }\n\n    if (serviceName === 'meteor-developer') {\n      serviceName = 'meteorDeveloperAccount';\n    }\n\n    const loginWithService = Meteor['loginWith' + capitalService()];\n    let options = {}; // use default scope unless specified\n\n    if (Accounts.ui._options.requestPermissions[serviceName]) options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName]) options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName]) options.forceApprovalPrompt = Accounts.ui._options.forceApprovalPrompt[serviceName];\n    this.clearMessages();\n    const self = this;\n    loginWithService(options, error => {\n      onSubmitHook(error, formState);\n\n      if (error) {\n        this.showMessage(`error.accounts.${error.reason}` || 'unknown_error');\n      } else {\n        this.setState({\n          formState: STATES.PROFILE\n        });\n        this.clearDefaultFieldValues();\n        loginResultCallback(() => {\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\n        });\n      }\n    });\n  }\n\n  signUp(options = {}) {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    this.clearMessages();\n\n    if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook('error.accounts.usernameRequired', this.state.formState);\n        }\n\n        error = true;\n      } else {\n        options.username = username;\n      }\n    } else {\n      if (['USERNAME_AND_EMAIL', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields()) && !this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook('error.accounts.usernameRequired', this.state.formState);\n        }\n\n        error = true;\n      }\n    }\n\n    if (!this.validateField('email', email)) {\n      error = true;\n    } else {\n      options.email = email;\n    }\n\n    if (['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n      // Generate a random password.\n      options.password = Meteor.uuid();\n    } else if (!this.validateField('password', password)) {\n      onSubmitHook('Invalid password', formState);\n      error = true;\n    } else {\n      options.password = password;\n    }\n\n    const SignUp = function (_options) {\n      Accounts.createUser(_options, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || 'unknown_error', 'error');\n\n          if (this.translate(`error.accounts.${error.reason}`)) {\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\n          } else {\n            onSubmitHook('unknown_error', formState);\n          }\n        } else {\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null\n          });\n          let user = Accounts.user();\n          loginResultCallback(this.state.onPostSignUpHook.bind(this, _options, user));\n          this.clearDefaultFieldValues();\n        }\n\n        this.setState({\n          waiting: false\n        });\n      });\n    };\n\n    if (!error) {\n      this.setState({\n        waiting: true\n      }); // Allow for Promises to return.\n\n      let promise = this.state.onPreSignUpHook(options);\n\n      if (promise instanceof Promise) {\n        promise.then(SignUp.bind(this, options));\n      } else {\n        SignUp(options);\n      }\n    }\n  }\n\n  loginWithoutPassword() {\n    const {\n      email = '',\n      usernameOrEmail = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    if (this.validateField('email', email)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.loginWithoutPassword({\n        email: email\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || 'unknown_error', 'error');\n        } else {\n          this.showMessage(this.translate('info.emailSent'), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    } else if (this.validateField('username', usernameOrEmail)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.loginWithoutPassword({\n        email: usernameOrEmail,\n        username: usernameOrEmail\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || 'unknown_error', 'error');\n        } else {\n          this.showMessage(this.translate('info.emailSent'), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    } else {\n      let errMsg = null;\n\n      if (['USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n        errMsg = this.translate('error.accounts.invalid_email');\n      } else {\n        errMsg = this.translate('error.accounts.invalid_email');\n      }\n\n      this.showMessage(errMsg, 'warning');\n      onSubmitHook(errMsg, formState);\n    }\n  }\n\n  passwordReset() {\n    const {\n      email = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    this.clearMessages();\n\n    if (this.validateField('email', email)) {\n      this.setState({\n        waiting: true\n      });\n      Accounts.forgotPassword({\n        email: email\n      }, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || 'unknown_error', 'error');\n        } else {\n          this.showMessage(this.translate('info.emailSent'), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n\n        onSubmitHook(error, formState);\n        this.setState({\n          waiting: false\n        });\n      });\n    }\n  }\n\n  passwordChange() {\n    const {\n      password,\n      newPassword,\n      formState,\n      onSubmitHook,\n      onSignedInHook\n    } = this.state;\n\n    if (!this.validateField('password', newPassword)) {\n      onSubmitHook('err.minChar', formState);\n      return;\n    }\n\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\n\n    if (!token) {\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\n    }\n\n    if (token) {\n      Accounts.resetPassword(token, newPassword, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || 'unknown_error', 'error');\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage(this.translate('info.passwordChanged'), 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE\n          });\n\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\n\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\n\n          onSignedInHook();\n        }\n      });\n    } else {\n      Accounts.changePassword(password, newPassword, error => {\n        if (error) {\n          this.showMessage(`error.accounts.${error.reason}` || 'unknown_error', 'error');\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage('info.passwordChanged', 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({\n            formState: STATES.PROFILE\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  showMessage(message, type, clearTimeout, field) {\n    message = this.translate(message).trim();\n\n    if (message) {\n      this.setState(({\n        messages = []\n      }) => {\n        messages.push((0, _objectSpread2.default)({\n          message,\n          type\n        }, field && {\n          field\n        }));\n        return {\n          messages\n        };\n      });\n\n      if (clearTimeout) {\n        this.hideMessageTimout = setTimeout(() => {\n          // Filter out the message that timed out.\n          this.clearMessage(message);\n        }, clearTimeout);\n      }\n    }\n  }\n\n  getMessageForField(field) {\n    const {\n      messages = []\n    } = this.state;\n    return messages.find(({\n      field: key\n    }) => key === field);\n  }\n\n  clearMessage(message) {\n    if (message) {\n      this.setState(({\n        messages = []\n      }) => ({\n        messages: messages.filter(({\n          message: a\n        }) => a !== message)\n      }));\n    }\n  }\n\n  clearMessages() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n\n    this.setState({\n      messages: []\n    });\n  }\n\n  componentWillMount() {\n    // XXX Check for backwards compatibility.\n    if (Meteor.isClient) {\n      const container = document.createElement('div');\n      ReactDOM.render(React.createElement(Accounts.ui.Field, {\n        message: \"test\"\n      }), container);\n\n      if (container.getElementsByClassName('message').length == 0) {\n        // Found backwards compatibility issue with 1.3.x\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n  }\n\n  render() {\n    this.oauthButtons(); // Backwords compatibility with v1.2.x.\n\n    const {\n      messages = []\n    } = this.state;\n    const message = {\n      deprecated: true,\n      message: messages.map(({\n        message\n      }) => message).join(', ')\n    };\n    return React.createElement(Accounts.ui.Form, (0, _extends2.default)({\n      oauthServices: this.oauthButtons(),\n      fields: this.fields(),\n      buttons: this.buttons()\n    }, this.state, {\n      message: message,\n      translate: text => this.translate(text)\n    }));\n  }\n\n}\n\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null\n};\nAccounts.ui.LoginForm = LoginForm;\nconst LoginFormContainer = withTracker(() => {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return {\n    user: Accounts.user()\n  };\n})(LoginForm);\nAccounts.ui.LoginForm = LoginFormContainer;\nmodule.exportDefault(LoginFormContainer);","map":{"version":3,"sources":["packages/epotek:accounts-ui/imports/ui/components/LoginForm.jsx"],"names":["React","Component","module","link","default","v","PropTypes","ReactDOM","withTracker","Accounts","T9n","KEY_PREFIX","STATES","passwordSignupFields","validateEmail","validatePassword","validateUsername","loginResultCallback","getLoginServices","hasPasswordService","capitalize","indexBy","array","key","result","forEach","obj","LoginForm","constructor","props","formState","loginPath","signUpPath","resetPasswordPath","profilePath","changePasswordPath","SIGN_IN","Package","console","warn","state","messages","waiting","user","PROFILE","onSubmitHook","ui","_options","onSignedInHook","onSignedOutHook","onPreSignUpHook","onPostSignUpHook","translate","bind","componentDidMount","setState","prevState","ready","changeState","Session","get","ENROLL_ACCOUNT","set","PASSWORD_CHANGE","getDefaultFieldValues","componentWillReceiveProps","nextProps","nextContext","componentDidUpdate","prevProps","text","validateField","field","value","showMessage","clearMessage","getUsernameOrEmailField","id","hint","label","required","defaultValue","username","onChange","handleChange","message","getMessageForField","getUsernameField","getEmailField","type","email","getPasswordField","password","getSetPasswordField","getNewPasswordField","evt","target","trim","setDefaultFieldValues","fields","loginFields","length","push","includes","SIGN_UP","Object","assign","PASSWORD_RESET","showPasswordChangeForm","Meteor","isClient","_loginButtonsSession","showEnrollAccountForm","buttons","loginButtons","disabled","onClick","signOut","showCreateAccountLink","href","switchToSignUp","switchToSignIn","showForgotPasswordLink","switchToPasswordReset","services","switchToChangePassword","className","signUp","showSignInLink","signIn","passwordReset","passwordChange","switchToSignOut","cancelResetPassword","sort","a","b","undefined","forbidClientAccountCreation","defaults","Error","localStorage","setItem","JSON","stringify","defaultFieldValues","parse","getItem","clearDefaultFieldValues","removeItem","event","preventDefault","clearMessages","logout","usernameOrEmail","error","loginSelector","loginWithoutPassword","loginWithPassword","reason","oauthButtons","oauth","serviceNames","map","service","oauthSignIn","serviceName","capitalService","charAt","toUpperCase","slice","loginWithService","options","requestPermissions","requestOfflineToken","forceApprovalPrompt","self","setTimeout","uuid","SignUp","createUser","promise","Promise","then","errMsg","forgotPassword","newPassword","token","resetPassword","changePassword","clearTimeout","hideMessageTimout","find","filter","componentWillMount","container","document","createElement","render","getElementsByClassName","componentWillUnmount","deprecated","join","propTypes","symbol","string","defaultProps","LoginFormContainer","subscribe","exportDefault"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { withTracker } from 'meteor/react-meteor-data';\nimport { Accounts } from 'meteor/accounts-base';\nimport { T9n } from 'meteor-accounts-t9n';\nimport { KEY_PREFIX } from '../../login_session.js';\nimport './Form.jsx';\n\nimport {\n  STATES,\n  passwordSignupFields,\n  validateEmail,\n  validatePassword,\n  validateUsername,\n  loginResultCallback,\n  getLoginServices,\n  hasPasswordService,\n  capitalize\n} from '../../helpers.js';\n\nfunction indexBy(array, key) {\n  const result = {};\n  array.forEach(function(obj) {\n    result[obj[key]] = obj;\n  });\n  return result;\n}\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    let {\n      formState,\n      loginPath,\n      signUpPath,\n      resetPasswordPath,\n      profilePath,\n      changePasswordPath\n    } = props;\n\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\n      console.warn(\n        'Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.'\n      );\n    }\n\n    // Set inital state.\n    this.state = {\n      messages: [],\n      waiting: true,\n      formState: formState\n        ? formState\n        : Accounts.user()\n          ? STATES.PROFILE\n          : STATES.SIGN_IN,\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\n      onSignedInHook:\n        props.onSignedInHook || Accounts.ui._options.onSignedInHook,\n      onSignedOutHook:\n        props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\n      onPreSignUpHook:\n        props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\n      onPostSignUpHook:\n        props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook\n    };\n    this.translate = this.translate.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({ waiting: false, ready: true }));\n    let changeState = Session.get(KEY_PREFIX + 'state');\n    switch (changeState) {\n      case 'enrollAccountToken':\n        this.setState(prevState => ({\n          formState: STATES.ENROLL_ACCOUNT\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n      case 'resetPasswordToken':\n        this.setState(prevState => ({\n          formState: STATES.PASSWORD_CHANGE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n\n      case 'justVerifiedEmail':\n        this.setState(prevState => ({\n          formState: STATES.PROFILE\n        }));\n        Session.set(KEY_PREFIX + 'state', null);\n        break;\n    }\n\n    // Add default field values once the form did mount on the client\n    this.setState(prevState => ({\n      ...this.getDefaultFieldValues()\n    }));\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\n      this.setState({\n        formState: nextProps.formState,\n        ...this.getDefaultFieldValues()\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!prevProps.user !== !this.props.user) {\n      this.setState({\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\n      });\n    }\n  }\n\n  translate(text) {\n    // if (this.props.t) {\n    //   return this.props.t(text);\n    // }\n    return T9n.get(text);\n  }\n\n  validateField(field, value) {\n    const { formState } = this.state;\n    switch (field) {\n      case 'email':\n        return validateEmail(\n          value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this)\n        );\n      case 'password':\n        return validatePassword(\n          value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this)\n        );\n      case 'username':\n        return validateUsername(\n          value,\n          this.showMessage.bind(this),\n          this.clearMessage.bind(this),\n          formState\n        );\n    }\n  }\n\n  getUsernameOrEmailField() {\n    return {\n      id: 'usernameOrEmail',\n      hint: this.translate('enterUsernameOrEmail'),\n      label: this.translate('usernameOrEmail'),\n      required: true,\n      defaultValue: this.state.username || '',\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\n      message: this.getMessageForField('usernameOrEmail')\n    };\n  }\n\n  getUsernameField() {\n    return {\n      id: 'username',\n      hint: this.translate('enterUsername'),\n      label: this.translate('username'),\n      required: true,\n      defaultValue: this.state.username || '',\n      onChange: this.handleChange.bind(this, 'username'),\n      message: this.getMessageForField('username')\n    };\n  }\n\n  getEmailField() {\n    return {\n      id: 'email',\n      hint: this.translate('enterEmail'),\n      label: this.translate('email'),\n      type: 'email',\n      required: true,\n      defaultValue: this.state.email || '',\n      onChange: this.handleChange.bind(this, 'email'),\n      message: this.getMessageForField('email')\n    };\n  }\n\n  getPasswordField() {\n    return {\n      id: 'password',\n      hint: this.translate('enterPassword'),\n      label: this.translate('password'),\n      type: 'password',\n      required: true,\n      defaultValue: this.state.password || '',\n      onChange: this.handleChange.bind(this, 'password'),\n      message: this.getMessageForField('password')\n    };\n  }\n\n  getSetPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterPassword'),\n      label: this.translate('choosePassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword')\n    };\n  }\n\n  getNewPasswordField() {\n    return {\n      id: 'newPassword',\n      hint: this.translate('enterNewPassword'),\n      label: this.translate('newPassword'),\n      type: 'password',\n      required: true,\n      onChange: this.handleChange.bind(this, 'newPassword'),\n      message: this.getMessageForField('newPassword')\n    };\n  }\n\n  handleChange(field, evt) {\n    let value = evt.target.value;\n    switch (field) {\n      case 'password':\n        break;\n      default:\n        value = value.trim();\n        break;\n    }\n    this.setState({ [field]: value });\n    this.setDefaultFieldValues({ [field]: value });\n  }\n\n  fields() {\n    const loginFields = [];\n    const { formState } = this.state;\n\n    if (!hasPasswordService() && getLoginServices().length == 0) {\n      loginFields.push({\n        label: 'No login service added, i.e. accounts-password',\n        type: 'notice'\n      });\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\n      if (\n        [\n          'USERNAME_AND_EMAIL',\n          'USERNAME_AND_OPTIONAL_EMAIL',\n          'USERNAME_AND_EMAIL_NO_PASSWORD'\n        ].includes(passwordSignupFields())\n      ) {\n        loginFields.push(this.getUsernameOrEmailField());\n      }\n\n      if (passwordSignupFields() === 'USERNAME_ONLY') {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if (\n        ['EMAIL_ONLY', 'EMAIL_ONLY_NO_PASSWORD'].includes(\n          passwordSignupFields()\n        )\n      ) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (\n        !['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\n          passwordSignupFields()\n        )\n      ) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\n      if (\n        [\n          'USERNAME_AND_EMAIL',\n          'USERNAME_AND_OPTIONAL_EMAIL',\n          'USERNAME_ONLY',\n          'USERNAME_AND_EMAIL_NO_PASSWORD'\n        ].includes(passwordSignupFields())\n      ) {\n        loginFields.push(this.getUsernameField());\n      }\n\n      if (\n        [\n          'USERNAME_AND_EMAIL',\n          'EMAIL_ONLY',\n          'EMAIL_ONLY_NO_PASSWORD',\n          'USERNAME_AND_EMAIL_NO_PASSWORD'\n        ].includes(passwordSignupFields())\n      ) {\n        loginFields.push(this.getEmailField());\n      }\n\n      if (['USERNAME_AND_OPTIONAL_EMAIL'].includes(passwordSignupFields())) {\n        loginFields.push(\n          Object.assign(this.getEmailField(), { required: false })\n        );\n      }\n\n      if (\n        !['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\n          passwordSignupFields()\n        )\n      ) {\n        loginFields.push(this.getPasswordField());\n      }\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginFields.push(this.getEmailField());\n    }\n\n    if (this.showPasswordChangeForm()) {\n      if (\n        Meteor.isClient &&\n        !Accounts._loginButtonsSession.get('resetPasswordToken')\n      ) {\n        loginFields.push(this.getPasswordField());\n      }\n      loginFields.push(this.getNewPasswordField());\n    }\n\n    if (this.showEnrollAccountForm()) {\n      loginFields.push(this.getSetPasswordField());\n    }\n    return indexBy(loginFields, 'id');\n  }\n\n  buttons() {\n    const {\n      loginPath = Accounts.ui._options.loginPath,\n      signUpPath = Accounts.ui._options.signUpPath,\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\n      profilePath = Accounts.ui._options.profilePath\n    } = this.props;\n    const { user } = this.props;\n    const { formState, waiting } = this.state;\n    let loginButtons = [];\n\n    if (user && formState == STATES.PROFILE) {\n      loginButtons.push({\n        id: 'signOut',\n        label: this.translate('signOut'),\n        disabled: waiting,\n        onClick: this.signOut.bind(this)\n      });\n    }\n\n    if (this.showCreateAccountLink()) {\n      loginButtons.push({\n        id: 'switchToSignUp',\n        label: this.translate('signUp'),\n        type: 'link',\n        href: signUpPath,\n        onClick: this.switchToSignUp.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'switchToSignIn',\n        label: this.translate('signIn'),\n        type: 'link',\n        href: loginPath,\n        onClick: this.switchToSignIn.bind(this)\n      });\n    }\n\n    if (this.showForgotPasswordLink()) {\n      loginButtons.push({\n        id: 'switchToPasswordReset',\n        label: this.translate('forgotPassword'),\n        type: 'link',\n        href: resetPasswordPath,\n        onClick: this.switchToPasswordReset.bind(this)\n      });\n    }\n\n    if (\n      user &&\n      !['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\n        passwordSignupFields()\n      ) &&\n      formState == STATES.PROFILE &&\n      (user.services && 'password' in user.services)\n    ) {\n      loginButtons.push({\n        id: 'switchToChangePassword',\n        label: this.translate('changePassword'),\n        type: 'link',\n        href: changePasswordPath,\n        onClick: this.switchToChangePassword.bind(this)\n      });\n    }\n\n    if (formState == STATES.SIGN_UP) {\n      loginButtons.push({\n        id: 'signUp',\n        label: this.translate('signUp'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\n      });\n    }\n\n    if (this.showSignInLink()) {\n      loginButtons.push({\n        id: 'signIn',\n        label: this.translate('signIn'),\n        type: hasPasswordService() ? 'submit' : 'link',\n        className: 'active',\n        disabled: waiting,\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\n      });\n    }\n\n    if (formState == STATES.PASSWORD_RESET) {\n      loginButtons.push({\n        id: 'emailResetLink',\n        label: this.translate('resetYourPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordReset.bind(this)\n      });\n    }\n\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\n      loginButtons.push({\n        id: 'changePassword',\n        label: this.showPasswordChangeForm()\n          ? this.translate('changePassword')\n          : this.translate('setPassword'),\n        type: 'submit',\n        disabled: waiting,\n        onClick: this.passwordChange.bind(this)\n      });\n\n      if (Accounts.user()) {\n        loginButtons.push({\n          id: 'switchToSignOut',\n          label: this.translate('cancel'),\n          type: 'link',\n          href: profilePath,\n          onClick: this.switchToSignOut.bind(this)\n        });\n      } else {\n        loginButtons.push({\n          id: 'cancelResetPassword',\n          label: this.translate('cancel'),\n          type: 'link',\n          onClick: this.cancelResetPassword.bind(this)\n        });\n      }\n    }\n\n    // Sort the button array so that the submit button always comes first, and\n    // buttons should also come before links.\n    loginButtons.sort((a, b) => {\n      return (\n        (b.type == 'submit' && a.type != undefined) -\n        (a.type == 'submit' && b.type != undefined)\n      );\n    });\n\n    return indexBy(loginButtons, 'id');\n  }\n\n  showSignInLink() {\n    return (\n      this.state.formState == STATES.SIGN_IN && Package['accounts-password']\n    );\n  }\n\n  showPasswordChangeForm() {\n    return (\n      Package['accounts-password'] &&\n      this.state.formState == STATES.PASSWORD_CHANGE\n    );\n  }\n\n  showEnrollAccountForm() {\n    return (\n      Package['accounts-password'] &&\n      this.state.formState == STATES.ENROLL_ACCOUNT\n    );\n  }\n\n  showCreateAccountLink() {\n    return (\n      this.state.formState == STATES.SIGN_IN &&\n      !Accounts._options.forbidClientAccountCreation &&\n      Package['accounts-password']\n    );\n  }\n\n  showForgotPasswordLink() {\n    return (\n      !this.props.user &&\n      this.state.formState == STATES.SIGN_IN &&\n      [\n        'USERNAME_AND_EMAIL',\n        'USERNAME_AND_OPTIONAL_EMAIL',\n        'EMAIL_ONLY'\n      ].includes(passwordSignupFields())\n    );\n  }\n\n  /**\n   * Helper to store field values while using the form.\n   */\n  setDefaultFieldValues(defaults) {\n    if (typeof defaults !== 'object') {\n      throw new Error(\n        'Argument to setDefaultFieldValues is not of type object'\n      );\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.setItem(\n        'accounts_ui',\n        JSON.stringify({\n          passwordSignupFields: passwordSignupFields(),\n          ...this.getDefaultFieldValues(),\n          ...defaults\n        })\n      );\n    }\n  }\n\n  /**\n   * Helper to get field values when switching states in the form.\n   */\n  getDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      const defaultFieldValues = JSON.parse(\n        localStorage.getItem('accounts_ui') || null\n      );\n      if (\n        defaultFieldValues &&\n        defaultFieldValues.passwordSignupFields === passwordSignupFields()\n      ) {\n        return defaultFieldValues;\n      }\n    }\n  }\n\n  /**\n   * Helper to clear field values when signing in, up or out.\n   */\n  clearDefaultFieldValues() {\n    if (typeof localStorage !== 'undefined' && localStorage) {\n      localStorage.removeItem('accounts_ui');\n    }\n  }\n\n  switchToSignUp(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_UP,\n      ...this.getDefaultFieldValues()\n    });\n    this.clearMessages();\n  }\n\n  switchToSignIn(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.SIGN_IN,\n      ...this.getDefaultFieldValues()\n    });\n    this.clearMessages();\n  }\n\n  switchToPasswordReset(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_RESET,\n      ...this.getDefaultFieldValues()\n    });\n    this.clearMessages();\n  }\n\n  switchToChangePassword(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PASSWORD_CHANGE,\n      ...this.getDefaultFieldValues()\n    });\n    this.clearMessages();\n  }\n\n  switchToSignOut(event) {\n    event.preventDefault();\n    this.setState({\n      formState: STATES.PROFILE\n    });\n    this.clearMessages();\n  }\n\n  cancelResetPassword(event) {\n    event.preventDefault();\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\n    this.setState({\n      formState: STATES.SIGN_IN,\n      messages: []\n    });\n  }\n\n  signOut() {\n    Meteor.logout(() => {\n      this.setState({\n        formState: STATES.SIGN_IN,\n        password: null\n      });\n      this.state.onSignedOutHook();\n      this.clearMessages();\n      this.clearDefaultFieldValues();\n    });\n  }\n\n  signIn() {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    let loginSelector;\n    this.clearMessages();\n\n    if (usernameOrEmail !== null) {\n      if (!this.validateField('username', usernameOrEmail)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\n            'error.accounts.usernameRequired',\n            this.state.formState\n          );\n        }\n        error = true;\n      } else {\n        if (\n          ['USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())\n        ) {\n          this.loginWithoutPassword();\n          return;\n        } else {\n          loginSelector = usernameOrEmail;\n        }\n      }\n    } else if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\n            'error.accounts.usernameRequired',\n            this.state.formState\n          );\n        }\n        error = true;\n      } else {\n        loginSelector = { username: username };\n      }\n    } else if (usernameOrEmail == null) {\n      if (!this.validateField('email', email)) {\n        error = true;\n      } else {\n        if (['EMAIL_ONLY_NO_PASSWORD'].includes(passwordSignupFields())) {\n          this.loginWithoutPassword();\n          error = true;\n        } else {\n          loginSelector = { email };\n        }\n      }\n    }\n    if (\n      !['EMAIL_ONLY_NO_PASSWORD'].includes(passwordSignupFields()) &&\n      !this.validateField('password', password)\n    ) {\n      error = true;\n    }\n\n    if (!error) {\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\n        onSubmitHook(error, formState);\n        if (error) {\n          this.showMessage(\n            `error.accounts.${error.reason}` || 'unknown_error',\n            'error'\n          );\n        } else {\n          loginResultCallback(() => this.state.onSignedInHook());\n          this.setState({\n            formState: STATES.PROFILE,\n            password: null\n          });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  oauthButtons() {\n    const { formState, waiting } = this.state;\n    let oauthButtons = [];\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP) {\n      if (Accounts.oauth) {\n        Accounts.oauth.serviceNames().map(service => {\n          oauthButtons.push({\n            id: service,\n            label: capitalize(service),\n            disabled: waiting,\n            type: 'button',\n            className: `btn-${service} ${service}`,\n            onClick: this.oauthSignIn.bind(this, service)\n          });\n        });\n      }\n    }\n    return indexBy(oauthButtons, 'id');\n  }\n\n  oauthSignIn(serviceName) {\n    const { user } = this.props;\n    const { formState, waiting, onSubmitHook } = this.state;\n    //Thanks Josh Owens for this one.\n    function capitalService() {\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\n    }\n\n    if (serviceName === 'meteor-developer') {\n      serviceName = 'meteorDeveloperAccount';\n    }\n\n    const loginWithService = Meteor['loginWith' + capitalService()];\n\n    let options = {}; // use default scope unless specified\n    if (Accounts.ui._options.requestPermissions[serviceName])\n      options.requestPermissions =\n        Accounts.ui._options.requestPermissions[serviceName];\n    if (Accounts.ui._options.requestOfflineToken[serviceName])\n      options.requestOfflineToken =\n        Accounts.ui._options.requestOfflineToken[serviceName];\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName])\n      options.forceApprovalPrompt =\n        Accounts.ui._options.forceApprovalPrompt[serviceName];\n\n    this.clearMessages();\n    const self = this;\n    loginWithService(options, error => {\n      onSubmitHook(error, formState);\n      if (error) {\n        this.showMessage(`error.accounts.${error.reason}` || 'unknown_error');\n      } else {\n        this.setState({ formState: STATES.PROFILE });\n        this.clearDefaultFieldValues();\n        loginResultCallback(() => {\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\n        });\n      }\n    });\n  }\n\n  signUp(options = {}) {\n    const {\n      username = null,\n      email = null,\n      usernameOrEmail = null,\n      password,\n      formState,\n      onSubmitHook\n    } = this.state;\n    let error = false;\n    this.clearMessages();\n\n    if (username !== null) {\n      if (!this.validateField('username', username)) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\n            'error.accounts.usernameRequired',\n            this.state.formState\n          );\n        }\n        error = true;\n      } else {\n        options.username = username;\n      }\n    } else {\n      if (\n        ['USERNAME_AND_EMAIL', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\n          passwordSignupFields()\n        ) &&\n        !this.validateField('username', username)\n      ) {\n        if (this.state.formState == STATES.SIGN_UP) {\n          this.state.onSubmitHook(\n            'error.accounts.usernameRequired',\n            this.state.formState\n          );\n        }\n        error = true;\n      }\n    }\n\n    if (!this.validateField('email', email)) {\n      error = true;\n    } else {\n      options.email = email;\n    }\n\n    if (\n      ['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\n        passwordSignupFields()\n      )\n    ) {\n      // Generate a random password.\n      options.password = Meteor.uuid();\n    } else if (!this.validateField('password', password)) {\n      onSubmitHook('Invalid password', formState);\n      error = true;\n    } else {\n      options.password = password;\n    }\n\n    const SignUp = function(_options) {\n      Accounts.createUser(_options, error => {\n        if (error) {\n          this.showMessage(\n            `error.accounts.${error.reason}` || 'unknown_error',\n            'error'\n          );\n          if (this.translate(`error.accounts.${error.reason}`)) {\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\n          } else {\n            onSubmitHook('unknown_error', formState);\n          }\n        } else {\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE, password: null });\n          let user = Accounts.user();\n          loginResultCallback(\n            this.state.onPostSignUpHook.bind(this, _options, user)\n          );\n          this.clearDefaultFieldValues();\n        }\n\n        this.setState({ waiting: false });\n      });\n    };\n\n    if (!error) {\n      this.setState({ waiting: true });\n      // Allow for Promises to return.\n      let promise = this.state.onPreSignUpHook(options);\n      if (promise instanceof Promise) {\n        promise.then(SignUp.bind(this, options));\n      } else {\n        SignUp(options);\n      }\n    }\n  }\n\n  loginWithoutPassword() {\n    const {\n      email = '',\n      usernameOrEmail = '',\n      waiting,\n      formState,\n      onSubmitHook\n    } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword({ email: email }, error => {\n        if (error) {\n          this.showMessage(\n            `error.accounts.${error.reason}` || 'unknown_error',\n            'error'\n          );\n        } else {\n          this.showMessage(this.translate('info.emailSent'), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    } else if (this.validateField('username', usernameOrEmail)) {\n      this.setState({ waiting: true });\n\n      Accounts.loginWithoutPassword(\n        { email: usernameOrEmail, username: usernameOrEmail },\n        error => {\n          if (error) {\n            this.showMessage(\n              `error.accounts.${error.reason}` || 'unknown_error',\n              'error'\n            );\n          } else {\n            this.showMessage(this.translate('info.emailSent'), 'success', 5000);\n            this.clearDefaultFieldValues();\n          }\n          onSubmitHook(error, formState);\n          this.setState({ waiting: false });\n        }\n      );\n    } else {\n      let errMsg = null;\n      if (['USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\n        errMsg = this.translate('error.accounts.invalid_email');\n      } else {\n        errMsg = this.translate('error.accounts.invalid_email');\n      }\n      this.showMessage(errMsg, 'warning');\n      onSubmitHook(errMsg, formState);\n    }\n  }\n\n  passwordReset() {\n    const { email = '', waiting, formState, onSubmitHook } = this.state;\n\n    if (waiting) {\n      return;\n    }\n\n    this.clearMessages();\n    if (this.validateField('email', email)) {\n      this.setState({ waiting: true });\n\n      Accounts.forgotPassword({ email: email }, error => {\n        if (error) {\n          this.showMessage(\n            `error.accounts.${error.reason}` || 'unknown_error',\n            'error'\n          );\n        } else {\n          this.showMessage(this.translate('info.emailSent'), 'success', 5000);\n          this.clearDefaultFieldValues();\n        }\n        onSubmitHook(error, formState);\n        this.setState({ waiting: false });\n      });\n    }\n  }\n\n  passwordChange() {\n    const {\n      password,\n      newPassword,\n      formState,\n      onSubmitHook,\n      onSignedInHook\n    } = this.state;\n\n    if (!this.validateField('password', newPassword)) {\n      onSubmitHook('err.minChar', formState);\n      return;\n    }\n\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\n    if (!token) {\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\n    }\n    if (token) {\n      Accounts.resetPassword(token, newPassword, error => {\n        if (error) {\n          this.showMessage(\n            `error.accounts.${error.reason}` || 'unknown_error',\n            'error'\n          );\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage(\n            this.translate('info.passwordChanged'),\n            'success',\n            5000\n          );\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\n          onSignedInHook();\n        }\n      });\n    } else {\n      Accounts.changePassword(password, newPassword, error => {\n        if (error) {\n          this.showMessage(\n            `error.accounts.${error.reason}` || 'unknown_error',\n            'error'\n          );\n          onSubmitHook(error, formState);\n        } else {\n          this.showMessage('info.passwordChanged', 'success', 5000);\n          onSubmitHook(null, formState);\n          this.setState({ formState: STATES.PROFILE });\n          this.clearDefaultFieldValues();\n        }\n      });\n    }\n  }\n\n  showMessage(message, type, clearTimeout, field) {\n    message = this.translate(message).trim();\n    if (message) {\n      this.setState(({ messages = [] }) => {\n        messages.push({\n          message,\n          type,\n          ...(field && { field })\n        });\n        return { messages };\n      });\n      if (clearTimeout) {\n        this.hideMessageTimout = setTimeout(() => {\n          // Filter out the message that timed out.\n          this.clearMessage(message);\n        }, clearTimeout);\n      }\n    }\n  }\n\n  getMessageForField(field) {\n    const { messages = [] } = this.state;\n    return messages.find(({ field: key }) => key === field);\n  }\n\n  clearMessage(message) {\n    if (message) {\n      this.setState(({ messages = [] }) => ({\n        messages: messages.filter(({ message: a }) => a !== message)\n      }));\n    }\n  }\n\n  clearMessages() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n    this.setState({ messages: [] });\n  }\n\n  componentWillMount() {\n    // XXX Check for backwards compatibility.\n    if (Meteor.isClient) {\n      const container = document.createElement('div');\n      ReactDOM.render(<Accounts.ui.Field message=\"test\" />, container);\n      if (container.getElementsByClassName('message').length == 0) {\n        // Found backwards compatibility issue with 1.3.x\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.hideMessageTimout) {\n      clearTimeout(this.hideMessageTimout);\n    }\n  }\n\n  render() {\n    this.oauthButtons();\n    // Backwords compatibility with v1.2.x.\n    const { messages = [] } = this.state;\n    const message = {\n      deprecated: true,\n      message: messages.map(({ message }) => message).join(', ')\n    };\n    return (\n      <Accounts.ui.Form\n        oauthServices={this.oauthButtons()}\n        fields={this.fields()}\n        buttons={this.buttons()}\n        {...this.state}\n        message={message}\n        translate={text => this.translate(text)}\n      />\n    );\n  }\n}\nLoginForm.propTypes = {\n  formState: PropTypes.symbol,\n  loginPath: PropTypes.string,\n  signUpPath: PropTypes.string,\n  resetPasswordPath: PropTypes.string,\n  profilePath: PropTypes.string,\n  changePasswordPath: PropTypes.string\n};\nLoginForm.defaultProps = {\n  formState: null,\n  loginPath: null,\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: null,\n  changePasswordPath: null\n};\n\nAccounts.ui.LoginForm = LoginForm;\n\nconst LoginFormContainer = withTracker(() => {\n  // Listen for the user to login/logout and the services list to the user.\n  Meteor.subscribe('servicesList');\n  return {\n    user: Accounts.user()\n  };\n})(LoginForm);\nAccounts.ui.LoginForm = LoginFormContainer;\nexport default LoginFormContainer;\n"]},"sourceType":"script","hash":"7ede22b9fd327ccc868ec5f2c8fe7ffcb6e64003"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Financing/client/FinancingOwnFunds/FinancingOwnFundsPicker/test/FinancingOwnFundsPickerHelpers.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/Financing/client/FinancingOwnFunds/FinancingOwnFundsPicker/test/FinancingOwnFundsPickerHelpers.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Financing/client/FinancingOwnFunds/FinancingOwnFundsPicker/test/FinancingOwnFundsPickerHelpers.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/components/Financing/client/FinancingOwnFunds/FinancingOwnFundsPicker/test/FinancingOwnFundsPickerHelpers.spec.js"],"names":["expect","chooseOwnFundsTypes","shouldAskForUsageType","calculateRemainingFunds","makeNewOwnFundsArray","getNewWantedLoanAfterPledge","RESIDENCE_TYPE","OWN_FUNDS_TYPES","OWN_FUNDS_USAGE_TYPES","describe","it","loan","residenceType","MAIN_RESIDENCE","to","deep","equal","THIRD_PARTY_FORTUNE","BANK_FORTUNE","INSURANCE_3A","BANK_3A","INSURANCE_3B","INSURANCE_2","expected","SECOND_RESIDENCE","INVESTMENT","undefined","structure","ownFunds","type","value","borrowerId","borrowers","bankFortune","_id","ownFundsIndex","insurance2","thirdPartyFortune","usageType","shouldDelete","structures","wantedLoan","id","structureId","properties","propertyId","propertyWork","PLEDGE","WITHDRAW"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  chooseOwnFundsTypes,\n  shouldAskForUsageType,\n  calculateRemainingFunds,\n  makeNewOwnFundsArray,\n  getNewWantedLoanAfterPledge,\n} from '../FinancingOwnFundsPickerHelpers';\nimport {\n  RESIDENCE_TYPE,\n  OWN_FUNDS_TYPES,\n  OWN_FUNDS_USAGE_TYPES,\n} from '../../../../../../api/constants';\n\ndescribe('FinancingOwnFundsPickerHelpers', () => {\n  describe('chooseOwnFundsTypes', () => {\n    it('returns the right values for main', () => {\n      expect(chooseOwnFundsTypes({\n        loan: { residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE },\n      })).to.deep.equal([\n        OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n        OWN_FUNDS_TYPES.BANK_FORTUNE,\n        OWN_FUNDS_TYPES.INSURANCE_3A,\n        OWN_FUNDS_TYPES.BANK_3A,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n        OWN_FUNDS_TYPES.INSURANCE_2,\n      ]);\n    });\n\n    it('returns the right values for secondary and investment', () => {\n      const expected = [\n        OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n        OWN_FUNDS_TYPES.BANK_FORTUNE,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n      ];\n\n      expect(chooseOwnFundsTypes({\n        loan: { residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE },\n      })).to.deep.equal(expected);\n\n      expect(chooseOwnFundsTypes({\n        loan: { residenceType: RESIDENCE_TYPE.INVESTMENT },\n      })).to.deep.equal(expected);\n    });\n  });\n\n  describe('shouldAskForUsageType', () => {\n    it('should return true for the right own funds types', () => {\n      expect(shouldAskForUsageType(OWN_FUNDS_TYPES.INSURANCE_2)).to.equal(true);\n    });\n\n    it('should return false for the other own funds types', () => {\n      expect(shouldAskForUsageType(OWN_FUNDS_TYPES.BANK_FORTUNE)).to.equal(false);\n    });\n  });\n\n  describe('calculateRemainingFunds', () => {\n    it('returns undefined if no type is given', () => {\n      expect(calculateRemainingFunds({})).to.equal(undefined);\n    });\n\n    it('should return 0 if all is used up', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.BANK_FORTUNE, value: 10, borrowerId: 'id' },\n        ],\n      };\n      const borrowers = [{ bankFortune: 10, _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(0);\n    });\n\n    it('should return the remaining left over if any is', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' },\n        ],\n      };\n      const borrowers = [{ insurance2: [{ value: 10 }], _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.INSURANCE_2,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(5);\n    });\n\n    it('should not count the currently editing ownFunds object', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' },\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' }, // Being edited\n        ],\n      };\n      const borrowers = [{ insurance2: [{ value: 10 }], _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.INSURANCE_2,\n        structure,\n        ownFundsIndex: 1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(5);\n    });\n\n    it('should ignore all other ownFunds of different types', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.BANK_FORTUNE, value: 5, borrowerId: 'id' },\n          { type: OWN_FUNDS_TYPES.BANK_3A, value: 5, borrowerId: 'id' },\n          {\n            type: OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n            value: 5,\n            borrowerId: 'id',\n          },\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' },\n        ],\n      };\n      const borrowers = [{ thirdPartyFortune: 10, _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n        structure,\n        ownFundsIndex: 1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(5);\n    });\n\n    it('ignores ownFunds from other borrowers', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.BANK_FORTUNE, value: 5, borrowerId: 'id2' },\n        ],\n      };\n      const borrowers = [{ bankFortune: 10, _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(10);\n    });\n  });\n\n  describe('makeNewOwnFundsArray', () => {\n    it('adds the new object in the array if it is empty', () => {\n      const expected = [\n        { type: 1, borrowerId: 3, value: 4, usageType: undefined },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: { ownFunds: [] },\n        ownFundsIndex: -1,\n        ...expected[0],\n      })).to.deep.equal(expected);\n    });\n\n    it('replaces the current object at index', () => {\n      const expected = [\n        { type: 1, borrowerId: 3, value: 4, usageType: undefined },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [{ type: 5, borrowerId: 6, value: 7, usageType: 8 }],\n        },\n        ownFundsIndex: 0,\n        ...expected[0],\n      })).to.deep.equal(expected);\n    });\n\n    it('replaces the current object at larger index', () => {\n      const expected = [\n        { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n        { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n        { type: 1, borrowerId: 3, value: 4, usageType: undefined },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [\n            { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n            { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n            { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n          ],\n        },\n        ownFundsIndex: 2,\n        ...expected[2],\n      })).to.deep.equal(expected);\n    });\n\n    it('deletes object at index', () => {\n      const expected = [\n        { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n        { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [\n            { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n            { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n            { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n          ],\n        },\n        ownFundsIndex: 1,\n        shouldDelete: true,\n        ...expected[2],\n      })).to.deep.equal(expected);\n    });\n\n    it('deletes object if value is 0', () => {\n      const expected = [\n        { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n        { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [\n            { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n            { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n            { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n          ],\n        },\n        ownFundsIndex: 1,\n        value: 0,\n      })).to.deep.equal(expected);\n    });\n  });\n\n  describe('getNewWantedLoanAfterPledge', () => {\n    it('returns the current wantedLoan if this is not a pledged value', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          structures: [{ wantedLoan: 100, id: 'struct' }],\n        },\n        structureId: 'struct',\n        usageType: 'something else',\n      })).to.equal(100);\n    });\n\n    it('returns wantedLoan plus a small pledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 50000,\n      })).to.equal(850000);\n    });\n\n    it('does not exceed maxBorrowRatioWithPledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 150000,\n      })).to.equal(900000);\n    });\n\n    it('does not exceed maxBorrowRatio if not a main residence', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.INVESTMENT,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 150000,\n      })).to.equal(800000);\n    });\n\n    it('counts other pledged own funds', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [\n                { value: 10000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n              ],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 50000,\n        ownFundsIndex: -1,\n      })).to.equal(860000);\n    });\n\n    it('reduces loan if pledge is reduced', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [\n                { value: 80000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n              ],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 40000,\n        ownFundsIndex: 0,\n      })).to.equal(840000);\n    });\n\n    it('increases loan if usageType is changed to pledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [\n                { value: 80000, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n              ],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 40000,\n        ownFundsIndex: 0,\n      })).to.equal(840000);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Financing/client/FinancingOwnFunds/FinancingOwnFundsPicker/test/FinancingOwnFundsPickerHelpers.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/Financing/client/FinancingOwnFunds/FinancingOwnFundsPicker/test/FinancingOwnFundsPickerHelpers.spec.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet chooseOwnFundsTypes, shouldAskForUsageType, calculateRemainingFunds, makeNewOwnFundsArray, getNewWantedLoanAfterPledge;\nmodule.link(\"../FinancingOwnFundsPickerHelpers\", {\n  chooseOwnFundsTypes(v) {\n    chooseOwnFundsTypes = v;\n  },\n\n  shouldAskForUsageType(v) {\n    shouldAskForUsageType = v;\n  },\n\n  calculateRemainingFunds(v) {\n    calculateRemainingFunds = v;\n  },\n\n  makeNewOwnFundsArray(v) {\n    makeNewOwnFundsArray = v;\n  },\n\n  getNewWantedLoanAfterPledge(v) {\n    getNewWantedLoanAfterPledge = v;\n  }\n\n}, 1);\nlet RESIDENCE_TYPE, OWN_FUNDS_TYPES, OWN_FUNDS_USAGE_TYPES;\nmodule.link(\"../../../../../../api/constants\", {\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  },\n\n  OWN_FUNDS_TYPES(v) {\n    OWN_FUNDS_TYPES = v;\n  },\n\n  OWN_FUNDS_USAGE_TYPES(v) {\n    OWN_FUNDS_USAGE_TYPES = v;\n  }\n\n}, 2);\ndescribe('FinancingOwnFundsPickerHelpers', () => {\n  describe('chooseOwnFundsTypes', () => {\n    it('returns the right values for main', () => {\n      expect(chooseOwnFundsTypes({\n        loan: {\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n        }\n      })).to.deep.equal([OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE, OWN_FUNDS_TYPES.BANK_FORTUNE, OWN_FUNDS_TYPES.INSURANCE_3A, OWN_FUNDS_TYPES.BANK_3A, OWN_FUNDS_TYPES.INSURANCE_3B, OWN_FUNDS_TYPES.INSURANCE_2]);\n    });\n    it('returns the right values for secondary and investment', () => {\n      const expected = [OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE, OWN_FUNDS_TYPES.BANK_FORTUNE, OWN_FUNDS_TYPES.INSURANCE_3B];\n      expect(chooseOwnFundsTypes({\n        loan: {\n          residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE\n        }\n      })).to.deep.equal(expected);\n      expect(chooseOwnFundsTypes({\n        loan: {\n          residenceType: RESIDENCE_TYPE.INVESTMENT\n        }\n      })).to.deep.equal(expected);\n    });\n  });\n  describe('shouldAskForUsageType', () => {\n    it('should return true for the right own funds types', () => {\n      expect(shouldAskForUsageType(OWN_FUNDS_TYPES.INSURANCE_2)).to.equal(true);\n    });\n    it('should return false for the other own funds types', () => {\n      expect(shouldAskForUsageType(OWN_FUNDS_TYPES.BANK_FORTUNE)).to.equal(false);\n    });\n  });\n  describe('calculateRemainingFunds', () => {\n    it('returns undefined if no type is given', () => {\n      expect(calculateRemainingFunds({})).to.equal(undefined);\n    });\n    it('should return 0 if all is used up', () => {\n      const structure = {\n        ownFunds: [{\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 10,\n          borrowerId: 'id'\n        }]\n      };\n      const borrowers = [{\n        bankFortune: 10,\n        _id: 'id'\n      }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id'\n      })).to.equal(0);\n    });\n    it('should return the remaining left over if any is', () => {\n      const structure = {\n        ownFunds: [{\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          value: 5,\n          borrowerId: 'id'\n        }]\n      };\n      const borrowers = [{\n        insurance2: [{\n          value: 10\n        }],\n        _id: 'id'\n      }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.INSURANCE_2,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id'\n      })).to.equal(5);\n    });\n    it('should not count the currently editing ownFunds object', () => {\n      const structure = {\n        ownFunds: [{\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          value: 5,\n          borrowerId: 'id'\n        }, {\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          value: 5,\n          borrowerId: 'id'\n        }]\n      };\n      const borrowers = [{\n        insurance2: [{\n          value: 10\n        }],\n        _id: 'id'\n      }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.INSURANCE_2,\n        structure,\n        ownFundsIndex: 1,\n        borrowers,\n        borrowerId: 'id'\n      })).to.equal(5);\n    });\n    it('should ignore all other ownFunds of different types', () => {\n      const structure = {\n        ownFunds: [{\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 5,\n          borrowerId: 'id'\n        }, {\n          type: OWN_FUNDS_TYPES.BANK_3A,\n          value: 5,\n          borrowerId: 'id'\n        }, {\n          type: OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n          value: 5,\n          borrowerId: 'id'\n        }, {\n          type: OWN_FUNDS_TYPES.INSURANCE_2,\n          value: 5,\n          borrowerId: 'id'\n        }]\n      };\n      const borrowers = [{\n        thirdPartyFortune: 10,\n        _id: 'id'\n      }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n        structure,\n        ownFundsIndex: 1,\n        borrowers,\n        borrowerId: 'id'\n      })).to.equal(5);\n    });\n    it('ignores ownFunds from other borrowers', () => {\n      const structure = {\n        ownFunds: [{\n          type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n          value: 5,\n          borrowerId: 'id2'\n        }]\n      };\n      const borrowers = [{\n        bankFortune: 10,\n        _id: 'id'\n      }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id'\n      })).to.equal(10);\n    });\n  });\n  describe('makeNewOwnFundsArray', () => {\n    it('adds the new object in the array if it is empty', () => {\n      const expected = [{\n        type: 1,\n        borrowerId: 3,\n        value: 4,\n        usageType: undefined\n      }];\n      expect(makeNewOwnFundsArray((0, _objectSpread2.default)({\n        structure: {\n          ownFunds: []\n        },\n        ownFundsIndex: -1\n      }, expected[0]))).to.deep.equal(expected);\n    });\n    it('replaces the current object at index', () => {\n      const expected = [{\n        type: 1,\n        borrowerId: 3,\n        value: 4,\n        usageType: undefined\n      }];\n      expect(makeNewOwnFundsArray((0, _objectSpread2.default)({\n        structure: {\n          ownFunds: [{\n            type: 5,\n            borrowerId: 6,\n            value: 7,\n            usageType: 8\n          }]\n        },\n        ownFundsIndex: 0\n      }, expected[0]))).to.deep.equal(expected);\n    });\n    it('replaces the current object at larger index', () => {\n      const expected = [{\n        type: 5,\n        borrowerId: 6,\n        value: 7,\n        usageType: 8\n      }, {\n        type: 9,\n        borrowerId: 10,\n        value: 11,\n        usageType: 12\n      }, {\n        type: 1,\n        borrowerId: 3,\n        value: 4,\n        usageType: undefined\n      }];\n      expect(makeNewOwnFundsArray((0, _objectSpread2.default)({\n        structure: {\n          ownFunds: [{\n            type: 5,\n            borrowerId: 6,\n            value: 7,\n            usageType: 8\n          }, {\n            type: 9,\n            borrowerId: 10,\n            value: 11,\n            usageType: 12\n          }, {\n            type: 14,\n            borrowerId: 15,\n            value: 16,\n            usageType: 17\n          }]\n        },\n        ownFundsIndex: 2\n      }, expected[2]))).to.deep.equal(expected);\n    });\n    it('deletes object at index', () => {\n      const expected = [{\n        type: 5,\n        borrowerId: 6,\n        value: 7,\n        usageType: 8\n      }, {\n        type: 14,\n        borrowerId: 15,\n        value: 16,\n        usageType: 17\n      }];\n      expect(makeNewOwnFundsArray((0, _objectSpread2.default)({\n        structure: {\n          ownFunds: [{\n            type: 5,\n            borrowerId: 6,\n            value: 7,\n            usageType: 8\n          }, {\n            type: 9,\n            borrowerId: 10,\n            value: 11,\n            usageType: 12\n          }, {\n            type: 14,\n            borrowerId: 15,\n            value: 16,\n            usageType: 17\n          }]\n        },\n        ownFundsIndex: 1,\n        shouldDelete: true\n      }, expected[2]))).to.deep.equal(expected);\n    });\n    it('deletes object if value is 0', () => {\n      const expected = [{\n        type: 5,\n        borrowerId: 6,\n        value: 7,\n        usageType: 8\n      }, {\n        type: 14,\n        borrowerId: 15,\n        value: 16,\n        usageType: 17\n      }];\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [{\n            type: 5,\n            borrowerId: 6,\n            value: 7,\n            usageType: 8\n          }, {\n            type: 9,\n            borrowerId: 10,\n            value: 11,\n            usageType: 12\n          }, {\n            type: 14,\n            borrowerId: 15,\n            value: 16,\n            usageType: 17\n          }]\n        },\n        ownFundsIndex: 1,\n        value: 0\n      })).to.deep.equal(expected);\n    });\n  });\n  describe('getNewWantedLoanAfterPledge', () => {\n    it('returns the current wantedLoan if this is not a pledged value', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          structures: [{\n            wantedLoan: 100,\n            id: 'struct'\n          }]\n        },\n        structureId: 'struct',\n        usageType: 'something else'\n      })).to.equal(100);\n    });\n    it('returns wantedLoan plus a small pledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [{\n            id: 'struct',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            ownFunds: [],\n            propertyWork: 0\n          }]\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 50000\n      })).to.equal(850000);\n    });\n    it('does not exceed maxBorrowRatioWithPledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [{\n            id: 'struct',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            ownFunds: [],\n            propertyWork: 0\n          }]\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 150000\n      })).to.equal(900000);\n    });\n    it('does not exceed maxBorrowRatio if not a main residence', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          residenceType: RESIDENCE_TYPE.INVESTMENT,\n          structures: [{\n            id: 'struct',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            ownFunds: [],\n            propertyWork: 0\n          }]\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 150000\n      })).to.equal(800000);\n    });\n    it('counts other pledged own funds', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [{\n            id: 'struct',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            ownFunds: [{\n              value: 10000,\n              usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE\n            }],\n            propertyWork: 0\n          }]\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 50000,\n        ownFundsIndex: -1\n      })).to.equal(860000);\n    });\n    it('reduces loan if pledge is reduced', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [{\n            id: 'struct',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            ownFunds: [{\n              value: 80000,\n              usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE\n            }],\n            propertyWork: 0\n          }]\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 40000,\n        ownFundsIndex: 0\n      })).to.equal(840000);\n    });\n    it('increases loan if usageType is changed to pledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [{\n            id: 'struct',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            ownFunds: [{\n              value: 80000,\n              usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW\n            }],\n            propertyWork: 0\n          }]\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 40000,\n        ownFundsIndex: 0\n      })).to.equal(840000);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/Financing/client/FinancingOwnFunds/FinancingOwnFundsPicker/test/FinancingOwnFundsPickerHelpers.spec.js"],"names":["describe","it","expect","chooseOwnFundsTypes","loan","residenceType","RESIDENCE_TYPE","MAIN_RESIDENCE","OWN_FUNDS_TYPES","expected","SECOND_RESIDENCE","INVESTMENT","shouldAskForUsageType","calculateRemainingFunds","structure","ownFunds","type","value","borrowerId","borrowers","bankFortune","_id","ownFundsIndex","insurance2","thirdPartyFortune","usageType","undefined","makeNewOwnFundsArray","shouldDelete","getNewWantedLoanAfterPledge","structures","wantedLoan","id","structureId","properties","propertyId","propertyWork","OWN_FUNDS_USAGE_TYPES","PLEDGE","WITHDRAW"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  chooseOwnFundsTypes,\n  shouldAskForUsageType,\n  calculateRemainingFunds,\n  makeNewOwnFundsArray,\n  getNewWantedLoanAfterPledge,\n} from '../FinancingOwnFundsPickerHelpers';\nimport {\n  RESIDENCE_TYPE,\n  OWN_FUNDS_TYPES,\n  OWN_FUNDS_USAGE_TYPES,\n} from '../../../../../../api/constants';\n\ndescribe('FinancingOwnFundsPickerHelpers', () => {\n  describe('chooseOwnFundsTypes', () => {\n    it('returns the right values for main', () => {\n      expect(chooseOwnFundsTypes({\n        loan: { residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE },\n      })).to.deep.equal([\n        OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n        OWN_FUNDS_TYPES.BANK_FORTUNE,\n        OWN_FUNDS_TYPES.INSURANCE_3A,\n        OWN_FUNDS_TYPES.BANK_3A,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n        OWN_FUNDS_TYPES.INSURANCE_2,\n      ]);\n    });\n\n    it('returns the right values for secondary and investment', () => {\n      const expected = [\n        OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n        OWN_FUNDS_TYPES.BANK_FORTUNE,\n        OWN_FUNDS_TYPES.INSURANCE_3B,\n      ];\n\n      expect(chooseOwnFundsTypes({\n        loan: { residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE },\n      })).to.deep.equal(expected);\n\n      expect(chooseOwnFundsTypes({\n        loan: { residenceType: RESIDENCE_TYPE.INVESTMENT },\n      })).to.deep.equal(expected);\n    });\n  });\n\n  describe('shouldAskForUsageType', () => {\n    it('should return true for the right own funds types', () => {\n      expect(shouldAskForUsageType(OWN_FUNDS_TYPES.INSURANCE_2)).to.equal(true);\n    });\n\n    it('should return false for the other own funds types', () => {\n      expect(shouldAskForUsageType(OWN_FUNDS_TYPES.BANK_FORTUNE)).to.equal(false);\n    });\n  });\n\n  describe('calculateRemainingFunds', () => {\n    it('returns undefined if no type is given', () => {\n      expect(calculateRemainingFunds({})).to.equal(undefined);\n    });\n\n    it('should return 0 if all is used up', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.BANK_FORTUNE, value: 10, borrowerId: 'id' },\n        ],\n      };\n      const borrowers = [{ bankFortune: 10, _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(0);\n    });\n\n    it('should return the remaining left over if any is', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' },\n        ],\n      };\n      const borrowers = [{ insurance2: [{ value: 10 }], _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.INSURANCE_2,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(5);\n    });\n\n    it('should not count the currently editing ownFunds object', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' },\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' }, // Being edited\n        ],\n      };\n      const borrowers = [{ insurance2: [{ value: 10 }], _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.INSURANCE_2,\n        structure,\n        ownFundsIndex: 1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(5);\n    });\n\n    it('should ignore all other ownFunds of different types', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.BANK_FORTUNE, value: 5, borrowerId: 'id' },\n          { type: OWN_FUNDS_TYPES.BANK_3A, value: 5, borrowerId: 'id' },\n          {\n            type: OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n            value: 5,\n            borrowerId: 'id',\n          },\n          { type: OWN_FUNDS_TYPES.INSURANCE_2, value: 5, borrowerId: 'id' },\n        ],\n      };\n      const borrowers = [{ thirdPartyFortune: 10, _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE,\n        structure,\n        ownFundsIndex: 1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(5);\n    });\n\n    it('ignores ownFunds from other borrowers', () => {\n      const structure = {\n        ownFunds: [\n          { type: OWN_FUNDS_TYPES.BANK_FORTUNE, value: 5, borrowerId: 'id2' },\n        ],\n      };\n      const borrowers = [{ bankFortune: 10, _id: 'id' }];\n      expect(calculateRemainingFunds({\n        type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n        structure,\n        ownFundsIndex: -1,\n        borrowers,\n        borrowerId: 'id',\n      })).to.equal(10);\n    });\n  });\n\n  describe('makeNewOwnFundsArray', () => {\n    it('adds the new object in the array if it is empty', () => {\n      const expected = [\n        { type: 1, borrowerId: 3, value: 4, usageType: undefined },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: { ownFunds: [] },\n        ownFundsIndex: -1,\n        ...expected[0],\n      })).to.deep.equal(expected);\n    });\n\n    it('replaces the current object at index', () => {\n      const expected = [\n        { type: 1, borrowerId: 3, value: 4, usageType: undefined },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [{ type: 5, borrowerId: 6, value: 7, usageType: 8 }],\n        },\n        ownFundsIndex: 0,\n        ...expected[0],\n      })).to.deep.equal(expected);\n    });\n\n    it('replaces the current object at larger index', () => {\n      const expected = [\n        { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n        { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n        { type: 1, borrowerId: 3, value: 4, usageType: undefined },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [\n            { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n            { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n            { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n          ],\n        },\n        ownFundsIndex: 2,\n        ...expected[2],\n      })).to.deep.equal(expected);\n    });\n\n    it('deletes object at index', () => {\n      const expected = [\n        { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n        { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [\n            { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n            { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n            { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n          ],\n        },\n        ownFundsIndex: 1,\n        shouldDelete: true,\n        ...expected[2],\n      })).to.deep.equal(expected);\n    });\n\n    it('deletes object if value is 0', () => {\n      const expected = [\n        { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n        { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n      ];\n\n      expect(makeNewOwnFundsArray({\n        structure: {\n          ownFunds: [\n            { type: 5, borrowerId: 6, value: 7, usageType: 8 },\n            { type: 9, borrowerId: 10, value: 11, usageType: 12 },\n            { type: 14, borrowerId: 15, value: 16, usageType: 17 },\n          ],\n        },\n        ownFundsIndex: 1,\n        value: 0,\n      })).to.deep.equal(expected);\n    });\n  });\n\n  describe('getNewWantedLoanAfterPledge', () => {\n    it('returns the current wantedLoan if this is not a pledged value', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          structures: [{ wantedLoan: 100, id: 'struct' }],\n        },\n        structureId: 'struct',\n        usageType: 'something else',\n      })).to.equal(100);\n    });\n\n    it('returns wantedLoan plus a small pledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 50000,\n      })).to.equal(850000);\n    });\n\n    it('does not exceed maxBorrowRatioWithPledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 150000,\n      })).to.equal(900000);\n    });\n\n    it('does not exceed maxBorrowRatio if not a main residence', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.INVESTMENT,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 150000,\n      })).to.equal(800000);\n    });\n\n    it('counts other pledged own funds', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [\n                { value: 10000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n              ],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 50000,\n        ownFundsIndex: -1,\n      })).to.equal(860000);\n    });\n\n    it('reduces loan if pledge is reduced', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [\n                { value: 80000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n              ],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 40000,\n        ownFundsIndex: 0,\n      })).to.equal(840000);\n    });\n\n    it('increases loan if usageType is changed to pledge', () => {\n      expect(getNewWantedLoanAfterPledge({\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n          structures: [\n            {\n              id: 'struct',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              ownFunds: [\n                { value: 80000, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n              ],\n              propertyWork: 0,\n            },\n          ],\n        },\n        structureId: 'struct',\n        usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE,\n        value: 40000,\n        ownFundsIndex: 0,\n      })).to.equal(840000);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"8a21a98b5da3ac0795398d7eccd47ec47f4a0072"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/5.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/migrations/server/5.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/5.js","inputSourceMap":{"version":3,"sources":["imports/core/api/migrations/server/5.js"],"names":["Migrations","Loans","LoanService","up","allLoans","find","fetch","Promise","all","map","loan","maxSolvency","canton","setMaxPropertyValueWithoutBorrowRatio","loanId","_id","then","rawCollection","update","$unset","resolve","down","maxPropertyValue","main","max","maxMain","second","maxSecond","date","$set","add","version","name"],"mappings":"AAAA,SAASA,UAAT,QAA2B,6BAA3B;AAEA,SAASC,KAAT;AACA,OAAOC,WAAP;AAEA,OAAO,MAAMC,EAAE,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGH,KAAK,CAACI,IAAN,GAAaC,KAAb,EAAjB;AAEA,SAAOC,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAU;AACxC,UAAM;AAAEC,MAAAA;AAAF,QAAkBD,IAAxB;;AACA,QAAIC,WAAJ,EAAiB;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAaD,WAAnB;AACA,aAAOT,WAAW,CAACW,qCAAZ,CAAkD;AACvDC,QAAAA,MAAM,EAAEJ,IAAI,CAACK,GAD0C;AAEvDH,QAAAA;AAFuD,OAAlD,EAGJI,IAHI,CAGC,MACNf,KAAK,CAACgB,aAAN,GAAsBC,MAAtB,CACE;AAAEH,QAAAA,GAAG,EAAEL,IAAI,CAACK;AAAZ,OADF,EAEE;AAAEI,QAAAA,MAAM,EAAE;AAAER,UAAAA,WAAW,EAAE;AAAf;AAAV,OAFF,CAJK,CAAP;AAQD;;AAED,WAAOJ,OAAO,CAACa,OAAR,EAAP;AACD,GAfkB,CAAZ,CAAP;AAgBD,CAnBM;AAqBP,OAAO,MAAMC,IAAI,GAAG,MAAM;AACxB,QAAMjB,QAAQ,GAAGH,KAAK,CAACI,IAAN,GAAaC,KAAb,EAAjB;AAEA,SAAOC,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAU;AACxC,UAAM;AAAEY,MAAAA;AAAF,QAAuBZ,IAA7B;;AACA,QAAIY,gBAAJ,EAAsB;AACpB,YAAM;AACJC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,GAAG,EAAEC;AAAP,SADF;AAEJC,QAAAA,MAAM,EAAE;AAAEF,UAAAA,GAAG,EAAEG;AAAP,SAFJ;AAGJf,QAAAA,MAHI;AAIJgB,QAAAA;AAJI,UAKFN,gBALJ,CADoB,CAQpB;;AACA,aAAOrB,KAAK,CAACgB,aAAN,GAAsBC,MAAtB,CACL;AAAEH,QAAAA,GAAG,EAAEL,IAAI,CAACK;AAAZ,OADK,EAEL;AACEc,QAAAA,IAAI,EAAE;AACJlB,UAAAA,WAAW,EAAE;AACXiB,YAAAA,IADW;AAEXhB,YAAAA,MAFW;AAGXW,YAAAA,IAAI,EAAEE,OAHK;AAIXC,YAAAA,MAAM,EAAEC;AAJG;AADT,SADR;AASER,QAAAA,MAAM,EAAE;AAAEG,UAAAA,gBAAgB,EAAE;AAApB;AATV,OAFK,CAAP;AAcD;AACF,GA1BkB,CAAZ,CAAP;AA2BD,CA9BM;AAgCPtB,UAAU,CAAC8B,GAAX,CAAe;AACbC,EAAAA,OAAO,EAAE,CADI;AAEbC,EAAAA,IAAI,EAAE,kCAFO;AAGb7B,EAAAA,EAHa;AAIbkB,EAAAA;AAJa,CAAf","sourcesContent":["import { Migrations } from 'meteor/percolate:migrations';\n\nimport { Loans } from '../..';\nimport LoanService from '../../loans/server/LoanService';\n\nexport const up = () => {\n  const allLoans = Loans.find().fetch();\n\n  return Promise.all(allLoans.map((loan) => {\n    const { maxSolvency } = loan;\n    if (maxSolvency) {\n      const { canton } = maxSolvency;\n      return LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: loan._id,\n        canton,\n      }).then(() =>\n        Loans.rawCollection().update(\n          { _id: loan._id },\n          { $unset: { maxSolvency: true } },\n        ));\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find().fetch();\n\n  return Promise.all(allLoans.map((loan) => {\n    const { maxPropertyValue } = loan;\n    if (maxPropertyValue) {\n      const {\n        main: { max: maxMain },\n        second: { max: maxSecond },\n        canton,\n        date,\n      } = maxPropertyValue;\n\n      // Schema would not be valid if we used LoanService.baseUpdate\n      return Loans.rawCollection().update(\n        { _id: loan._id },\n        {\n          $set: {\n            maxSolvency: {\n              date,\n              canton,\n              main: maxMain,\n              second: maxSecond,\n            },\n          },\n          $unset: { maxPropertyValue: true },\n        },\n      );\n    }\n  }));\n};\n\nMigrations.add({\n  version: 5,\n  name: 'Add lender rules to max solvency',\n  up,\n  down,\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/5.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/migrations/server/5.js"}},"code":"module.export({\n  up: () => up,\n  down: () => down\n});\nlet Migrations;\nmodule.link(\"meteor/percolate:migrations\", {\n  Migrations(v) {\n    Migrations = v;\n  }\n\n}, 0);\nlet Loans;\nmodule.link(\"../..\", {\n  Loans(v) {\n    Loans = v;\n  }\n\n}, 1);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 2);\n\nconst up = () => {\n  const allLoans = Loans.find().fetch();\n  return Promise.all(allLoans.map(loan => {\n    const {\n      maxSolvency\n    } = loan;\n\n    if (maxSolvency) {\n      const {\n        canton\n      } = maxSolvency;\n      return LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: loan._id,\n        canton\n      }).then(() => Loans.rawCollection().update({\n        _id: loan._id\n      }, {\n        $unset: {\n          maxSolvency: true\n        }\n      }));\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nconst down = () => {\n  const allLoans = Loans.find().fetch();\n  return Promise.all(allLoans.map(loan => {\n    const {\n      maxPropertyValue\n    } = loan;\n\n    if (maxPropertyValue) {\n      const {\n        main: {\n          max: maxMain\n        },\n        second: {\n          max: maxSecond\n        },\n        canton,\n        date\n      } = maxPropertyValue; // Schema would not be valid if we used LoanService.baseUpdate\n\n      return Loans.rawCollection().update({\n        _id: loan._id\n      }, {\n        $set: {\n          maxSolvency: {\n            date,\n            canton,\n            main: maxMain,\n            second: maxSecond\n          }\n        },\n        $unset: {\n          maxPropertyValue: true\n        }\n      });\n    }\n  }));\n};\n\nMigrations.add({\n  version: 5,\n  name: 'Add lender rules to max solvency',\n  up,\n  down\n});","map":{"version":3,"sources":["imports/core/api/migrations/server/5.js"],"names":["Migrations","up","allLoans","Loans","loan","maxSolvency","canton","loanId","_id","$unset","Promise","down","maxPropertyValue","main","max","maxMain","second","maxSecond","date","$set","version","name"],"mappings":"AAAA,MAAA,CAAA,MAAA,CAASA;AAAAA,EAAAA,EAAAA,EAAT,MAAA,EAASA;AAAT,EAAA,IAA2B,EAAA,MAAA;AAAlBA,CAAT;AAA2B,IAAA,UAAA;AAA3B,MAAA,CAAA,IAAA,CAAA,6BAAA,EAAA;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gCAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAKO,MAAMC,EAAE,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGC,KAAK,CAALA,IAAAA,GAAjB,KAAiBA,EAAjB;AAEA,SAAO,OAAO,CAAP,GAAA,CAAY,QAAQ,CAAR,GAAA,CAAcC,IAAD,IAAU;AACxC,UAAM;AAAEC,MAAAA;AAAF,QAAN,IAAA;;AACA,QAAA,WAAA,EAAiB;AACf,YAAM;AAAEC,QAAAA;AAAF,UAAN,WAAA;AACA,aAAO,WAAW,CAAX,qCAAA,CAAkD;AACvDC,QAAAA,MAAM,EAAEH,IAAI,CAD2C,GAAA;AAEvDE,QAAAA;AAFuD,OAAlD,EAAA,IAAA,CAGC,MACN,KAAK,CAAL,aAAA,GAAA,MAAA,CACE;AAAEE,QAAAA,GAAG,EAAEJ,IAAI,CAACI;AAAZ,OADF,EAEE;AAAEC,QAAAA,MAAM,EAAE;AAAEJ,UAAAA,WAAW,EAAE;AAAf;AAAV,OAFF,CAJK,CAAP;AAQD;;AAED,WAAOK,OAAO,CAAd,OAAOA,EAAP;AAdF,GAAmB,CAAZ,CAAP;AAHK,CAAA;;AAqBA,MAAMC,IAAI,GAAG,MAAM;AACxB,QAAMT,QAAQ,GAAGC,KAAK,CAALA,IAAAA,GAAjB,KAAiBA,EAAjB;AAEA,SAAO,OAAO,CAAP,GAAA,CAAY,QAAQ,CAAR,GAAA,CAAcC,IAAD,IAAU;AACxC,UAAM;AAAEQ,MAAAA;AAAF,QAAN,IAAA;;AACA,QAAA,gBAAA,EAAsB;AACpB,YAAM;AACJC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,GAAG,EAAEC;AAAP,SADF;AAEJC,QAAAA,MAAM,EAAE;AAAEF,UAAAA,GAAG,EAAEG;AAAP,SAFJ;AAAA,QAAA,MAAA;AAIJC,QAAAA;AAJI,UADc,gBACpB,CADoB,CAQpB;;AACA,aAAO,KAAK,CAAL,aAAA,GAAA,MAAA,CACL;AAAEV,QAAAA,GAAG,EAAEJ,IAAI,CAACI;AAAZ,OADK,EAEL;AACEW,QAAAA,IAAI,EAAE;AACJd,UAAAA,WAAW,EAAE;AAAA,YAAA,IAAA;AAAA,YAAA,MAAA;AAGXQ,YAAAA,IAAI,EAHO,OAAA;AAIXG,YAAAA,MAAM,EAAEC;AAJG;AADT,SADR;AASER,QAAAA,MAAM,EAAE;AAAEG,UAAAA,gBAAgB,EAAE;AAApB;AATV,OAFK,CAAP;AAcD;AAzBH,GAAmB,CAAZ,CAAP;AAHK,CAAA;;AAgCPZ,UAAU,CAAVA,GAAAA,CAAe;AACboB,EAAAA,OAAO,EADM,CAAA;AAEbC,EAAAA,IAAI,EAFS,kCAAA;AAAA,EAAA,EAAA;AAIbV,EAAAA;AAJa,CAAfX","sourcesContent":["import { Migrations } from 'meteor/percolate:migrations';\n\nimport { Loans } from '../..';\nimport LoanService from '../../loans/server/LoanService';\n\nexport const up = () => {\n  const allLoans = Loans.find().fetch();\n\n  return Promise.all(allLoans.map((loan) => {\n    const { maxSolvency } = loan;\n    if (maxSolvency) {\n      const { canton } = maxSolvency;\n      return LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: loan._id,\n        canton,\n      }).then(() =>\n        Loans.rawCollection().update(\n          { _id: loan._id },\n          { $unset: { maxSolvency: true } },\n        ));\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nexport const down = () => {\n  const allLoans = Loans.find().fetch();\n\n  return Promise.all(allLoans.map((loan) => {\n    const { maxPropertyValue } = loan;\n    if (maxPropertyValue) {\n      const {\n        main: { max: maxMain },\n        second: { max: maxSecond },\n        canton,\n        date,\n      } = maxPropertyValue;\n\n      // Schema would not be valid if we used LoanService.baseUpdate\n      return Loans.rawCollection().update(\n        { _id: loan._id },\n        {\n          $set: {\n            maxSolvency: {\n              date,\n              canton,\n              main: maxMain,\n              second: maxSecond,\n            },\n          },\n          $unset: { maxPropertyValue: true },\n        },\n      );\n    }\n  }));\n};\n\nMigrations.add({\n  version: 5,\n  name: 'Add lender rules to max solvency',\n  up,\n  down,\n});\n"]},"sourceType":"script","hash":"604f1e49dc32939b6ac015deb8a9ccc7eeb9c42f"}

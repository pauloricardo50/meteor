{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/CollectionService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/helpers/CollectionService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/CollectionService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/helpers/CollectionService.js"],"names":["Meteor","CollectionService","constructor","collection","Error","insert","object","_update","id","operator","Object","keys","length","update","baseUpdate","args","remove","get","findOne","safeGet","result","_name","find","checkQuery","body","$filter","createQuery","fetchOne","safeFetchOne","$filters","arg","JSON","stringify","fetch","getLink","count","getCount","countAll","getAll","rawCollection","exists","_id","fields","aggregate","addLink","linkName","linkId","metadata","linker","strategy","set","add","removeLink","split","unset","updateLinkMetadata","getAssignedEmployee","assignee","getAdditionalDocLabel","label","additionalDoc","undefined","setAdditionalDoc","additionalDocId","requiredByAdmin","category","additionalDocuments","doc","additionalDocumentsUpdate","filter","removeAdditionalDoc","docId"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nclass CollectionService {\n  constructor(collection) {\n    if (!collection) {\n      throw new Error('A collection is needed in CollectionService, but none was passed');\n    }\n    this.collection = collection;\n  }\n\n  insert(object = {}) {\n    return this.collection.insert(object);\n  }\n\n  _update({ id, object, operator = '$set' }) {\n    if (Object.keys(object).length > 0) {\n      // debugger;\n      return this.collection.update(id, { [operator]: object });\n    }\n    return null;\n  }\n\n  baseUpdate(...args) {\n    return this.collection.update(...args);\n  }\n\n  remove(...args) {\n    return this.collection.remove(...args);\n  }\n\n  get(id) {\n    return this.collection.findOne(id);\n  }\n\n  safeGet(id) {\n    const result = this.get(id);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with id \"${id}\" in collection \"${\n        this.collection._name\n      }\"`);\n    }\n\n    return result;\n  }\n\n  find(...args) {\n    return this.collection.find(...args);\n  }\n\n  findOne(...args) {\n    return this.collection.findOne(...args);\n  }\n\n  checkQuery(body) {\n    if (body && body.$filter) {\n      throw new Meteor.Error('$filter found in query body, did you mean $filters?');\n    }\n  }\n\n  createQuery(...args) {\n    this.checkQuery(args[0]);\n    return this.collection.createQuery(...args);\n  }\n\n  fetchOne(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetchOne();\n  }\n\n  safeFetchOne(...args) {\n    const { $filters = {} } = args.find(arg => arg.$filters);\n    const result = this.fetchOne(...args);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with filters \"${JSON.stringify($filters)}\" in collection \"${this.collection._name}\"`);\n    }\n\n    return result;\n  }\n\n  fetch(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetch();\n  }\n\n  getLink(...args) {\n    return this.collection.getLink(...args);\n  }\n\n  count(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).getCount();\n  }\n\n  countAll() {\n    return this.find({}).count();\n  }\n\n  getAll() {\n    return this.find({}).fetch();\n  }\n\n  get rawCollection() {\n    return this.collection.rawCollection();\n  }\n\n  exists(_id) {\n    return !!(_id && this.findOne({ _id }, { fields: { _id: 1 } }));\n  }\n\n  aggregate(...args) {\n    return this.rawCollection.aggregate(...args);\n  }\n\n  // Don't return the results from linker\n  addLink({ id, linkName, linkId, metadata = {} }) {\n    const linker = this.collection.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy) {\n    case 'one':\n      linker.set(linkId);\n      return;\n    case 'many':\n      linker.add(linkId);\n      return;\n    case 'one-meta':\n      linker.set(linkId, metadata);\n      return;\n    case 'many-meta':\n      linker.add(linkId, metadata);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  // Don't return the results from linker\n  removeLink({ id, linkName, linkId }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n    case 'one':\n      linker.unset(linkId);\n      return;\n    case 'many':\n      linker.remove(linkId);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  updateLinkMetadata({ id, linkName, linkId, metadata }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n    case 'one':\n      linker.metadata(metadata);\n      return;\n    case 'many':\n      linker.metadata(linkId, metadata);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  getAssignedEmployee({ id }) {\n    const { assignee } = this.fetchOne({ $filters: { _id: id }, assignee: 1 });\n\n    return assignee;\n  }\n\n  getAdditionalDocLabel({ label, additionalDoc }) {\n    if (label) {\n      return label;\n    }\n    if (additionalDoc.label) {\n      return additionalDoc.label;\n    }\n\n    return undefined;\n  }\n\n  setAdditionalDoc({ id, additionalDocId, requiredByAdmin, label, category }) {\n    const { additionalDocuments } = this.get(id);\n\n    const additionalDoc = additionalDocuments.find(doc => doc.id === additionalDocId);\n\n    if (additionalDoc) {\n      const additionalDocumentsUpdate = [\n        ...additionalDocuments.filter(doc => doc.id !== additionalDocId),\n        {\n          id: additionalDocId,\n          requiredByAdmin,\n          label: this.getAdditionalDocLabel({ label, additionalDoc }),\n          category,\n        },\n      ];\n      return this._update({\n        id,\n        object: { additionalDocuments: additionalDocumentsUpdate },\n      });\n    }\n\n    return this._update({\n      id,\n      object: {\n        additionalDocuments: [\n          ...additionalDocuments,\n          { id: additionalDocId, requiredByAdmin, label, category },\n        ],\n      },\n    });\n  }\n\n  removeAdditionalDoc({ id: docId, additionalDocId }) {\n    const { additionalDocuments = [] } = this.get(docId);\n    return this._update({\n      id: docId,\n      object: {\n        additionalDocuments: additionalDocuments.filter(({ id }) => id !== additionalDocId),\n      },\n    });\n  }\n}\n\nexport default CollectionService;\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/CollectionService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/helpers/CollectionService.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\n\nclass CollectionService {\n  constructor(collection) {\n    if (!collection) {\n      throw new Error('A collection is needed in CollectionService, but none was passed');\n    }\n\n    this.collection = collection;\n  }\n\n  insert(object = {}) {\n    return this.collection.insert(object);\n  }\n\n  _update({\n    id,\n    object,\n    operator = '$set'\n  }) {\n    if (Object.keys(object).length > 0) {\n      // debugger;\n      return this.collection.update(id, {\n        [operator]: object\n      });\n    }\n\n    return null;\n  }\n\n  baseUpdate(...args) {\n    return this.collection.update(...args);\n  }\n\n  remove(...args) {\n    return this.collection.remove(...args);\n  }\n\n  get(id) {\n    return this.collection.findOne(id);\n  }\n\n  safeGet(id) {\n    const result = this.get(id);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with id \"${id}\" in collection \"${this.collection._name}\"`);\n    }\n\n    return result;\n  }\n\n  find(...args) {\n    return this.collection.find(...args);\n  }\n\n  findOne(...args) {\n    return this.collection.findOne(...args);\n  }\n\n  checkQuery(body) {\n    if (body && body.$filter) {\n      throw new Meteor.Error('$filter found in query body, did you mean $filters?');\n    }\n  }\n\n  createQuery(...args) {\n    this.checkQuery(args[0]);\n    return this.collection.createQuery(...args);\n  }\n\n  fetchOne(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetchOne();\n  }\n\n  safeFetchOne(...args) {\n    const {\n      $filters = {}\n    } = args.find(arg => arg.$filters);\n    const result = this.fetchOne(...args);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with filters \"${JSON.stringify($filters)}\" in collection \"${this.collection._name}\"`);\n    }\n\n    return result;\n  }\n\n  fetch(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetch();\n  }\n\n  getLink(...args) {\n    return this.collection.getLink(...args);\n  }\n\n  count(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).getCount();\n  }\n\n  countAll() {\n    return this.find({}).count();\n  }\n\n  getAll() {\n    return this.find({}).fetch();\n  }\n\n  get rawCollection() {\n    return this.collection.rawCollection();\n  }\n\n  exists(_id) {\n    return !!(_id && this.findOne({\n      _id\n    }, {\n      fields: {\n        _id: 1\n      }\n    }));\n  }\n\n  aggregate(...args) {\n    return this.rawCollection.aggregate(...args);\n  } // Don't return the results from linker\n\n\n  addLink({\n    id,\n    linkName,\n    linkId,\n    metadata = {}\n  }) {\n    const linker = this.collection.getLink(id, linkName);\n    const {\n      linker: {\n        strategy\n      }\n    } = linker;\n\n    switch (strategy) {\n      case 'one':\n        linker.set(linkId);\n        return;\n\n      case 'many':\n        linker.add(linkId);\n        return;\n\n      case 'one-meta':\n        linker.set(linkId, metadata);\n        return;\n\n      case 'many-meta':\n        linker.add(linkId, metadata);\n        return;\n\n      default:\n        return null;\n    }\n  } // Don't return the results from linker\n\n\n  removeLink({\n    id,\n    linkName,\n    linkId\n  }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: {\n        strategy\n      }\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n      case 'one':\n        linker.unset(linkId);\n        return;\n\n      case 'many':\n        linker.remove(linkId);\n        return;\n\n      default:\n        return null;\n    }\n  }\n\n  updateLinkMetadata({\n    id,\n    linkName,\n    linkId,\n    metadata\n  }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: {\n        strategy\n      }\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n      case 'one':\n        linker.metadata(metadata);\n        return;\n\n      case 'many':\n        linker.metadata(linkId, metadata);\n        return;\n\n      default:\n        return null;\n    }\n  }\n\n  getAssignedEmployee({\n    id\n  }) {\n    const {\n      assignee\n    } = this.fetchOne({\n      $filters: {\n        _id: id\n      },\n      assignee: 1\n    });\n    return assignee;\n  }\n\n  getAdditionalDocLabel({\n    label,\n    additionalDoc\n  }) {\n    if (label) {\n      return label;\n    }\n\n    if (additionalDoc.label) {\n      return additionalDoc.label;\n    }\n\n    return undefined;\n  }\n\n  setAdditionalDoc({\n    id,\n    additionalDocId,\n    requiredByAdmin,\n    label,\n    category\n  }) {\n    const {\n      additionalDocuments\n    } = this.get(id);\n    const additionalDoc = additionalDocuments.find(doc => doc.id === additionalDocId);\n\n    if (additionalDoc) {\n      const additionalDocumentsUpdate = [...additionalDocuments.filter(doc => doc.id !== additionalDocId), {\n        id: additionalDocId,\n        requiredByAdmin,\n        label: this.getAdditionalDocLabel({\n          label,\n          additionalDoc\n        }),\n        category\n      }];\n      return this._update({\n        id,\n        object: {\n          additionalDocuments: additionalDocumentsUpdate\n        }\n      });\n    }\n\n    return this._update({\n      id,\n      object: {\n        additionalDocuments: [...additionalDocuments, {\n          id: additionalDocId,\n          requiredByAdmin,\n          label,\n          category\n        }]\n      }\n    });\n  }\n\n  removeAdditionalDoc({\n    id: docId,\n    additionalDocId\n  }) {\n    const {\n      additionalDocuments = []\n    } = this.get(docId);\n    return this._update({\n      id: docId,\n      object: {\n        additionalDocuments: additionalDocuments.filter(({\n          id\n        }) => id !== additionalDocId)\n      }\n    });\n  }\n\n}\n\nmodule.exportDefault(CollectionService);","map":{"version":3,"sources":["imports/core/api/helpers/CollectionService.js"],"names":["constructor","insert","object","_update","operator","Object","baseUpdate","remove","get","safeGet","result","Meteor","id","_name","find","findOne","checkQuery","body","createQuery","args","fetchOne","safeFetchOne","$filters","arg","JSON","fetch","getLink","count","countAll","getAll","exists","_id","fields","aggregate","addLink","metadata","linker","strategy","removeLink","linkId","updateLinkMetadata","getAssignedEmployee","assignee","getAdditionalDocLabel","additionalDoc","setAdditionalDoc","category","additionalDocuments","doc","additionalDocumentsUpdate","label","removeAdditionalDoc","additionalDocId"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nclass CollectionService {\n  constructor(collection) {\n    if (!collection) {\n      throw new Error('A collection is needed in CollectionService, but none was passed');\n    }\n    this.collection = collection;\n  }\n\n  insert(object = {}) {\n    return this.collection.insert(object);\n  }\n\n  _update({ id, object, operator = '$set' }) {\n    if (Object.keys(object).length > 0) {\n      // debugger;\n      return this.collection.update(id, { [operator]: object });\n    }\n    return null;\n  }\n\n  baseUpdate(...args) {\n    return this.collection.update(...args);\n  }\n\n  remove(...args) {\n    return this.collection.remove(...args);\n  }\n\n  get(id) {\n    return this.collection.findOne(id);\n  }\n\n  safeGet(id) {\n    const result = this.get(id);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with id \"${id}\" in collection \"${\n        this.collection._name\n      }\"`);\n    }\n\n    return result;\n  }\n\n  find(...args) {\n    return this.collection.find(...args);\n  }\n\n  findOne(...args) {\n    return this.collection.findOne(...args);\n  }\n\n  checkQuery(body) {\n    if (body && body.$filter) {\n      throw new Meteor.Error('$filter found in query body, did you mean $filters?');\n    }\n  }\n\n  createQuery(...args) {\n    this.checkQuery(args[0]);\n    return this.collection.createQuery(...args);\n  }\n\n  fetchOne(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetchOne();\n  }\n\n  safeFetchOne(...args) {\n    const { $filters = {} } = args.find(arg => arg.$filters);\n    const result = this.fetchOne(...args);\n\n    if (!result) {\n      throw new Meteor.Error(`Could not find object with filters \"${JSON.stringify($filters)}\" in collection \"${this.collection._name}\"`);\n    }\n\n    return result;\n  }\n\n  fetch(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).fetch();\n  }\n\n  getLink(...args) {\n    return this.collection.getLink(...args);\n  }\n\n  count(...args) {\n    this.checkQuery(args[0]);\n    return this.createQuery(...args).getCount();\n  }\n\n  countAll() {\n    return this.find({}).count();\n  }\n\n  getAll() {\n    return this.find({}).fetch();\n  }\n\n  get rawCollection() {\n    return this.collection.rawCollection();\n  }\n\n  exists(_id) {\n    return !!(_id && this.findOne({ _id }, { fields: { _id: 1 } }));\n  }\n\n  aggregate(...args) {\n    return this.rawCollection.aggregate(...args);\n  }\n\n  // Don't return the results from linker\n  addLink({ id, linkName, linkId, metadata = {} }) {\n    const linker = this.collection.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy) {\n    case 'one':\n      linker.set(linkId);\n      return;\n    case 'many':\n      linker.add(linkId);\n      return;\n    case 'one-meta':\n      linker.set(linkId, metadata);\n      return;\n    case 'many-meta':\n      linker.add(linkId, metadata);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  // Don't return the results from linker\n  removeLink({ id, linkName, linkId }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n    case 'one':\n      linker.unset(linkId);\n      return;\n    case 'many':\n      linker.remove(linkId);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  updateLinkMetadata({ id, linkName, linkId, metadata }) {\n    const linker = this.getLink(id, linkName);\n    const {\n      linker: { strategy },\n    } = linker;\n\n    switch (strategy.split('-')[0]) {\n    case 'one':\n      linker.metadata(metadata);\n      return;\n    case 'many':\n      linker.metadata(linkId, metadata);\n      return;\n    default:\n      return null;\n    }\n  }\n\n  getAssignedEmployee({ id }) {\n    const { assignee } = this.fetchOne({ $filters: { _id: id }, assignee: 1 });\n\n    return assignee;\n  }\n\n  getAdditionalDocLabel({ label, additionalDoc }) {\n    if (label) {\n      return label;\n    }\n    if (additionalDoc.label) {\n      return additionalDoc.label;\n    }\n\n    return undefined;\n  }\n\n  setAdditionalDoc({ id, additionalDocId, requiredByAdmin, label, category }) {\n    const { additionalDocuments } = this.get(id);\n\n    const additionalDoc = additionalDocuments.find(doc => doc.id === additionalDocId);\n\n    if (additionalDoc) {\n      const additionalDocumentsUpdate = [\n        ...additionalDocuments.filter(doc => doc.id !== additionalDocId),\n        {\n          id: additionalDocId,\n          requiredByAdmin,\n          label: this.getAdditionalDocLabel({ label, additionalDoc }),\n          category,\n        },\n      ];\n      return this._update({\n        id,\n        object: { additionalDocuments: additionalDocumentsUpdate },\n      });\n    }\n\n    return this._update({\n      id,\n      object: {\n        additionalDocuments: [\n          ...additionalDocuments,\n          { id: additionalDocId, requiredByAdmin, label, category },\n        ],\n      },\n    });\n  }\n\n  removeAdditionalDoc({ id: docId, additionalDocId }) {\n    const { additionalDocuments = [] } = this.get(docId);\n    return this._update({\n      id: docId,\n      object: {\n        additionalDocuments: additionalDocuments.filter(({ id }) => id !== additionalDocId),\n      },\n    });\n  }\n}\n\nexport default CollectionService;\n"]},"sourceType":"script","hash":"32abf554d11bfadbeca709f4885181fd555130ac"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/middleware.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/Calculator/test/middleware.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/middleware.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/test/middleware.spec.js"],"names":["expect","MiddlewareManager","borrowerExtractorMiddleware","describe","Calc","constructor","params","middlewareManager","applyToAllMethods","parameters","it","calc","loan","borrowers","to","deep","equal","parameters2"],"mappings":";;AAAA;;AACA;AACA,SAASA,MAAT,QAAuB,MAAvB;AAEA,OAAOC,iBAAP;AACA,SAASC,2BAAT;AAEAC,QAAQ,CAAC,uBAAD,EAA0B,MAAM;AACtCA,EAAAA,QAAQ,CAAC,6BAAD,EAAgC,MAAM;AAC5C,UAAMC,IAAN,CAAW;AACTC,MAAAA,WAAW,GAAG;AAAA,6CASAC,MAAM,IAAIA,MATV;;AACZ,cAAMC,iBAAiB,GAAG,IAAIN,iBAAJ,CAAsB,IAAtB,CAA1B;AACAM,QAAAA,iBAAiB,CAACC,iBAAlB,CAAoCN,2BAApC;AACD;;AAEDO,MAAAA,UAAU,CAACH,MAAD,EAAS;AACjB,eAAOA,MAAP;AACD;;AARQ;;AAaXI,IAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC5B,YAAMC,IAAI,GAAG,IAAIP,IAAJ,EAAb;AAEAJ,MAAAA,MAAM,CAACW,IAAI,CAACF,UAAL,CAAgB;AAAEG,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAR,OAAhB,CAAD,CAAN,CAAoDC,EAApD,CAAuDC,IAAvD,CAA4DC,KAA5D,CAAkE;AAChEJ,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAD0D;AAEhEA,QAAAA,SAAS,EAAE;AAFqD,OAAlE;AAID,KAPC,CAAF;AASAH,IAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAChD,YAAMC,IAAI,GAAG,IAAIP,IAAJ,EAAb;AAEAJ,MAAAA,MAAM,CAACW,IAAI,CAACF,UAAL,CAAgB;AAAEG,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAR;AAA0BA,QAAAA,SAAS,EAAE;AAArC,OAAhB,CAAD,CAAN,CAAkEC,EAAlE,CAAqEC,IAArE,CAA0EC,KAA1E,CAAgF;AAC9EJ,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SADwE;AAE9EA,QAAAA,SAAS,EAAE;AAFmE,OAAhF;AAID,KAPC,CAAF;AASAH,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3C,YAAMC,IAAI,GAAG,IAAIP,IAAJ,EAAb;AAEAJ,MAAAA,MAAM,CAACW,IAAI,CAACM,WAAL,CAAiB;AAAEL,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAR,OAAjB,CAAD,CAAN,CAAqDC,EAArD,CAAwDC,IAAxD,CAA6DC,KAA7D,CAAmE;AACjEJ,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAD2D,OAAnE;AAGD,KANC,CAAF;AAOD,GAvCO,CAAR;AAwCD,CAzCO,CAAR","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport MiddlewareManager from '../../MiddlewareManager';\nimport { borrowerExtractorMiddleware } from '../middleware';\n\ndescribe('Calculator middleware', () => {\n  describe('borrowerExtractorMiddleware', () => {\n    class Calc {\n      constructor() {\n        const middlewareManager = new MiddlewareManager(this);\n        middlewareManager.applyToAllMethods(borrowerExtractorMiddleware);\n      }\n\n      parameters(params) {\n        return params;\n      }\n\n      parameters2 = params => params;\n    }\n\n    it('extracts borrower', () => {\n      const calc = new Calc();\n\n      expect(calc.parameters({ loan: { borrowers: 1 } })).to.deep.equal({\n        loan: { borrowers: 1 },\n        borrowers: 1,\n      });\n    });\n\n    it('does not overwrite existing borrowers', () => {\n      const calc = new Calc();\n\n      expect(calc.parameters({ loan: { borrowers: 1 }, borrowers: 2 })).to.deep.equal({\n        loan: { borrowers: 1 },\n        borrowers: 2,\n      });\n    });\n\n    it('does not work for arrow function', () => {\n      const calc = new Calc();\n\n      expect(calc.parameters2({ loan: { borrowers: 1 } })).to.deep.equal({\n        loan: { borrowers: 1 },\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/middleware.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/test/middleware.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar MiddlewareManager;\nmodule.link(\"../../MiddlewareManager\", {\n  \"default\": function (v) {\n    MiddlewareManager = v;\n  }\n}, 1);\nvar borrowerExtractorMiddleware;\nmodule.link(\"../middleware\", {\n  borrowerExtractorMiddleware: function (v) {\n    borrowerExtractorMiddleware = v;\n  }\n}, 2);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-env mocha */\n\n\ndescribe('Calculator middleware', function () {\n  describe('borrowerExtractorMiddleware', function () {\n    var Calc =\n    /*#__PURE__*/\n    function () {\n      function Calc() {\n        _defineProperty(this, \"parameters2\", function (params) {\n          return params;\n        });\n\n        var middlewareManager = new MiddlewareManager(this);\n        middlewareManager.applyToAllMethods(borrowerExtractorMiddleware);\n      }\n\n      var _proto = Calc.prototype;\n\n      _proto.parameters = function () {\n        function parameters(params) {\n          return params;\n        }\n\n        return parameters;\n      }();\n\n      return Calc;\n    }();\n\n    it('extracts borrower', function () {\n      var calc = new Calc();\n      expect(calc.parameters({\n        loan: {\n          borrowers: 1\n        }\n      })).to.deep.equal({\n        loan: {\n          borrowers: 1\n        },\n        borrowers: 1\n      });\n    });\n    it('does not overwrite existing borrowers', function () {\n      var calc = new Calc();\n      expect(calc.parameters({\n        loan: {\n          borrowers: 1\n        },\n        borrowers: 2\n      })).to.deep.equal({\n        loan: {\n          borrowers: 1\n        },\n        borrowers: 2\n      });\n    });\n    it('does not work for arrow function', function () {\n      var calc = new Calc();\n      expect(calc.parameters2({\n        loan: {\n          borrowers: 1\n        }\n      })).to.deep.equal({\n        loan: {\n          borrowers: 1\n        }\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/Calculator/test/middleware.spec.js"],"names":["describe","constructor","middlewareManager","parameters","params","it","calc","expect","loan","borrowers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;AAMAA,QAAQ,CAAA,uBAAA,EAA0B,YAAM;AACtCA,EAAAA,QAAQ,CAAA,6BAAA,EAAgC,YAAM;AAAA,QAC5C,IAD4C;AAAA;AAAA;AAE1CC,sBAAc;AAAA,QAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EASAG,UAAAA,MAAM;AAAA,iBATN,MASM;AAAA,SATN,CAAA;;AACZ,YAAMF,iBAAiB,GAAG,IAAA,iBAAA,CAA1B,IAA0B,CAA1B;AACAA,QAAAA,iBAAiB,CAAjBA,iBAAAA,CAAAA,2BAAAA;AACD;;AALyC;;AAAA,aAO1CC,UAP0C;AAO1CA,4BAAU,MAAVA,EAAmB;AACjB,iBAAA,MAAA;AACD;;AATyC;AAAA;;AAAA;AAAA;;AAc5CE,IAAAA,EAAE,CAAA,mBAAA,EAAsB,YAAM;AAC5B,UAAMC,IAAI,GAAG,IAAb,IAAa,EAAb;AAEAC,MAAAA,MAAM,CAAC,IAAI,CAAJ,UAAA,CAAgB;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAR,OAAhB,CAAD,CAANF,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAkE;AAChEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAD0D;AAEhEA,QAAAA,SAAS,EAAE;AAFqD,OAAlEF;AAHFF,KAAE,CAAFA;AASAA,IAAAA,EAAE,CAAA,uCAAA,EAA0C,YAAM;AAChD,UAAMC,IAAI,GAAG,IAAb,IAAa,EAAb;AAEAC,MAAAA,MAAM,CAAC,IAAI,CAAJ,UAAA,CAAgB;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAR;AAA0BA,QAAAA,SAAS,EAAE;AAArC,OAAhB,CAAD,CAANF,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAgF;AAC9EC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SADwE;AAE9EA,QAAAA,SAAS,EAAE;AAFmE,OAAhFF;AAHFF,KAAE,CAAFA;AASAA,IAAAA,EAAE,CAAA,kCAAA,EAAqC,YAAM;AAC3C,UAAMC,IAAI,GAAG,IAAb,IAAa,EAAb;AAEAC,MAAAA,MAAM,CAAC,IAAI,CAAJ,WAAA,CAAiB;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAR,OAAjB,CAAD,CAANF,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAmE;AACjEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAD2D,OAAnEF;AAHFF,KAAE,CAAFA;AAhCFL,GAAQ,CAARA;AADFA,CAAQ,CAARA","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport MiddlewareManager from '../../MiddlewareManager';\nimport { borrowerExtractorMiddleware } from '../middleware';\n\ndescribe('Calculator middleware', () => {\n  describe('borrowerExtractorMiddleware', () => {\n    class Calc {\n      constructor() {\n        const middlewareManager = new MiddlewareManager(this);\n        middlewareManager.applyToAllMethods(borrowerExtractorMiddleware);\n      }\n\n      parameters(params) {\n        return params;\n      }\n\n      parameters2 = params => params;\n    }\n\n    it('extracts borrower', () => {\n      const calc = new Calc();\n\n      expect(calc.parameters({ loan: { borrowers: 1 } })).to.deep.equal({\n        loan: { borrowers: 1 },\n        borrowers: 1,\n      });\n    });\n\n    it('does not overwrite existing borrowers', () => {\n      const calc = new Calc();\n\n      expect(calc.parameters({ loan: { borrowers: 1 }, borrowers: 2 })).to.deep.equal({\n        loan: { borrowers: 1 },\n        borrowers: 2,\n      });\n    });\n\n    it('does not work for arrow function', () => {\n      const calc = new Calc();\n\n      expect(calc.parameters2({ loan: { borrowers: 1 } })).to.deep.equal({\n        loan: { borrowers: 1 },\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"9010a84c25b0a6ee421a9b04bd9c14caffee1006"}

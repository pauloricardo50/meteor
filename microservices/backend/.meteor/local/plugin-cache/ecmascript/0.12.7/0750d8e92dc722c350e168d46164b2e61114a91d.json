{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/test/PropertyService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/properties/server/test/PropertyService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/test/PropertyService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/properties/server/test/PropertyService.test.js"],"names":["expect","resetDatabase","Factory","OrganisationService","LoanService","PropertyService","UserService","generator","PROPERTY_CATEGORY","checkEmails","EMAIL_IDS","EMAIL_TEMPLATES","Properties","describe","timeout","beforeEach","it","insert","property","value","address1","city","zipCode","find","fetch","to","deep","include","properties","_id","loans","remove","propertyId","equal","length","structures","id","loanId","get","propertyIds","create","canton","users","_factory","assignedEmployeeId","organisations","category","PRO","userId","admin","pro","isNewUser","proCreateUser","user","email","firstName","name","phoneNumber","proUserId","inviteUser","then","fetchOne","$filters","assignedEmployee","referredByUser","referredByOrganisation","emails","emailId","address","response","status","template","template_name","message","from_email","subject","from_name","INVITE_USER_TO_PROPERTY","CONFIRM_USER_INVITATION","skip","verified","lastName","global_merge_vars","NOTIFICATION_AND_CTA","mandrillId","content","insertExternalProperty","externalId","imageUrls","externalLink","throw","prop","organisation","userLinks"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport OrganisationService from 'core/api/organisations/server/OrganisationService';\nimport LoanService from '../../../loans/server/LoanService';\nimport PropertyService from '../PropertyService';\nimport UserService from '../../../users/server/UserService';\nimport generator from '../../../factories';\nimport { PROPERTY_CATEGORY } from '../../propertyConstants';\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport { EMAIL_IDS, EMAIL_TEMPLATES } from '../../../email/emailConstants';\nimport Properties from '../../properties';\n\ndescribe('PropertyService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('insert', () => {\n    it('adds a new property', () => {\n      PropertyService.insert({\n        property: {\n          value: 100,\n          address1: 'Chemin 1',\n          city: 'Genève',\n          zipCode: 1201,\n        },\n      });\n\n      expect(PropertyService.find().fetch()[0]).to.deep.include({\n        value: 100,\n      });\n    });\n  });\n\n  describe('remove', () => {\n    it('removes a property', () => {\n      generator({ properties: { _id: 'prop', loans: {} } });\n\n      expect(PropertyService.remove({ propertyId: 'prop' })).to.equal(1);\n\n      expect(PropertyService.find({}).fetch().length).to.equal(0);\n    });\n\n    it('does not remove a property if it has multiple loans, without specifiying from which to remove it', () => {\n      generator({ properties: { _id: 'prop', loans: [{}, {}] } });\n\n      expect(PropertyService.remove({ propertyId: 'prop' })).to.equal(false);\n\n      expect(PropertyService.find({}).fetch().length).to.equal(1);\n    });\n\n    it('unlinks a property if it has multiple loans', () => {\n      generator({\n        properties: {\n          _id: 'prop',\n          loans: [\n            { _id: 'loan', structures: [{ id: 'a', propertyId: 'prop' }] },\n            { _id: 'loan2' },\n          ],\n        },\n      });\n\n      expect(PropertyService.remove({ propertyId: 'prop', loanId: 'loan' })).to.equal(1);\n\n      expect(PropertyService.find({}).fetch().length).to.equal(1);\n      expect(LoanService.get('loan').propertyIds).to.deep.equal([]);\n      expect(LoanService.get('loan').structures[0].propertyId).to.equal(null);\n      expect(LoanService.get('loan2').propertyIds).to.deep.equal(['prop']);\n    });\n  });\n\n  describe('canton autovalue', () => {\n    it('sets the canton on the property', () => {\n      const propertyId = Factory.create('property', { zipCode: 1400 })._id;\n      const property = PropertyService.get(propertyId);\n\n      expect(property.canton).to.equal('VD');\n    });\n\n    it('removes the canton if an invalid zipcode is given', () => {\n      const propertyId = Factory.create('property', { zipCode: 75000 })._id;\n      const property = PropertyService.get(propertyId);\n\n      expect(property.canton).to.equal(null);\n    });\n  });\n\n  describe('inviteUser', () => {\n    it('should invite and create a new user if it does not already exist', () => {\n      generator({\n        users: [\n          { _factory: 'admin', _id: 'adminUser' },\n          {\n            _factory: 'pro',\n            _id: 'proUser',\n            assignedEmployeeId: 'adminUser',\n            organisations: { _id: 'organisation' },\n            properties: {\n              _id: 'proProperty',\n              category: PROPERTY_CATEGORY.PRO,\n              address1: 'Rue du parc 3',\n            },\n          },\n        ],\n      });\n\n      const { userId, admin, pro, isNewUser } = UserService.proCreateUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123',\n        },\n        proUserId: 'proUser',\n      });\n\n      return PropertyService.inviteUser({\n        propertyIds: ['proProperty'],\n        admin,\n        pro,\n        userId,\n        isNewUser,\n      }).then(() => {\n        const user = UserService.fetchOne({\n          $filters: { 'emails.address': 'john@doe.com' },\n          loans: { properties: { _id: 1 } },\n          assignedEmployee: { _id: 1 },\n          referredByUser: { _id: 1 },\n          referredByOrganisation: { _id: 1 },\n        });\n\n        const {\n          loans = [],\n          assignedEmployee = {},\n          referredByUser = {},\n          referredByOrganisation = {},\n        } = user;\n\n        expect(loans.length).to.equal(1);\n        expect(loans[0].properties.length).to.equal(1);\n        expect(loans[0].properties[0]._id).to.equal('proProperty');\n        expect(assignedEmployee._id).to.equal('adminUser');\n        expect(referredByUser._id).to.equal('proUser');\n        expect(referredByOrganisation._id).to.equal('organisation');\n\n        return checkEmails(2).then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            address,\n            response: { status },\n            template: {\n              template_name,\n              message: { from_email, subject, from_name },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n\n          expect(subject).to.equal('e-Potek - \"Rue du parc 3\"');\n\n          {\n            const {\n              emailId,\n              address,\n              response: { status },\n              template: {\n                template_name,\n                message: { from_email, subject, from_name },\n              },\n            } = emails.find(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION);\n            expect(subject).to.equal('Invitation réussie');\n          }\n        });\n      });\n    });\n\n    // FIXME: Fails because of meteor toys: https://github.com/MeteorToys/meteor-devtools/issues/111\n    it.skip('should send an email invite if it is done by an admin', () => {\n      generator({\n        users: [\n          { _factory: 'admin', _id: 'adminUser' },\n          {\n            _factory: 'pro',\n            _id: 'proUser',\n            assignedEmployeeId: 'adminUser',\n            organisations: { _id: 'organisation' },\n            properties: {\n              _id: 'proProperty',\n              category: PROPERTY_CATEGORY.PRO,\n              address1: 'Rue du parc 5',\n            },\n          },\n        ],\n      });\n\n      PropertyService.inviteUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123',\n        },\n        propertyIds: ['proProperty'],\n      });\n\n      return checkEmails(1).then((emails) => {\n        expect(emails.length).to.equal(2);\n      });\n    });\n\n    it('should send an email invite if it is done by an admin and the user exists already', () => {\n      generator({\n        users: [\n          {\n            emails: [{ address: 'john@doe.com', verified: true }],\n            assignedEmployee: {\n              _factory: 'admin',\n              _id: 'adminUser',\n              firstName: 'Lydia',\n              lastName: 'Abraha',\n            },\n          },\n          {\n            _factory: 'pro',\n            _id: 'proUser',\n            assignedEmployeeId: 'adminUser',\n            organisations: { _id: 'organisation' },\n            properties: {\n              _id: 'proProperty',\n              category: PROPERTY_CATEGORY.PRO,\n              address1: 'Rue du parc 4',\n            },\n          },\n        ],\n      });\n\n      const { userId, admin, isNewUser } = UserService.proCreateUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123',\n        },\n      });\n\n      PropertyService.inviteUser({\n        propertyIds: ['proProperty'],\n        userId,\n        admin,\n        isNewUser,\n      });\n\n      return checkEmails(1).then((emails) => {\n        expect(emails.length).to.equal(1);\n        const {\n          emailId,\n          address,\n          response: { status },\n          template: {\n            template_name,\n            message: { from_email, subject, global_merge_vars, from_name },\n          },\n        } = emails[0];\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n        expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n        expect(address).to.equal('john@doe.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.equal('e-Potek - \"Rue du parc 4\"');\n        expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('Lydia Abraha');\n      });\n    });\n  });\n\n  describe('insertExternalProperty', () => {\n    it('inserts a property with external properties', () => {\n      generator({ users: { _factory: 'pro', _id: 'proId' } });\n\n      PropertyService.insertExternalProperty({\n        userId: 'proId',\n        property: {\n          externalId: 'abcd',\n          imageUrls: ['https://www.e-potek.ch/img/logo_black.svg'],\n          externalLink: 'www.e-potek.ch',\n        },\n      });\n\n      const properties = PropertyService.fetch({\n        externalId: 1,\n      });\n\n      expect(properties.length).to.equal(1);\n      expect(properties[0].externalId).to.equal('abcd');\n    });\n\n    it('throws if a property with the same external id is inserted twice', () => {\n      generator({\n        properties: { externalId: 'abcd' },\n        users: { _factory: 'pro', _id: 'proId' },\n      });\n\n      expect(() =>\n        PropertyService.insertExternalProperty({\n          userId: 'proId',\n          property: {\n            externalId: 'abcd',\n            imageUrls: ['https://www.e-potek.ch/img/logo_black.svg'],\n            externalLink: 'www.e-potek.ch',\n          },\n        })).to.throw('externalId');\n    });\n  });\n\n  describe('reducers', () => {\n    it('organisation', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          users: {\n            _id: 'proId',\n            firstName: 'Joe',\n            lastName: 'Jackson',\n            organisations: {\n              _id: 'org',\n              name: 'Org1',\n              address1: 'Rue du parc 7',\n            },\n          },\n          loans: { _id: 'loan', name: '18-0101' },\n        },\n      });\n\n      const prop = PropertyService.fetchOne({\n        $filters: { _id: 'propertyId' },\n        organisation: 1,\n      });\n\n      expect(prop.organisation).to.deep.equal({\n        _id: 'org',\n        name: 'Org1',\n        userLinks: [{ _id: 'proId' }],\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/test/PropertyService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/properties/server/test/PropertyService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet OrganisationService;\nmodule.link(\"../../../organisations/server/OrganisationService\", {\n  default(v) {\n    OrganisationService = v;\n  }\n\n}, 3);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 4);\nlet PropertyService;\nmodule.link(\"../PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 5);\nlet UserService;\nmodule.link(\"../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 6);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 7);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 8);\nlet checkEmails;\nmodule.link(\"../../../../utils/testHelpers\", {\n  checkEmails(v) {\n    checkEmails = v;\n  }\n\n}, 9);\nlet EMAIL_IDS, EMAIL_TEMPLATES;\nmodule.link(\"../../../email/emailConstants\", {\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  },\n\n  EMAIL_TEMPLATES(v) {\n    EMAIL_TEMPLATES = v;\n  }\n\n}, 10);\nlet Properties;\nmodule.link(\"../../properties\", {\n  default(v) {\n    Properties = v;\n  }\n\n}, 11);\ndescribe('PropertyService', function () {\n  this.timeout(10000);\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('insert', () => {\n    it('adds a new property', () => {\n      PropertyService.insert({\n        property: {\n          value: 100,\n          address1: 'Chemin 1',\n          city: 'Genève',\n          zipCode: 1201\n        }\n      });\n      expect(PropertyService.find().fetch()[0]).to.deep.include({\n        value: 100\n      });\n    });\n  });\n  describe('remove', () => {\n    it('removes a property', () => {\n      generator({\n        properties: {\n          _id: 'prop',\n          loans: {}\n        }\n      });\n      expect(PropertyService.remove({\n        propertyId: 'prop'\n      })).to.equal(1);\n      expect(PropertyService.find({}).fetch().length).to.equal(0);\n    });\n    it('does not remove a property if it has multiple loans, without specifiying from which to remove it', () => {\n      generator({\n        properties: {\n          _id: 'prop',\n          loans: [{}, {}]\n        }\n      });\n      expect(PropertyService.remove({\n        propertyId: 'prop'\n      })).to.equal(false);\n      expect(PropertyService.find({}).fetch().length).to.equal(1);\n    });\n    it('unlinks a property if it has multiple loans', () => {\n      generator({\n        properties: {\n          _id: 'prop',\n          loans: [{\n            _id: 'loan',\n            structures: [{\n              id: 'a',\n              propertyId: 'prop'\n            }]\n          }, {\n            _id: 'loan2'\n          }]\n        }\n      });\n      expect(PropertyService.remove({\n        propertyId: 'prop',\n        loanId: 'loan'\n      })).to.equal(1);\n      expect(PropertyService.find({}).fetch().length).to.equal(1);\n      expect(LoanService.get('loan').propertyIds).to.deep.equal([]);\n      expect(LoanService.get('loan').structures[0].propertyId).to.equal(null);\n      expect(LoanService.get('loan2').propertyIds).to.deep.equal(['prop']);\n    });\n  });\n  describe('canton autovalue', () => {\n    it('sets the canton on the property', () => {\n      const propertyId = Factory.create('property', {\n        zipCode: 1400\n      })._id;\n\n      const property = PropertyService.get(propertyId);\n      expect(property.canton).to.equal('VD');\n    });\n    it('removes the canton if an invalid zipcode is given', () => {\n      const propertyId = Factory.create('property', {\n        zipCode: 75000\n      })._id;\n\n      const property = PropertyService.get(propertyId);\n      expect(property.canton).to.equal(null);\n    });\n  });\n  describe('inviteUser', () => {\n    it('should invite and create a new user if it does not already exist', () => {\n      generator({\n        users: [{\n          _factory: 'admin',\n          _id: 'adminUser'\n        }, {\n          _factory: 'pro',\n          _id: 'proUser',\n          assignedEmployeeId: 'adminUser',\n          organisations: {\n            _id: 'organisation'\n          },\n          properties: {\n            _id: 'proProperty',\n            category: PROPERTY_CATEGORY.PRO,\n            address1: 'Rue du parc 3'\n          }\n        }]\n      });\n      const {\n        userId,\n        admin,\n        pro,\n        isNewUser\n      } = UserService.proCreateUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123'\n        },\n        proUserId: 'proUser'\n      });\n      return PropertyService.inviteUser({\n        propertyIds: ['proProperty'],\n        admin,\n        pro,\n        userId,\n        isNewUser\n      }).then(() => {\n        const user = UserService.fetchOne({\n          $filters: {\n            'emails.address': 'john@doe.com'\n          },\n          loans: {\n            properties: {\n              _id: 1\n            }\n          },\n          assignedEmployee: {\n            _id: 1\n          },\n          referredByUser: {\n            _id: 1\n          },\n          referredByOrganisation: {\n            _id: 1\n          }\n        });\n        const {\n          loans = [],\n          assignedEmployee = {},\n          referredByUser = {},\n          referredByOrganisation = {}\n        } = user;\n        expect(loans.length).to.equal(1);\n        expect(loans[0].properties.length).to.equal(1);\n        expect(loans[0].properties[0]._id).to.equal('proProperty');\n        expect(assignedEmployee._id).to.equal('adminUser');\n        expect(referredByUser._id).to.equal('proUser');\n        expect(referredByOrganisation._id).to.equal('organisation');\n        return checkEmails(2).then(emails => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            address,\n            response: {\n              status\n            },\n            template: {\n              template_name,\n              message: {\n                from_email,\n                subject,\n                from_name\n              }\n            }\n          } = emails.find(({\n            emailId\n          }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n          expect(subject).to.equal('e-Potek - \"Rue du parc 3\"');\n          {\n            const {\n              emailId,\n              address,\n              response: {\n                status\n              },\n              template: {\n                template_name,\n                message: {\n                  from_email,\n                  subject,\n                  from_name\n                }\n              }\n            } = emails.find(({\n              emailId\n            }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION);\n            expect(subject).to.equal('Invitation réussie');\n          }\n        });\n      });\n    }); // FIXME: Fails because of meteor toys: https://github.com/MeteorToys/meteor-devtools/issues/111\n\n    it.skip('should send an email invite if it is done by an admin', () => {\n      generator({\n        users: [{\n          _factory: 'admin',\n          _id: 'adminUser'\n        }, {\n          _factory: 'pro',\n          _id: 'proUser',\n          assignedEmployeeId: 'adminUser',\n          organisations: {\n            _id: 'organisation'\n          },\n          properties: {\n            _id: 'proProperty',\n            category: PROPERTY_CATEGORY.PRO,\n            address1: 'Rue du parc 5'\n          }\n        }]\n      });\n      PropertyService.inviteUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123'\n        },\n        propertyIds: ['proProperty']\n      });\n      return checkEmails(1).then(emails => {\n        expect(emails.length).to.equal(2);\n      });\n    });\n    it('should send an email invite if it is done by an admin and the user exists already', () => {\n      generator({\n        users: [{\n          emails: [{\n            address: 'john@doe.com',\n            verified: true\n          }],\n          assignedEmployee: {\n            _factory: 'admin',\n            _id: 'adminUser',\n            firstName: 'Lydia',\n            lastName: 'Abraha'\n          }\n        }, {\n          _factory: 'pro',\n          _id: 'proUser',\n          assignedEmployeeId: 'adminUser',\n          organisations: {\n            _id: 'organisation'\n          },\n          properties: {\n            _id: 'proProperty',\n            category: PROPERTY_CATEGORY.PRO,\n            address1: 'Rue du parc 4'\n          }\n        }]\n      });\n      const {\n        userId,\n        admin,\n        isNewUser\n      } = UserService.proCreateUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123'\n        }\n      });\n      PropertyService.inviteUser({\n        propertyIds: ['proProperty'],\n        userId,\n        admin,\n        isNewUser\n      });\n      return checkEmails(1).then(emails => {\n        expect(emails.length).to.equal(1);\n        const {\n          emailId,\n          address,\n          response: {\n            status\n          },\n          template: {\n            template_name,\n            message: {\n              from_email,\n              subject,\n              global_merge_vars,\n              from_name\n            }\n          }\n        } = emails[0];\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n        expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n        expect(address).to.equal('john@doe.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.equal('e-Potek - \"Rue du parc 4\"');\n        expect(global_merge_vars.find(({\n          name\n        }) => name === 'BODY').content).to.include('Lydia Abraha');\n      });\n    });\n  });\n  describe('insertExternalProperty', () => {\n    it('inserts a property with external properties', () => {\n      generator({\n        users: {\n          _factory: 'pro',\n          _id: 'proId'\n        }\n      });\n      PropertyService.insertExternalProperty({\n        userId: 'proId',\n        property: {\n          externalId: 'abcd',\n          imageUrls: ['https://www.e-potek.ch/img/logo_black.svg'],\n          externalLink: 'www.e-potek.ch'\n        }\n      });\n      const properties = PropertyService.fetch({\n        externalId: 1\n      });\n      expect(properties.length).to.equal(1);\n      expect(properties[0].externalId).to.equal('abcd');\n    });\n    it('throws if a property with the same external id is inserted twice', () => {\n      generator({\n        properties: {\n          externalId: 'abcd'\n        },\n        users: {\n          _factory: 'pro',\n          _id: 'proId'\n        }\n      });\n      expect(() => PropertyService.insertExternalProperty({\n        userId: 'proId',\n        property: {\n          externalId: 'abcd',\n          imageUrls: ['https://www.e-potek.ch/img/logo_black.svg'],\n          externalLink: 'www.e-potek.ch'\n        }\n      })).to.throw('externalId');\n    });\n  });\n  describe('reducers', () => {\n    it('organisation', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          users: {\n            _id: 'proId',\n            firstName: 'Joe',\n            lastName: 'Jackson',\n            organisations: {\n              _id: 'org',\n              name: 'Org1',\n              address1: 'Rue du parc 7'\n            }\n          },\n          loans: {\n            _id: 'loan',\n            name: '18-0101'\n          }\n        }\n      });\n      const prop = PropertyService.fetchOne({\n        $filters: {\n          _id: 'propertyId'\n        },\n        organisation: 1\n      });\n      expect(prop.organisation).to.deep.equal({\n        _id: 'org',\n        name: 'Org1',\n        userLinks: [{\n          _id: 'proId'\n        }]\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/properties/server/test/PropertyService.test.js"],"names":["describe","beforeEach","resetDatabase","it","PropertyService","property","value","address1","city","zipCode","expect","generator","properties","_id","loans","propertyId","structures","id","loanId","LoanService","users","_factory","assignedEmployeeId","organisations","category","PROPERTY_CATEGORY","isNewUser","user","email","firstName","name","phoneNumber","proUserId","propertyIds","$filters","assignedEmployee","referredByUser","referredByOrganisation","emails","response","status","template","message","from_name","emailId","EMAIL_IDS","address","verified","lastName","EMAIL_TEMPLATES","global_merge_vars","userId","externalId","imageUrls","externalLink","prop","organisation","userLinks"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport OrganisationService from 'core/api/organisations/server/OrganisationService';\nimport LoanService from '../../../loans/server/LoanService';\nimport PropertyService from '../PropertyService';\nimport UserService from '../../../users/server/UserService';\nimport generator from '../../../factories';\nimport { PROPERTY_CATEGORY } from '../../propertyConstants';\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport { EMAIL_IDS, EMAIL_TEMPLATES } from '../../../email/emailConstants';\nimport Properties from '../../properties';\n\ndescribe('PropertyService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('insert', () => {\n    it('adds a new property', () => {\n      PropertyService.insert({\n        property: {\n          value: 100,\n          address1: 'Chemin 1',\n          city: 'Genève',\n          zipCode: 1201,\n        },\n      });\n\n      expect(PropertyService.find().fetch()[0]).to.deep.include({\n        value: 100,\n      });\n    });\n  });\n\n  describe('remove', () => {\n    it('removes a property', () => {\n      generator({ properties: { _id: 'prop', loans: {} } });\n\n      expect(PropertyService.remove({ propertyId: 'prop' })).to.equal(1);\n\n      expect(PropertyService.find({}).fetch().length).to.equal(0);\n    });\n\n    it('does not remove a property if it has multiple loans, without specifiying from which to remove it', () => {\n      generator({ properties: { _id: 'prop', loans: [{}, {}] } });\n\n      expect(PropertyService.remove({ propertyId: 'prop' })).to.equal(false);\n\n      expect(PropertyService.find({}).fetch().length).to.equal(1);\n    });\n\n    it('unlinks a property if it has multiple loans', () => {\n      generator({\n        properties: {\n          _id: 'prop',\n          loans: [\n            { _id: 'loan', structures: [{ id: 'a', propertyId: 'prop' }] },\n            { _id: 'loan2' },\n          ],\n        },\n      });\n\n      expect(PropertyService.remove({ propertyId: 'prop', loanId: 'loan' })).to.equal(1);\n\n      expect(PropertyService.find({}).fetch().length).to.equal(1);\n      expect(LoanService.get('loan').propertyIds).to.deep.equal([]);\n      expect(LoanService.get('loan').structures[0].propertyId).to.equal(null);\n      expect(LoanService.get('loan2').propertyIds).to.deep.equal(['prop']);\n    });\n  });\n\n  describe('canton autovalue', () => {\n    it('sets the canton on the property', () => {\n      const propertyId = Factory.create('property', { zipCode: 1400 })._id;\n      const property = PropertyService.get(propertyId);\n\n      expect(property.canton).to.equal('VD');\n    });\n\n    it('removes the canton if an invalid zipcode is given', () => {\n      const propertyId = Factory.create('property', { zipCode: 75000 })._id;\n      const property = PropertyService.get(propertyId);\n\n      expect(property.canton).to.equal(null);\n    });\n  });\n\n  describe('inviteUser', () => {\n    it('should invite and create a new user if it does not already exist', () => {\n      generator({\n        users: [\n          { _factory: 'admin', _id: 'adminUser' },\n          {\n            _factory: 'pro',\n            _id: 'proUser',\n            assignedEmployeeId: 'adminUser',\n            organisations: { _id: 'organisation' },\n            properties: {\n              _id: 'proProperty',\n              category: PROPERTY_CATEGORY.PRO,\n              address1: 'Rue du parc 3',\n            },\n          },\n        ],\n      });\n\n      const { userId, admin, pro, isNewUser } = UserService.proCreateUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123',\n        },\n        proUserId: 'proUser',\n      });\n\n      return PropertyService.inviteUser({\n        propertyIds: ['proProperty'],\n        admin,\n        pro,\n        userId,\n        isNewUser,\n      }).then(() => {\n        const user = UserService.fetchOne({\n          $filters: { 'emails.address': 'john@doe.com' },\n          loans: { properties: { _id: 1 } },\n          assignedEmployee: { _id: 1 },\n          referredByUser: { _id: 1 },\n          referredByOrganisation: { _id: 1 },\n        });\n\n        const {\n          loans = [],\n          assignedEmployee = {},\n          referredByUser = {},\n          referredByOrganisation = {},\n        } = user;\n\n        expect(loans.length).to.equal(1);\n        expect(loans[0].properties.length).to.equal(1);\n        expect(loans[0].properties[0]._id).to.equal('proProperty');\n        expect(assignedEmployee._id).to.equal('adminUser');\n        expect(referredByUser._id).to.equal('proUser');\n        expect(referredByOrganisation._id).to.equal('organisation');\n\n        return checkEmails(2).then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            address,\n            response: { status },\n            template: {\n              template_name,\n              message: { from_email, subject, from_name },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n\n          expect(subject).to.equal('e-Potek - \"Rue du parc 3\"');\n\n          {\n            const {\n              emailId,\n              address,\n              response: { status },\n              template: {\n                template_name,\n                message: { from_email, subject, from_name },\n              },\n            } = emails.find(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION);\n            expect(subject).to.equal('Invitation réussie');\n          }\n        });\n      });\n    });\n\n    // FIXME: Fails because of meteor toys: https://github.com/MeteorToys/meteor-devtools/issues/111\n    it.skip('should send an email invite if it is done by an admin', () => {\n      generator({\n        users: [\n          { _factory: 'admin', _id: 'adminUser' },\n          {\n            _factory: 'pro',\n            _id: 'proUser',\n            assignedEmployeeId: 'adminUser',\n            organisations: { _id: 'organisation' },\n            properties: {\n              _id: 'proProperty',\n              category: PROPERTY_CATEGORY.PRO,\n              address1: 'Rue du parc 5',\n            },\n          },\n        ],\n      });\n\n      PropertyService.inviteUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123',\n        },\n        propertyIds: ['proProperty'],\n      });\n\n      return checkEmails(1).then((emails) => {\n        expect(emails.length).to.equal(2);\n      });\n    });\n\n    it('should send an email invite if it is done by an admin and the user exists already', () => {\n      generator({\n        users: [\n          {\n            emails: [{ address: 'john@doe.com', verified: true }],\n            assignedEmployee: {\n              _factory: 'admin',\n              _id: 'adminUser',\n              firstName: 'Lydia',\n              lastName: 'Abraha',\n            },\n          },\n          {\n            _factory: 'pro',\n            _id: 'proUser',\n            assignedEmployeeId: 'adminUser',\n            organisations: { _id: 'organisation' },\n            properties: {\n              _id: 'proProperty',\n              category: PROPERTY_CATEGORY.PRO,\n              address1: 'Rue du parc 4',\n            },\n          },\n        ],\n      });\n\n      const { userId, admin, isNewUser } = UserService.proCreateUser({\n        user: {\n          email: 'john@doe.com',\n          firstName: 'John',\n          name: 'Doe',\n          phoneNumber: '123',\n        },\n      });\n\n      PropertyService.inviteUser({\n        propertyIds: ['proProperty'],\n        userId,\n        admin,\n        isNewUser,\n      });\n\n      return checkEmails(1).then((emails) => {\n        expect(emails.length).to.equal(1);\n        const {\n          emailId,\n          address,\n          response: { status },\n          template: {\n            template_name,\n            message: { from_email, subject, global_merge_vars, from_name },\n          },\n        } = emails[0];\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n        expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n        expect(address).to.equal('john@doe.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.equal('e-Potek - \"Rue du parc 4\"');\n        expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('Lydia Abraha');\n      });\n    });\n  });\n\n  describe('insertExternalProperty', () => {\n    it('inserts a property with external properties', () => {\n      generator({ users: { _factory: 'pro', _id: 'proId' } });\n\n      PropertyService.insertExternalProperty({\n        userId: 'proId',\n        property: {\n          externalId: 'abcd',\n          imageUrls: ['https://www.e-potek.ch/img/logo_black.svg'],\n          externalLink: 'www.e-potek.ch',\n        },\n      });\n\n      const properties = PropertyService.fetch({\n        externalId: 1,\n      });\n\n      expect(properties.length).to.equal(1);\n      expect(properties[0].externalId).to.equal('abcd');\n    });\n\n    it('throws if a property with the same external id is inserted twice', () => {\n      generator({\n        properties: { externalId: 'abcd' },\n        users: { _factory: 'pro', _id: 'proId' },\n      });\n\n      expect(() =>\n        PropertyService.insertExternalProperty({\n          userId: 'proId',\n          property: {\n            externalId: 'abcd',\n            imageUrls: ['https://www.e-potek.ch/img/logo_black.svg'],\n            externalLink: 'www.e-potek.ch',\n          },\n        })).to.throw('externalId');\n    });\n  });\n\n  describe('reducers', () => {\n    it('organisation', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          users: {\n            _id: 'proId',\n            firstName: 'Joe',\n            lastName: 'Jackson',\n            organisations: {\n              _id: 'org',\n              name: 'Org1',\n              address1: 'Rue du parc 7',\n            },\n          },\n          loans: { _id: 'loan', name: '18-0101' },\n        },\n      });\n\n      const prop = PropertyService.fetchOne({\n        $filters: { _id: 'propertyId' },\n        organisation: 1,\n      });\n\n      expect(prop.organisation).to.deep.equal({\n        _id: 'org',\n        name: 'Org1',\n        userLinks: [{ _id: 'proId' }],\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"0750d8e92dc722c350e168d46164b2e61114a91d"}

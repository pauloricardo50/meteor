{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:browser-tests/browser/nightmare.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/meteortesting:browser-tests/browser/nightmare.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:browser-tests/browser/nightmare.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:browser-tests/browser/nightmare.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/meteortesting:browser-tests/browser/nightmare.js"}},"code":"module.export({\n  default: () => startNightmare\n});\n\n/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\n// HINT: If not working, run with `DEBUG=nightmare:*,electron:*` to see nightmare errors\nconst show = !!process.env.TEST_BROWSER_VISIBLE;\nlet nightmare; // Make sure the nightmare process does not stick around\n\nprocess.on('exit', () => {\n  if (nightmare) {\n    nightmare.end();\n  }\n});\n\nfunction startNightmare({\n  stdout,\n  stderr,\n  done\n}) {\n  let Nightmare;\n\n  try {\n    Nightmare = require('nightmare');\n  } catch (error) {\n    throw new Error('When running tests with TEST_BROWSER_DRIVER=nightmare, you must first \"npm i --save-dev nightmare\"');\n  }\n\n  nightmare = Nightmare({\n    show\n  });\n  let testFailures;\n  nightmare.on('page', (type, message, stack) => {\n    if (type === 'error') {\n      stderr(`[ERROR] ${message}\\n${stack}`);\n    } else {\n      stdout(`[${type}] ${message}`);\n    }\n  }).on('console', (type, message) => {\n    if (type === 'error') {\n      stderr(`[ERROR] ${message}`);\n    } else {\n      // Message may have escaped newlines\n      const messageLines = message.split('\\\\n');\n      messageLines.forEach(messageLine => {\n        stdout(messageLine);\n      });\n    }\n  }) // Meteor will call the `runTests` function exported by the driver package\n  // on the client as soon as this page loads.\n  .goto(process.env.ROOT_URL) // After the page loads, the tests are running. Eventually they\n  // finish and the driver package is supposed to set window.testsDone\n  // and window.testFailures at that time.\n  .wait(function () {\n    return window.testsDone;\n  }).evaluate(function () {\n    return window.testFailures;\n  }).then(failures => {\n    testFailures = failures;\n    return nightmare.end();\n  }).then(() => {\n    nightmare = null;\n    done(testFailures);\n  }).catch(error => {\n    stderr(error && error.message);\n  });\n}","map":{"version":3,"sources":["packages/meteortesting:browser-tests/browser/nightmare.js"],"names":["module","export","default","startNightmare","show","process","env","TEST_BROWSER_VISIBLE","nightmare","on","end","stdout","stderr","done","Nightmare","require","error","Error","testFailures","type","message","stack","messageLines","split","forEach","messageLine","goto","ROOT_URL","wait","window","testsDone","evaluate","then","failures","catch"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIC;AAAb,CAAd;;AAAA;;;;;;;;;AAUA;AAEA,MAAMC,IAAI,GAAG,CAAC,CAACC,OAAO,CAACC,GAAR,CAAYC,oBAA3B;AAEA,IAAIC,SAAJ,C,CAEA;;AACAH,OAAO,CAACI,EAAR,CAAW,MAAX,EAAmB,MAAM;AACvB,MAAID,SAAJ,EAAe;AACbA,IAAAA,SAAS,CAACE,GAAV;AACD;AACF,CAJD;;AAMe,SAASP,cAAT,CAAwB;AACrCQ,EAAAA,MADqC;AAErCC,EAAAA,MAFqC;AAGrCC,EAAAA;AAHqC,CAAxB,EAIZ;AACD,MAAIC,SAAJ;;AACA,MAAI;AACFA,IAAAA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAnB;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,oGAAV,CAAN;AACD;;AAEDT,EAAAA,SAAS,GAAGM,SAAS,CAAC;AAAEV,IAAAA;AAAF,GAAD,CAArB;AAEA,MAAIc,YAAJ;AACAV,EAAAA,SAAS,CACNC,EADH,CACM,MADN,EACc,CAACU,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,KAA0B;AACpC,QAAIF,IAAI,KAAK,OAAb,EAAsB;AACpBP,MAAAA,MAAM,CAAE,WAAUQ,OAAQ,KAAIC,KAAM,EAA9B,CAAN;AACD,KAFD,MAEO;AACLV,MAAAA,MAAM,CAAE,IAAGQ,IAAK,KAAIC,OAAQ,EAAtB,CAAN;AACD;AACF,GAPH,EAQGX,EARH,CAQM,SARN,EAQiB,CAACU,IAAD,EAAOC,OAAP,KAAmB;AAChC,QAAID,IAAI,KAAK,OAAb,EAAsB;AACpBP,MAAAA,MAAM,CAAE,WAAUQ,OAAQ,EAApB,CAAN;AACD,KAFD,MAEO;AACL;AACA,YAAME,YAAY,GAAGF,OAAO,CAACG,KAAR,CAAc,KAAd,CAArB;AACAD,MAAAA,YAAY,CAACE,OAAb,CAAqBC,WAAW,IAAI;AAClCd,QAAAA,MAAM,CAACc,WAAD,CAAN;AACD,OAFD;AAGD;AACF,GAlBH,EAoBE;AACA;AArBF,GAsBGC,IAtBH,CAsBQrB,OAAO,CAACC,GAAR,CAAYqB,QAtBpB,EAwBE;AACA;AACA;AA1BF,GA2BGC,IA3BH,CA2BQ,YAAY;AAChB,WAAOC,MAAM,CAACC,SAAd;AACD,GA7BH,EA8BGC,QA9BH,CA8BY,YAAY;AACpB,WAAOF,MAAM,CAACX,YAAd;AACD,GAhCH,EAiCGc,IAjCH,CAiCQC,QAAQ,IAAI;AAChBf,IAAAA,YAAY,GAAGe,QAAf;AACA,WAAOzB,SAAS,CAACE,GAAV,EAAP;AACD,GApCH,EAqCGsB,IArCH,CAqCQ,MAAM;AACVxB,IAAAA,SAAS,GAAG,IAAZ;AACAK,IAAAA,IAAI,CAACK,YAAD,CAAJ;AACD,GAxCH,EAyCGgB,KAzCH,CAyCSlB,KAAK,IAAI;AACdJ,IAAAA,MAAM,CAACI,KAAK,IAAIA,KAAK,CAACI,OAAhB,CAAN;AACD,GA3CH;AA4CD","sourcesContent":["/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\n\n// HINT: If not working, run with `DEBUG=nightmare:*,electron:*` to see nightmare errors\n\nconst show = !!process.env.TEST_BROWSER_VISIBLE;\n\nlet nightmare;\n\n// Make sure the nightmare process does not stick around\nprocess.on('exit', () => {\n  if (nightmare) {\n    nightmare.end();\n  }\n});\n\nexport default function startNightmare({\n  stdout,\n  stderr,\n  done,\n}) {\n  let Nightmare;\n  try {\n    Nightmare = require('nightmare');\n  } catch (error) {\n    throw new Error('When running tests with TEST_BROWSER_DRIVER=nightmare, you must first \"npm i --save-dev nightmare\"');\n  }\n\n  nightmare = Nightmare({ show });\n\n  let testFailures;\n  nightmare\n    .on('page', (type, message, stack) => {\n      if (type === 'error') {\n        stderr(`[ERROR] ${message}\\n${stack}`);\n      } else {\n        stdout(`[${type}] ${message}`);\n      }\n    })\n    .on('console', (type, message) => {\n      if (type === 'error') {\n        stderr(`[ERROR] ${message}`);\n      } else {\n        // Message may have escaped newlines\n        const messageLines = message.split('\\\\n');\n        messageLines.forEach(messageLine => {\n          stdout(messageLine);\n        });\n      }\n    })\n\n    // Meteor will call the `runTests` function exported by the driver package\n    // on the client as soon as this page loads.\n    .goto(process.env.ROOT_URL)\n\n    // After the page loads, the tests are running. Eventually they\n    // finish and the driver package is supposed to set window.testsDone\n    // and window.testFailures at that time.\n    .wait(function () {\n      return window.testsDone;\n    })\n    .evaluate(function () {\n      return window.testFailures;\n    })\n    .then(failures => {\n      testFailures = failures;\n      return nightmare.end();\n    })\n    .then(() => {\n      nightmare = null;\n      done(testFailures);\n    })\n    .catch(error => {\n      stderr(error && error.message);\n    });\n}\n"]},"sourceType":"script","hash":"4316948ff5a32132e92e87e624c1c6fc512babba"}

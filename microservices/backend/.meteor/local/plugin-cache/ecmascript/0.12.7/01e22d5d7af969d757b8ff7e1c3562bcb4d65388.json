{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js"],"names":["PROMOTION_STATUS","ROLES","SecurityService","shouldAnonymize","getCurrentUserPermissionsForPromotion","hasMinimumRole","checkPromotionPermissions","promotion","userId","requiredPermissions","promotionStatus","length","includes","status","role","ADMIN","hasPermissionOnDoc","doc","error","isAllowedToViewPromotion","currentUser","_id","userLinks","users","user","find","isAllowedToInviteCustomersToPromotion","canInviteCustomers","OPEN","isAllowedToRemoveCustomerFromPromotion","customerOwnerType","promotionId","permissions","isAllowedToModifyPromotion","canModifyPromotion","PREPARATION","isAllowedToManagePromotionDocuments","canManageDocuments","isAllowedToSeePromotionCustomers","userPermissions","$metadata","displayCustomerNames","isAllowedToAddLotsToPromotion","canAddLots","isAllowedToModifyPromotionLots","canModifyLots","isAllowedToRemovePromotionLots","canRemoveLots","isAllowedToBookPromotionLots","canBookLots","isAllowedToBookPromotionLotToCustomer","isAllowedToSellPromotionLots","canSellLots","isAllowedToSellPromotionLotToCustomer"],"mappings":"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","sourcesContent":["import { PROMOTION_STATUS, ROLES } from '../../constants';\nimport SecurityService from '../Security';\nimport {\n  shouldAnonymize,\n  getCurrentUserPermissionsForPromotion,\n} from '../../promotions/promotionClientHelpers';\nimport { hasMinimumRole } from './generalSecurityHelpers';\n\nconst checkPromotionPermissions = ({\n  promotion,\n  userId,\n  requiredPermissions,\n  promotionStatus = [],\n}) => {\n  if (promotionStatus.length && !promotionStatus.includes(promotion.status)) {\n    return false;\n  }\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: promotion,\n      requiredPermissions,\n      userId,\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const isAllowedToViewPromotion = ({\n  promotion,\n  currentUser: { _id: userId },\n}) => {\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = promotion;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToInviteCustomersToPromotion = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteCustomers: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN],\n  });\n};\n\nexport const isAllowedToRemoveCustomerFromPromotion = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n\n  return (\n    isAllowedToInviteCustomersToPromotion({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToModifyPromotion = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canModifyPromotion: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION],\n  });\n};\n\nexport const isAllowedToManagePromotionDocuments = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canManageDocuments: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION],\n  });\n};\n\nexport const isAllowedToSeePromotionCustomers = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = promotion;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToAddLotsToPromotion = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canAddLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToModifyPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canModifyLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToRemovePromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canRemoveLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canBookLots: true };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n  return (\n    isAllowedToBookPromotionLots({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToSellPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToSellPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n  return (\n    isAllowedToSellPromotionLots({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js"}},"code":"module.export({\n  isAllowedToViewPromotion: () => isAllowedToViewPromotion,\n  isAllowedToInviteCustomersToPromotion: () => isAllowedToInviteCustomersToPromotion,\n  isAllowedToRemoveCustomerFromPromotion: () => isAllowedToRemoveCustomerFromPromotion,\n  isAllowedToModifyPromotion: () => isAllowedToModifyPromotion,\n  isAllowedToManagePromotionDocuments: () => isAllowedToManagePromotionDocuments,\n  isAllowedToSeePromotionCustomers: () => isAllowedToSeePromotionCustomers,\n  isAllowedToAddLotsToPromotion: () => isAllowedToAddLotsToPromotion,\n  isAllowedToModifyPromotionLots: () => isAllowedToModifyPromotionLots,\n  isAllowedToRemovePromotionLots: () => isAllowedToRemovePromotionLots,\n  isAllowedToBookPromotionLots: () => isAllowedToBookPromotionLots,\n  isAllowedToBookPromotionLotToCustomer: () => isAllowedToBookPromotionLotToCustomer,\n  isAllowedToSellPromotionLots: () => isAllowedToSellPromotionLots,\n  isAllowedToSellPromotionLotToCustomer: () => isAllowedToSellPromotionLotToCustomer\n});\nlet PROMOTION_STATUS, ROLES;\nmodule.link(\"../../constants\", {\n  PROMOTION_STATUS(v) {\n    PROMOTION_STATUS = v;\n  },\n\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 0);\nlet SecurityService;\nmodule.link(\"../Security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 1);\nlet shouldAnonymize, getCurrentUserPermissionsForPromotion;\nmodule.link(\"../../promotions/promotionClientHelpers\", {\n  shouldAnonymize(v) {\n    shouldAnonymize = v;\n  },\n\n  getCurrentUserPermissionsForPromotion(v) {\n    getCurrentUserPermissionsForPromotion = v;\n  }\n\n}, 2);\nlet hasMinimumRole;\nmodule.link(\"./generalSecurityHelpers\", {\n  hasMinimumRole(v) {\n    hasMinimumRole = v;\n  }\n\n}, 3);\n\nconst checkPromotionPermissions = ({\n  promotion,\n  userId,\n  requiredPermissions,\n  promotionStatus = []\n}) => {\n  if (promotionStatus.length && !promotionStatus.includes(promotion.status)) {\n    return false;\n  }\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: promotion,\n      requiredPermissions,\n      userId\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isAllowedToViewPromotion = ({\n  promotion,\n  currentUser: {\n    _id: userId\n  }\n}) => {\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    userLinks = [],\n    users = []\n  } = promotion;\n  const user = userLinks.find(({\n    _id\n  }) => _id === userId) || users.find(({\n    _id\n  }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isAllowedToInviteCustomersToPromotion = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canInviteCustomers: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN]\n  });\n};\n\nconst isAllowedToRemoveCustomerFromPromotion = ({\n  promotion,\n  currentUser,\n  customerOwnerType\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    _id: promotionId\n  } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId\n  });\n  return isAllowedToInviteCustomersToPromotion({\n    promotion,\n    currentUser\n  }) && !shouldAnonymize({\n    customerOwnerType,\n    permissions\n  });\n};\n\nconst isAllowedToModifyPromotion = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION]\n  });\n};\n\nconst isAllowedToManagePromotionDocuments = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canManageDocuments: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION]\n  });\n};\n\nconst isAllowedToSeePromotionCustomers = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    userLinks = [],\n    users = []\n  } = promotion;\n  const user = userLinks.find(({\n    _id\n  }) => _id === userId) || users.find(({\n    _id\n  }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isAllowedToAddLotsToPromotion = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canAddLots: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToModifyPromotionLots = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canModifyLots: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToRemovePromotionLots = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canRemoveLots: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToBookPromotionLots = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canBookLots: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToBookPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    _id: promotionId\n  } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId\n  });\n  return isAllowedToBookPromotionLots({\n    promotion,\n    currentUser\n  }) && !shouldAnonymize({\n    customerOwnerType,\n    permissions\n  });\n};\n\nconst isAllowedToSellPromotionLots = ({\n  promotion,\n  currentUser\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true\n  };\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions\n  });\n};\n\nconst isAllowedToSellPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType\n}) => {\n  const {\n    _id: userId\n  } = currentUser;\n\n  if (hasMinimumRole({\n    role: ROLES.ADMIN,\n    userId\n  })) {\n    return true;\n  }\n\n  const {\n    _id: promotionId\n  } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId\n  });\n  return isAllowedToSellPromotionLots({\n    promotion,\n    currentUser\n  }) && !shouldAnonymize({\n    customerOwnerType,\n    permissions\n  });\n};","map":{"version":3,"sources":["imports/core/api/security/clientSecurityHelpers/promotionSecurityHelpers.js"],"names":["PROMOTION_STATUS","checkPromotionPermissions","promotionStatus","promotion","hasMinimumRole","role","ROLES","userId","SecurityService","doc","isAllowedToViewPromotion","currentUser","_id","userLinks","users","user","isAllowedToInviteCustomersToPromotion","requiredPermissions","canInviteCustomers","isAllowedToRemoveCustomerFromPromotion","customerOwnerType","promotionId","permissions","getCurrentUserPermissionsForPromotion","shouldAnonymize","isAllowedToModifyPromotion","canModifyPromotion","isAllowedToManagePromotionDocuments","canManageDocuments","isAllowedToSeePromotionCustomers","userPermissions","isAllowedToAddLotsToPromotion","canAddLots","isAllowedToModifyPromotionLots","canModifyLots","isAllowedToRemovePromotionLots","canRemoveLots","isAllowedToBookPromotionLots","canBookLots","isAllowedToBookPromotionLotToCustomer","isAllowedToSellPromotionLots","canSellLots","isAllowedToSellPromotionLotToCustomer"],"mappings":"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","sourcesContent":["import { PROMOTION_STATUS, ROLES } from '../../constants';\nimport SecurityService from '../Security';\nimport {\n  shouldAnonymize,\n  getCurrentUserPermissionsForPromotion,\n} from '../../promotions/promotionClientHelpers';\nimport { hasMinimumRole } from './generalSecurityHelpers';\n\nconst checkPromotionPermissions = ({\n  promotion,\n  userId,\n  requiredPermissions,\n  promotionStatus = [],\n}) => {\n  if (promotionStatus.length && !promotionStatus.includes(promotion.status)) {\n    return false;\n  }\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  try {\n    SecurityService.hasPermissionOnDoc({\n      doc: promotion,\n      requiredPermissions,\n      userId,\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const isAllowedToViewPromotion = ({\n  promotion,\n  currentUser: { _id: userId },\n}) => {\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = promotion;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToInviteCustomersToPromotion = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canInviteCustomers: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN],\n  });\n};\n\nexport const isAllowedToRemoveCustomerFromPromotion = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n\n  return (\n    isAllowedToInviteCustomersToPromotion({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToModifyPromotion = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canModifyPromotion: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION],\n  });\n};\n\nexport const isAllowedToManagePromotionDocuments = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canManageDocuments: true };\n\n  return checkPromotionPermissions({\n    promotion,\n    userId,\n    requiredPermissions,\n    promotionStatus: [PROMOTION_STATUS.OPEN, PROMOTION_STATUS.PREPARATION],\n  });\n};\n\nexport const isAllowedToSeePromotionCustomers = ({\n  promotion,\n  currentUser,\n}) => {\n  const { _id: userId } = currentUser;\n\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n\n  const { userLinks = [], users = [] } = promotion;\n\n  const user = userLinks.find(({ _id }) => _id === userId)\n    || users.find(({ _id }) => _id === userId);\n\n  if (!user) {\n    return false;\n  }\n\n  const userPermissions = user.permissions || user.$metadata.permissions;\n\n  if (userPermissions.displayCustomerNames === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAllowedToAddLotsToPromotion = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canAddLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToModifyPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canModifyLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToRemovePromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canModifyPromotion: true,\n    canRemoveLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = { canBookLots: true };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToBookPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n  return (\n    isAllowedToBookPromotionLots({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n\nexport const isAllowedToSellPromotionLots = ({ promotion, currentUser }) => {\n  const { _id: userId } = currentUser;\n  const requiredPermissions = {\n    canSellLots: true,\n  };\n\n  return checkPromotionPermissions({ promotion, userId, requiredPermissions });\n};\n\nexport const isAllowedToSellPromotionLotToCustomer = ({\n  promotion,\n  currentUser,\n  customerOwnerType,\n}) => {\n  const { _id: userId } = currentUser;\n  if (hasMinimumRole({ role: ROLES.ADMIN, userId })) {\n    return true;\n  }\n  const { _id: promotionId } = promotion;\n  const permissions = getCurrentUserPermissionsForPromotion({\n    currentUser,\n    promotionId,\n  });\n  return (\n    isAllowedToSellPromotionLots({ promotion, currentUser })\n    && !shouldAnonymize({ customerOwnerType, permissions })\n  );\n};\n"]},"sourceType":"script","hash":"01e22d5d7af969d757b8ff7e1c3562bcb4d65388"}

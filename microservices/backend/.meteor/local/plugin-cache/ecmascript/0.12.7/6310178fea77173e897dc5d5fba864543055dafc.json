{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm/AutoFormTextInput.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/components/AutoForm/AutoFormTextInput.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm/AutoFormTextInput.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/AutoForm/AutoFormTextInput.jsx"],"names":["Meteor","React","Component","PropTypes","moment","constants","colors","toNumber","toDecimalNumber","MyTextInput","ValidIcon","FormValidator","styles","div","position","infoIcon","bottom","left","padding","infoStyle","color","primary","borderColor","cleanValue","v","isEqual","value","currentValue","type","isSame","AutoFormTextInput","constructor","props","setState","showInfo","saveValue","_","saveOnChange","showValidIconOnChange","inputProps","inputType","history","showSaving","updateFunc","docId","id","state","object","shouldSave","clearTimeout","timeout","setTimeout","Promise","resolve","then","errorText","saving","catch","finally","AUTOSAVE_DEBOUNCE","number","decimal","formatter","componentWillUnmount","componentWillReceiveProps","nextProps","valueIsDifferent","valueExistsInHistory","includes","handleChange","render","style","label","placeholder","multiline","rows","info","disabled","money","required","date","percent","onFocusChange","focused","todo","inputRef","condition","intlId","otherProps","noValidator","savingIconStyle","admin","inputLabelProps","handleBlur","handleFocus","width","marginBottom","savingIcon","propTypes","autocomplete","string","any","bool","isRequired","floatingLabelFixed","oneOfType","array","shape","node","objectOf","inputStyle","func","defaultProps","undefined"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nimport * as constants from '../../config/constants';\nimport colors from '../../config/colors';\nimport { toNumber, toDecimalNumber } from '../../utils/conversionFunctions';\nimport MyTextInput from '../TextInput';\nimport ValidIcon from './ValidIcon';\nimport FormValidator from './FormValidator';\n\nconst styles = {\n  div: {\n    position: 'relative',\n  },\n  infoIcon: {\n    position: 'absolute',\n    bottom: 5,\n    left: -40,\n    padding: 10,\n  },\n  infoStyle: {\n    color: colors.primary,\n    borderColor: colors.primary,\n  },\n};\n\nconst cleanValue = v => (v === 0 ? 0 : v || '');\n\nconst isEqual = (value, currentValue, type) => {\n  if (type === 'date') {\n    // To avoid the saving icon from firing twice when chaning the date,\n    // only compare the date without times\n    // If we ever have date inputs in autoform that need time, we'll have to find another hack\n\n    return moment(value).isSame(currentValue, 'day');\n  }\n\n  return value === cleanValue(currentValue);\n};\n\nclass AutoFormTextInput extends Component {\n  constructor(props) {\n    super(props);\n\n    const { currentValue, number, decimal } = props.inputProps;\n\n    this.state = {\n      // Make sure 0 values are displayed properly\n      value: cleanValue(currentValue),\n      errorText: '',\n      saving: false,\n      showInfo: false,\n      history: [cleanValue(currentValue)],\n    };\n\n    if (number) {\n      if (decimal) {\n        this.formatter = toDecimalNumber;\n      } else {\n        this.formatter = toNumber;\n      }\n    } else {\n      this.formatter = v => v;\n    }\n  }\n\n  componentWillUnmount() {\n    Meteor.clearTimeout(this.timeout);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const valueIsDifferent = nextProps.inputProps.currentValue !== this.props.inputProps.currentValue;\n    if (valueIsDifferent) {\n      // To handle race conditions, check if the new value from the DB\n      // has been typed in the past\n      // If it has, then don't update the textfield\n      // If it hasn't, override it, because the backend says it should be a new value\n      const valueExistsInHistory = this.state.history.includes(nextProps.inputProps.currentValue);\n\n      if (!valueExistsInHistory) {\n        this.handleChange(null, nextProps.inputProps.currentValue);\n      }\n    }\n  }\n\n  handleBlur = () => {\n    this.setState({ showInfo: false });\n    // If the value has changed, save it\n    // state is initialized as '', but currentValue is initially undefined, so check that too\n    this.saveValue(true);\n  };\n\n  handleChange = (_, value) => {\n    const {\n      saveOnChange,\n      showValidIconOnChange,\n      inputProps: { currentValue, inputType },\n    } = this.props;\n\n    // Make sure value is a number if this is a number or money input\n    // const safeValue =\n    //   this.props.number || this.props.money\n    //     ? toNumber(event.target.value)\n    //     : event.target.value;\n\n    if (isEqual(value, currentValue, inputType)) {\n      return;\n    }\n\n    this.setState(\n      ({ history }) => ({ value, history: [...history, value] }),\n      () => {\n        // do not show saving icon when changing text, only show it on blur\n        if (saveOnChange) {\n          this.saveValue(showValidIconOnChange);\n        }\n      },\n    );\n  };\n\n  handleFocus = () => {\n    this.setState({ showInfo: true });\n  };\n\n  saveValue = (showSaving) => {\n    const {\n      updateFunc,\n      docId,\n      inputProps: { id, currentValue, inputType },\n    } = this.props;\n    const { value } = this.state;\n    // Save data to DB\n    const object = { [id]: value };\n    let shouldSave = true;\n\n    // Don't save if value hasn't changed\n    if (isEqual(value, currentValue, inputType)) {\n      shouldSave = false;\n    }\n\n    Meteor.clearTimeout(this.timeout);\n    this.timeout = Meteor.setTimeout(() => {\n      Promise.resolve()\n        .then(() => shouldSave && updateFunc({ object, id: docId }))\n        // on success, set saving briefly to true, before setting it to false again to trigger icon\n        .then(() => this.setState({ errorText: '', saving: showSaving }))\n        // If there was an error, reset value to the backend value\n        .catch(() => this.setState({ value: currentValue }))\n        .finally(() => this.setState({ saving: false }));\n    }, constants.AUTOSAVE_DEBOUNCE);\n  };\n\n  render() {\n    const {\n      inputProps: {\n        style,\n        label,\n        placeholder,\n        number,\n        id,\n        multiline,\n        rows,\n        info,\n        disabled,\n        money,\n        required,\n        date,\n        percent,\n        onFocusChange,\n        focused,\n        todo,\n\n        // Destructure these props to avoid warnings\n        inputRef,\n        currentValue,\n        condition,\n        decimal,\n        intlId,\n        saveOnChange,\n\n        ...otherProps\n      },\n      noValidator,\n      savingIconStyle,\n      admin,\n      inputLabelProps,\n    } = this.props;\n    const { value, errorText, saving, showInfo } = this.state;\n\n    let type;\n    if (money) {\n      type = 'money';\n    } else if (number) {\n      type = 'number';\n    } else if (date) {\n      type = 'date';\n    } else if (percent) {\n      type = 'percent';\n    } else {\n      type = 'text';\n    }\n\n    return (\n      <div className=\"form-input__row\" style={{ ...styles.div, ...style }}>\n        <MyTextInput\n          {...otherProps}\n          InputProps={{ onFocusChange, focused }}\n          label={label}\n          placeholder={placeholder}\n          value={value}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          type={type}\n          id={id}\n          multiline={multiline}\n          rows={rows}\n          info={errorText || (showInfo && info)}\n          error={!!errorText}\n          disabled={disabled}\n          style={{ width: '100%', ...style, marginBottom: 16 }}\n          noValidate\n          fullWidth\n          inputLabelProps={inputLabelProps}\n        />\n        <ValidIcon\n          saving={saving}\n          error={!!errorText}\n          style={{ ...styles.savingIcon, ...savingIconStyle }}\n          value={value}\n          required={required}\n          hide={admin}\n          todo={todo}\n        />\n        {!noValidator && <FormValidator {...this.props} />}\n      </div>\n    );\n  }\n}\n\nAutoFormTextInput.propTypes = {\n  autocomplete: PropTypes.string,\n  currentValue: PropTypes.any,\n  decimal: PropTypes.bool,\n  docId: PropTypes.string.isRequired,\n  floatingLabelFixed: PropTypes.bool,\n  info: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  inputProps: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    label: PropTypes.node.isRequired,\n    placeholder: PropTypes.node.isRequired,\n    style: PropTypes.objectOf(PropTypes.any),\n    multiline: PropTypes.bool,\n    disabled: PropTypes.bool,\n  }).isRequired,\n  inputStyle: PropTypes.objectOf(PropTypes.any),\n  money: PropTypes.bool,\n  noValidator: PropTypes.bool,\n  number: PropTypes.bool,\n  rows: PropTypes.number,\n  saveOnChange: PropTypes.bool,\n  savingIconStyle: PropTypes.object,\n  showValidIconOnChange: PropTypes.bool,\n  updateFunc: PropTypes.func,\n};\n\nAutoFormTextInput.defaultProps = {\n  autocomplete: '',\n  currentValue: '',\n  decimal: false,\n  floatingLabelFixed: true,\n  info: '',\n  inputStyle: undefined,\n  money: false,\n  noValidator: false,\n  number: false,\n  rows: 1,\n  saveOnChange: true,\n  savingIconStyle: {},\n  showValidIconOnChange: false,\n};\n\nexport default AutoFormTextInput;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm/AutoFormTextInput.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/AutoForm/AutoFormTextInput.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar React, Component;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  },\n  Component: function (v) {\n    Component = v;\n  }\n}, 1);\nvar PropTypes;\nmodule.link(\"prop-types\", {\n  \"default\": function (v) {\n    PropTypes = v;\n  }\n}, 2);\nvar moment;\nmodule.link(\"moment\", {\n  \"default\": function (v) {\n    moment = v;\n  }\n}, 3);\nvar constants;\nmodule.link(\"../../config/constants\", {\n  \"*\": function (v) {\n    constants = v;\n  }\n}, 4);\nvar colors;\nmodule.link(\"../../config/colors\", {\n  \"default\": function (v) {\n    colors = v;\n  }\n}, 5);\nvar toNumber, toDecimalNumber;\nmodule.link(\"../../utils/conversionFunctions\", {\n  toNumber: function (v) {\n    toNumber = v;\n  },\n  toDecimalNumber: function (v) {\n    toDecimalNumber = v;\n  }\n}, 6);\nvar MyTextInput;\nmodule.link(\"../TextInput\", {\n  \"default\": function (v) {\n    MyTextInput = v;\n  }\n}, 7);\nvar ValidIcon;\nmodule.link(\"./ValidIcon\", {\n  \"default\": function (v) {\n    ValidIcon = v;\n  }\n}, 8);\nvar FormValidator;\nmodule.link(\"./FormValidator\", {\n  \"default\": function (v) {\n    FormValidator = v;\n  }\n}, 9);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar styles = {\n  div: {\n    position: 'relative'\n  },\n  infoIcon: {\n    position: 'absolute',\n    bottom: 5,\n    left: -40,\n    padding: 10\n  },\n  infoStyle: {\n    color: colors.primary,\n    borderColor: colors.primary\n  }\n};\n\nvar cleanValue = function (v) {\n  return v === 0 ? 0 : v || '';\n};\n\nvar isEqual = function (value, currentValue, type) {\n  if (type === 'date') {\n    // To avoid the saving icon from firing twice when chaning the date,\n    // only compare the date without times\n    // If we ever have date inputs in autoform that need time, we'll have to find another hack\n    return moment(value).isSame(currentValue, 'day');\n  }\n\n  return value === cleanValue(currentValue);\n};\n\nvar AutoFormTextInput =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inheritsLoose2.default)(AutoFormTextInput, _Component);\n\n  function AutoFormTextInput(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleBlur\", function () {\n      _this.setState({\n        showInfo: false\n      }); // If the value has changed, save it\n      // state is initialized as '', but currentValue is initially undefined, so check that too\n\n\n      _this.saveValue(true);\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleChange\", function (_, value) {\n      var _this$props = _this.props,\n          saveOnChange = _this$props.saveOnChange,\n          showValidIconOnChange = _this$props.showValidIconOnChange,\n          _this$props$inputProp = _this$props.inputProps,\n          currentValue = _this$props$inputProp.currentValue,\n          inputType = _this$props$inputProp.inputType; // Make sure value is a number if this is a number or money input\n      // const safeValue =\n      //   this.props.number || this.props.money\n      //     ? toNumber(event.target.value)\n      //     : event.target.value;\n\n      if (isEqual(value, currentValue, inputType)) {\n        return;\n      }\n\n      _this.setState(function (_ref) {\n        var history = _ref.history;\n        return {\n          value: value,\n          history: [].concat((0, _toConsumableArray2.default)(history), [value])\n        };\n      }, function () {\n        // do not show saving icon when changing text, only show it on blur\n        if (saveOnChange) {\n          _this.saveValue(showValidIconOnChange);\n        }\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"handleFocus\", function () {\n      _this.setState({\n        showInfo: true\n      });\n    });\n\n    _defineProperty((0, _assertThisInitialized2.default)(_this), \"saveValue\", function (showSaving) {\n      var _object;\n\n      var _this$props2 = _this.props,\n          updateFunc = _this$props2.updateFunc,\n          docId = _this$props2.docId,\n          _this$props2$inputPro = _this$props2.inputProps,\n          id = _this$props2$inputPro.id,\n          currentValue = _this$props2$inputPro.currentValue,\n          inputType = _this$props2$inputPro.inputType;\n      var value = _this.state.value; // Save data to DB\n\n      var object = (_object = {}, _object[id] = value, _object);\n      var shouldSave = true; // Don't save if value hasn't changed\n\n      if (isEqual(value, currentValue, inputType)) {\n        shouldSave = false;\n      }\n\n      Meteor.clearTimeout(_this.timeout);\n      _this.timeout = Meteor.setTimeout(function () {\n        Promise.resolve().then(function () {\n          return shouldSave && updateFunc({\n            object: object,\n            id: docId\n          });\n        }) // on success, set saving briefly to true, before setting it to false again to trigger icon\n        .then(function () {\n          return _this.setState({\n            errorText: '',\n            saving: showSaving\n          });\n        }) // If there was an error, reset value to the backend value\n        .catch(function () {\n          return _this.setState({\n            value: currentValue\n          });\n        }).finally(function () {\n          return _this.setState({\n            saving: false\n          });\n        });\n      }, constants.AUTOSAVE_DEBOUNCE);\n    });\n\n    var _props$inputProps = props.inputProps,\n        _currentValue = _props$inputProps.currentValue,\n        number = _props$inputProps.number,\n        decimal = _props$inputProps.decimal;\n    _this.state = {\n      // Make sure 0 values are displayed properly\n      value: cleanValue(_currentValue),\n      errorText: '',\n      saving: false,\n      showInfo: false,\n      history: [cleanValue(_currentValue)]\n    };\n\n    if (number) {\n      if (decimal) {\n        _this.formatter = toDecimalNumber;\n      } else {\n        _this.formatter = toNumber;\n      }\n    } else {\n      _this.formatter = function (v) {\n        return v;\n      };\n    }\n\n    return _this;\n  }\n\n  var _proto = AutoFormTextInput.prototype;\n\n  _proto.componentWillUnmount = function () {\n    function componentWillUnmount() {\n      Meteor.clearTimeout(this.timeout);\n    }\n\n    return componentWillUnmount;\n  }();\n\n  _proto.componentWillReceiveProps = function () {\n    function componentWillReceiveProps(nextProps) {\n      var valueIsDifferent = nextProps.inputProps.currentValue !== this.props.inputProps.currentValue;\n\n      if (valueIsDifferent) {\n        // To handle race conditions, check if the new value from the DB\n        // has been typed in the past\n        // If it has, then don't update the textfield\n        // If it hasn't, override it, because the backend says it should be a new value\n        var valueExistsInHistory = this.state.history.includes(nextProps.inputProps.currentValue);\n\n        if (!valueExistsInHistory) {\n          this.handleChange(null, nextProps.inputProps.currentValue);\n        }\n      }\n    }\n\n    return componentWillReceiveProps;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      var _this$props3 = this.props,\n          _this$props3$inputPro = _this$props3.inputProps,\n          style = _this$props3$inputPro.style,\n          label = _this$props3$inputPro.label,\n          placeholder = _this$props3$inputPro.placeholder,\n          number = _this$props3$inputPro.number,\n          id = _this$props3$inputPro.id,\n          multiline = _this$props3$inputPro.multiline,\n          rows = _this$props3$inputPro.rows,\n          info = _this$props3$inputPro.info,\n          disabled = _this$props3$inputPro.disabled,\n          money = _this$props3$inputPro.money,\n          required = _this$props3$inputPro.required,\n          date = _this$props3$inputPro.date,\n          percent = _this$props3$inputPro.percent,\n          onFocusChange = _this$props3$inputPro.onFocusChange,\n          focused = _this$props3$inputPro.focused,\n          todo = _this$props3$inputPro.todo,\n          inputRef = _this$props3$inputPro.inputRef,\n          currentValue = _this$props3$inputPro.currentValue,\n          condition = _this$props3$inputPro.condition,\n          decimal = _this$props3$inputPro.decimal,\n          intlId = _this$props3$inputPro.intlId,\n          saveOnChange = _this$props3$inputPro.saveOnChange,\n          otherProps = (0, _objectWithoutProperties2.default)(_this$props3$inputPro, [\"style\", \"label\", \"placeholder\", \"number\", \"id\", \"multiline\", \"rows\", \"info\", \"disabled\", \"money\", \"required\", \"date\", \"percent\", \"onFocusChange\", \"focused\", \"todo\", \"inputRef\", \"currentValue\", \"condition\", \"decimal\", \"intlId\", \"saveOnChange\"]),\n          noValidator = _this$props3.noValidator,\n          savingIconStyle = _this$props3.savingIconStyle,\n          admin = _this$props3.admin,\n          inputLabelProps = _this$props3.inputLabelProps;\n      var _this$state = this.state,\n          value = _this$state.value,\n          errorText = _this$state.errorText,\n          saving = _this$state.saving,\n          showInfo = _this$state.showInfo;\n      var type;\n\n      if (money) {\n        type = 'money';\n      } else if (number) {\n        type = 'number';\n      } else if (date) {\n        type = 'date';\n      } else if (percent) {\n        type = 'percent';\n      } else {\n        type = 'text';\n      }\n\n      return React.createElement(\"div\", {\n        className: \"form-input__row\",\n        style: (0, _objectSpread2.default)({}, styles.div, style)\n      }, React.createElement(MyTextInput, (0, _extends2.default)({}, otherProps, {\n        InputProps: {\n          onFocusChange: onFocusChange,\n          focused: focused\n        },\n        label: label,\n        placeholder: placeholder,\n        value: value,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur,\n        onFocus: this.handleFocus,\n        type: type,\n        id: id,\n        multiline: multiline,\n        rows: rows,\n        info: errorText || showInfo && info,\n        error: !!errorText,\n        disabled: disabled,\n        style: (0, _objectSpread2.default)({\n          width: '100%'\n        }, style, {\n          marginBottom: 16\n        }),\n        noValidate: true,\n        fullWidth: true,\n        inputLabelProps: inputLabelProps\n      })), React.createElement(ValidIcon, {\n        saving: saving,\n        error: !!errorText,\n        style: (0, _objectSpread2.default)({}, styles.savingIcon, savingIconStyle),\n        value: value,\n        required: required,\n        hide: admin,\n        todo: todo\n      }), !noValidator && React.createElement(FormValidator, this.props));\n    }\n\n    return render;\n  }();\n\n  return AutoFormTextInput;\n}(Component);\n\nAutoFormTextInput.propTypes = {\n  autocomplete: PropTypes.string,\n  currentValue: PropTypes.any,\n  decimal: PropTypes.bool,\n  docId: PropTypes.string.isRequired,\n  floatingLabelFixed: PropTypes.bool,\n  info: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.array]),\n  inputProps: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    label: PropTypes.node.isRequired,\n    placeholder: PropTypes.node.isRequired,\n    style: PropTypes.objectOf(PropTypes.any),\n    multiline: PropTypes.bool,\n    disabled: PropTypes.bool\n  }).isRequired,\n  inputStyle: PropTypes.objectOf(PropTypes.any),\n  money: PropTypes.bool,\n  noValidator: PropTypes.bool,\n  number: PropTypes.bool,\n  rows: PropTypes.number,\n  saveOnChange: PropTypes.bool,\n  savingIconStyle: PropTypes.object,\n  showValidIconOnChange: PropTypes.bool,\n  updateFunc: PropTypes.func\n};\nAutoFormTextInput.defaultProps = {\n  autocomplete: '',\n  currentValue: '',\n  decimal: false,\n  floatingLabelFixed: true,\n  info: '',\n  inputStyle: undefined,\n  money: false,\n  noValidator: false,\n  number: false,\n  rows: 1,\n  saveOnChange: true,\n  savingIconStyle: {},\n  showValidIconOnChange: false\n};\nmodule.exportDefault(AutoFormTextInput);","map":{"version":3,"sources":["imports/core/components/AutoForm/AutoFormTextInput.jsx"],"names":["styles","div","position","infoIcon","bottom","left","padding","infoStyle","color","colors","borderColor","primary","cleanValue","v","isEqual","type","moment","value","constructor","currentValue","decimal","props","errorText","saving","showInfo","history","componentWillUnmount","Meteor","componentWillReceiveProps","valueIsDifferent","nextProps","valueExistsInHistory","inputProps","inputType","showSaving","object","shouldSave","Promise","updateFunc","id","docId","constants","render","otherProps","inputLabelProps","style","onFocusChange","focused","width","marginBottom","savingIconStyle","AutoFormTextInput","autocomplete","PropTypes","floatingLabelFixed","info","label","placeholder","multiline","disabled","bool","inputStyle","money","noValidator","number","rows","saveOnChange","showValidIconOnChange","func"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nimport * as constants from '../../config/constants';\nimport colors from '../../config/colors';\nimport { toNumber, toDecimalNumber } from '../../utils/conversionFunctions';\nimport MyTextInput from '../TextInput';\nimport ValidIcon from './ValidIcon';\nimport FormValidator from './FormValidator';\n\nconst styles = {\n  div: {\n    position: 'relative',\n  },\n  infoIcon: {\n    position: 'absolute',\n    bottom: 5,\n    left: -40,\n    padding: 10,\n  },\n  infoStyle: {\n    color: colors.primary,\n    borderColor: colors.primary,\n  },\n};\n\nconst cleanValue = v => (v === 0 ? 0 : v || '');\n\nconst isEqual = (value, currentValue, type) => {\n  if (type === 'date') {\n    // To avoid the saving icon from firing twice when chaning the date,\n    // only compare the date without times\n    // If we ever have date inputs in autoform that need time, we'll have to find another hack\n\n    return moment(value).isSame(currentValue, 'day');\n  }\n\n  return value === cleanValue(currentValue);\n};\n\nclass AutoFormTextInput extends Component {\n  constructor(props) {\n    super(props);\n\n    const { currentValue, number, decimal } = props.inputProps;\n\n    this.state = {\n      // Make sure 0 values are displayed properly\n      value: cleanValue(currentValue),\n      errorText: '',\n      saving: false,\n      showInfo: false,\n      history: [cleanValue(currentValue)],\n    };\n\n    if (number) {\n      if (decimal) {\n        this.formatter = toDecimalNumber;\n      } else {\n        this.formatter = toNumber;\n      }\n    } else {\n      this.formatter = v => v;\n    }\n  }\n\n  componentWillUnmount() {\n    Meteor.clearTimeout(this.timeout);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const valueIsDifferent = nextProps.inputProps.currentValue !== this.props.inputProps.currentValue;\n    if (valueIsDifferent) {\n      // To handle race conditions, check if the new value from the DB\n      // has been typed in the past\n      // If it has, then don't update the textfield\n      // If it hasn't, override it, because the backend says it should be a new value\n      const valueExistsInHistory = this.state.history.includes(nextProps.inputProps.currentValue);\n\n      if (!valueExistsInHistory) {\n        this.handleChange(null, nextProps.inputProps.currentValue);\n      }\n    }\n  }\n\n  handleBlur = () => {\n    this.setState({ showInfo: false });\n    // If the value has changed, save it\n    // state is initialized as '', but currentValue is initially undefined, so check that too\n    this.saveValue(true);\n  };\n\n  handleChange = (_, value) => {\n    const {\n      saveOnChange,\n      showValidIconOnChange,\n      inputProps: { currentValue, inputType },\n    } = this.props;\n\n    // Make sure value is a number if this is a number or money input\n    // const safeValue =\n    //   this.props.number || this.props.money\n    //     ? toNumber(event.target.value)\n    //     : event.target.value;\n\n    if (isEqual(value, currentValue, inputType)) {\n      return;\n    }\n\n    this.setState(\n      ({ history }) => ({ value, history: [...history, value] }),\n      () => {\n        // do not show saving icon when changing text, only show it on blur\n        if (saveOnChange) {\n          this.saveValue(showValidIconOnChange);\n        }\n      },\n    );\n  };\n\n  handleFocus = () => {\n    this.setState({ showInfo: true });\n  };\n\n  saveValue = (showSaving) => {\n    const {\n      updateFunc,\n      docId,\n      inputProps: { id, currentValue, inputType },\n    } = this.props;\n    const { value } = this.state;\n    // Save data to DB\n    const object = { [id]: value };\n    let shouldSave = true;\n\n    // Don't save if value hasn't changed\n    if (isEqual(value, currentValue, inputType)) {\n      shouldSave = false;\n    }\n\n    Meteor.clearTimeout(this.timeout);\n    this.timeout = Meteor.setTimeout(() => {\n      Promise.resolve()\n        .then(() => shouldSave && updateFunc({ object, id: docId }))\n        // on success, set saving briefly to true, before setting it to false again to trigger icon\n        .then(() => this.setState({ errorText: '', saving: showSaving }))\n        // If there was an error, reset value to the backend value\n        .catch(() => this.setState({ value: currentValue }))\n        .finally(() => this.setState({ saving: false }));\n    }, constants.AUTOSAVE_DEBOUNCE);\n  };\n\n  render() {\n    const {\n      inputProps: {\n        style,\n        label,\n        placeholder,\n        number,\n        id,\n        multiline,\n        rows,\n        info,\n        disabled,\n        money,\n        required,\n        date,\n        percent,\n        onFocusChange,\n        focused,\n        todo,\n\n        // Destructure these props to avoid warnings\n        inputRef,\n        currentValue,\n        condition,\n        decimal,\n        intlId,\n        saveOnChange,\n\n        ...otherProps\n      },\n      noValidator,\n      savingIconStyle,\n      admin,\n      inputLabelProps,\n    } = this.props;\n    const { value, errorText, saving, showInfo } = this.state;\n\n    let type;\n    if (money) {\n      type = 'money';\n    } else if (number) {\n      type = 'number';\n    } else if (date) {\n      type = 'date';\n    } else if (percent) {\n      type = 'percent';\n    } else {\n      type = 'text';\n    }\n\n    return (\n      <div className=\"form-input__row\" style={{ ...styles.div, ...style }}>\n        <MyTextInput\n          {...otherProps}\n          InputProps={{ onFocusChange, focused }}\n          label={label}\n          placeholder={placeholder}\n          value={value}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          type={type}\n          id={id}\n          multiline={multiline}\n          rows={rows}\n          info={errorText || (showInfo && info)}\n          error={!!errorText}\n          disabled={disabled}\n          style={{ width: '100%', ...style, marginBottom: 16 }}\n          noValidate\n          fullWidth\n          inputLabelProps={inputLabelProps}\n        />\n        <ValidIcon\n          saving={saving}\n          error={!!errorText}\n          style={{ ...styles.savingIcon, ...savingIconStyle }}\n          value={value}\n          required={required}\n          hide={admin}\n          todo={todo}\n        />\n        {!noValidator && <FormValidator {...this.props} />}\n      </div>\n    );\n  }\n}\n\nAutoFormTextInput.propTypes = {\n  autocomplete: PropTypes.string,\n  currentValue: PropTypes.any,\n  decimal: PropTypes.bool,\n  docId: PropTypes.string.isRequired,\n  floatingLabelFixed: PropTypes.bool,\n  info: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  inputProps: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    label: PropTypes.node.isRequired,\n    placeholder: PropTypes.node.isRequired,\n    style: PropTypes.objectOf(PropTypes.any),\n    multiline: PropTypes.bool,\n    disabled: PropTypes.bool,\n  }).isRequired,\n  inputStyle: PropTypes.objectOf(PropTypes.any),\n  money: PropTypes.bool,\n  noValidator: PropTypes.bool,\n  number: PropTypes.bool,\n  rows: PropTypes.number,\n  saveOnChange: PropTypes.bool,\n  savingIconStyle: PropTypes.object,\n  showValidIconOnChange: PropTypes.bool,\n  updateFunc: PropTypes.func,\n};\n\nAutoFormTextInput.defaultProps = {\n  autocomplete: '',\n  currentValue: '',\n  decimal: false,\n  floatingLabelFixed: true,\n  info: '',\n  inputStyle: undefined,\n  money: false,\n  noValidator: false,\n  number: false,\n  rows: 1,\n  saveOnChange: true,\n  savingIconStyle: {},\n  showValidIconOnChange: false,\n};\n\nexport default AutoFormTextInput;\n"]},"sourceType":"script","hash":"6310178fea77173e897dc5d5fba864543055dafc"}

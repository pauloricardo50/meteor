{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/InterestRatesTable/test/interestRates.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/components/InterestRatesTable/test/interestRates.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/InterestRatesTable/test/interestRates.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/components/InterestRatesTable/test/interestRates.spec.js"],"names":["expect","INTEREST_RATES","interestRates","TRENDS","describe","it","forEach","rate","index","to","equal","Object","values","indexOf","type","be","above","trend","rateLow","at","least","rateHigh","most","skip","array"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SAASC,cAAT;AACA,OAAOC,aAAP,IAAwBC,MAAxB;AAEAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9BC,EAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxCH,IAAAA,aAAa,CAACI,OAAd,CAAsB,CAACC,IAAD,EAAOC,KAAP,KACpBR,MAAM,CAAC,OAAOO,IAAR,CAAN,CAAoBE,EAApB,CAAuBC,KAAvB,CAA6B,QAA7B,EAAuCF,KAAvC,CADF;AAED,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,uDAAD,EAA0D,MAAM;AAChEH,IAAAA,aAAa,CAACI,OAAd,CAAsBC,IAAI,IACxBP,MAAM,CAACW,MAAM,CAACC,MAAP,CAAcX,cAAd,EAA8BY,OAA9B,CAAsCN,IAAI,CAACO,IAA3C,CAAD,CAAN,CAAyDL,EAAzD,CAA4DM,EAA5D,CAA+DC,KAA/D,CACE,CAAC,CADH,EAEET,IAAI,CAACO,IAFP,CADF;AAKD,GANC,CAAF;AAQAT,EAAAA,EAAE,CAAC,wDAAD,EAA2D,MAAM;AACjEH,IAAAA,aAAa,CAACI,OAAd,CAAsBC,IAAI,IACxBP,MAAM,CAACW,MAAM,CAACC,MAAP,CAAcT,MAAd,EAAsBU,OAAtB,CAA8BN,IAAI,CAACU,KAAnC,CAAD,CAAN,CAAkDR,EAAlD,CAAqDM,EAArD,CAAwDC,KAAxD,CACE,CAAC,CADH,EAEET,IAAI,CAACU,KAFP,CADF;AAKD,GANC,CAAF;AAQAZ,EAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAC7DH,IAAAA,aAAa,CAACI,OAAd,CAAuBC,IAAD,IAAU;AAC9BP,MAAAA,MAAM,CAACO,IAAI,CAACW,OAAN,CAAN,CAAqBT,EAArB,CAAwBM,EAAxB,CAA2BI,EAA3B,CAA8BC,KAA9B,CAAoC,KAApC;AACApB,MAAAA,MAAM,CAACO,IAAI,CAACc,QAAN,CAAN,CAAsBZ,EAAtB,CAAyBM,EAAzB,CAA4BI,EAA5B,CAA+BG,IAA/B,CAAoC,IAApC;AACD,KAHD;AAID,GALC,CAAF,CAtB8B,CA6B9B;;AACAjB,EAAAA,EAAE,CAACkB,IAAH,CAAQ,kDAAR,EAA4D,MAAM;AAChErB,IAAAA,aAAa,CAACI,OAAd,CAAsB,CAACC,IAAD,EAAOC,KAAP,EAAcgB,KAAd,KAAwB;AAC5C,UAAIhB,KAAK,GAAG,CAAZ,EAAe;AACbR,QAAAA,MAAM,CAACO,IAAI,CAACW,OAAN,CAAN,CAAqBT,EAArB,CAAwBM,EAAxB,CAA2BC,KAA3B,CAAiCQ,KAAK,CAAChB,KAAK,GAAG,CAAT,CAAL,CAAiBU,OAAlD;AACAlB,QAAAA,MAAM,CAACO,IAAI,CAACc,QAAN,CAAN,CAAsBZ,EAAtB,CAAyBM,EAAzB,CAA4BC,KAA5B,CAAkCQ,KAAK,CAAChB,KAAK,GAAG,CAAT,CAAL,CAAiBa,QAAnD;AACD;AACF,KALD;AAMD,GAPD;AAQD,CAtCO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { INTEREST_RATES } from 'core/api/constants';\nimport interestRates, { TRENDS } from '../interestRates';\n\ndescribe('interestRates', () => {\n  it('should be an array of objects', () => {\n    interestRates.forEach((rate, index) =>\n      expect(typeof rate).to.equal('object', index));\n  });\n\n  it('each interest rate should have a type from a constant', () => {\n    interestRates.forEach(rate =>\n      expect(Object.values(INTEREST_RATES).indexOf(rate.type)).to.be.above(\n        -1,\n        rate.type,\n      ));\n  });\n\n  it('each interest rate should have a trend from a constant', () => {\n    interestRates.forEach(rate =>\n      expect(Object.values(TRENDS).indexOf(rate.trend)).to.be.above(\n        -1,\n        rate.trend,\n      ));\n  });\n\n  it('rateLow and rateHigh should be between 0.5% and 3%', () => {\n    interestRates.forEach((rate) => {\n      expect(rate.rateLow).to.be.at.least(0.005);\n      expect(rate.rateHigh).to.be.at.most(0.03);\n    });\n  });\n\n  // This does not apply\n  it.skip('each rate should be higher than the previous one', () => {\n    interestRates.forEach((rate, index, array) => {\n      if (index > 0) {\n        expect(rate.rateLow).to.be.above(array[index - 1].rateLow);\n        expect(rate.rateHigh).to.be.above(array[index - 1].rateHigh);\n      }\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/InterestRatesTable/test/interestRates.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/InterestRatesTable/test/interestRates.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet INTEREST_RATES;\nmodule.link(\"../../../api/constants\", {\n  INTEREST_RATES(v) {\n    INTEREST_RATES = v;\n  }\n\n}, 1);\nlet interestRates, TRENDS;\nmodule.link(\"../interestRates\", {\n  default(v) {\n    interestRates = v;\n  },\n\n  TRENDS(v) {\n    TRENDS = v;\n  }\n\n}, 2);\ndescribe('interestRates', () => {\n  it('should be an array of objects', () => {\n    interestRates.forEach((rate, index) => expect(typeof rate).to.equal('object', index));\n  });\n  it('each interest rate should have a type from a constant', () => {\n    interestRates.forEach(rate => expect(Object.values(INTEREST_RATES).indexOf(rate.type)).to.be.above(-1, rate.type));\n  });\n  it('each interest rate should have a trend from a constant', () => {\n    interestRates.forEach(rate => expect(Object.values(TRENDS).indexOf(rate.trend)).to.be.above(-1, rate.trend));\n  });\n  it('rateLow and rateHigh should be between 0.5% and 3%', () => {\n    interestRates.forEach(rate => {\n      expect(rate.rateLow).to.be.at.least(0.005);\n      expect(rate.rateHigh).to.be.at.most(0.03);\n    });\n  }); // This does not apply\n\n  it.skip('each rate should be higher than the previous one', () => {\n    interestRates.forEach((rate, index, array) => {\n      if (index > 0) {\n        expect(rate.rateLow).to.be.above(array[index - 1].rateLow);\n        expect(rate.rateHigh).to.be.above(array[index - 1].rateHigh);\n      }\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/InterestRatesTable/test/interestRates.spec.js"],"names":["describe","it","interestRates","expect","rate","Object","index","array"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { INTEREST_RATES } from 'core/api/constants';\nimport interestRates, { TRENDS } from '../interestRates';\n\ndescribe('interestRates', () => {\n  it('should be an array of objects', () => {\n    interestRates.forEach((rate, index) =>\n      expect(typeof rate).to.equal('object', index));\n  });\n\n  it('each interest rate should have a type from a constant', () => {\n    interestRates.forEach(rate =>\n      expect(Object.values(INTEREST_RATES).indexOf(rate.type)).to.be.above(\n        -1,\n        rate.type,\n      ));\n  });\n\n  it('each interest rate should have a trend from a constant', () => {\n    interestRates.forEach(rate =>\n      expect(Object.values(TRENDS).indexOf(rate.trend)).to.be.above(\n        -1,\n        rate.trend,\n      ));\n  });\n\n  it('rateLow and rateHigh should be between 0.5% and 3%', () => {\n    interestRates.forEach((rate) => {\n      expect(rate.rateLow).to.be.at.least(0.005);\n      expect(rate.rateHigh).to.be.at.most(0.03);\n    });\n  });\n\n  // This does not apply\n  it.skip('each rate should be higher than the previous one', () => {\n    interestRates.forEach((rate, index, array) => {\n      if (index > 0) {\n        expect(rate.rateLow).to.be.above(array[index - 1].rateLow);\n        expect(rate.rateHigh).to.be.above(array[index - 1].rateHigh);\n      }\n    });\n  });\n});\n"]},"sourceType":"script","hash":"e2d875033270b85b932d824c4cd00dae9712c8d4"}

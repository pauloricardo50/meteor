{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Table/tableHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/components/Table/tableHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Table/tableHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/components/Table/tableHelpers.js"],"names":["ORDER","makeSorter","shouldDisplayLabelAndData","columnValue","makeSortFunc","orderBy","isReversed","sorter","a","b","valueA","columns","valueB","raw","determineOrder","oldOrderBy","newOrderBy","order","changeOrder","finalOrder","ASC","DESC","sortData","data","sortedData","sort"],"mappings":"AAAA,SAASA,KAAT;AACA,OAAOC,UAAP;AAEA,SAASD,KAAT,yC,CAEA;AACA;;AACA,OAAO,MAAME,yBAAyB,GAAGC,WAAW,IAClDA,WAAW,KAAK,IAAhB,IACG,OAAOA,WAAP,KAAuB,QAD1B,IAEG,SAASA,WAFZ,IAGG,WAAWA,WAJT;;AAMP,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,UAAV,KAAyB;AAC5C,QAAMC,MAAM,GAAGN,UAAU,CAAC,CAACK,UAAF,CAAzB;AAEA,SAAO,CAACE,CAAD,EAAIC,CAAJ,KAAU;AACf,QAAIC,MAAM,GAAGF,CAAC,CAACG,OAAF,CAAUN,OAAV,CAAb;AACA,QAAIO,MAAM,GAAGH,CAAC,CAACE,OAAF,CAAUN,OAAV,CAAb,CAFe,CAIf;;AACA,QAAIH,yBAAyB,CAACQ,MAAD,CAA7B,EAAuC;AACrCA,MAAAA,MAAM,GAAGA,MAAM,CAACG,GAAhB;AACAD,MAAAA,MAAM,GAAGA,MAAM,CAACC,GAAhB;AACD;;AAED,WAAON,MAAM,CAACG,MAAD,EAASE,MAAT,CAAb;AACD,GAXD;AAYD,CAfD;;AAiBA,MAAME,cAAc,GAAG,CAAC;AACtBC,EAAAA,UADsB;AAEtBC,EAAAA,UAFsB;AAGtBC,EAAAA,KAHsB;AAItBC,EAAAA,WAAW,GAAG;AAJQ,CAAD,KAKjB;AACJ,MAAIZ,UAAJ;AACA,MAAIa,UAAJ;;AAEA,MAAIJ,UAAU,KAAKC,UAAnB,EAA+B;AAC7B;AACAV,IAAAA,UAAU,GAAG,KAAb;AACAa,IAAAA,UAAU,GAAGnB,KAAK,CAACoB,GAAnB;AACD,GAJD,MAIO,IAAIF,WAAJ,EAAiB;AACtB;AACAZ,IAAAA,UAAU,GAAGW,KAAK,KAAKjB,KAAK,CAACoB,GAA7B;AACAD,IAAAA,UAAU,GAAGb,UAAU,GAAGN,KAAK,CAACqB,IAAT,GAAgBrB,KAAK,CAACoB,GAA7C;AACD,GAJM,MAIA;AACL;AACA;AACA;AACAd,IAAAA,UAAU,GAAGW,KAAK,KAAKjB,KAAK,CAACoB,GAA7B;AACAD,IAAAA,UAAU,GAAGF,KAAb;AACD;;AAED,SAAO;AAAEX,IAAAA,UAAF;AAAca,IAAAA;AAAd,GAAP;AACD,CA1BD;;AA4BA,OAAO,MAAMG,QAAQ,GAAG,CAAC;AACvBC,EAAAA,IADuB;AAEvBP,EAAAA,UAFuB;AAGvBX,EAAAA,OAAO,EAAEU,UAHc;AAIvBE,EAAAA,KAJuB;AAKvBC,EAAAA;AALuB,CAAD,KAMlB;AACJ,QAAM;AAAEZ,IAAAA,UAAF;AAAca,IAAAA;AAAd,MAA6BL,cAAc,CAAC;AAChDC,IAAAA,UADgD;AAEhDC,IAAAA,UAFgD;AAGhDC,IAAAA,KAHgD;AAIhDC,IAAAA;AAJgD,GAAD,CAAjD;AAOA,QAAMM,UAAU,GAAGD,IAAI,CAACE,IAAL,CAAUrB,YAAY,CAACY,UAAD,EAAaV,UAAb,CAAtB,CAAnB;AAEA,SAAO;AAAEiB,IAAAA,IAAI,EAAEC,UAAR;AAAoBP,IAAAA,KAAK,EAAEE,UAA3B;AAAuCd,IAAAA,OAAO,EAAEW;AAAhD,GAAP;AACD,CAjBM","sourcesContent":["import { ORDER } from '../../utils/sortArrayOfObjects';\nimport makeSorter from '../../utils/sorting';\n\nexport { ORDER } from '../../utils/sortArrayOfObjects';\n\n// \"raw\" and \"label\" keys have to be present in the object to display it\n// this way\nexport const shouldDisplayLabelAndData = columnValue =>\n  columnValue !== null\n  && typeof columnValue === 'object'\n  && 'raw' in columnValue\n  && 'label' in columnValue;\n\nconst makeSortFunc = (orderBy, isReversed) => {\n  const sorter = makeSorter(!isReversed);\n\n  return (a, b) => {\n    let valueA = a.columns[orderBy];\n    let valueB = b.columns[orderBy];\n\n    // Add support for columns that have a label and raw data\n    if (shouldDisplayLabelAndData(valueA)) {\n      valueA = valueA.raw;\n      valueB = valueB.raw;\n    }\n\n    return sorter(valueA, valueB);\n  };\n};\n\nconst determineOrder = ({\n  oldOrderBy,\n  newOrderBy,\n  order,\n  changeOrder = true,\n}) => {\n  let isReversed;\n  let finalOrder;\n\n  if (oldOrderBy !== newOrderBy) {\n    // First click, Initial ascending order\n    isReversed = false;\n    finalOrder = ORDER.ASC;\n  } else if (changeOrder) {\n    // Clicked a second time, reverse order\n    isReversed = order === ORDER.ASC;\n    finalOrder = isReversed ? ORDER.DESC : ORDER.ASC;\n  } else {\n    // If data is just being sorted again without user changing the order,\n    // don't change the order and keep it as is.\n    // This can happen if new data is added to the table, or some data changed\n    isReversed = order !== ORDER.ASC;\n    finalOrder = order;\n  }\n\n  return { isReversed, finalOrder };\n};\n\nexport const sortData = ({\n  data,\n  newOrderBy,\n  orderBy: oldOrderBy,\n  order,\n  changeOrder,\n}) => {\n  const { isReversed, finalOrder } = determineOrder({\n    oldOrderBy,\n    newOrderBy,\n    order,\n    changeOrder,\n  });\n\n  const sortedData = data.sort(makeSortFunc(newOrderBy, isReversed));\n\n  return { data: sortedData, order: finalOrder, orderBy: newOrderBy };\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Table/tableHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/Table/tableHelpers.js"}},"code":"module.export({\n  shouldDisplayLabelAndData: () => shouldDisplayLabelAndData,\n  sortData: () => sortData\n});\nlet ORDER;\nmodule.link(\"../../utils/sortArrayOfObjects\", {\n  ORDER(v) {\n    ORDER = v;\n  }\n\n}, 0);\nlet makeSorter;\nmodule.link(\"../../utils/sorting\", {\n  default(v) {\n    makeSorter = v;\n  }\n\n}, 1);\nmodule.link(\"../../utils/sortArrayOfObjects\", {\n  ORDER: \"ORDER\"\n}, 2);\n\nconst shouldDisplayLabelAndData = columnValue => columnValue !== null && typeof columnValue === 'object' && 'raw' in columnValue && 'label' in columnValue;\n\nconst makeSortFunc = (orderBy, isReversed) => {\n  const sorter = makeSorter(!isReversed);\n  return (a, b) => {\n    let valueA = a.columns[orderBy];\n    let valueB = b.columns[orderBy]; // Add support for columns that have a label and raw data\n\n    if (shouldDisplayLabelAndData(valueA)) {\n      valueA = valueA.raw;\n      valueB = valueB.raw;\n    }\n\n    return sorter(valueA, valueB);\n  };\n};\n\nconst determineOrder = ({\n  oldOrderBy,\n  newOrderBy,\n  order,\n  changeOrder = true\n}) => {\n  let isReversed;\n  let finalOrder;\n\n  if (oldOrderBy !== newOrderBy) {\n    // First click, Initial ascending order\n    isReversed = false;\n    finalOrder = ORDER.ASC;\n  } else if (changeOrder) {\n    // Clicked a second time, reverse order\n    isReversed = order === ORDER.ASC;\n    finalOrder = isReversed ? ORDER.DESC : ORDER.ASC;\n  } else {\n    // If data is just being sorted again without user changing the order,\n    // don't change the order and keep it as is.\n    // This can happen if new data is added to the table, or some data changed\n    isReversed = order !== ORDER.ASC;\n    finalOrder = order;\n  }\n\n  return {\n    isReversed,\n    finalOrder\n  };\n};\n\nconst sortData = ({\n  data,\n  newOrderBy,\n  orderBy: oldOrderBy,\n  order,\n  changeOrder\n}) => {\n  const {\n    isReversed,\n    finalOrder\n  } = determineOrder({\n    oldOrderBy,\n    newOrderBy,\n    order,\n    changeOrder\n  });\n  const sortedData = data.sort(makeSortFunc(newOrderBy, isReversed));\n  return {\n    data: sortedData,\n    order: finalOrder,\n    orderBy: newOrderBy\n  };\n};","map":{"version":3,"sources":["imports/core/components/Table/tableHelpers.js"],"names":["shouldDisplayLabelAndData","columnValue","makeSortFunc","sorter","makeSorter","valueA","a","valueB","b","determineOrder","changeOrder","oldOrderBy","isReversed","finalOrder","ORDER","order","sortData","orderBy","sortedData","data","newOrderBy"],"mappings":"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","sourcesContent":["import { ORDER } from '../../utils/sortArrayOfObjects';\nimport makeSorter from '../../utils/sorting';\n\nexport { ORDER } from '../../utils/sortArrayOfObjects';\n\n// \"raw\" and \"label\" keys have to be present in the object to display it\n// this way\nexport const shouldDisplayLabelAndData = columnValue =>\n  columnValue !== null\n  && typeof columnValue === 'object'\n  && 'raw' in columnValue\n  && 'label' in columnValue;\n\nconst makeSortFunc = (orderBy, isReversed) => {\n  const sorter = makeSorter(!isReversed);\n\n  return (a, b) => {\n    let valueA = a.columns[orderBy];\n    let valueB = b.columns[orderBy];\n\n    // Add support for columns that have a label and raw data\n    if (shouldDisplayLabelAndData(valueA)) {\n      valueA = valueA.raw;\n      valueB = valueB.raw;\n    }\n\n    return sorter(valueA, valueB);\n  };\n};\n\nconst determineOrder = ({\n  oldOrderBy,\n  newOrderBy,\n  order,\n  changeOrder = true,\n}) => {\n  let isReversed;\n  let finalOrder;\n\n  if (oldOrderBy !== newOrderBy) {\n    // First click, Initial ascending order\n    isReversed = false;\n    finalOrder = ORDER.ASC;\n  } else if (changeOrder) {\n    // Clicked a second time, reverse order\n    isReversed = order === ORDER.ASC;\n    finalOrder = isReversed ? ORDER.DESC : ORDER.ASC;\n  } else {\n    // If data is just being sorted again without user changing the order,\n    // don't change the order and keep it as is.\n    // This can happen if new data is added to the table, or some data changed\n    isReversed = order !== ORDER.ASC;\n    finalOrder = order;\n  }\n\n  return { isReversed, finalOrder };\n};\n\nexport const sortData = ({\n  data,\n  newOrderBy,\n  orderBy: oldOrderBy,\n  order,\n  changeOrder,\n}) => {\n  const { isReversed, finalOrder } = determineOrder({\n    oldOrderBy,\n    newOrderBy,\n    order,\n    changeOrder,\n  });\n\n  const sortedData = data.sort(makeSortFunc(newOrderBy, isReversed));\n\n  return { data: sortedData, order: finalOrder, orderBy: newOrderBy };\n};\n"]},"sourceType":"script","hash":"4bf31267d280457c30cabe4a3f02557c85340e8a"}

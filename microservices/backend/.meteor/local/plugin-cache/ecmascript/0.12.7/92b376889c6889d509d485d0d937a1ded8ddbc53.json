{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/processors/limit-sort.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/cultofcoders:redis-oplog/lib/processors/limit-sort.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/processors/limit-sort.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/processors/limit-sort.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:redis-oplog/lib/processors/limit-sort.js"}},"code":"let Events;\nmodule.link(\"../constants\", {\n  Events(v) {\n    Events = v;\n  }\n\n}, 0);\nlet hasSortFields;\nmodule.link(\"./lib/fieldsExist\", {\n  hasSortFields(v) {\n    hasSortFields = v;\n  }\n\n}, 1);\nlet requery;\nmodule.link(\"./actions/requery\", {\n  default(v) {\n    requery = v;\n  }\n\n}, 2);\nmodule.exportDefault(function (observableCollection, event, doc, modifiedFields) {\n  switch (event) {\n    case Events.INSERT:\n      handleInsert(observableCollection, doc);\n      break;\n\n    case Events.UPDATE:\n      handleUpdate(observableCollection, doc, modifiedFields);\n      break;\n\n    case Events.REMOVE:\n      handleRemove(observableCollection, doc);\n      break;\n\n    default:\n      throw new Meteor.Error(`Invalid event specified: ${event}`);\n  }\n});\n\n/**\n * @param observableCollection\n * @param doc\n */\nconst handleInsert = function (observableCollection, doc) {\n  if (observableCollection.isEligible(doc)) {\n    requery(observableCollection, doc);\n  }\n};\n/**\n * @param observableCollection\n * @param doc\n * @param modifiedFields\n */\n\n\nconst handleUpdate = function (observableCollection, doc, modifiedFields) {\n  if (observableCollection.contains(doc._id)) {\n    if (observableCollection.isEligible(doc)) {\n      if (hasSortFields(observableCollection.options.sort, modifiedFields)) {\n        requery(observableCollection, doc, Events.UPDATE, modifiedFields);\n      } else {\n        observableCollection.change(doc, modifiedFields);\n      }\n    } else {\n      requery(observableCollection);\n    }\n  } else {\n    if (observableCollection.isEligible(doc)) {\n      if (hasSortFields(observableCollection.options.sort, modifiedFields)) {\n        // This document isn't in the observable collection, but a field that\n        // is related to sorting has changed, so the order and image may have changed\n        requery(observableCollection, doc, Events.UPDATE, modifiedFields);\n      } else {\n        // If the document is now eligible and it does not belong in the initial values\n        // We only add it to the store if and only if we do not surpass the limit\n        if (!observableCollection.isLimitReached()) {\n          observableCollection.add(doc);\n        }\n      }\n    }\n  }\n};\n/**\n * @param observableCollection\n * @param doc\n */\n\n\nconst handleRemove = function (observableCollection, doc) {\n  if (observableCollection.contains(doc._id)) {\n    requery(observableCollection, doc);\n  } else {\n    if (observableCollection.options.skip) {\n      requery(observableCollection, doc);\n    }\n  }\n};","map":{"version":3,"sources":["packages/cultofcoders:redis-oplog/lib/processors/limit-sort.js"],"names":["Events","module","link","v","hasSortFields","requery","default","exportDefault","observableCollection","event","doc","modifiedFields","INSERT","handleInsert","UPDATE","handleUpdate","REMOVE","handleRemove","Meteor","Error","isEligible","contains","_id","options","sort","change","isLimitReached","add","skip"],"mappings":"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","sourcesContent":["import { Events } from '../constants';\nimport { hasSortFields } from './lib/fieldsExist';\nimport requery from './actions/requery';\n\n/**\n * @param observableCollection\n * @param event\n * @param doc\n * @param modifiedFields\n */\nexport default function(observableCollection, event, doc, modifiedFields) {\n    switch (event) {\n        case Events.INSERT:\n            handleInsert(observableCollection, doc);\n            break;\n        case Events.UPDATE:\n            handleUpdate(observableCollection, doc, modifiedFields);\n            break;\n        case Events.REMOVE:\n            handleRemove(observableCollection, doc);\n            break;\n        default:\n            throw new Meteor.Error(`Invalid event specified: ${event}`);\n    }\n}\n\n/**\n * @param observableCollection\n * @param doc\n */\nconst handleInsert = function(observableCollection, doc) {\n    if (observableCollection.isEligible(doc)) {\n        requery(observableCollection, doc);\n    }\n};\n\n/**\n * @param observableCollection\n * @param doc\n * @param modifiedFields\n */\nconst handleUpdate = function(observableCollection, doc, modifiedFields) {\n    if (observableCollection.contains(doc._id)) {\n        if (observableCollection.isEligible(doc)) {\n            if (\n                hasSortFields(observableCollection.options.sort, modifiedFields)\n            ) {\n                requery(\n                    observableCollection,\n                    doc,\n                    Events.UPDATE,\n                    modifiedFields\n                );\n            } else {\n                observableCollection.change(doc, modifiedFields);\n            }\n        } else {\n            requery(observableCollection);\n        }\n    } else {\n        if (observableCollection.isEligible(doc)) {\n            if (\n                hasSortFields(observableCollection.options.sort, modifiedFields)\n            ) {\n                // This document isn't in the observable collection, but a field that\n                // is related to sorting has changed, so the order and image may have changed\n                requery(\n                    observableCollection,\n                    doc,\n                    Events.UPDATE,\n                    modifiedFields\n                );\n            } else {\n                // If the document is now eligible and it does not belong in the initial values\n                // We only add it to the store if and only if we do not surpass the limit\n                if (!observableCollection.isLimitReached()) {\n                    observableCollection.add(doc);\n                }\n            }\n        }\n    }\n};\n\n/**\n * @param observableCollection\n * @param doc\n */\nconst handleRemove = function(observableCollection, doc) {\n    if (observableCollection.contains(doc._id)) {\n        requery(observableCollection, doc);\n    } else {\n        if (observableCollection.options.skip) {\n            requery(observableCollection, doc);\n        }\n    }\n};\n"]},"sourceType":"script","hash":"92b376889c6889d509d485d0d937a1ded8ddbc53"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/fixtures/propertyFixtures.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/fixtures/propertyFixtures.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/fixtures/propertyFixtures.js","inputSourceMap":{"version":3,"sources":["imports/core/fixtures/propertyFixtures.js"],"names":["faker","PropertyService","PROPERTY_STATUS","RESIDENCE_TYPE","PROPERTY_TYPE","VOLUME_NORM","MINERGIE_CERTIFICATE","Properties","statuses","Object","values","residenceTypes","types","volumeNorms","minergies","getRandomValueInRange","min","max","Math","random","getRandomValueInArray","array","floor","length","createFakeProperty","userId","property","status","value","round","address1","address","streetAddress","zipCode","city","residenceType","propertyType","futureOwner","constructionYear","landArea","insideArea","volume","volumeNorm","roomCount","parkingInside","parkingOutside","minergie","isCoproperty","copropertyPercentage","_id","insert","getRelatedPropertyIds","usersIds","find","$in","fields","fetch","map","item"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,eAAP;AACA,SACEC,eADF,EAEEC,cAFF,EAGEC,aAHF,EAIEC,WAJF,EAKEC,oBALF;AAOA,SAASC,UAAT;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcR,eAAd,CAAjB;AACA,MAAMS,cAAc,GAAGF,MAAM,CAACC,MAAP,CAAcP,cAAd,CAAvB;AACA,MAAMS,KAAK,GAAGH,MAAM,CAACC,MAAP,CAAcN,aAAd,CAAd;AACA,MAAMS,WAAW,GAAGJ,MAAM,CAACC,MAAP,CAAcL,WAAd,CAApB;AACA,MAAMS,SAAS,GAAGL,MAAM,CAACC,MAAP,CAAcJ,oBAAd,CAAlB;;AAEA,MAAMS,qBAAqB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcC,IAAI,CAACC,MAAL,MAAiBF,GAAG,GAAGD,GAAvB,IAA8BA,GAA1E;;AACA,MAAMI,qBAAqB,GAAGC,KAAK,IACjCA,KAAK,CAACH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACC,MAAL,KAAgBE,KAAK,CAACE,MAAjC,CAAD,CADP;;AAGA,OAAO,MAAMC,kBAAkB,GAAGC,MAAM,IAAI;AAC1C,QAAMC,QAAQ,GAAG;AACfC,IAAAA,MAAM,EAAEP,qBAAqB,CAACZ,QAAD,CADd;AAEfoB,IAAAA,KAAK,EAAEV,IAAI,CAACW,KAAL,CAAWd,qBAAqB,CAAC,MAAD,EAAS,OAAT,CAAhC,CAFQ;AAGfe,IAAAA,QAAQ,EAAE9B,KAAK,CAAC+B,OAAN,CAAcC,aAAd,EAHK;AAIfC,IAAAA,OAAO,EAAE,IAJM;AAKfC,IAAAA,IAAI,EAAE,QALS;AAMfC,IAAAA,aAAa,EAAEf,qBAAqB,CAACT,cAAD,CANrB;AAOfyB,IAAAA,YAAY,EAAEhB,qBAAqB,CAACR,KAAD,CAPpB;AAQfyB,IAAAA,WAAW,EAAE,CARE;AASfC,IAAAA,gBAAgB,EAAE,IATH;AAUfC,IAAAA,QAAQ,EAAE,GAVK;AAWfC,IAAAA,UAAU,EAAE,GAXG;AAYfC,IAAAA,MAAM,EAAE,IAZO;AAafC,IAAAA,UAAU,EAAEtB,qBAAqB,CAACP,WAAD,CAblB;AAcf8B,IAAAA,SAAS,EAAE,CAdI;AAefC,IAAAA,aAAa,EAAE,CAfA;AAgBfC,IAAAA,cAAc,EAAE,CAhBD;AAiBfC,IAAAA,QAAQ,EAAE1B,qBAAqB,CAACN,SAAD,CAjBhB;AAkBfiC,IAAAA,YAAY,EAAE,IAlBC;AAmBfC,IAAAA,oBAAoB,EAAE;AAnBP,GAAjB;AAsBA,SAAO,EAAE,GAAGtB,QAAL;AAAeuB,IAAAA,GAAG,EAAEhD,eAAe,CAACiD,MAAhB,CAAuB;AAAExB,MAAAA,QAAF;AAAYD,MAAAA;AAAZ,KAAvB;AAApB,GAAP;AACD,CAxBM;AA0BP,OAAO,MAAM0B,qBAAqB,GAAGC,QAAQ,IAC3C7C,UAAU,CAAC8C,IAAX,CAAgB;AAAE5B,EAAAA,MAAM,EAAE;AAAE6B,IAAAA,GAAG,EAAEF;AAAP;AAAV,CAAhB,EAA+C;AAAEG,EAAAA,MAAM,EAAE;AAAEN,IAAAA,GAAG,EAAE;AAAP;AAAV,CAA/C,EACGO,KADH,GAEGC,GAFH,CAEOC,IAAI,IAAIA,IAAI,CAACT,GAFpB,CADK","sourcesContent":["import faker from 'faker/locale/fr';\n\nimport PropertyService from '../api/properties/server/PropertyService';\nimport {\n  PROPERTY_STATUS,\n  RESIDENCE_TYPE,\n  PROPERTY_TYPE,\n  VOLUME_NORM,\n  MINERGIE_CERTIFICATE,\n} from '../api/properties/propertyConstants';\nimport { Properties } from '../api';\n\nconst statuses = Object.values(PROPERTY_STATUS);\nconst residenceTypes = Object.values(RESIDENCE_TYPE);\nconst types = Object.values(PROPERTY_TYPE);\nconst volumeNorms = Object.values(VOLUME_NORM);\nconst minergies = Object.values(MINERGIE_CERTIFICATE);\n\nconst getRandomValueInRange = (min, max) => Math.random() * (max - min) + min;\nconst getRandomValueInArray = array =>\n  array[Math.floor(Math.random() * array.length)];\n\nexport const createFakeProperty = userId => {\n  const property = {\n    status: getRandomValueInArray(statuses),\n    value: Math.round(getRandomValueInRange(500000, 3000000)),\n    address1: faker.address.streetAddress(),\n    zipCode: 1201,\n    city: 'GenÃ¨ve',\n    residenceType: getRandomValueInArray(residenceTypes),\n    propertyType: getRandomValueInArray(types),\n    futureOwner: 0,\n    constructionYear: 2010,\n    landArea: 300,\n    insideArea: 140,\n    volume: 1500,\n    volumeNorm: getRandomValueInArray(volumeNorms),\n    roomCount: 5,\n    parkingInside: 1,\n    parkingOutside: 2,\n    minergie: getRandomValueInArray(minergies),\n    isCoproperty: true,\n    copropertyPercentage: 400,\n  };\n\n  return { ...property, _id: PropertyService.insert({ property, userId }) };\n};\n\nexport const getRelatedPropertyIds = usersIds =>\n  Properties.find({ userId: { $in: usersIds } }, { fields: { _id: 1 } })\n    .fetch()\n    .map(item => item._id);\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/fixtures/propertyFixtures.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/fixtures/propertyFixtures.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  createFakeProperty: () => createFakeProperty,\n  getRelatedPropertyIds: () => getRelatedPropertyIds\n});\nlet faker;\nmodule.link(\"faker/locale/fr\", {\n  default(v) {\n    faker = v;\n  }\n\n}, 0);\nlet PropertyService;\nmodule.link(\"../api/properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 1);\nlet PROPERTY_STATUS, RESIDENCE_TYPE, PROPERTY_TYPE, VOLUME_NORM, MINERGIE_CERTIFICATE;\nmodule.link(\"../api/properties/propertyConstants\", {\n  PROPERTY_STATUS(v) {\n    PROPERTY_STATUS = v;\n  },\n\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  },\n\n  PROPERTY_TYPE(v) {\n    PROPERTY_TYPE = v;\n  },\n\n  VOLUME_NORM(v) {\n    VOLUME_NORM = v;\n  },\n\n  MINERGIE_CERTIFICATE(v) {\n    MINERGIE_CERTIFICATE = v;\n  }\n\n}, 2);\nlet Properties;\nmodule.link(\"../api\", {\n  Properties(v) {\n    Properties = v;\n  }\n\n}, 3);\nconst statuses = Object.values(PROPERTY_STATUS);\nconst residenceTypes = Object.values(RESIDENCE_TYPE);\nconst types = Object.values(PROPERTY_TYPE);\nconst volumeNorms = Object.values(VOLUME_NORM);\nconst minergies = Object.values(MINERGIE_CERTIFICATE);\n\nconst getRandomValueInRange = (min, max) => Math.random() * (max - min) + min;\n\nconst getRandomValueInArray = array => array[Math.floor(Math.random() * array.length)];\n\nconst createFakeProperty = userId => {\n  const property = {\n    status: getRandomValueInArray(statuses),\n    value: Math.round(getRandomValueInRange(500000, 3000000)),\n    address1: faker.address.streetAddress(),\n    zipCode: 1201,\n    city: 'GenÃ¨ve',\n    residenceType: getRandomValueInArray(residenceTypes),\n    propertyType: getRandomValueInArray(types),\n    futureOwner: 0,\n    constructionYear: 2010,\n    landArea: 300,\n    insideArea: 140,\n    volume: 1500,\n    volumeNorm: getRandomValueInArray(volumeNorms),\n    roomCount: 5,\n    parkingInside: 1,\n    parkingOutside: 2,\n    minergie: getRandomValueInArray(minergies),\n    isCoproperty: true,\n    copropertyPercentage: 400\n  };\n  return (0, _objectSpread2.default)({}, property, {\n    _id: PropertyService.insert({\n      property,\n      userId\n    })\n  });\n};\n\nconst getRelatedPropertyIds = usersIds => Properties.find({\n  userId: {\n    $in: usersIds\n  }\n}, {\n  fields: {\n    _id: 1\n  }\n}).fetch().map(item => item._id);","map":{"version":3,"sources":["imports/core/fixtures/propertyFixtures.js"],"names":["statuses","Object","residenceTypes","types","volumeNorms","minergies","getRandomValueInRange","Math","max","getRandomValueInArray","array","createFakeProperty","userId","property","status","value","address1","faker","zipCode","city","residenceType","propertyType","futureOwner","constructionYear","landArea","insideArea","volume","volumeNorm","roomCount","parkingInside","parkingOutside","minergie","isCoproperty","copropertyPercentage","_id","getRelatedPropertyIds","usersIds","$in","fields","item"],"mappings":"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","sourcesContent":["import faker from 'faker/locale/fr';\n\nimport PropertyService from '../api/properties/server/PropertyService';\nimport {\n  PROPERTY_STATUS,\n  RESIDENCE_TYPE,\n  PROPERTY_TYPE,\n  VOLUME_NORM,\n  MINERGIE_CERTIFICATE,\n} from '../api/properties/propertyConstants';\nimport { Properties } from '../api';\n\nconst statuses = Object.values(PROPERTY_STATUS);\nconst residenceTypes = Object.values(RESIDENCE_TYPE);\nconst types = Object.values(PROPERTY_TYPE);\nconst volumeNorms = Object.values(VOLUME_NORM);\nconst minergies = Object.values(MINERGIE_CERTIFICATE);\n\nconst getRandomValueInRange = (min, max) => Math.random() * (max - min) + min;\nconst getRandomValueInArray = array =>\n  array[Math.floor(Math.random() * array.length)];\n\nexport const createFakeProperty = userId => {\n  const property = {\n    status: getRandomValueInArray(statuses),\n    value: Math.round(getRandomValueInRange(500000, 3000000)),\n    address1: faker.address.streetAddress(),\n    zipCode: 1201,\n    city: 'GenÃ¨ve',\n    residenceType: getRandomValueInArray(residenceTypes),\n    propertyType: getRandomValueInArray(types),\n    futureOwner: 0,\n    constructionYear: 2010,\n    landArea: 300,\n    insideArea: 140,\n    volume: 1500,\n    volumeNorm: getRandomValueInArray(volumeNorms),\n    roomCount: 5,\n    parkingInside: 1,\n    parkingOutside: 2,\n    minergie: getRandomValueInArray(minergies),\n    isCoproperty: true,\n    copropertyPercentage: 400,\n  };\n\n  return { ...property, _id: PropertyService.insert({ property, userId }) };\n};\n\nexport const getRelatedPropertyIds = usersIds =>\n  Properties.find({ userId: { $in: usersIds } }, { fields: { _id: 1 } })\n    .fetch()\n    .map(item => item._id);\n"]},"sourceType":"script","hash":"07c51eb93ba0262a4301d8a0a0b12fc43fef2fa8"}

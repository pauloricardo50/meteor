{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/formHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/formHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/formHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/formHelpers.js"],"names":["React","T","toNumber","onlyNums","value","replace","onlyNumsAndPlus","numberFormatters","parse","phoneFormatters","format","percentFormatters","Math","round","parseFloat","toFixed","moneyFormatters","setRequired","initialValue","undefined","makeFormArray","array","intlPrefix","map","field","required","label","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,CAAP;AACA,SAASC,QAAT;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAA1B;;AACA,MAAMC,eAAe,GAAGF,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAjC;;AAEA,OAAO,MAAME,gBAAgB,GAAG;AAC9BC,EAAAA,KAAK,EAAEJ,KAAK,IAAIA,KAAK,IAAIF,QAAQ,CAACE,KAAD,CADH,CAE9B;;AAF8B,CAAzB;AAKP,OAAO,MAAMK,eAAe,GAAG;AAC7BD,EAAAA,KAAK,EAAEJ,KAAK,IAAIA,KAAK,IAAIE,eAAe,CAACF,KAAD,CADX;AAE7BM,EAAAA,MAAM,EAAEN,KAAK,IAAKA,KAAK,GAAGE,eAAe,CAACF,KAAD,CAAlB,GAA4B;AAFtB,CAAxB;AAKP,OAAO,MAAMO,iBAAiB,GAAG;AAC/BH,EAAAA,KAAK,EAAEJ,KAAK,IACTA,KAAK,KAAK,EAAV,GAAe,EAAf,GAAoBQ,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACV,KAAD,CAAV,GAAoB,GAA/B,IAAsC,KAF9B;AAG/BM,EAAAA,MAAM,EAAEN,KAAK,IAAKA,KAAK,KAAK,EAAV,GAAe,EAAf,GAAoB,CAACA,KAAK,GAAG,GAAT,EAAcW,OAAd,CAAsB,CAAtB;AAHP,CAA1B;AAMP,OAAO,MAAMC,eAAe,GAAG;AAC7BR,EAAAA,KAAK,EAAEJ,KAAK,IAAIF,QAAQ,CAACE,KAAD;AADK,CAAxB;;AAIP,MAAMa,WAAW,GAAGC,YAAY,IAC7BA,YAAY,KAAKC,SAAjB,GAA6B,IAA7B,GAAoCD,YADvC;;AAGA,OAAO,MAAME,aAAa,GAAG,CAACC,KAAD,EAAQC,UAAR,KAC3BD,KAAK,CAACE,GAAN,CAAUC,KAAK,KAAK,EAClB,GAAGA,KADe;AAElBC,EAAAA,QAAQ,EAAER,WAAW,CAACO,KAAK,CAACC,QAAP,CAFH;AAGlBC,EAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,IAAe,CAAC,CAAD,CAAG,GAAG,CAAE,GAAEJ,UAAW,IAAGE,KAAK,CAACG,EAAG,EAA3B,CAAN;AAHJ,CAAL,CAAf,CADK","sourcesContent":["import React from 'react';\n\nimport T from '../components/Translation';\nimport { toNumber } from './conversionFunctions';\n\nconst onlyNums = value => value.replace(/[^\\d]/g, '');\nconst onlyNumsAndPlus = value => value.replace(/[^\\d&+]/g, '');\n\nexport const numberFormatters = {\n  parse: value => value && toNumber(value),\n  // format: value => value,\n};\n\nexport const phoneFormatters = {\n  parse: value => value && onlyNumsAndPlus(value),\n  format: value => (value ? onlyNumsAndPlus(value) : ''),\n};\n\nexport const percentFormatters = {\n  parse: value =>\n    (value === '' ? '' : Math.round(parseFloat(value) * 100) / 10000),\n  format: value => (value === '' ? '' : (value * 100).toFixed(2)),\n};\n\nexport const moneyFormatters = {\n  parse: value => toNumber(value),\n};\n\nconst setRequired = initialValue =>\n  (initialValue === undefined ? true : initialValue);\n\nexport const makeFormArray = (array, intlPrefix) =>\n  array.map(field => ({\n    ...field,\n    required: setRequired(field.required),\n    label: field.label || <T id={`${intlPrefix}.${field.id}`} />,\n  }));\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/formHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/formHelpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  numberFormatters: function () {\n    return numberFormatters;\n  },\n  phoneFormatters: function () {\n    return phoneFormatters;\n  },\n  percentFormatters: function () {\n    return percentFormatters;\n  },\n  moneyFormatters: function () {\n    return moneyFormatters;\n  },\n  makeFormArray: function () {\n    return makeFormArray;\n  }\n});\nvar React;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar T;\nmodule.link(\"../components/Translation\", {\n  \"default\": function (v) {\n    T = v;\n  }\n}, 1);\nvar toNumber;\nmodule.link(\"./conversionFunctions\", {\n  toNumber: function (v) {\n    toNumber = v;\n  }\n}, 2);\n\nvar onlyNums = function (value) {\n  return value.replace(/[^\\d]/g, '');\n};\n\nvar onlyNumsAndPlus = function (value) {\n  return value.replace(/[^\\d&+]/g, '');\n};\n\nvar numberFormatters = {\n  parse: function (value) {\n    return value && toNumber(value);\n  } // format: value => value,\n\n};\nvar phoneFormatters = {\n  parse: function (value) {\n    return value && onlyNumsAndPlus(value);\n  },\n  format: function (value) {\n    return value ? onlyNumsAndPlus(value) : '';\n  }\n};\nvar percentFormatters = {\n  parse: function (value) {\n    return value === '' ? '' : Math.round(parseFloat(value) * 100) / 10000;\n  },\n  format: function (value) {\n    return value === '' ? '' : (value * 100).toFixed(2);\n  }\n};\nvar moneyFormatters = {\n  parse: function (value) {\n    return toNumber(value);\n  }\n};\n\nvar setRequired = function (initialValue) {\n  return initialValue === undefined ? true : initialValue;\n};\n\nvar makeFormArray = function (array, intlPrefix) {\n  return array.map(function (field) {\n    return (0, _objectSpread2.default)({}, field, {\n      required: setRequired(field.required),\n      label: field.label || React.createElement(T, {\n        id: intlPrefix + \".\" + field.id\n      })\n    });\n  });\n};","map":{"version":3,"sources":["imports/core/utils/formHelpers.js"],"names":["onlyNums","value","onlyNumsAndPlus","numberFormatters","parse","toNumber","phoneFormatters","format","percentFormatters","Math","parseFloat","moneyFormatters","setRequired","initialValue","makeFormArray","field","required","label","intlPrefix"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport T from '../components/Translation';\nimport { toNumber } from './conversionFunctions';\n\nconst onlyNums = value => value.replace(/[^\\d]/g, '');\nconst onlyNumsAndPlus = value => value.replace(/[^\\d&+]/g, '');\n\nexport const numberFormatters = {\n  parse: value => value && toNumber(value),\n  // format: value => value,\n};\n\nexport const phoneFormatters = {\n  parse: value => value && onlyNumsAndPlus(value),\n  format: value => (value ? onlyNumsAndPlus(value) : ''),\n};\n\nexport const percentFormatters = {\n  parse: value =>\n    (value === '' ? '' : Math.round(parseFloat(value) * 100) / 10000),\n  format: value => (value === '' ? '' : (value * 100).toFixed(2)),\n};\n\nexport const moneyFormatters = {\n  parse: value => toNumber(value),\n};\n\nconst setRequired = initialValue =>\n  (initialValue === undefined ? true : initialValue);\n\nexport const makeFormArray = (array, intlPrefix) =>\n  array.map(field => ({\n    ...field,\n    required: setRequired(field.required),\n    label: field.label || <T id={`${intlPrefix}.${field.id}`} />,\n  }));\n"]},"sourceType":"script","hash":"0436ff160e7de6d9043c8634fc1cc07b85874b8e"}

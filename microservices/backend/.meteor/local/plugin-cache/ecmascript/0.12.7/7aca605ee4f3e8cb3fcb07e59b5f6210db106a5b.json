{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/notifications/server/NotificationService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/notifications/server/NotificationService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/notifications/server/NotificationService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/notifications/server/NotificationService.js"],"names":["TaskService","TASK_STATUS","ActivityService","UserService","ROLES","CollectionService","RevenueService","Notifications","NotificationService","constructor","readNotification","userId","notificationId","updateLinkMetadata","id","linkName","linkId","metadata","read","snoozeNotification","inOneHour","Date","setHours","getHours","snoozeDate","unreadNotification","readNotificationAll","filters","notification","fetchOne","$filters","recipientLinks","_id","_update","object","map","recipientLink","addTaskNotifications","tasks","fetch","status","ACTIVE","dueAt","$lte","assigneeLink","admins","roles","ADMIN","forEach","taskId","existingNotification","insert","getNotificationRecipient","taskLink","addActivityNotifications","now","yesterday","setDate","getDate","activities","shouldNotify","date","$gte","createdBy","loan","userCache","activityId","recipients","assignedEmployeeCache","push","activityLink","addRevenueNotifications","revenues","expectedAt","paidAt","$exists","revenueId","revenueLink","assignee"],"mappings":"AAAA,OAAOA,WAAP;AACA,SAASC,WAAT;AACA,OAAOC,eAAP;AACA,OAAOC,WAAP;AACA,SAASC,KAAT;AACA,OAAOC,iBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,aAAP;;AAEA,MAAMC,mBAAN,SAAkCH,iBAAlC,CAAoD;AAClDI,EAAAA,WAAW,GAAG;AACZ,UAAMF,aAAN;AACD;;AAEDG,EAAAA,gBAAgB,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAA6B;AAC3C,SAAKC,kBAAL,CAAwB;AACtBC,MAAAA,EAAE,EAAEF,cADkB;AAEtBG,MAAAA,QAAQ,EAAE,YAFY;AAGtBC,MAAAA,MAAM,EAAEL,MAHc;AAItBM,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAJY,KAAxB;AAMD;;AAEDC,EAAAA,kBAAkB,CAAC;AAAER,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAA6B;AAC7C,UAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACAD,IAAAA,SAAS,CAACE,QAAV,CAAmBF,SAAS,CAACG,QAAV,KAAuB,CAA1C;AACA,SAAKV,kBAAL,CAAwB;AACtBC,MAAAA,EAAE,EAAEF,cADkB;AAEtBG,MAAAA,QAAQ,EAAE,YAFY;AAGtBC,MAAAA,MAAM,EAAEL,MAHc;AAItBM,MAAAA,QAAQ,EAAE;AAAEO,QAAAA,UAAU,EAAEJ;AAAd;AAJY,KAAxB;AAMD;;AAEDK,EAAAA,kBAAkB,CAAC;AAAEd,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAA6B;AAC7C,SAAKC,kBAAL,CAAwB;AACtBC,MAAAA,EAAE,EAAEF,cADkB;AAEtBG,MAAAA,QAAQ,EAAE,YAFY;AAGtBC,MAAAA,MAAM,EAAEL,MAHc;AAItBM,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAJY,KAAxB;AAMD;;AAEDQ,EAAAA,mBAAmB,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAc;AAC/B,UAAMC,YAAY,GAAG,KAAKC,QAAL,CAAc;AACjCC,MAAAA,QAAQ,EAAEH,OADuB;AAEjCI,MAAAA,cAAc,EAAE;AAFiB,KAAd,CAArB;;AAKA,QAAIH,YAAJ,EAAkB;AAChB,YAAM;AAAEI,QAAAA,GAAG,EAAEpB,cAAP;AAAuBmB,QAAAA;AAAvB,UAA0CH,YAAhD;;AACA,WAAKK,OAAL,CAAa;AACXnB,QAAAA,EAAE,EAAEF,cADO;AAEXsB,QAAAA,MAAM,EAAE;AACNH,UAAAA,cAAc,EAAEA,cAAc,CAACI,GAAf,CAAmBC,aAAa,KAAK,EACnD,GAAGA,aADgD;AAEnDlB,YAAAA,IAAI,EAAE;AAF6C,WAAL,CAAhC;AADV;AAFG,OAAb;AASD;AACF;;AAEDmB,EAAAA,oBAAoB,GAAG;AACrB,UAAMC,KAAK,GAAGtC,WAAW,CAACuC,KAAZ,CAAkB;AAC9BT,MAAAA,QAAQ,EAAE;AACRU,QAAAA,MAAM,EAAEvC,WAAW,CAACwC,MADZ;AAERC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE,IAAItB,IAAJ;AAAR;AAFC,OADoB;AAK9BW,MAAAA,GAAG,EAAE,CALyB;AAM9BY,MAAAA,YAAY,EAAE;AANgB,KAAlB,CAAd;AASA,UAAMC,MAAM,GAAG1C,WAAW,CAACoC,KAAZ,CAAkB;AAAET,MAAAA,QAAQ,EAAE;AAAEgB,QAAAA,KAAK,EAAE1C,KAAK,CAAC2C;AAAf;AAAZ,KAAlB,CAAf;AACAT,IAAAA,KAAK,CAACU,OAAN,CAAc,CAAC;AAAEhB,MAAAA,GAAG,EAAEiB,MAAP;AAAeL,MAAAA,YAAY,GAAG;AAA9B,KAAD,KAAwC;AACpD,YAAMM,oBAAoB,GAAG,KAAKrB,QAAL,CAAc;AACzCC,QAAAA,QAAQ,EAAE;AAAE,0BAAgBmB;AAAlB;AAD+B,OAAd,CAA7B;;AAIA,UAAI,CAACC,oBAAL,EAA2B;AACzB,aAAKC,MAAL,CAAY;AACVpB,UAAAA,cAAc,EAAE,KAAKqB,wBAAL,CACdR,YAAY,CAACZ,GADC,EAEda,MAFc,CADN;AAKVQ,UAAAA,QAAQ,EAAE;AAAErB,YAAAA,GAAG,EAAEiB;AAAP;AALA,SAAZ;AAOD;AACF,KAdD;AAeD;;AAEDK,EAAAA,wBAAwB,GAAG;AACzB,UAAMC,GAAG,GAAG,IAAIlC,IAAJ,EAAZ;AACA,UAAMmC,SAAS,GAAG,IAAInC,IAAJ,EAAlB;AACAmC,IAAAA,SAAS,CAACC,OAAV,CAAkBD,SAAS,CAACE,OAAV,KAAsB,CAAxC;AACA,UAAMC,UAAU,GAAGzD,eAAe,CAACqC,KAAhB,CAAsB;AACvCT,MAAAA,QAAQ,EAAE;AACR8B,QAAAA,YAAY,EAAE,IADN;AAERC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAEN,SAAR;AAAmBb,UAAAA,IAAI,EAAEY;AAAzB;AAFE,OAD6B;AAKvCvB,MAAAA,GAAG,EAAE,CALkC;AAMvC+B,MAAAA,SAAS,EAAE,CAN4B;AAOvCC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAPiC,KAAtB,CAAnB;AAUAN,IAAAA,UAAU,CAACX,OAAX,CAAmB,CAAC;AAAEhB,MAAAA,GAAG,EAAEkC,UAAP;AAAmBH,MAAAA,SAAS,GAAG,EAA/B;AAAmCC,MAAAA;AAAnC,KAAD,KAA+C;AAChE,YAAMd,oBAAoB,GAAG,KAAKrB,QAAL,CAAc;AACzCC,QAAAA,QAAQ,EAAE;AAAE,8BAAoBoC;AAAtB;AAD+B,OAAd,CAA7B;AAIA,YAAMC,UAAU,GAAG,CAAC;AAAEnC,QAAAA,GAAG,EAAE+B;AAAP,OAAD,CAAnB;;AAEA,UAAIC,IAAI,IAAIA,IAAI,CAACC,SAAb,IAA0BD,IAAI,CAACC,SAAL,CAAeG,qBAA7C,EAAoE;AAClED,QAAAA,UAAU,CAACE,IAAX,CAAgB;AAAErC,UAAAA,GAAG,EAAEgC,IAAI,CAACC,SAAL,CAAeG,qBAAf,CAAqCpC;AAA5C,SAAhB;AACD;;AAED,UAAI,CAACkB,oBAAL,EAA2B;AACzB,aAAKC,MAAL,CAAY;AACVpB,UAAAA,cAAc,EAAE,CAAC;AAAEC,YAAAA,GAAG,EAAE+B;AAAP,WAAD,CADN;AAEVO,UAAAA,YAAY,EAAE;AAAEtC,YAAAA,GAAG,EAAEkC;AAAP;AAFJ,SAAZ;AAID;AACF,KAjBD;AAkBD;;AAEDK,EAAAA,uBAAuB,GAAG;AACxB,UAAMhB,GAAG,GAAG,IAAIlC,IAAJ,EAAZ;AACA,UAAMmD,QAAQ,GAAGlE,cAAc,CAACiC,KAAf,CAAqB;AACpCT,MAAAA,QAAQ,EAAE;AAAE2C,QAAAA,UAAU,EAAE;AAAE9B,UAAAA,IAAI,EAAEY;AAAR,SAAd;AAA6BmB,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAArC,OAD0B;AAEpCX,MAAAA,IAAI,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAF8B,KAArB,CAAjB;AAKA,UAAMpB,MAAM,GAAG1C,WAAW,CAACoC,KAAZ,CAAkB;AAAET,MAAAA,QAAQ,EAAE;AAAEgB,QAAAA,KAAK,EAAE1C,KAAK,CAAC2C;AAAf;AAAZ,KAAlB,CAAf;AACAyB,IAAAA,QAAQ,CAACxB,OAAT,CAAiB,CAAC;AAAEhB,MAAAA,GAAG,EAAE4C,SAAP;AAAkBZ,MAAAA;AAAlB,KAAD,KAA8B;AAC7C,YAAMd,oBAAoB,GAAG,KAAKrB,QAAL,CAAc;AACzCC,QAAAA,QAAQ,EAAE;AAAE,6BAAmB8C;AAArB;AAD+B,OAAd,CAA7B;;AAIA,UAAI,CAAC1B,oBAAL,EAA2B;AACzB,aAAKC,MAAL,CAAY;AACVpB,UAAAA,cAAc,EAAE,KAAKqB,wBAAL,CACdY,IAAI,CAACC,SAAL,IACKD,IAAI,CAACC,SAAL,CAAeG,qBADpB,IAEKJ,IAAI,CAACC,SAAL,CAAeG,qBAAf,CAAqCpC,GAH5B,EAIda,MAJc,CADN;AAOVgC,UAAAA,WAAW,EAAE;AAAE7C,YAAAA,GAAG,EAAE4C;AAAP;AAPH,SAAZ;AASD;AACF,KAhBD;AAiBD;;AAEDxB,EAAAA,wBAAwB,CAAC0B,QAAD,EAAWjC,MAAX,EAAmB;AACzC,QAAIiC,QAAJ,EAAc;AACZ,aAAO,CAAC;AAAE9C,QAAAA,GAAG,EAAE8C;AAAP,OAAD,CAAP;AACD;;AACD,WAAOjC,MAAM,CAACV,GAAP,CAAW,CAAC;AAAEH,MAAAA;AAAF,KAAD,MAAc;AAAEA,MAAAA;AAAF,KAAd,CAAX,CAAP;AACD;;AApJiD;;AAuJpD,eAAe,IAAIxB,mBAAJ,EAAf","sourcesContent":["import TaskService from '../../tasks/server/TaskService';\nimport { TASK_STATUS } from '../../tasks/taskConstants';\nimport ActivityService from '../../activities/server/ActivityService';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../users/userConstants';\nimport CollectionService from '../../helpers/CollectionService';\nimport RevenueService from '../../revenues/server/RevenueService';\nimport Notifications from '../notifications';\n\nclass NotificationService extends CollectionService {\n  constructor() {\n    super(Notifications);\n  }\n\n  readNotification({ userId, notificationId }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { read: true },\n    });\n  }\n\n  snoozeNotification({ userId, notificationId }) {\n    const inOneHour = new Date();\n    inOneHour.setHours(inOneHour.getHours() + 1);\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { snoozeDate: inOneHour },\n    });\n  }\n\n  unreadNotification({ userId, notificationId }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { read: false },\n    });\n  }\n\n  readNotificationAll({ filters }) {\n    const notification = this.fetchOne({\n      $filters: filters,\n      recipientLinks: 1,\n    });\n\n    if (notification) {\n      const { _id: notificationId, recipientLinks } = notification;\n      this._update({\n        id: notificationId,\n        object: {\n          recipientLinks: recipientLinks.map(recipientLink => ({\n            ...recipientLink,\n            read: true,\n          })),\n        },\n      });\n    }\n  }\n\n  addTaskNotifications() {\n    const tasks = TaskService.fetch({\n      $filters: {\n        status: TASK_STATUS.ACTIVE,\n        dueAt: { $lte: new Date() },\n      },\n      _id: 1,\n      assigneeLink: 1,\n    });\n\n    const admins = UserService.fetch({ $filters: { roles: ROLES.ADMIN } });\n    tasks.forEach(({ _id: taskId, assigneeLink = {} }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'taskLink._id': taskId },\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(\n            assigneeLink._id,\n            admins,\n          ),\n          taskLink: { _id: taskId },\n        });\n      }\n    });\n  }\n\n  addActivityNotifications() {\n    const now = new Date();\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 2);\n    const activities = ActivityService.fetch({\n      $filters: {\n        shouldNotify: true,\n        date: { $gte: yesterday, $lte: now },\n      },\n      _id: 1,\n      createdBy: 1,\n      loan: { userCache: 1 },\n    });\n\n    activities.forEach(({ _id: activityId, createdBy = {}, loan }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'activityLink._id': activityId },\n      });\n\n      const recipients = [{ _id: createdBy }];\n\n      if (loan && loan.userCache && loan.userCache.assignedEmployeeCache) {\n        recipients.push({ _id: loan.userCache.assignedEmployeeCache._id });\n      }\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: [{ _id: createdBy }],\n          activityLink: { _id: activityId },\n        });\n      }\n    });\n  }\n\n  addRevenueNotifications() {\n    const now = new Date();\n    const revenues = RevenueService.fetch({\n      $filters: { expectedAt: { $lte: now }, paidAt: { $exists: false } },\n      loan: { userCache: 1 },\n    });\n\n    const admins = UserService.fetch({ $filters: { roles: ROLES.ADMIN } });\n    revenues.forEach(({ _id: revenueId, loan }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'revenueLink._id': revenueId },\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(\n            loan.userCache\n              && loan.userCache.assignedEmployeeCache\n              && loan.userCache.assignedEmployeeCache._id,\n            admins,\n          ),\n          revenueLink: { _id: revenueId },\n        });\n      }\n    });\n  }\n\n  getNotificationRecipient(assignee, admins) {\n    if (assignee) {\n      return [{ _id: assignee }];\n    }\n    return admins.map(({ _id }) => ({ _id }));\n  }\n}\n\nexport default new NotificationService();\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/notifications/server/NotificationService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/notifications/server/NotificationService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet TaskService;\nmodule.link(\"../../tasks/server/TaskService\", {\n  default(v) {\n    TaskService = v;\n  }\n\n}, 0);\nlet TASK_STATUS;\nmodule.link(\"../../tasks/taskConstants\", {\n  TASK_STATUS(v) {\n    TASK_STATUS = v;\n  }\n\n}, 1);\nlet ActivityService;\nmodule.link(\"../../activities/server/ActivityService\", {\n  default(v) {\n    ActivityService = v;\n  }\n\n}, 2);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 3);\nlet ROLES;\nmodule.link(\"../../users/userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 4);\nlet CollectionService;\nmodule.link(\"../../helpers/CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 5);\nlet RevenueService;\nmodule.link(\"../../revenues/server/RevenueService\", {\n  default(v) {\n    RevenueService = v;\n  }\n\n}, 6);\nlet Notifications;\nmodule.link(\"../notifications\", {\n  default(v) {\n    Notifications = v;\n  }\n\n}, 7);\n\nclass NotificationService extends CollectionService {\n  constructor() {\n    super(Notifications);\n  }\n\n  readNotification({\n    userId,\n    notificationId\n  }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: {\n        read: true\n      }\n    });\n  }\n\n  snoozeNotification({\n    userId,\n    notificationId\n  }) {\n    const inOneHour = new Date();\n    inOneHour.setHours(inOneHour.getHours() + 1);\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: {\n        snoozeDate: inOneHour\n      }\n    });\n  }\n\n  unreadNotification({\n    userId,\n    notificationId\n  }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: {\n        read: false\n      }\n    });\n  }\n\n  readNotificationAll({\n    filters\n  }) {\n    const notification = this.fetchOne({\n      $filters: filters,\n      recipientLinks: 1\n    });\n\n    if (notification) {\n      const {\n        _id: notificationId,\n        recipientLinks\n      } = notification;\n\n      this._update({\n        id: notificationId,\n        object: {\n          recipientLinks: recipientLinks.map(recipientLink => (0, _objectSpread2.default)({}, recipientLink, {\n            read: true\n          }))\n        }\n      });\n    }\n  }\n\n  addTaskNotifications() {\n    const tasks = TaskService.fetch({\n      $filters: {\n        status: TASK_STATUS.ACTIVE,\n        dueAt: {\n          $lte: new Date()\n        }\n      },\n      _id: 1,\n      assigneeLink: 1\n    });\n    const admins = UserService.fetch({\n      $filters: {\n        roles: ROLES.ADMIN\n      }\n    });\n    tasks.forEach(({\n      _id: taskId,\n      assigneeLink = {}\n    }) => {\n      const existingNotification = this.fetchOne({\n        $filters: {\n          'taskLink._id': taskId\n        }\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(assigneeLink._id, admins),\n          taskLink: {\n            _id: taskId\n          }\n        });\n      }\n    });\n  }\n\n  addActivityNotifications() {\n    const now = new Date();\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 2);\n    const activities = ActivityService.fetch({\n      $filters: {\n        shouldNotify: true,\n        date: {\n          $gte: yesterday,\n          $lte: now\n        }\n      },\n      _id: 1,\n      createdBy: 1,\n      loan: {\n        userCache: 1\n      }\n    });\n    activities.forEach(({\n      _id: activityId,\n      createdBy = {},\n      loan\n    }) => {\n      const existingNotification = this.fetchOne({\n        $filters: {\n          'activityLink._id': activityId\n        }\n      });\n      const recipients = [{\n        _id: createdBy\n      }];\n\n      if (loan && loan.userCache && loan.userCache.assignedEmployeeCache) {\n        recipients.push({\n          _id: loan.userCache.assignedEmployeeCache._id\n        });\n      }\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: [{\n            _id: createdBy\n          }],\n          activityLink: {\n            _id: activityId\n          }\n        });\n      }\n    });\n  }\n\n  addRevenueNotifications() {\n    const now = new Date();\n    const revenues = RevenueService.fetch({\n      $filters: {\n        expectedAt: {\n          $lte: now\n        },\n        paidAt: {\n          $exists: false\n        }\n      },\n      loan: {\n        userCache: 1\n      }\n    });\n    const admins = UserService.fetch({\n      $filters: {\n        roles: ROLES.ADMIN\n      }\n    });\n    revenues.forEach(({\n      _id: revenueId,\n      loan\n    }) => {\n      const existingNotification = this.fetchOne({\n        $filters: {\n          'revenueLink._id': revenueId\n        }\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(loan.userCache && loan.userCache.assignedEmployeeCache && loan.userCache.assignedEmployeeCache._id, admins),\n          revenueLink: {\n            _id: revenueId\n          }\n        });\n      }\n    });\n  }\n\n  getNotificationRecipient(assignee, admins) {\n    if (assignee) {\n      return [{\n        _id: assignee\n      }];\n    }\n\n    return admins.map(({\n      _id\n    }) => ({\n      _id\n    }));\n  }\n\n}\n\nmodule.exportDefault(new NotificationService());","map":{"version":3,"sources":["imports/core/api/notifications/server/NotificationService.js"],"names":["TaskService","constructor","readNotification","notificationId","id","linkName","linkId","metadata","read","snoozeNotification","inOneHour","snoozeDate","unreadNotification","readNotificationAll","filters","notification","$filters","recipientLinks","_id","object","recipientLink","addTaskNotifications","tasks","status","TASK_STATUS","dueAt","$lte","assigneeLink","admins","roles","ROLES","ADMIN","existingNotification","taskId","taskLink","addActivityNotifications","now","yesterday","activities","shouldNotify","date","$gte","createdBy","loan","userCache","activityId","recipients","activityLink","addRevenueNotifications","revenues","expectedAt","paidAt","$exists","revenueId","revenueLink","getNotificationRecipient","assignee"],"mappings":"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","sourcesContent":["import TaskService from '../../tasks/server/TaskService';\nimport { TASK_STATUS } from '../../tasks/taskConstants';\nimport ActivityService from '../../activities/server/ActivityService';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../users/userConstants';\nimport CollectionService from '../../helpers/CollectionService';\nimport RevenueService from '../../revenues/server/RevenueService';\nimport Notifications from '../notifications';\n\nclass NotificationService extends CollectionService {\n  constructor() {\n    super(Notifications);\n  }\n\n  readNotification({ userId, notificationId }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { read: true },\n    });\n  }\n\n  snoozeNotification({ userId, notificationId }) {\n    const inOneHour = new Date();\n    inOneHour.setHours(inOneHour.getHours() + 1);\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { snoozeDate: inOneHour },\n    });\n  }\n\n  unreadNotification({ userId, notificationId }) {\n    this.updateLinkMetadata({\n      id: notificationId,\n      linkName: 'recipients',\n      linkId: userId,\n      metadata: { read: false },\n    });\n  }\n\n  readNotificationAll({ filters }) {\n    const notification = this.fetchOne({\n      $filters: filters,\n      recipientLinks: 1,\n    });\n\n    if (notification) {\n      const { _id: notificationId, recipientLinks } = notification;\n      this._update({\n        id: notificationId,\n        object: {\n          recipientLinks: recipientLinks.map(recipientLink => ({\n            ...recipientLink,\n            read: true,\n          })),\n        },\n      });\n    }\n  }\n\n  addTaskNotifications() {\n    const tasks = TaskService.fetch({\n      $filters: {\n        status: TASK_STATUS.ACTIVE,\n        dueAt: { $lte: new Date() },\n      },\n      _id: 1,\n      assigneeLink: 1,\n    });\n\n    const admins = UserService.fetch({ $filters: { roles: ROLES.ADMIN } });\n    tasks.forEach(({ _id: taskId, assigneeLink = {} }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'taskLink._id': taskId },\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(\n            assigneeLink._id,\n            admins,\n          ),\n          taskLink: { _id: taskId },\n        });\n      }\n    });\n  }\n\n  addActivityNotifications() {\n    const now = new Date();\n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 2);\n    const activities = ActivityService.fetch({\n      $filters: {\n        shouldNotify: true,\n        date: { $gte: yesterday, $lte: now },\n      },\n      _id: 1,\n      createdBy: 1,\n      loan: { userCache: 1 },\n    });\n\n    activities.forEach(({ _id: activityId, createdBy = {}, loan }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'activityLink._id': activityId },\n      });\n\n      const recipients = [{ _id: createdBy }];\n\n      if (loan && loan.userCache && loan.userCache.assignedEmployeeCache) {\n        recipients.push({ _id: loan.userCache.assignedEmployeeCache._id });\n      }\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: [{ _id: createdBy }],\n          activityLink: { _id: activityId },\n        });\n      }\n    });\n  }\n\n  addRevenueNotifications() {\n    const now = new Date();\n    const revenues = RevenueService.fetch({\n      $filters: { expectedAt: { $lte: now }, paidAt: { $exists: false } },\n      loan: { userCache: 1 },\n    });\n\n    const admins = UserService.fetch({ $filters: { roles: ROLES.ADMIN } });\n    revenues.forEach(({ _id: revenueId, loan }) => {\n      const existingNotification = this.fetchOne({\n        $filters: { 'revenueLink._id': revenueId },\n      });\n\n      if (!existingNotification) {\n        this.insert({\n          recipientLinks: this.getNotificationRecipient(\n            loan.userCache\n              && loan.userCache.assignedEmployeeCache\n              && loan.userCache.assignedEmployeeCache._id,\n            admins,\n          ),\n          revenueLink: { _id: revenueId },\n        });\n      }\n    });\n  }\n\n  getNotificationRecipient(assignee, admins) {\n    if (assignee) {\n      return [{ _id: assignee }];\n    }\n    return admins.map(({ _id }) => ({ _id }));\n  }\n}\n\nexport default new NotificationService();\n"]},"sourceType":"script","hash":"7aca605ee4f3e8cb3fcb07e59b5f6210db106a5b"}

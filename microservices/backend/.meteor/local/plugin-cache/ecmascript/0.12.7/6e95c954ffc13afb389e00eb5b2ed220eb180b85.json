{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/BalanceSheet.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/BalanceSheet.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/BalanceSheet.jsx","inputSourceMap":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/BalanceSheet.jsx"],"names":["React","T","Money","toMoney","OWN_FUNDS_USAGE_TYPES","shouldRenderRow","BalanceSheetTable","BalanceSheetTableProps","getCostLines","loan","structureId","calculator","propertyValue","selectPropertyValue","notaryFees","getFees","total","propertyWork","selectStructureKey","key","label","purchaseType","value","condition","filter","ownFundLabel","type","usageType","borrower","borrowerIndex","borrowerSuffix","firstName","index","getFinancingLines","borrowers","multipleBorrowers","length","wantedLoan","selectLoanValue","ownFunds","money","PLEDGE","map","borrowerId","find","_id","findIndex","BalanceSheet","getProjectValue","getTotalFinancing"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\n\nimport T, { Money } from '../../../../../../components/Translation';\nimport { toMoney } from '../../../../../../utils/conversionFunctions';\nimport { OWN_FUNDS_USAGE_TYPES } from '../../../../../loans/loanConstants';\nimport { shouldRenderRow } from '../../PdfTable/PdfTable';\nimport BalanceSheetTable from '../../BalanceSheetTable';\n\ntype BalanceSheetTableProps = {};\n\nconst getCostLines = ({ loan, structureId, calculator }) => {\n  const propertyValue = calculator.selectPropertyValue({ loan, structureId });\n  const notaryFees = calculator.getFees({ loan, structureId }).total;\n  const propertyWork = calculator.selectStructureKey({\n    loan,\n    structureId,\n    key: 'propertyWork',\n  });\n\n  return [\n    {\n      label: (\n        <T id=\"Forms.value\" values={{ purchaseType: loan.purchaseType }} />\n      ),\n      value: propertyValue,\n    },\n    { label: 'Frais de notaire', value: notaryFees },\n    {\n      label: 'Travaux de plus-value',\n      value: propertyWork,\n      condition: propertyWork > 0,\n    },\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst ownFundLabel = ({ type, usageType, borrower, borrowerIndex }) => {\n  const borrowerSuffix = borrower ? (\n    <>\n      &nbsp;\n      <span className=\"secondary\">\n        (\n        {borrower.firstName || (\n          <T\n            id=\"general.borrowerWithIndex\"\n            values={{ index: borrowerIndex + 1 }}\n          />\n        )}\n        )\n      </span>\n    </>\n  ) : null;\n\n  return usageType ? (\n    <span>\n      <T id={`PDF.ownFund.${type}.${usageType}`} />\n      {borrowerSuffix}\n    </span>\n  ) : (\n    <span>\n      <T id={`PDF.ownFund.${type}`} />\n      {borrowerSuffix}\n    </span>\n  );\n};\nconst getFinancingLines = ({ loan, structureId, calculator }) => {\n  const { borrowers } = loan;\n  const multipleBorrowers = borrowers.length > 1;\n  const wantedLoan = calculator.selectLoanValue({ loan, structureId });\n  const ownFunds = calculator.selectStructureKey({\n    loan,\n    structureId,\n    key: 'ownFunds',\n  });\n\n  return [\n    {\n      label: 'Prêt hypothécaire',\n      value: (\n        <span>\n          <Money value={wantedLoan} currency={false} />\n        </span>\n      ),\n      money: false,\n    },\n    ...ownFunds\n      .filter(({ usageType }) => usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n      .map(({ value, type, usageType, borrowerId }) => ({\n        label: ownFundLabel({\n          type,\n          usageType,\n          borrower:\n            multipleBorrowers\n            && borrowers.find(({ _id }) => _id === borrowerId),\n          borrowerIndex:\n            borrowers.findIndex(({ _id }) => _id === borrowerId) + 1,\n        }),\n        value,\n      })),\n    ...ownFunds\n      .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n      .map(({ value, type, usageType, borrowerId }) => ({\n        label: (\n          <span className=\"secondary\">\n            {ownFundLabel({\n              type,\n              usageType,\n              borrower:\n                multipleBorrowers\n                && borrowers.find(({ _id }) => _id === borrowerId),\n              borrowerIndex:\n                borrowers.findIndex(({ _id }) => _id === borrowerId) + 1,\n            })}\n          </span>\n        ),\n        value: <span className=\"secondary\">({toMoney(value)})</span>,\n        money: false,\n      })),\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst BalanceSheet = ({\n  loan,\n  structureId,\n  calculator,\n}: BalanceSheetTableProps) => (\n  <BalanceSheetTable\n    titles={[\"Coût de l'opération\", 'Financement']}\n    leftRows={getCostLines({ loan, structureId, calculator })}\n    rightRows={getFinancingLines({ loan, structureId, calculator })}\n    bottomTitles={['Prix de revient', 'Financement total']}\n    bottomValues={[\n      <Money\n        currency={false}\n        value={calculator.getProjectValue({ loan, structureId })}\n        key=\"0\"\n      />,\n      <Money\n        currency={false}\n        value={calculator.getTotalFinancing({ loan, structureId })}\n        key=\"1\"\n      />,\n    ]}\n  />\n);\n\nexport default BalanceSheet;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/BalanceSheet.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/BalanceSheet.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet T, Money;\nmodule.link(\"../../../../../../components/Translation\", {\n  default(v) {\n    T = v;\n  },\n\n  Money(v) {\n    Money = v;\n  }\n\n}, 1);\nlet toMoney;\nmodule.link(\"../../../../../../utils/conversionFunctions\", {\n  toMoney(v) {\n    toMoney = v;\n  }\n\n}, 2);\nlet OWN_FUNDS_USAGE_TYPES;\nmodule.link(\"../../../../../loans/loanConstants\", {\n  OWN_FUNDS_USAGE_TYPES(v) {\n    OWN_FUNDS_USAGE_TYPES = v;\n  }\n\n}, 3);\nlet shouldRenderRow;\nmodule.link(\"../../PdfTable/PdfTable\", {\n  shouldRenderRow(v) {\n    shouldRenderRow = v;\n  }\n\n}, 4);\nlet BalanceSheetTable;\nmodule.link(\"../../BalanceSheetTable\", {\n  default(v) {\n    BalanceSheetTable = v;\n  }\n\n}, 5);\n\nconst getCostLines = ({\n  loan,\n  structureId,\n  calculator\n}) => {\n  const propertyValue = calculator.selectPropertyValue({\n    loan,\n    structureId\n  });\n  const notaryFees = calculator.getFees({\n    loan,\n    structureId\n  }).total;\n  const propertyWork = calculator.selectStructureKey({\n    loan,\n    structureId,\n    key: 'propertyWork'\n  });\n  return [{\n    label: React.createElement(T, {\n      id: \"Forms.value\",\n      values: {\n        purchaseType: loan.purchaseType\n      }\n    }),\n    value: propertyValue\n  }, {\n    label: 'Frais de notaire',\n    value: notaryFees\n  }, {\n    label: 'Travaux de plus-value',\n    value: propertyWork,\n    condition: propertyWork > 0\n  }].filter(({\n    condition\n  }) => shouldRenderRow(condition));\n};\n\nconst ownFundLabel = ({\n  type,\n  usageType,\n  borrower,\n  borrowerIndex\n}) => {\n  const borrowerSuffix = borrower ? React.createElement(React.Fragment, null, \"\\xA0\", React.createElement(\"span\", {\n    className: \"secondary\"\n  }, \"(\", borrower.firstName || React.createElement(T, {\n    id: \"general.borrowerWithIndex\",\n    values: {\n      index: borrowerIndex + 1\n    }\n  }), \")\")) : null;\n  return usageType ? React.createElement(\"span\", null, React.createElement(T, {\n    id: `PDF.ownFund.${type}.${usageType}`\n  }), borrowerSuffix) : React.createElement(\"span\", null, React.createElement(T, {\n    id: `PDF.ownFund.${type}`\n  }), borrowerSuffix);\n};\n\nconst getFinancingLines = ({\n  loan,\n  structureId,\n  calculator\n}) => {\n  const {\n    borrowers\n  } = loan;\n  const multipleBorrowers = borrowers.length > 1;\n  const wantedLoan = calculator.selectLoanValue({\n    loan,\n    structureId\n  });\n  const ownFunds = calculator.selectStructureKey({\n    loan,\n    structureId,\n    key: 'ownFunds'\n  });\n  return [{\n    label: 'Prêt hypothécaire',\n    value: React.createElement(\"span\", null, React.createElement(Money, {\n      value: wantedLoan,\n      currency: false\n    })),\n    money: false\n  }, ...ownFunds.filter(({\n    usageType\n  }) => usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE).map(({\n    value,\n    type,\n    usageType,\n    borrowerId\n  }) => ({\n    label: ownFundLabel({\n      type,\n      usageType,\n      borrower: multipleBorrowers && borrowers.find(({\n        _id\n      }) => _id === borrowerId),\n      borrowerIndex: borrowers.findIndex(({\n        _id\n      }) => _id === borrowerId) + 1\n    }),\n    value\n  })), ...ownFunds.filter(({\n    usageType\n  }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE).map(({\n    value,\n    type,\n    usageType,\n    borrowerId\n  }) => ({\n    label: React.createElement(\"span\", {\n      className: \"secondary\"\n    }, ownFundLabel({\n      type,\n      usageType,\n      borrower: multipleBorrowers && borrowers.find(({\n        _id\n      }) => _id === borrowerId),\n      borrowerIndex: borrowers.findIndex(({\n        _id\n      }) => _id === borrowerId) + 1\n    })),\n    value: React.createElement(\"span\", {\n      className: \"secondary\"\n    }, \"(\", toMoney(value), \")\"),\n    money: false\n  }))].filter(({\n    condition\n  }) => shouldRenderRow(condition));\n};\n\nconst BalanceSheet = ({\n  loan,\n  structureId,\n  calculator\n}) => React.createElement(BalanceSheetTable, {\n  titles: [\"Coût de l'opération\", 'Financement'],\n  leftRows: getCostLines({\n    loan,\n    structureId,\n    calculator\n  }),\n  rightRows: getFinancingLines({\n    loan,\n    structureId,\n    calculator\n  }),\n  bottomTitles: ['Prix de revient', 'Financement total'],\n  bottomValues: [React.createElement(Money, {\n    currency: false,\n    value: calculator.getProjectValue({\n      loan,\n      structureId\n    }),\n    key: \"0\"\n  }), React.createElement(Money, {\n    currency: false,\n    value: calculator.getTotalFinancing({\n      loan,\n      structureId\n    }),\n    key: \"1\"\n  })]\n});\n\nmodule.exportDefault(BalanceSheet);","map":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/StructurePdfPage/BalanceSheet.jsx"],"names":["getCostLines","calculator","propertyValue","structureId","notaryFees","propertyWork","key","label","purchaseType","loan","value","condition","shouldRenderRow","ownFundLabel","borrowerIndex","borrowerSuffix","borrower","index","usageType","type","getFinancingLines","borrowers","multipleBorrowers","wantedLoan","ownFunds","money","OWN_FUNDS_USAGE_TYPES","borrowerId","_id","toMoney","BalanceSheet"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\n\nimport T, { Money } from '../../../../../../components/Translation';\nimport { toMoney } from '../../../../../../utils/conversionFunctions';\nimport { OWN_FUNDS_USAGE_TYPES } from '../../../../../loans/loanConstants';\nimport { shouldRenderRow } from '../../PdfTable/PdfTable';\nimport BalanceSheetTable from '../../BalanceSheetTable';\n\ntype BalanceSheetTableProps = {};\n\nconst getCostLines = ({ loan, structureId, calculator }) => {\n  const propertyValue = calculator.selectPropertyValue({ loan, structureId });\n  const notaryFees = calculator.getFees({ loan, structureId }).total;\n  const propertyWork = calculator.selectStructureKey({\n    loan,\n    structureId,\n    key: 'propertyWork',\n  });\n\n  return [\n    {\n      label: (\n        <T id=\"Forms.value\" values={{ purchaseType: loan.purchaseType }} />\n      ),\n      value: propertyValue,\n    },\n    { label: 'Frais de notaire', value: notaryFees },\n    {\n      label: 'Travaux de plus-value',\n      value: propertyWork,\n      condition: propertyWork > 0,\n    },\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst ownFundLabel = ({ type, usageType, borrower, borrowerIndex }) => {\n  const borrowerSuffix = borrower ? (\n    <>\n      &nbsp;\n      <span className=\"secondary\">\n        (\n        {borrower.firstName || (\n          <T\n            id=\"general.borrowerWithIndex\"\n            values={{ index: borrowerIndex + 1 }}\n          />\n        )}\n        )\n      </span>\n    </>\n  ) : null;\n\n  return usageType ? (\n    <span>\n      <T id={`PDF.ownFund.${type}.${usageType}`} />\n      {borrowerSuffix}\n    </span>\n  ) : (\n    <span>\n      <T id={`PDF.ownFund.${type}`} />\n      {borrowerSuffix}\n    </span>\n  );\n};\nconst getFinancingLines = ({ loan, structureId, calculator }) => {\n  const { borrowers } = loan;\n  const multipleBorrowers = borrowers.length > 1;\n  const wantedLoan = calculator.selectLoanValue({ loan, structureId });\n  const ownFunds = calculator.selectStructureKey({\n    loan,\n    structureId,\n    key: 'ownFunds',\n  });\n\n  return [\n    {\n      label: 'Prêt hypothécaire',\n      value: (\n        <span>\n          <Money value={wantedLoan} currency={false} />\n        </span>\n      ),\n      money: false,\n    },\n    ...ownFunds\n      .filter(({ usageType }) => usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n      .map(({ value, type, usageType, borrowerId }) => ({\n        label: ownFundLabel({\n          type,\n          usageType,\n          borrower:\n            multipleBorrowers\n            && borrowers.find(({ _id }) => _id === borrowerId),\n          borrowerIndex:\n            borrowers.findIndex(({ _id }) => _id === borrowerId) + 1,\n        }),\n        value,\n      })),\n    ...ownFunds\n      .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n      .map(({ value, type, usageType, borrowerId }) => ({\n        label: (\n          <span className=\"secondary\">\n            {ownFundLabel({\n              type,\n              usageType,\n              borrower:\n                multipleBorrowers\n                && borrowers.find(({ _id }) => _id === borrowerId),\n              borrowerIndex:\n                borrowers.findIndex(({ _id }) => _id === borrowerId) + 1,\n            })}\n          </span>\n        ),\n        value: <span className=\"secondary\">({toMoney(value)})</span>,\n        money: false,\n      })),\n  ].filter(({ condition }) => shouldRenderRow(condition));\n};\n\nconst BalanceSheet = ({\n  loan,\n  structureId,\n  calculator,\n}: BalanceSheetTableProps) => (\n  <BalanceSheetTable\n    titles={[\"Coût de l'opération\", 'Financement']}\n    leftRows={getCostLines({ loan, structureId, calculator })}\n    rightRows={getFinancingLines({ loan, structureId, calculator })}\n    bottomTitles={['Prix de revient', 'Financement total']}\n    bottomValues={[\n      <Money\n        currency={false}\n        value={calculator.getProjectValue({ loan, structureId })}\n        key=\"0\"\n      />,\n      <Money\n        currency={false}\n        value={calculator.getTotalFinancing({ loan, structureId })}\n        key=\"1\"\n      />,\n    ]}\n  />\n);\n\nexport default BalanceSheet;\n"]},"sourceType":"script","hash":"6e95c954ffc13afb389e00eb5b2ed220eb180b85"}

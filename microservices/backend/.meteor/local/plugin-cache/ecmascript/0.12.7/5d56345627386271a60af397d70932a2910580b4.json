{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/arrays/test/tooltips.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/arrays/test/tooltips.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/arrays/test/tooltips.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/arrays/test/tooltips.spec.js"],"names":["expect","tooltips","tooltipsById","generalTooltips","offerTableTooltips","TOOLTIP_LISTS","describe","list","name","forEach","it","tooltipTargets","Object","keys","tooltipTarget","value","to","be","an","id","a","throw","GENERAL","equal","undefined"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SACEC,QADF,EAEEC,YAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,aALF;AAQAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBA,EAAAA,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9B,KACE;AAAEC,MAAAA,IAAI,EAAEJ,eAAR;AAAyBK,MAAAA,IAAI,EAAE;AAA/B,KADF,EAEE;AAAED,MAAAA,IAAI,EAAEH,kBAAR;AAA4BI,MAAAA,IAAI,EAAE;AAAlC,KAFF,EAGEC,OAHF,CAGU,CAAC;AAAEF,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAAoB;AAC5BF,MAAAA,QAAQ,CAAE,SAAQE,IAAK,EAAf,EAAkB,MAAM;AAC9BE,QAAAA,EAAE,CAAC,wCAAD,EAA2C,MAAM;AACjD,gBAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYN,IAAZ,CAAvB;AAEAI,UAAAA,cAAc,CAACF,OAAf,CAAwBK,aAAD,IAAmB;AACxC,kBAAMC,KAAK,GAAGR,IAAI,CAACO,aAAD,CAAlB;AACAd,YAAAA,MAAM,CAACe,KAAD,CAAN,CAAcC,EAAd,CAAiBC,EAAjB,CAAoBC,EAApB,CAAuB,QAAvB;AACAlB,YAAAA,MAAM,CAACe,KAAK,CAACI,EAAP,CAAN,CAAiBH,EAAjB,CAAoBC,EAApB,CAAuBG,CAAvB,CAAyB,QAAzB;AACD,WAJD;AAKD,SARC,CAAF;AASD,OAVO,CAAR;AAWD,KAfD;AAgBD,GAjBO,CAAR;AAmBAd,EAAAA,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9BI,IAAAA,EAAE,CAAC,gDAAD,EAAmD,MAAM;AACzDV,MAAAA,MAAM,CAAC,MAAMC,QAAQ,CAAC,UAAD,CAAf,CAAN,CAAmCe,EAAnC,CAAsCK,KAAtC;AACD,KAFC,CAAF;AAIAX,IAAAA,EAAE,CAAC,+CAAD,EAAkD,MAAM;AACxDV,MAAAA,MAAM,CAAC,OAAOC,QAAQ,CAACI,aAAa,CAACiB,OAAf,CAAhB,CAAN,CAA+CN,EAA/C,CAAkDO,KAAlD,CAAwD,QAAxD;AACD,KAFC,CAAF;AAGD,GARO,CAAR;AAUAjB,EAAAA,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BI,IAAAA,EAAE,CAAC,2DAAD,EAA8D,MAAM;AACpEV,MAAAA,MAAM,CAAC,MAAME,YAAY,CAAC,EAAD,CAAnB,CAAN,CAA+Bc,EAA/B,CAAkCK,KAAlC,CAAwC,OAAxC;AACArB,MAAAA,MAAM,CAAC,MAAME,YAAY,CAACG,aAAa,CAACiB,OAAf,CAAnB,CAAN,CAAkDN,EAAlD,CAAqDK,KAArD,CAA2D,OAA3D;AACArB,MAAAA,MAAM,CAAC,MAAME,YAAY,CAAC,CAAD,CAAnB,CAAN,CAA8Bc,EAA9B,CAAiCK,KAAjC,CAAuC,QAAvC;AACArB,MAAAA,MAAM,CAAC,MAAME,YAAY,CAAE,GAAEG,aAAa,CAACiB,OAAQ,GAA1B,CAAnB,CAAN,CAAwDN,EAAxD,CAA2DK,KAA3D,CAAiE,OAAjE;AACD,KALC,CAAF;AAOAX,IAAAA,EAAE,CAAC,8CAAD,EAAiD,MAAM;AACvDV,MAAAA,MAAM,CAACE,YAAY,CAAE,GAAEG,aAAa,CAACiB,OAAQ,UAA1B,CAAb,CAAN,CAAyDN,EAAzD,CAA4DO,KAA5D,CAAkEC,SAAlE;AACD,KAFC,CAAF;AAGD,GAXO,CAAR;AAYD,CA1CO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  tooltips,\n  tooltipsById,\n  generalTooltips,\n  offerTableTooltips,\n  TOOLTIP_LISTS,\n} from '../tooltips';\n\ndescribe('tooltips', () => {\n  describe('tooltip lists', () => {\n    [\n      { list: generalTooltips, name: 'general' },\n      { list: offerTableTooltips, name: 'offerTable' },\n    ].forEach(({ list, name }) => {\n      describe(`List: ${name}`, () => {\n        it('is made of objects with at least an id', () => {\n          const tooltipTargets = Object.keys(list);\n\n          tooltipTargets.forEach((tooltipTarget) => {\n            const value = list[tooltipTarget];\n            expect(value).to.be.an('object');\n            expect(value.id).to.be.a('string');\n          });\n        });\n      });\n    });\n  });\n\n  describe('tooltips func', () => {\n    it('should throw if it is given an invalid list id', () => {\n      expect(() => tooltips('wrong id')).to.throw();\n    });\n\n    it('should return an object if given a correct id', () => {\n      expect(typeof tooltips(TOOLTIP_LISTS.GENERAL)).to.equal('object');\n    });\n  });\n\n  describe('tooltipsById', () => {\n    it(\"throws if the id given isn't made of 2 strings with a dot\", () => {\n      expect(() => tooltipsById('')).to.throw('Wrong');\n      expect(() => tooltipsById(TOOLTIP_LISTS.GENERAL)).to.throw('Wrong');\n      expect(() => tooltipsById(1)).to.throw('string');\n      expect(() => tooltipsById(`${TOOLTIP_LISTS.GENERAL}.`)).to.throw('Wrong');\n    });\n\n    it('returns undefined for a non-existent tooltip', () => {\n      expect(tooltipsById(`${TOOLTIP_LISTS.GENERAL}.noexist`)).to.equal(undefined);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/arrays/test/tooltips.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/arrays/test/tooltips.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet tooltips, tooltipsById, generalTooltips, offerTableTooltips, TOOLTIP_LISTS;\nmodule.link(\"../tooltips\", {\n  tooltips(v) {\n    tooltips = v;\n  },\n\n  tooltipsById(v) {\n    tooltipsById = v;\n  },\n\n  generalTooltips(v) {\n    generalTooltips = v;\n  },\n\n  offerTableTooltips(v) {\n    offerTableTooltips = v;\n  },\n\n  TOOLTIP_LISTS(v) {\n    TOOLTIP_LISTS = v;\n  }\n\n}, 1);\ndescribe('tooltips', () => {\n  describe('tooltip lists', () => {\n    [{\n      list: generalTooltips,\n      name: 'general'\n    }, {\n      list: offerTableTooltips,\n      name: 'offerTable'\n    }].forEach((_ref) => {\n      let {\n        list,\n        name\n      } = _ref;\n      describe(\"List: \".concat(name), () => {\n        it('is made of objects with at least an id', () => {\n          const tooltipTargets = Object.keys(list);\n          tooltipTargets.forEach(tooltipTarget => {\n            const value = list[tooltipTarget];\n            expect(value).to.be.an('object');\n            expect(value.id).to.be.a('string');\n          });\n        });\n      });\n    });\n  });\n  describe('tooltips func', () => {\n    it('should throw if it is given an invalid list id', () => {\n      expect(() => tooltips('wrong id')).to.throw();\n    });\n    it('should return an object if given a correct id', () => {\n      expect(typeof tooltips(TOOLTIP_LISTS.GENERAL)).to.equal('object');\n    });\n  });\n  describe('tooltipsById', () => {\n    it(\"throws if the id given isn't made of 2 strings with a dot\", () => {\n      expect(() => tooltipsById('')).to.throw('Wrong');\n      expect(() => tooltipsById(TOOLTIP_LISTS.GENERAL)).to.throw('Wrong');\n      expect(() => tooltipsById(1)).to.throw('string');\n      expect(() => tooltipsById(\"\".concat(TOOLTIP_LISTS.GENERAL, \".\"))).to.throw('Wrong');\n    });\n    it('returns undefined for a non-existent tooltip', () => {\n      expect(tooltipsById(\"\".concat(TOOLTIP_LISTS.GENERAL, \".noexist\"))).to.equal(undefined);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/arrays/test/tooltips.spec.js"],"names":["describe","list","name","it","tooltipTargets","Object","tooltipTarget","value","expect","tooltips","TOOLTIP_LISTS","tooltipsById"],"mappings":"AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA,EAAA,YAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AAAA,EAAA,QAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,YAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,kBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAWAA,QAAQ,CAAA,UAAA,EAAa,MAAM;AACzBA,EAAAA,QAAQ,CAAA,eAAA,EAAkB,MAAM;AAC9B,KACE;AAAEC,MAAAA,IAAI,EAAN,eAAA;AAAyBC,MAAAA,IAAI,EAAE;AAA/B,KADF,EAEE;AAAED,MAAAA,IAAI,EAAN,kBAAA;AAA4BC,MAAAA,IAAI,EAAE;AAAlC,KAFF,EAAA,OAAA,CAGU,UAAoB;AAAA,UAAnB;AAAA,QAAA,IAAA;AAAQA,QAAAA;AAAR,OAAmB;AAC5BF,MAAAA,QAAQ,iBAAA,IAAA,GAAkB,MAAM;AAC9BG,QAAAA,EAAE,CAAA,wCAAA,EAA2C,MAAM;AACjD,gBAAMC,cAAc,GAAGC,MAAM,CAANA,IAAAA,CAAvB,IAAuBA,CAAvB;AAEAD,UAAAA,cAAc,CAAdA,OAAAA,CAAwBE,aAAD,IAAmB;AACxC,kBAAMC,KAAK,GAAGN,IAAI,CAAlB,aAAkB,CAAlB;AACAO,YAAAA,MAAM,CAANA,KAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,QAAAA;AACAA,YAAAA,MAAM,CAACD,KAAK,CAAZC,EAAM,CAANA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,QAAAA;AAHFJ,WAAAA;AAHFD,SAAE,CAAFA;AADFH,OAAQ,CAARA;AAJF,KAAA;AADFA,GAAQ,CAARA;AAmBAA,EAAAA,QAAQ,CAAA,eAAA,EAAkB,MAAM;AAC9BG,IAAAA,EAAE,CAAA,gDAAA,EAAmD,MAAM;AACzDK,MAAAA,MAAM,CAAC,MAAMC,QAAQ,CAArBD,UAAqB,CAAf,CAANA,CAAAA,EAAAA,CAAAA,KAAAA;AADFL,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,+CAAA,EAAkD,MAAM;AACxDK,MAAAA,MAAM,CAAC,OAAOC,QAAQ,CAACC,aAAa,CAApCF,OAAsB,CAAhB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,QAAAA;AADFL,KAAE,CAAFA;AALFH,GAAQ,CAARA;AAUAA,EAAAA,QAAQ,CAAA,cAAA,EAAiB,MAAM;AAC7BG,IAAAA,EAAE,CAAA,2DAAA,EAA8D,MAAM;AACpEK,MAAAA,MAAM,CAAC,MAAMG,YAAY,CAAzBH,EAAyB,CAAnB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,OAAAA;AACAA,MAAAA,MAAM,CAAC,MAAMG,YAAY,CAACD,aAAa,CAAvCF,OAAyB,CAAnB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,OAAAA;AACAA,MAAAA,MAAM,CAAC,MAAMG,YAAY,CAAzBH,CAAyB,CAAnB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,QAAAA;AACAA,MAAAA,MAAM,CAAC,MAAMG,YAAY,WAAID,aAAa,CAA1CF,OAAyB,OAAnB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,OAAAA;AAJFL,KAAE,CAAFA;AAOAA,IAAAA,EAAE,CAAA,8CAAA,EAAiD,MAAM;AACvDK,MAAAA,MAAM,CAACG,YAAY,WAAID,aAAa,CAApCF,OAAmB,cAAb,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,SAAAA;AADFL,KAAE,CAAFA;AARFH,GAAQ,CAARA;AA9BFA,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  tooltips,\n  tooltipsById,\n  generalTooltips,\n  offerTableTooltips,\n  TOOLTIP_LISTS,\n} from '../tooltips';\n\ndescribe('tooltips', () => {\n  describe('tooltip lists', () => {\n    [\n      { list: generalTooltips, name: 'general' },\n      { list: offerTableTooltips, name: 'offerTable' },\n    ].forEach(({ list, name }) => {\n      describe(`List: ${name}`, () => {\n        it('is made of objects with at least an id', () => {\n          const tooltipTargets = Object.keys(list);\n\n          tooltipTargets.forEach((tooltipTarget) => {\n            const value = list[tooltipTarget];\n            expect(value).to.be.an('object');\n            expect(value.id).to.be.a('string');\n          });\n        });\n      });\n    });\n  });\n\n  describe('tooltips func', () => {\n    it('should throw if it is given an invalid list id', () => {\n      expect(() => tooltips('wrong id')).to.throw();\n    });\n\n    it('should return an object if given a correct id', () => {\n      expect(typeof tooltips(TOOLTIP_LISTS.GENERAL)).to.equal('object');\n    });\n  });\n\n  describe('tooltipsById', () => {\n    it(\"throws if the id given isn't made of 2 strings with a dot\", () => {\n      expect(() => tooltipsById('')).to.throw('Wrong');\n      expect(() => tooltipsById(TOOLTIP_LISTS.GENERAL)).to.throw('Wrong');\n      expect(() => tooltipsById(1)).to.throw('string');\n      expect(() => tooltipsById(`${TOOLTIP_LISTS.GENERAL}.`)).to.throw('Wrong');\n    });\n\n    it('returns undefined for a non-existent tooltip', () => {\n      expect(tooltipsById(`${TOOLTIP_LISTS.GENERAL}.noexist`)).to.equal(undefined);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"5d56345627386271a60af397d70932a2910580b4"}

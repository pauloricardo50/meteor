{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/borrowersRecapHelpers.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/borrowersRecapHelpers.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/borrowersRecapHelpers.jsx","inputSourceMap":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/borrowersRecapHelpers.jsx"],"names":["React","toMoney","ROW_TYPES","EXPENSE_TYPES","OTHER_INCOME","OWN_FUNDS_TYPES","renderWithComments","value","comments","length","func","negative","filter","x","map","comment","i","rawValue","getBorrowersSingleInfo","borrowers","info","borrower","getBorrowersSingleInfos","infos","reduce","borrowersInfos","getBorrowersOtherIncome","types","calculator","otherIncome","otherIncomeValue","income","includes","description","sum","otherIncomeComments","getCommentsForOtherIncomeType","type","getBorrowersOtherIncomes","borrowersOtherIncomes","getBorrowersExpense","allExpenses","getGroupedExpensesBySide","Object","keys","key","expenseValue","expense","expenseComments","getCommentsForExpenseType","getBorrowersExpenses","borrowersExpenses","getBorrowersOwnFunds","ownFunds","ownFund","getBorrowersAddress","borrowersHaveSameAddress","some","sameAddress","borrowerWithAddress","find","city","zipCode","address","join","zipCodes","cities","index","getBonus","bonus","getBonusIncome","bonuses","getBonuses","year","slice","_id","whiteSpace","getBorrowersInfos","realEstateIncome","getRealEstateIncomeTotal","salary","getSalary","values","totalIncome","expenses","totalExpenses","otherFortune","getOtherFortune","realEstateValue","getRealEstateValue","realEstateDebt","getRealEstateDebt","INSURANCE_2","INSURANCE_3A","BANK_3A","INSURANCE_3B","getArraySum","array","val","Number","getFormattedMoneyArray","twoBorrowers","shouldRenderArray","makeTableMoneyLine","label","field","condition","data","addTableEmptyLine","EMPTY"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { toMoney } from 'core/utils/conversionFunctions';\nimport { ROW_TYPES } from '../../PdfTable/PdfTable';\nimport { EXPENSE_TYPES } from '../../../../../lenderRules/lenderRulesConstants';\nimport {\n  OTHER_INCOME,\n  OWN_FUNDS_TYPES,\n} from '../../../../../borrowers/borrowerConstants';\n\nconst renderWithComments = (value, comments = []) => {\n  if (comments.length === 0) {\n    return value;\n  }\n\n  const func = ({ negative }) => (\n    <div>\n      <div>{negative ? `-${toMoney(value)}` : toMoney(value)}</div>\n      <div className=\"secondary finance-comment\">\n        {/* Make sure we can \"join\" strings or JSX */}\n        {comments\n          .filter(x => x)\n          .map((comment, i) => [i !== 0 && ', ', comment])}\n      </div>\n    </div>\n  );\n  func.rawValue = value;\n\n  return func;\n};\n\nexport const getBorrowersSingleInfo = (borrowers, info) =>\n  borrowers.map(borrower => borrower[info] || 0);\n\nexport const getBorrowersSingleInfos = (borrowers, infos) =>\n  infos.reduce(\n    (borrowersInfos, info) => ({\n      ...borrowersInfos,\n      [info]: getBorrowersSingleInfo(borrowers, info),\n    }),\n    {},\n  );\n\nexport const getBorrowersOtherIncome = (borrowers, types, calculator) =>\n  borrowers.map((borrower) => {\n    const { otherIncome = [] } = borrower;\n    const otherIncomeValue = otherIncome\n      .filter(income => types.includes(income.description))\n      .reduce((sum, income) => sum + income.value, 0);\n\n    // Only render comments if this is for one single expense type\n    const otherIncomeComments = types.length === 1\n      && calculator.getCommentsForOtherIncomeType({\n        borrowers: borrower,\n        type: types[0],\n      });\n\n    return renderWithComments(otherIncomeValue, otherIncomeComments);\n  });\n\nexport const getBorrowersOtherIncomes = (borrowers, types, calculator) =>\n  types.reduce(\n    (borrowersOtherIncomes, type) => ({\n      ...borrowersOtherIncomes,\n      [type]: getBorrowersOtherIncome(borrowers, [type], calculator),\n    }),\n    {},\n  );\n\nexport const getBorrowersExpense = (borrowers, types, calculator) =>\n  borrowers.map((borrower) => {\n    let allExpenses = calculator.getGroupedExpensesBySide({\n      borrowers: borrower,\n    });\n    allExpenses = Object.keys(allExpenses).map(key => ({\n      description: key,\n      value: allExpenses[key],\n    }));\n\n    const expenseValue = allExpenses\n      .filter(expense => types.includes(expense.description))\n      .reduce((sum, expense) => sum + expense.value, 0);\n\n    // Only render comments if this is for one single expense type\n    const expenseComments = types.length === 1\n      && calculator.getCommentsForExpenseType({\n        borrowers: borrower,\n        type: types[0],\n      });\n\n    return renderWithComments(expenseValue, expenseComments);\n  });\n\nexport const getBorrowersExpenses = (borrowers, types, calculator) =>\n  types.reduce(\n    (borrowersExpenses, type) => ({\n      ...borrowersExpenses,\n      [type]: getBorrowersExpense(borrowers, [type], calculator),\n    }),\n    {},\n  );\n\nexport const getBorrowersOwnFunds = (borrowers, types) =>\n  types.reduce(\n    (ownFunds, type) => ({\n      ...ownFunds,\n      [type]: borrowers.map(borrower =>\n        borrower[type]\n          && borrower[type].reduce((sum, ownFund) => sum + ownFund.value, 0)),\n    }),\n    {},\n  );\n\nexport const getBorrowersAddress = (borrowers) => {\n  const borrowersHaveSameAddress = borrowers.some(({ sameAddress }) => sameAddress === true);\n  if (borrowersHaveSameAddress) {\n    const borrowerWithAddress = borrowers.find(({ city, zipCode }) => city && zipCode);\n    const address = [\n      borrowerWithAddress.zipCode,\n      borrowerWithAddress.city,\n    ].join(' ');\n    return borrowers.map(() => address);\n  }\n  const zipCodes = getBorrowersSingleInfo(borrowers, 'zipCode');\n  const cities = getBorrowersSingleInfo(borrowers, 'city');\n  return zipCodes.map((zipCode, index) => `${zipCode} ${cities[index]}`);\n};\n\nexport const getBonus = (borrowers, calculator) =>\n  borrowers.map((borrower) => {\n    const bonus = calculator.getBonusIncome({ borrowers: borrower });\n    const bonuses = calculator.getBonuses({ borrowers: borrower });\n    const comments = Object.keys(bonuses).map((key) => {\n      const value = bonuses[key];\n\n      if (!value) {\n        // Filter out bonuses that are 0 to shorten the comments\n        return null;\n      }\n\n      const year = key.slice(7);\n      return (\n        <span key={borrower._id} style={{ whiteSpace: 'nowrap' }}>\n          '{year}: {toMoney(value)}\n        </span>\n      );\n    });\n\n    return renderWithComments(bonus, comments);\n  });\n\nexport const getBorrowersInfos = (borrowers, calculator) => ({\n  ...getBorrowersSingleInfos(borrowers, [\n    'name',\n    'gender',\n    'age',\n    'birthDate',\n    'childrenCount',\n    'company',\n    'civilStatus',\n    'bankFortune',\n    'thirdPartyFortune',\n  ]),\n  realEstateIncome: borrowers.map(borrower =>\n    calculator.getRealEstateIncomeTotal({ borrowers: borrower })),\n  salary: borrowers.map(borrower =>\n    calculator.getSalary({ borrowers: borrower })),\n  address: getBorrowersAddress(borrowers),\n  otherIncome: {\n    ...getBorrowersOtherIncomes(\n      borrowers,\n      Object.values(OTHER_INCOME),\n      calculator,\n    ),\n    totalIncome: getBorrowersOtherIncome(\n      borrowers,\n      Object.values(OTHER_INCOME),\n      calculator,\n    ),\n  },\n  expenses: {\n    ...getBorrowersExpenses(\n      borrowers,\n      Object.values(EXPENSE_TYPES),\n      calculator,\n    ),\n    totalExpenses: getBorrowersExpense(\n      borrowers,\n      Object.values(EXPENSE_TYPES),\n      calculator,\n    ),\n  },\n  bonus: getBonus(borrowers, calculator),\n  otherFortune: borrowers.map(borrower =>\n    calculator.getOtherFortune({ borrowers: borrower })),\n  realEstateValue: borrowers.map(borrower =>\n    calculator.getRealEstateValue({ borrowers: borrower })),\n  realEstateDebt: borrowers.map(borrower =>\n    calculator.getRealEstateDebt({ borrowers: borrower })),\n  ...getBorrowersOwnFunds(borrowers, [\n    OWN_FUNDS_TYPES.INSURANCE_2,\n    OWN_FUNDS_TYPES.INSURANCE_3A,\n    OWN_FUNDS_TYPES.BANK_3A,\n    OWN_FUNDS_TYPES.INSURANCE_3B,\n  ]),\n});\n\nexport const getArraySum = array =>\n  array.reduce((sum, val) => {\n    if (val && val.rawValue >= 0) {\n      // Avoid null values\n      return sum + Number(val.rawValue);\n    }\n\n    return sum + val;\n  }, 0);\n\nexport const getFormattedMoneyArray = ({\n  array,\n  negative = false,\n  twoBorrowers,\n}) => {\n  if (!twoBorrowers) {\n    return [\n      ...array.map((x, index) => (\n        <div className=\"money-amount\" key={index}>\n          {typeof x === 'function'\n            ? x({ negative })\n            : toMoney(negative ? -x : x || 0)}\n        </div>\n      )),\n    ];\n  }\n\n  return [\n    ...array.map((x, index) => (\n      <div className=\"money-amount\" key={index}>\n        {typeof x === 'function'\n          ? x({ negative })\n          : toMoney(negative ? -x : x || 0)}\n      </div>\n    )),\n\n    <div className=\"money-amount\" key=\"last\">\n      {toMoney(negative ? -getArraySum(array) : getArraySum(array))}\n    </div>,\n  ];\n};\n\nexport const shouldRenderArray = array => array.filter(x => x).length > 0;\n\nexport const makeTableMoneyLine = twoBorrowers => ({\n  label,\n  field,\n  negative = false,\n  condition = shouldRenderArray(field),\n}) => ({\n  label,\n  data: getFormattedMoneyArray({\n    array: field,\n    negative,\n    twoBorrowers,\n  }),\n  condition,\n});\n\nexport const addTableEmptyLine = () => ({\n  label: '\\u00A0',\n  type: ROW_TYPES.EMPTY,\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/borrowersRecapHelpers.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/borrowersRecapHelpers.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  getBorrowersSingleInfo: () => getBorrowersSingleInfo,\n  getBorrowersSingleInfos: () => getBorrowersSingleInfos,\n  getBorrowersOtherIncome: () => getBorrowersOtherIncome,\n  getBorrowersOtherIncomes: () => getBorrowersOtherIncomes,\n  getBorrowersExpense: () => getBorrowersExpense,\n  getBorrowersExpenses: () => getBorrowersExpenses,\n  getBorrowersOwnFunds: () => getBorrowersOwnFunds,\n  getBorrowersAddress: () => getBorrowersAddress,\n  getBonus: () => getBonus,\n  getBorrowersInfos: () => getBorrowersInfos,\n  getArraySum: () => getArraySum,\n  getFormattedMoneyArray: () => getFormattedMoneyArray,\n  shouldRenderArray: () => shouldRenderArray,\n  makeTableMoneyLine: () => makeTableMoneyLine,\n  addTableEmptyLine: () => addTableEmptyLine\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet toMoney;\nmodule.link(\"../../../../../../utils/conversionFunctions\", {\n  toMoney(v) {\n    toMoney = v;\n  }\n\n}, 1);\nlet ROW_TYPES;\nmodule.link(\"../../PdfTable/PdfTable\", {\n  ROW_TYPES(v) {\n    ROW_TYPES = v;\n  }\n\n}, 2);\nlet EXPENSE_TYPES;\nmodule.link(\"../../../../../lenderRules/lenderRulesConstants\", {\n  EXPENSE_TYPES(v) {\n    EXPENSE_TYPES = v;\n  }\n\n}, 3);\nlet OTHER_INCOME, OWN_FUNDS_TYPES;\nmodule.link(\"../../../../../borrowers/borrowerConstants\", {\n  OTHER_INCOME(v) {\n    OTHER_INCOME = v;\n  },\n\n  OWN_FUNDS_TYPES(v) {\n    OWN_FUNDS_TYPES = v;\n  }\n\n}, 4);\n\nconst renderWithComments = (value, comments = []) => {\n  if (comments.length === 0) {\n    return value;\n  }\n\n  const func = ({\n    negative\n  }) => React.createElement(\"div\", null, React.createElement(\"div\", null, negative ? `-${toMoney(value)}` : toMoney(value)), React.createElement(\"div\", {\n    className: \"secondary finance-comment\"\n  }, comments.filter(x => x).map((comment, i) => [i !== 0 && ', ', comment])));\n\n  func.rawValue = value;\n  return func;\n};\n\nconst getBorrowersSingleInfo = (borrowers, info) => borrowers.map(borrower => borrower[info] || 0);\n\nconst getBorrowersSingleInfos = (borrowers, infos) => infos.reduce((borrowersInfos, info) => (0, _objectSpread2.default)({}, borrowersInfos, {\n  [info]: getBorrowersSingleInfo(borrowers, info)\n}), {});\n\nconst getBorrowersOtherIncome = (borrowers, types, calculator) => borrowers.map(borrower => {\n  const {\n    otherIncome = []\n  } = borrower;\n  const otherIncomeValue = otherIncome.filter(income => types.includes(income.description)).reduce((sum, income) => sum + income.value, 0); // Only render comments if this is for one single expense type\n\n  const otherIncomeComments = types.length === 1 && calculator.getCommentsForOtherIncomeType({\n    borrowers: borrower,\n    type: types[0]\n  });\n  return renderWithComments(otherIncomeValue, otherIncomeComments);\n});\n\nconst getBorrowersOtherIncomes = (borrowers, types, calculator) => types.reduce((borrowersOtherIncomes, type) => (0, _objectSpread2.default)({}, borrowersOtherIncomes, {\n  [type]: getBorrowersOtherIncome(borrowers, [type], calculator)\n}), {});\n\nconst getBorrowersExpense = (borrowers, types, calculator) => borrowers.map(borrower => {\n  let allExpenses = calculator.getGroupedExpensesBySide({\n    borrowers: borrower\n  });\n  allExpenses = Object.keys(allExpenses).map(key => ({\n    description: key,\n    value: allExpenses[key]\n  }));\n  const expenseValue = allExpenses.filter(expense => types.includes(expense.description)).reduce((sum, expense) => sum + expense.value, 0); // Only render comments if this is for one single expense type\n\n  const expenseComments = types.length === 1 && calculator.getCommentsForExpenseType({\n    borrowers: borrower,\n    type: types[0]\n  });\n  return renderWithComments(expenseValue, expenseComments);\n});\n\nconst getBorrowersExpenses = (borrowers, types, calculator) => types.reduce((borrowersExpenses, type) => (0, _objectSpread2.default)({}, borrowersExpenses, {\n  [type]: getBorrowersExpense(borrowers, [type], calculator)\n}), {});\n\nconst getBorrowersOwnFunds = (borrowers, types) => types.reduce((ownFunds, type) => (0, _objectSpread2.default)({}, ownFunds, {\n  [type]: borrowers.map(borrower => borrower[type] && borrower[type].reduce((sum, ownFund) => sum + ownFund.value, 0))\n}), {});\n\nconst getBorrowersAddress = borrowers => {\n  const borrowersHaveSameAddress = borrowers.some(({\n    sameAddress\n  }) => sameAddress === true);\n\n  if (borrowersHaveSameAddress) {\n    const borrowerWithAddress = borrowers.find(({\n      city,\n      zipCode\n    }) => city && zipCode);\n    const address = [borrowerWithAddress.zipCode, borrowerWithAddress.city].join(' ');\n    return borrowers.map(() => address);\n  }\n\n  const zipCodes = getBorrowersSingleInfo(borrowers, 'zipCode');\n  const cities = getBorrowersSingleInfo(borrowers, 'city');\n  return zipCodes.map((zipCode, index) => `${zipCode} ${cities[index]}`);\n};\n\nconst getBonus = (borrowers, calculator) => borrowers.map(borrower => {\n  const bonus = calculator.getBonusIncome({\n    borrowers: borrower\n  });\n  const bonuses = calculator.getBonuses({\n    borrowers: borrower\n  });\n  const comments = Object.keys(bonuses).map(key => {\n    const value = bonuses[key];\n\n    if (!value) {\n      // Filter out bonuses that are 0 to shorten the comments\n      return null;\n    }\n\n    const year = key.slice(7);\n    return React.createElement(\"span\", {\n      key: borrower._id,\n      style: {\n        whiteSpace: 'nowrap'\n      }\n    }, \"'\", year, \": \", toMoney(value));\n  });\n  return renderWithComments(bonus, comments);\n});\n\nconst getBorrowersInfos = (borrowers, calculator) => (0, _objectSpread2.default)({}, getBorrowersSingleInfos(borrowers, ['name', 'gender', 'age', 'birthDate', 'childrenCount', 'company', 'civilStatus', 'bankFortune', 'thirdPartyFortune']), {\n  realEstateIncome: borrowers.map(borrower => calculator.getRealEstateIncomeTotal({\n    borrowers: borrower\n  })),\n  salary: borrowers.map(borrower => calculator.getSalary({\n    borrowers: borrower\n  })),\n  address: getBorrowersAddress(borrowers),\n  otherIncome: (0, _objectSpread2.default)({}, getBorrowersOtherIncomes(borrowers, Object.values(OTHER_INCOME), calculator), {\n    totalIncome: getBorrowersOtherIncome(borrowers, Object.values(OTHER_INCOME), calculator)\n  }),\n  expenses: (0, _objectSpread2.default)({}, getBorrowersExpenses(borrowers, Object.values(EXPENSE_TYPES), calculator), {\n    totalExpenses: getBorrowersExpense(borrowers, Object.values(EXPENSE_TYPES), calculator)\n  }),\n  bonus: getBonus(borrowers, calculator),\n  otherFortune: borrowers.map(borrower => calculator.getOtherFortune({\n    borrowers: borrower\n  })),\n  realEstateValue: borrowers.map(borrower => calculator.getRealEstateValue({\n    borrowers: borrower\n  })),\n  realEstateDebt: borrowers.map(borrower => calculator.getRealEstateDebt({\n    borrowers: borrower\n  }))\n}, getBorrowersOwnFunds(borrowers, [OWN_FUNDS_TYPES.INSURANCE_2, OWN_FUNDS_TYPES.INSURANCE_3A, OWN_FUNDS_TYPES.BANK_3A, OWN_FUNDS_TYPES.INSURANCE_3B]));\n\nconst getArraySum = array => array.reduce((sum, val) => {\n  if (val && val.rawValue >= 0) {\n    // Avoid null values\n    return sum + Number(val.rawValue);\n  }\n\n  return sum + val;\n}, 0);\n\nconst getFormattedMoneyArray = ({\n  array,\n  negative = false,\n  twoBorrowers\n}) => {\n  if (!twoBorrowers) {\n    return [...array.map((x, index) => React.createElement(\"div\", {\n      className: \"money-amount\",\n      key: index\n    }, typeof x === 'function' ? x({\n      negative\n    }) : toMoney(negative ? -x : x || 0)))];\n  }\n\n  return [...array.map((x, index) => React.createElement(\"div\", {\n    className: \"money-amount\",\n    key: index\n  }, typeof x === 'function' ? x({\n    negative\n  }) : toMoney(negative ? -x : x || 0))), React.createElement(\"div\", {\n    className: \"money-amount\",\n    key: \"last\"\n  }, toMoney(negative ? -getArraySum(array) : getArraySum(array)))];\n};\n\nconst shouldRenderArray = array => array.filter(x => x).length > 0;\n\nconst makeTableMoneyLine = twoBorrowers => ({\n  label,\n  field,\n  negative = false,\n  condition = shouldRenderArray(field)\n}) => ({\n  label,\n  data: getFormattedMoneyArray({\n    array: field,\n    negative,\n    twoBorrowers\n  }),\n  condition\n});\n\nconst addTableEmptyLine = () => ({\n  label: '\\u00A0',\n  type: ROW_TYPES.EMPTY\n});","map":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/borrowersRecapHelpers.jsx"],"names":["renderWithComments","comments","func","negative","toMoney","x","i","getBorrowersSingleInfo","borrowers","borrower","getBorrowersSingleInfos","getBorrowersOtherIncome","otherIncome","otherIncomeValue","income","types","sum","otherIncomeComments","type","getBorrowersOtherIncomes","getBorrowersExpense","allExpenses","key","description","value","expenseValue","expense","expenseComments","getBorrowersExpenses","getBorrowersOwnFunds","ownFund","getBorrowersAddress","borrowersHaveSameAddress","sameAddress","borrowerWithAddress","zipCode","city","address","zipCodes","cities","getBonus","bonus","bonuses","year","whiteSpace","getBorrowersInfos","realEstateIncome","salary","Object","totalIncome","expenses","totalExpenses","otherFortune","realEstateValue","realEstateDebt","OWN_FUNDS_TYPES","getArraySum","array","val","Number","getFormattedMoneyArray","twoBorrowers","shouldRenderArray","makeTableMoneyLine","condition","data","addTableEmptyLine","label","ROW_TYPES","EMPTY"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { toMoney } from 'core/utils/conversionFunctions';\nimport { ROW_TYPES } from '../../PdfTable/PdfTable';\nimport { EXPENSE_TYPES } from '../../../../../lenderRules/lenderRulesConstants';\nimport {\n  OTHER_INCOME,\n  OWN_FUNDS_TYPES,\n} from '../../../../../borrowers/borrowerConstants';\n\nconst renderWithComments = (value, comments = []) => {\n  if (comments.length === 0) {\n    return value;\n  }\n\n  const func = ({ negative }) => (\n    <div>\n      <div>{negative ? `-${toMoney(value)}` : toMoney(value)}</div>\n      <div className=\"secondary finance-comment\">\n        {/* Make sure we can \"join\" strings or JSX */}\n        {comments\n          .filter(x => x)\n          .map((comment, i) => [i !== 0 && ', ', comment])}\n      </div>\n    </div>\n  );\n  func.rawValue = value;\n\n  return func;\n};\n\nexport const getBorrowersSingleInfo = (borrowers, info) =>\n  borrowers.map(borrower => borrower[info] || 0);\n\nexport const getBorrowersSingleInfos = (borrowers, infos) =>\n  infos.reduce(\n    (borrowersInfos, info) => ({\n      ...borrowersInfos,\n      [info]: getBorrowersSingleInfo(borrowers, info),\n    }),\n    {},\n  );\n\nexport const getBorrowersOtherIncome = (borrowers, types, calculator) =>\n  borrowers.map((borrower) => {\n    const { otherIncome = [] } = borrower;\n    const otherIncomeValue = otherIncome\n      .filter(income => types.includes(income.description))\n      .reduce((sum, income) => sum + income.value, 0);\n\n    // Only render comments if this is for one single expense type\n    const otherIncomeComments = types.length === 1\n      && calculator.getCommentsForOtherIncomeType({\n        borrowers: borrower,\n        type: types[0],\n      });\n\n    return renderWithComments(otherIncomeValue, otherIncomeComments);\n  });\n\nexport const getBorrowersOtherIncomes = (borrowers, types, calculator) =>\n  types.reduce(\n    (borrowersOtherIncomes, type) => ({\n      ...borrowersOtherIncomes,\n      [type]: getBorrowersOtherIncome(borrowers, [type], calculator),\n    }),\n    {},\n  );\n\nexport const getBorrowersExpense = (borrowers, types, calculator) =>\n  borrowers.map((borrower) => {\n    let allExpenses = calculator.getGroupedExpensesBySide({\n      borrowers: borrower,\n    });\n    allExpenses = Object.keys(allExpenses).map(key => ({\n      description: key,\n      value: allExpenses[key],\n    }));\n\n    const expenseValue = allExpenses\n      .filter(expense => types.includes(expense.description))\n      .reduce((sum, expense) => sum + expense.value, 0);\n\n    // Only render comments if this is for one single expense type\n    const expenseComments = types.length === 1\n      && calculator.getCommentsForExpenseType({\n        borrowers: borrower,\n        type: types[0],\n      });\n\n    return renderWithComments(expenseValue, expenseComments);\n  });\n\nexport const getBorrowersExpenses = (borrowers, types, calculator) =>\n  types.reduce(\n    (borrowersExpenses, type) => ({\n      ...borrowersExpenses,\n      [type]: getBorrowersExpense(borrowers, [type], calculator),\n    }),\n    {},\n  );\n\nexport const getBorrowersOwnFunds = (borrowers, types) =>\n  types.reduce(\n    (ownFunds, type) => ({\n      ...ownFunds,\n      [type]: borrowers.map(borrower =>\n        borrower[type]\n          && borrower[type].reduce((sum, ownFund) => sum + ownFund.value, 0)),\n    }),\n    {},\n  );\n\nexport const getBorrowersAddress = (borrowers) => {\n  const borrowersHaveSameAddress = borrowers.some(({ sameAddress }) => sameAddress === true);\n  if (borrowersHaveSameAddress) {\n    const borrowerWithAddress = borrowers.find(({ city, zipCode }) => city && zipCode);\n    const address = [\n      borrowerWithAddress.zipCode,\n      borrowerWithAddress.city,\n    ].join(' ');\n    return borrowers.map(() => address);\n  }\n  const zipCodes = getBorrowersSingleInfo(borrowers, 'zipCode');\n  const cities = getBorrowersSingleInfo(borrowers, 'city');\n  return zipCodes.map((zipCode, index) => `${zipCode} ${cities[index]}`);\n};\n\nexport const getBonus = (borrowers, calculator) =>\n  borrowers.map((borrower) => {\n    const bonus = calculator.getBonusIncome({ borrowers: borrower });\n    const bonuses = calculator.getBonuses({ borrowers: borrower });\n    const comments = Object.keys(bonuses).map((key) => {\n      const value = bonuses[key];\n\n      if (!value) {\n        // Filter out bonuses that are 0 to shorten the comments\n        return null;\n      }\n\n      const year = key.slice(7);\n      return (\n        <span key={borrower._id} style={{ whiteSpace: 'nowrap' }}>\n          '{year}: {toMoney(value)}\n        </span>\n      );\n    });\n\n    return renderWithComments(bonus, comments);\n  });\n\nexport const getBorrowersInfos = (borrowers, calculator) => ({\n  ...getBorrowersSingleInfos(borrowers, [\n    'name',\n    'gender',\n    'age',\n    'birthDate',\n    'childrenCount',\n    'company',\n    'civilStatus',\n    'bankFortune',\n    'thirdPartyFortune',\n  ]),\n  realEstateIncome: borrowers.map(borrower =>\n    calculator.getRealEstateIncomeTotal({ borrowers: borrower })),\n  salary: borrowers.map(borrower =>\n    calculator.getSalary({ borrowers: borrower })),\n  address: getBorrowersAddress(borrowers),\n  otherIncome: {\n    ...getBorrowersOtherIncomes(\n      borrowers,\n      Object.values(OTHER_INCOME),\n      calculator,\n    ),\n    totalIncome: getBorrowersOtherIncome(\n      borrowers,\n      Object.values(OTHER_INCOME),\n      calculator,\n    ),\n  },\n  expenses: {\n    ...getBorrowersExpenses(\n      borrowers,\n      Object.values(EXPENSE_TYPES),\n      calculator,\n    ),\n    totalExpenses: getBorrowersExpense(\n      borrowers,\n      Object.values(EXPENSE_TYPES),\n      calculator,\n    ),\n  },\n  bonus: getBonus(borrowers, calculator),\n  otherFortune: borrowers.map(borrower =>\n    calculator.getOtherFortune({ borrowers: borrower })),\n  realEstateValue: borrowers.map(borrower =>\n    calculator.getRealEstateValue({ borrowers: borrower })),\n  realEstateDebt: borrowers.map(borrower =>\n    calculator.getRealEstateDebt({ borrowers: borrower })),\n  ...getBorrowersOwnFunds(borrowers, [\n    OWN_FUNDS_TYPES.INSURANCE_2,\n    OWN_FUNDS_TYPES.INSURANCE_3A,\n    OWN_FUNDS_TYPES.BANK_3A,\n    OWN_FUNDS_TYPES.INSURANCE_3B,\n  ]),\n});\n\nexport const getArraySum = array =>\n  array.reduce((sum, val) => {\n    if (val && val.rawValue >= 0) {\n      // Avoid null values\n      return sum + Number(val.rawValue);\n    }\n\n    return sum + val;\n  }, 0);\n\nexport const getFormattedMoneyArray = ({\n  array,\n  negative = false,\n  twoBorrowers,\n}) => {\n  if (!twoBorrowers) {\n    return [\n      ...array.map((x, index) => (\n        <div className=\"money-amount\" key={index}>\n          {typeof x === 'function'\n            ? x({ negative })\n            : toMoney(negative ? -x : x || 0)}\n        </div>\n      )),\n    ];\n  }\n\n  return [\n    ...array.map((x, index) => (\n      <div className=\"money-amount\" key={index}>\n        {typeof x === 'function'\n          ? x({ negative })\n          : toMoney(negative ? -x : x || 0)}\n      </div>\n    )),\n\n    <div className=\"money-amount\" key=\"last\">\n      {toMoney(negative ? -getArraySum(array) : getArraySum(array))}\n    </div>,\n  ];\n};\n\nexport const shouldRenderArray = array => array.filter(x => x).length > 0;\n\nexport const makeTableMoneyLine = twoBorrowers => ({\n  label,\n  field,\n  negative = false,\n  condition = shouldRenderArray(field),\n}) => ({\n  label,\n  data: getFormattedMoneyArray({\n    array: field,\n    negative,\n    twoBorrowers,\n  }),\n  condition,\n});\n\nexport const addTableEmptyLine = () => ({\n  label: '\\u00A0',\n  type: ROW_TYPES.EMPTY,\n});\n"]},"sourceType":"script","hash":"9a1cca1d0d861f0dcd68dd084aff79c6e761ecab"}

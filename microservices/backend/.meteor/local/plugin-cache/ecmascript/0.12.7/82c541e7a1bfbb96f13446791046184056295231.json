{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/test/S3Service.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/files/server/test/S3Service.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/test/S3Service.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/files/server/test/S3Service.test.js"],"names":["expect","Meteor","Factory","sinon","resetDatabase","Loans","Borrowers","Properties","Promotions","S3Service","PROPERTY_CATEGORY","clearBucket","isTest","deleteObjectsWithPrefix","describe","timeout","before","settings","public","microservice","parent","pending","skip","json","binaryData","key","params","Bucket","to","equal","beforeEach","hello","Buffer","from","JSON","stringify","it","putObject","then","result","not","undefined","getObject","deleteObject","catch","err","name","parse","Body","toString","deep","listObjects","results","key1","key2","Promise","all","map","Key","metadata2","status","updateMetadata","Metadata","metadata1","metadata","camelCase","camelcase","headObject","statuses","listObjectsWithMetadata","forEach","index","userId","user","create","_id","stub","callsFake","afterEach","restore","users","update","$set","roles","isAllowedToAccess","throw","loan","remove","borrower","property","category","PRO","promotion","userLinks","permissions","canManageDocuments","makeSignedUrl","include"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport sinon from 'sinon';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { Loans, Borrowers, Properties, Promotions } from '../../..';\nimport S3Service from '../S3Service';\nimport { PROPERTY_CATEGORY } from '../../../constants';\n\nexport const clearBucket = () =>\n  Meteor.isTest && S3Service.deleteObjectsWithPrefix('');\n\ndescribe('S3Service', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'admin') {\n      // When running these tests in parallel, it breaks tests\n      this.parent.pending = true;\n      this.skip();\n    }\n  });\n\n  describe('API', () => {\n    let json;\n    let binaryData;\n    let key;\n\n    before(() => {\n      // Safety check\n      expect(S3Service.params.Bucket).to.equal('e-potek-test-bucket');\n    });\n\n    beforeEach(() => {\n      json = { hello: 'world' };\n      binaryData = Buffer.from(JSON.stringify(json), 'utf-8');\n      key = 'test/hello.json';\n\n      return clearBucket();\n    });\n\n    describe('putObject', () => {\n      it('puts an object without failing', () =>\n        S3Service.putObject(binaryData, key).then(result =>\n          expect(result).to.not.equal(undefined)));\n    });\n\n    describe('deleteObject', () => {\n      it('deletes an object without failing', () =>\n        S3Service.putObject(binaryData, key)\n          .then(() => S3Service.getObject(key))\n          .then(result => expect(result).to.not.equal(undefined))\n          .then(() => S3Service.deleteObject(key))\n          .catch(err => expect(err).to.equal(undefined))\n          .then(() => S3Service.getObject(key))\n          .catch(err => expect(err.name).to.equal('NoSuchKey')));\n\n      it('throws if you try to delete an unexisting object', () => {\n        key = 'someKey.txt';\n        return S3Service.deleteObject(key).catch((err) => {\n          expect(err.name).to.equal('NoSuchKey');\n        });\n      });\n    });\n\n    describe('getObject', () => {\n      it('gets an object if it exists', () =>\n        S3Service.putObject(binaryData, key)\n          .then(() => S3Service.getObject(key))\n          .then(result =>\n            expect(JSON.parse(result.Body.toString())).to.deep.equal(json)));\n\n      it('returns an error if the object does not exist', () =>\n        S3Service.getObject(key).catch(err =>\n          expect(err.name).to.equal('NoSuchKey')));\n    });\n\n    describe('listObjects', () => {\n      it('returns an empty array if no objects exist at that key', () => {\n        key = 'root.json';\n\n        return S3Service.putObject(binaryData, key)\n          .then(() => S3Service.listObjects('emptyPrefix'))\n          .then(results => expect(results).to.deep.equal([]));\n      });\n\n      it('returns all objects under a certain prefix', () => {\n        const key1 = 'asdf/root1.json';\n        const key2 = 'asdf/root2.json';\n\n        return Promise.all([\n          S3Service.putObject(binaryData, key1),\n          S3Service.putObject(binaryData, key2),\n        ])\n          .then(() => S3Service.listObjects('asdf'))\n          .then(results =>\n            expect(results.map(({ Key }) => Key)).to.deep.equal([key1, key2]));\n      });\n    });\n\n    describe('updateMetadata', () => {\n      it('sets metadata if none existed before', () => {\n        const metadata2 = { status: 'final' };\n\n        return S3Service.putObject(binaryData, key)\n          .then(() => S3Service.updateMetadata(key, metadata2))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata2));\n      });\n\n      it('updates metadata on an existing object', () => {\n        const metadata1 = { status: 'initial', hello: 'world' };\n        const metadata2 = { status: 'final' };\n\n        return S3Service.putObject(binaryData, key, metadata1)\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata1))\n          .then(() => S3Service.updateMetadata(key, metadata2))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) =>\n            expect(Metadata).to.deep.equal({ ...metadata1, ...metadata2 }));\n      });\n\n      it('lowercases your metadata keys', () => {\n        const metadata = { camelCase: 'Hello world' };\n\n        return S3Service.putObject(binaryData, key)\n          .then(() => S3Service.updateMetadata(key, metadata))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata: { camelcase } }) =>\n            expect(camelcase).to.deep.equal(metadata.camelCase));\n      });\n\n      it('does not fail if you set the same metadata', () => {\n        const metadata1 = { status: 'initial', hello: 'world' };\n        const metadata2 = metadata1;\n\n        return S3Service.putObject(binaryData, key, metadata1)\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata1))\n          .then(() => S3Service.updateMetadata(key, metadata2))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) =>\n            expect(Metadata).to.deep.equal(metadata1));\n      });\n    });\n\n    describe('headObject', () => {\n      it('gets the metadata of an object if it exists', () => {\n        const metadata = { hello: 'ma dude' };\n        return S3Service.putObject(binaryData, key, metadata)\n          .then(() => S3Service.headObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata));\n      });\n\n      it('returns an error if the object does not exist', () =>\n        S3Service.headObject(key).catch(err =>\n          expect(err.name).to.equal('NotFound')));\n    });\n\n    describe('listObjectsWithMetadata', () => {\n      it('returns a list of objects with their metadata ', () => {\n        const key1 = 'asdf/root1.json';\n        const key2 = 'asdf/root2.json';\n        const statuses = ['hello', 'dude'];\n\n        return Promise.all([\n          S3Service.putObject(binaryData, key1, { status: statuses[0] }),\n          S3Service.putObject(binaryData, key2, { status: statuses[1] }),\n        ])\n          .then(() => S3Service.listObjectsWithMetadata('asdf'))\n          .then((results) => {\n            results.forEach(({ status }, index) => {\n              expect(status).to.equal(statuses[index]);\n            });\n          });\n      });\n    });\n  });\n\n  describe('isAllowed', () => {\n    let userId;\n    let user;\n\n    beforeEach(() => {\n      resetDatabase();\n      user = Factory.create('user');\n      userId = user._id;\n      sinon.stub(Meteor, 'user').callsFake(() => user);\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n\n    afterEach(() => {\n      Meteor.user.restore();\n      Meteor.userId.restore();\n    });\n\n    it('should return true if the user is dev', () => {\n      Meteor.users.update(userId, { $set: { roles: ['dev'] } });\n\n      expect(S3Service.isAllowedToAccess('')).to.equal(true);\n    });\n\n    it('should return true if the user is admin', () => {\n      Meteor.users.update(userId, { $set: { roles: 'admin' } });\n\n      expect(S3Service.isAllowedToAccess('')).to.equal(true);\n    });\n\n    it('should throw if no loan or borrower is associated to this account', () => {\n      expect(() => S3Service.isAllowedToAccess('')).to.throw('Unauthorized download');\n    });\n\n    it('should return true if this user has the loan', () => {\n      const loan = Factory.create('loan', { userId });\n\n      expect(S3Service.isAllowedToAccess(`${loan._id}/`)).to.equal(true);\n      Loans.remove(loan._id);\n    });\n\n    it('should return true if this user has the borrower', () => {\n      const borrower = Factory.create('borrower', { userId });\n\n      expect(S3Service.isAllowedToAccess(`${borrower._id}/`)).to.equal(true);\n      Borrowers.remove(borrower._id);\n    });\n\n    it('should return true if this user has the property', () => {\n      const property = Factory.create('property', { userId });\n\n      expect(S3Service.isAllowedToAccess(`${property._id}/`)).to.equal(true);\n      Properties.remove(property._id);\n    });\n\n    it('should return true if the property is pro and the user exists', () => {\n      const property = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PRO,\n      });\n\n      expect(S3Service.isAllowedToAccess(`${property._id}/`)).to.equal(true);\n      Properties.remove(property._id);\n    });\n\n    it('should return true for a promotion and the user exists', () => {\n      const promotion = Factory.create('promotion', {\n        userLinks: [{ _id: userId, permissions: { canManageDocuments: true } }],\n      });\n\n      expect(S3Service.isAllowedToAccess(`${promotion._id}/`)).to.equal(true);\n      Promotions.remove(promotion._id);\n    });\n  });\n\n  describe('makeSignedUrl', () => {\n    it('should return a signed url', () => {\n      expect(S3Service.makeSignedUrl('dude/file.pdf')).to.include('dude/file.pdf');\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/test/S3Service.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/files/server/test/S3Service.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  clearBucket: () => clearBucket\n});\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet sinon;\nmodule.link(\"sinon\", {\n  default(v) {\n    sinon = v;\n  }\n\n}, 3);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 4);\nlet Loans, Borrowers, Properties, Promotions;\nmodule.link(\"../../..\", {\n  Loans(v) {\n    Loans = v;\n  },\n\n  Borrowers(v) {\n    Borrowers = v;\n  },\n\n  Properties(v) {\n    Properties = v;\n  },\n\n  Promotions(v) {\n    Promotions = v;\n  }\n\n}, 5);\nlet S3Service;\nmodule.link(\"../S3Service\", {\n  default(v) {\n    S3Service = v;\n  }\n\n}, 6);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../../constants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 7);\n\nconst clearBucket = () => Meteor.isTest && S3Service.deleteObjectsWithPrefix('');\n\ndescribe('S3Service', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'admin') {\n      // When running these tests in parallel, it breaks tests\n      this.parent.pending = true;\n      this.skip();\n    }\n  });\n  describe('API', () => {\n    let json;\n    let binaryData;\n    let key;\n    before(() => {\n      // Safety check\n      expect(S3Service.params.Bucket).to.equal('e-potek-test-bucket');\n    });\n    beforeEach(() => {\n      json = {\n        hello: 'world'\n      };\n      binaryData = Buffer.from(JSON.stringify(json), 'utf-8');\n      key = 'test/hello.json';\n      return clearBucket();\n    });\n    describe('putObject', () => {\n      it('puts an object without failing', () => S3Service.putObject(binaryData, key).then(result => expect(result).to.not.equal(undefined)));\n    });\n    describe('deleteObject', () => {\n      it('deletes an object without failing', () => S3Service.putObject(binaryData, key).then(() => S3Service.getObject(key)).then(result => expect(result).to.not.equal(undefined)).then(() => S3Service.deleteObject(key)).catch(err => expect(err).to.equal(undefined)).then(() => S3Service.getObject(key)).catch(err => expect(err.name).to.equal('NoSuchKey')));\n      it('throws if you try to delete an unexisting object', () => {\n        key = 'someKey.txt';\n        return S3Service.deleteObject(key).catch(err => {\n          expect(err.name).to.equal('NoSuchKey');\n        });\n      });\n    });\n    describe('getObject', () => {\n      it('gets an object if it exists', () => S3Service.putObject(binaryData, key).then(() => S3Service.getObject(key)).then(result => expect(JSON.parse(result.Body.toString())).to.deep.equal(json)));\n      it('returns an error if the object does not exist', () => S3Service.getObject(key).catch(err => expect(err.name).to.equal('NoSuchKey')));\n    });\n    describe('listObjects', () => {\n      it('returns an empty array if no objects exist at that key', () => {\n        key = 'root.json';\n        return S3Service.putObject(binaryData, key).then(() => S3Service.listObjects('emptyPrefix')).then(results => expect(results).to.deep.equal([]));\n      });\n      it('returns all objects under a certain prefix', () => {\n        const key1 = 'asdf/root1.json';\n        const key2 = 'asdf/root2.json';\n        return Promise.all([S3Service.putObject(binaryData, key1), S3Service.putObject(binaryData, key2)]).then(() => S3Service.listObjects('asdf')).then(results => expect(results.map(({\n          Key\n        }) => Key)).to.deep.equal([key1, key2]));\n      });\n    });\n    describe('updateMetadata', () => {\n      it('sets metadata if none existed before', () => {\n        const metadata2 = {\n          status: 'final'\n        };\n        return S3Service.putObject(binaryData, key).then(() => S3Service.updateMetadata(key, metadata2)).then(() => S3Service.getObject(key)).then(({\n          Metadata\n        }) => expect(Metadata).to.deep.equal(metadata2));\n      });\n      it('updates metadata on an existing object', () => {\n        const metadata1 = {\n          status: 'initial',\n          hello: 'world'\n        };\n        const metadata2 = {\n          status: 'final'\n        };\n        return S3Service.putObject(binaryData, key, metadata1).then(() => S3Service.getObject(key)).then(({\n          Metadata\n        }) => expect(Metadata).to.deep.equal(metadata1)).then(() => S3Service.updateMetadata(key, metadata2)).then(() => S3Service.getObject(key)).then(({\n          Metadata\n        }) => expect(Metadata).to.deep.equal((0, _objectSpread2.default)({}, metadata1, metadata2)));\n      });\n      it('lowercases your metadata keys', () => {\n        const metadata = {\n          camelCase: 'Hello world'\n        };\n        return S3Service.putObject(binaryData, key).then(() => S3Service.updateMetadata(key, metadata)).then(() => S3Service.getObject(key)).then(({\n          Metadata: {\n            camelcase\n          }\n        }) => expect(camelcase).to.deep.equal(metadata.camelCase));\n      });\n      it('does not fail if you set the same metadata', () => {\n        const metadata1 = {\n          status: 'initial',\n          hello: 'world'\n        };\n        const metadata2 = metadata1;\n        return S3Service.putObject(binaryData, key, metadata1).then(() => S3Service.getObject(key)).then(({\n          Metadata\n        }) => expect(Metadata).to.deep.equal(metadata1)).then(() => S3Service.updateMetadata(key, metadata2)).then(() => S3Service.getObject(key)).then(({\n          Metadata\n        }) => expect(Metadata).to.deep.equal(metadata1));\n      });\n    });\n    describe('headObject', () => {\n      it('gets the metadata of an object if it exists', () => {\n        const metadata = {\n          hello: 'ma dude'\n        };\n        return S3Service.putObject(binaryData, key, metadata).then(() => S3Service.headObject(key)).then(({\n          Metadata\n        }) => expect(Metadata).to.deep.equal(metadata));\n      });\n      it('returns an error if the object does not exist', () => S3Service.headObject(key).catch(err => expect(err.name).to.equal('NotFound')));\n    });\n    describe('listObjectsWithMetadata', () => {\n      it('returns a list of objects with their metadata ', () => {\n        const key1 = 'asdf/root1.json';\n        const key2 = 'asdf/root2.json';\n        const statuses = ['hello', 'dude'];\n        return Promise.all([S3Service.putObject(binaryData, key1, {\n          status: statuses[0]\n        }), S3Service.putObject(binaryData, key2, {\n          status: statuses[1]\n        })]).then(() => S3Service.listObjectsWithMetadata('asdf')).then(results => {\n          results.forEach(({\n            status\n          }, index) => {\n            expect(status).to.equal(statuses[index]);\n          });\n        });\n      });\n    });\n  });\n  describe('isAllowed', () => {\n    let userId;\n    let user;\n    beforeEach(() => {\n      resetDatabase();\n      user = Factory.create('user');\n      userId = user._id;\n      sinon.stub(Meteor, 'user').callsFake(() => user);\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n    afterEach(() => {\n      Meteor.user.restore();\n      Meteor.userId.restore();\n    });\n    it('should return true if the user is dev', () => {\n      Meteor.users.update(userId, {\n        $set: {\n          roles: ['dev']\n        }\n      });\n      expect(S3Service.isAllowedToAccess('')).to.equal(true);\n    });\n    it('should return true if the user is admin', () => {\n      Meteor.users.update(userId, {\n        $set: {\n          roles: 'admin'\n        }\n      });\n      expect(S3Service.isAllowedToAccess('')).to.equal(true);\n    });\n    it('should throw if no loan or borrower is associated to this account', () => {\n      expect(() => S3Service.isAllowedToAccess('')).to.throw('Unauthorized download');\n    });\n    it('should return true if this user has the loan', () => {\n      const loan = Factory.create('loan', {\n        userId\n      });\n      expect(S3Service.isAllowedToAccess(`${loan._id}/`)).to.equal(true);\n      Loans.remove(loan._id);\n    });\n    it('should return true if this user has the borrower', () => {\n      const borrower = Factory.create('borrower', {\n        userId\n      });\n      expect(S3Service.isAllowedToAccess(`${borrower._id}/`)).to.equal(true);\n      Borrowers.remove(borrower._id);\n    });\n    it('should return true if this user has the property', () => {\n      const property = Factory.create('property', {\n        userId\n      });\n      expect(S3Service.isAllowedToAccess(`${property._id}/`)).to.equal(true);\n      Properties.remove(property._id);\n    });\n    it('should return true if the property is pro and the user exists', () => {\n      const property = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PRO\n      });\n      expect(S3Service.isAllowedToAccess(`${property._id}/`)).to.equal(true);\n      Properties.remove(property._id);\n    });\n    it('should return true for a promotion and the user exists', () => {\n      const promotion = Factory.create('promotion', {\n        userLinks: [{\n          _id: userId,\n          permissions: {\n            canManageDocuments: true\n          }\n        }]\n      });\n      expect(S3Service.isAllowedToAccess(`${promotion._id}/`)).to.equal(true);\n      Promotions.remove(promotion._id);\n    });\n  });\n  describe('makeSignedUrl', () => {\n    it('should return a signed url', () => {\n      expect(S3Service.makeSignedUrl('dude/file.pdf')).to.include('dude/file.pdf');\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/files/server/test/S3Service.test.js"],"names":["clearBucket","Meteor","S3Service","describe","before","expect","beforeEach","json","hello","binaryData","Buffer","JSON","key","it","result","err","results","key1","key2","Promise","Key","metadata2","status","Metadata","metadata1","metadata","camelCase","camelcase","statuses","resetDatabase","user","Factory","userId","sinon","afterEach","$set","roles","loan","_id","Loans","borrower","Borrowers","property","Properties","category","PROPERTY_CATEGORY","PRO","promotion","userLinks","permissions","canManageDocuments","Promotions"],"mappings":";;;;AAAA,MAAA,CAAA,MAAA,CAAA;AAAA,EAAA,WAAA,EAAA,MAAA;AAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,UAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,SAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,cAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,iBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,oBAAA,EAAA;AAAA,EAAA,iBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAYO,MAAMA,WAAW,GAAG,MACzBC,MAAM,CAANA,MAAAA,IAAiBC,SAAS,CAATA,uBAAAA,CADZ,EACYA,CADZ;;AAGPC,QAAQ,CAAA,WAAA,EAAc,YAAY;AAChC,OAAA,OAAA,CAAA,KAAA;AAEAC,EAAAA,MAAM,CAAC,YAAY;AACjB,QAAIH,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAAA,YAAAA,KAAJ,OAAA,EAAqD;AACnD;AACA,WAAA,MAAA,CAAA,OAAA,GAAA,IAAA;AACA,WAAA,IAAA;AACD;AALHG,GAAM,CAANA;AAQAD,EAAAA,QAAQ,CAAA,KAAA,EAAQ,MAAM;AACpB,QAAA,IAAA;AACA,QAAA,UAAA;AACA,QAAA,GAAA;AAEAC,IAAAA,MAAM,CAAC,MAAM;AACX;AACAC,MAAAA,MAAM,CAACH,SAAS,CAATA,MAAAA,CAAPG,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,qBAAAA;AAFFD,KAAM,CAANA;AAKAE,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,IAAI,GAAG;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAPD;AACAE,MAAAA,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAAYC,IAAI,CAAJA,SAAAA,CAAZD,IAAYC,CAAZD,EAAbD,OAAaC,CAAbD;AACAG,MAAAA,GAAG,GAAHA,iBAAAA;AAEA,aAAOZ,WAAP,EAAA;AALFM,KAAU,CAAVA;AAQAH,IAAAA,QAAQ,CAAA,WAAA,EAAc,MAAM;AAC1BU,MAAAA,EAAE,CAAA,gCAAA,EAAmC,MACnCX,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CAA0CY,MAAM,IAC9CT,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,KAAAA,CAFJQ,SAEIR,CADFH,CADA,CAAFW;AADFV,KAAQ,CAARA;AAMAA,IAAAA,QAAQ,CAAA,cAAA,EAAiB,MAAM;AAC7BU,MAAAA,EAAE,CAAA,mCAAA,EAAsC,MACtCX,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CACQ,MAAMA,SAAS,CAATA,SAAAA,CADdA,GACcA,CADdA,EAAAA,IAAAA,CAEQY,MAAM,IAAIT,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,KAAAA,CAFlBH,SAEkBG,CAFlBH,EAAAA,IAAAA,CAGQ,MAAMA,SAAS,CAATA,YAAAA,CAHdA,GAGcA,CAHdA,EAAAA,KAAAA,CAISa,GAAG,IAAIV,MAAM,CAANA,GAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAJhBH,SAIgBG,CAJhBH,EAAAA,IAAAA,CAKQ,MAAMA,SAAS,CAATA,SAAAA,CALdA,GAKcA,CALdA,EAAAA,KAAAA,CAMSa,GAAG,IAAIV,MAAM,CAACU,GAAG,CAAVV,IAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAPlBQ,WAOkBR,CANhBH,CADA,CAAFW;AASAA,MAAAA,EAAE,CAAA,kDAAA,EAAqD,MAAM;AAC3DD,QAAAA,GAAG,GAAHA,aAAAA;AACA,eAAO,SAAS,CAAT,YAAA,CAAA,GAAA,EAAA,KAAA,CAAmCG,GAAD,IAAS;AAChDV,UAAAA,MAAM,CAACU,GAAG,CAAVV,IAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,WAAAA;AADF,SAAO,CAAP;AAFFQ,OAAE,CAAFA;AAVFV,KAAQ,CAARA;AAkBAA,IAAAA,QAAQ,CAAA,WAAA,EAAc,MAAM;AAC1BU,MAAAA,EAAE,CAAA,6BAAA,EAAgC,MAChCX,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CACQ,MAAMA,SAAS,CAATA,SAAAA,CADdA,GACcA,CADdA,EAAAA,IAAAA,CAEQY,MAAM,IACVT,MAAM,CAACM,IAAI,CAAJA,KAAAA,CAAWG,MAAM,CAANA,IAAAA,CAAlBT,QAAkBS,EAAXH,CAAD,CAANN,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAJNQ,IAIMR,CAHJH,CADA,CAAFW;AAMAA,MAAAA,EAAE,CAAA,+CAAA,EAAkD,MAClDX,SAAS,CAATA,SAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CAA+Ba,GAAG,IAChCV,MAAM,CAACU,GAAG,CAAVV,IAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAFJQ,WAEIR,CADFH,CADA,CAAFW;AAPFV,KAAQ,CAARA;AAYAA,IAAAA,QAAQ,CAAA,aAAA,EAAgB,MAAM;AAC5BU,MAAAA,EAAE,CAAA,wDAAA,EAA2D,MAAM;AACjED,QAAAA,GAAG,GAAHA,WAAAA;AAEA,eAAOV,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CACC,MAAMA,SAAS,CAATA,WAAAA,CADPA,aACOA,CADPA,EAAAA,IAAAA,CAECc,OAAO,IAAIX,MAAM,CAANA,OAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAFnB,EAEmBA,CAFZH,CAAP;AAHFW,OAAE,CAAFA;AAQAA,MAAAA,EAAE,CAAA,4CAAA,EAA+C,MAAM;AACrD,cAAMI,IAAI,GAAV,iBAAA;AACA,cAAMC,IAAI,GAAV,iBAAA;AAEA,eAAOC,OAAO,CAAPA,GAAAA,CAAY,CACjBjB,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EADiB,IACjBA,CADiB,EAEjBA,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAFKiB,IAELjB,CAFiB,CAAZiB,EAAAA,IAAAA,CAIC,MAAMjB,SAAS,CAATA,WAAAA,CAJPiB,MAIOjB,CAJPiB,EAAAA,IAAAA,CAKCH,OAAO,IACX,MAAM,CAAC,OAAO,CAAP,GAAA,CAAY,CAAC;AAAEI,UAAAA;AAAF,SAAD,KAAnB,GAAO,CAAD,CAAN,CAAA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAoD,CAAA,IAAA,EANxD,IAMwD,CAApD,CANGD,CAAP;AAJFN,OAAE,CAAFA;AATFV,KAAQ,CAARA;AAuBAA,IAAAA,QAAQ,CAAA,gBAAA,EAAmB,MAAM;AAC/BU,MAAAA,EAAE,CAAA,sCAAA,EAAyC,MAAM;AAC/C,cAAMQ,SAAS,GAAG;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAlB;AAEA,eAAOpB,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CACC,MAAMA,SAAS,CAATA,cAAAA,CAAAA,GAAAA,EADPA,SACOA,CADPA,EAAAA,IAAAA,CAEC,MAAMA,SAAS,CAATA,SAAAA,CAFPA,GAEOA,CAFPA,EAAAA,IAAAA,CAGC,CAAC;AAAEqB,UAAAA;AAAF,SAAD,KAAkBlB,MAAM,CAANA,QAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAH1B,SAG0BA,CAHnBH,CAAP;AAHFW,OAAE,CAAFA;AASAA,MAAAA,EAAE,CAAA,wCAAA,EAA2C,MAAM;AACjD,cAAMW,SAAS,GAAG;AAAEF,UAAAA,MAAM,EAAR,SAAA;AAAqBd,UAAAA,KAAK,EAAE;AAA5B,SAAlB;AACA,cAAMa,SAAS,GAAG;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAlB;AAEA,eAAO,SAAS,CAAT,SAAA,CAAA,UAAA,EAAA,GAAA,EAAA,SAAA,EAAA,IAAA,CACC,MAAMpB,SAAS,CAATA,SAAAA,CADP,GACOA,CADP,EAAA,IAAA,CAEC,CAAC;AAAEqB,UAAAA;AAAF,SAAD,KAAkBlB,MAAM,CAANA,QAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAFnB,SAEmBA,CAFnB,EAAA,IAAA,CAGC,MAAMH,SAAS,CAATA,cAAAA,CAAAA,GAAAA,EAHP,SAGOA,CAHP,EAAA,IAAA,CAIC,MAAMA,SAAS,CAATA,SAAAA,CAJP,GAIOA,CAJP,EAAA,IAAA,CAKC,CAAC;AAAEqB,UAAAA;AAAF,SAAD,KACJ,MAAM,CAAN,QAAM,CAAN,CAAA,EAAA,CAAA,IAAA,CAAA,KAAA,iCAA+B,SAA/B,EAAkDF,SAAlD,EANG,CAAP;AAJFR,OAAE,CAAFA;AAaAA,MAAAA,EAAE,CAAA,+BAAA,EAAkC,MAAM;AACxC,cAAMY,QAAQ,GAAG;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAjB;AAEA,eAAOxB,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CACC,MAAMA,SAAS,CAATA,cAAAA,CAAAA,GAAAA,EADPA,QACOA,CADPA,EAAAA,IAAAA,CAEC,MAAMA,SAAS,CAATA,SAAAA,CAFPA,GAEOA,CAFPA,EAAAA,IAAAA,CAGC,CAAC;AAAEqB,UAAAA,QAAQ,EAAE;AAAEI,YAAAA;AAAF;AAAZ,SAAD,KACJtB,MAAM,CAANA,SAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAgCoB,QAAQ,CAJ5C,SAIIpB,CAJGH,CAAP;AAHFW,OAAE,CAAFA;AAUAA,MAAAA,EAAE,CAAA,4CAAA,EAA+C,MAAM;AACrD,cAAMW,SAAS,GAAG;AAAEF,UAAAA,MAAM,EAAR,SAAA;AAAqBd,UAAAA,KAAK,EAAE;AAA5B,SAAlB;AACA,cAAMa,SAAS,GAAf,SAAA;AAEA,eAAOnB,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,IAAAA,CACC,MAAMA,SAAS,CAATA,SAAAA,CADPA,GACOA,CADPA,EAAAA,IAAAA,CAEC,CAAC;AAAEqB,UAAAA;AAAF,SAAD,KAAkBlB,MAAM,CAANA,QAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAFnBH,SAEmBG,CAFnBH,EAAAA,IAAAA,CAGC,MAAMA,SAAS,CAATA,cAAAA,CAAAA,GAAAA,EAHPA,SAGOA,CAHPA,EAAAA,IAAAA,CAIC,MAAMA,SAAS,CAATA,SAAAA,CAJPA,GAIOA,CAJPA,EAAAA,IAAAA,CAKC,CAAC;AAAEqB,UAAAA;AAAF,SAAD,KACJlB,MAAM,CAANA,QAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CANJ,SAMIA,CANGH,CAAP;AAJFW,OAAE,CAAFA;AAjCFV,KAAQ,CAARA;AA+CAA,IAAAA,QAAQ,CAAA,YAAA,EAAe,MAAM;AAC3BU,MAAAA,EAAE,CAAA,6CAAA,EAAgD,MAAM;AACtD,cAAMY,QAAQ,GAAG;AAAEjB,UAAAA,KAAK,EAAE;AAAT,SAAjB;AACA,eAAON,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,QAAAA,EAAAA,IAAAA,CACC,MAAMA,SAAS,CAATA,UAAAA,CADPA,GACOA,CADPA,EAAAA,IAAAA,CAEC,CAAC;AAAEqB,UAAAA;AAAF,SAAD,KAAkBlB,MAAM,CAANA,QAAM,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAF1B,QAE0BA,CAFnBH,CAAP;AAFFW,OAAE,CAAFA;AAOAA,MAAAA,EAAE,CAAA,+CAAA,EAAkD,MAClDX,SAAS,CAATA,UAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CAAgCa,GAAG,IACjCV,MAAM,CAACU,GAAG,CAAVV,IAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAFJQ,UAEIR,CADFH,CADA,CAAFW;AARFV,KAAQ,CAARA;AAaAA,IAAAA,QAAQ,CAAA,yBAAA,EAA4B,MAAM;AACxCU,MAAAA,EAAE,CAAA,gDAAA,EAAmD,MAAM;AACzD,cAAMI,IAAI,GAAV,iBAAA;AACA,cAAMC,IAAI,GAAV,iBAAA;AACA,cAAMU,QAAQ,GAAG,CAAA,OAAA,EAAjB,MAAiB,CAAjB;AAEA,eAAO,OAAO,CAAP,GAAA,CAAY,CACjB,SAAS,CAAT,SAAA,CAAA,UAAA,EAAA,IAAA,EAAsC;AAAEN,UAAAA,MAAM,EAAEM,QAAQ,CAAA,CAAA;AAAlB,SAAtC,CADiB,EAEjB,SAAS,CAAT,SAAA,CAAA,UAAA,EAAA,IAAA,EAAsC;AAAEN,UAAAA,MAAM,EAAEM,QAAQ,CAAA,CAAA;AAAlB,SAAtC,CAFiB,CAAZ,EAAA,IAAA,CAIC,MAAM1B,SAAS,CAATA,uBAAAA,CAJP,MAIOA,CAJP,EAAA,IAAA,CAKEc,OAAD,IAAa;AACjBA,UAAAA,OAAO,CAAPA,OAAAA,CAAgB,CAAC;AAAEM,YAAAA;AAAF,WAAD,EAAA,KAAA,KAAuB;AACrCjB,YAAAA,MAAM,CAANA,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAwBuB,QAAQ,CAAhCvB,KAAgC,CAAhCA;AADFW,WAAAA;AANJ,SAAO,CAAP;AALFH,OAAE,CAAFA;AADFV,KAAQ,CAARA;AAzIFA,GAAQ,CAARA;AA6JAA,EAAAA,QAAQ,CAAA,WAAA,EAAc,MAAM;AAC1B,QAAA,MAAA;AACA,QAAA,IAAA;AAEAG,IAAAA,UAAU,CAAC,MAAM;AACfuB,MAAAA,aAAa;AACbC,MAAAA,IAAI,GAAGC,OAAO,CAAPA,MAAAA,CAAPD,MAAOC,CAAPD;AACAE,MAAAA,MAAM,GAAGF,IAAI,CAAbE,GAAAA;AACAC,MAAAA,KAAK,CAALA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,SAAAA,CAAqC,MAArCA,IAAAA;AACAA,MAAAA,KAAK,CAALA,IAAAA,CAAAA,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,CAAuC,MAAvCA,MAAAA;AALF3B,KAAU,CAAVA;AAQA4B,IAAAA,SAAS,CAAC,MAAM;AACdjC,MAAAA,MAAM,CAANA,IAAAA,CAAAA,OAAAA;AACAA,MAAAA,MAAM,CAANA,MAAAA,CAAAA,OAAAA;AAFFiC,KAAS,CAATA;AAKArB,IAAAA,EAAE,CAAA,uCAAA,EAA0C,MAAM;AAChDZ,MAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA,CAAAA,MAAAA,EAA4B;AAAEkC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE,CAAA,KAAA;AAAT;AAAR,OAA5BnC;AAEAI,MAAAA,MAAM,CAACH,SAAS,CAATA,iBAAAA,CAAPG,EAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAHFQ,KAAE,CAAFA;AAMAA,IAAAA,EAAE,CAAA,yCAAA,EAA4C,MAAM;AAClDZ,MAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA,CAAAA,MAAAA,EAA4B;AAAEkC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAAR,OAA5BnC;AAEAI,MAAAA,MAAM,CAACH,SAAS,CAATA,iBAAAA,CAAPG,EAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAHFQ,KAAE,CAAFA;AAMAA,IAAAA,EAAE,CAAA,mEAAA,EAAsE,MAAM;AAC5ER,MAAAA,MAAM,CAAC,MAAMH,SAAS,CAATA,iBAAAA,CAAbG,EAAaH,CAAP,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,uBAAAA;AADFQ,KAAE,CAAFA;AAIAA,IAAAA,EAAE,CAAA,8CAAA,EAAiD,MAAM;AACvD,YAAMwB,IAAI,GAAG,OAAO,CAAP,MAAA,CAAA,MAAA,EAAuB;AAAEL,QAAAA;AAAF,OAAvB,CAAb;AAEA3B,MAAAA,MAAM,CAACH,SAAS,CAATA,iBAAAA,CAA6B,GAAEmC,IAAI,CAACC,GAA3CjC,GAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAkC,MAAAA,KAAK,CAALA,MAAAA,CAAaF,IAAI,CAAjBE,GAAAA;AAJF1B,KAAE,CAAFA;AAOAA,IAAAA,EAAE,CAAA,kDAAA,EAAqD,MAAM;AAC3D,YAAM2B,QAAQ,GAAG,OAAO,CAAP,MAAA,CAAA,UAAA,EAA2B;AAAER,QAAAA;AAAF,OAA3B,CAAjB;AAEA3B,MAAAA,MAAM,CAACH,SAAS,CAATA,iBAAAA,CAA6B,GAAEsC,QAAQ,CAACF,GAA/CjC,GAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAoC,MAAAA,SAAS,CAATA,MAAAA,CAAiBD,QAAQ,CAAzBC,GAAAA;AAJF5B,KAAE,CAAFA;AAOAA,IAAAA,EAAE,CAAA,kDAAA,EAAqD,MAAM;AAC3D,YAAM6B,QAAQ,GAAG,OAAO,CAAP,MAAA,CAAA,UAAA,EAA2B;AAAEV,QAAAA;AAAF,OAA3B,CAAjB;AAEA3B,MAAAA,MAAM,CAACH,SAAS,CAATA,iBAAAA,CAA6B,GAAEwC,QAAQ,CAACJ,GAA/CjC,GAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAsC,MAAAA,UAAU,CAAVA,MAAAA,CAAkBD,QAAQ,CAA1BC,GAAAA;AAJF9B,KAAE,CAAFA;AAOAA,IAAAA,EAAE,CAAA,+DAAA,EAAkE,MAAM;AACxE,YAAM6B,QAAQ,GAAG,OAAO,CAAP,MAAA,CAAA,UAAA,EAA2B;AAC1CE,QAAAA,QAAQ,EAAEC,iBAAiB,CAACC;AADc,OAA3B,CAAjB;AAIAzC,MAAAA,MAAM,CAACH,SAAS,CAATA,iBAAAA,CAA6B,GAAEwC,QAAQ,CAACJ,GAA/CjC,GAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACAsC,MAAAA,UAAU,CAAVA,MAAAA,CAAkBD,QAAQ,CAA1BC,GAAAA;AANF9B,KAAE,CAAFA;AASAA,IAAAA,EAAE,CAAA,wDAAA,EAA2D,MAAM;AACjE,YAAMkC,SAAS,GAAG,OAAO,CAAP,MAAA,CAAA,WAAA,EAA4B;AAC5CC,QAAAA,SAAS,EAAE,CAAC;AAAEV,UAAAA,GAAG,EAAL,MAAA;AAAeW,UAAAA,WAAW,EAAE;AAAEC,YAAAA,kBAAkB,EAAE;AAAtB;AAA5B,SAAD;AADiC,OAA5B,CAAlB;AAIA7C,MAAAA,MAAM,CAACH,SAAS,CAATA,iBAAAA,CAA6B,GAAE6C,SAAS,CAACT,GAAhDjC,GAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AACA8C,MAAAA,UAAU,CAAVA,MAAAA,CAAkBJ,SAAS,CAA3BI,GAAAA;AANFtC,KAAE,CAAFA;AA/DFV,GAAQ,CAARA;AAyEAA,EAAAA,QAAQ,CAAA,eAAA,EAAkB,MAAM;AAC9BU,IAAAA,EAAE,CAAA,4BAAA,EAA+B,MAAM;AACrCR,MAAAA,MAAM,CAACH,SAAS,CAATA,aAAAA,CAAPG,eAAOH,CAAD,CAANG,CAAAA,EAAAA,CAAAA,OAAAA,CAAAA,eAAAA;AADFQ,KAAE,CAAFA;AADFV,GAAQ,CAARA;AAjPFA,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport sinon from 'sinon';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { Loans, Borrowers, Properties, Promotions } from '../../..';\nimport S3Service from '../S3Service';\nimport { PROPERTY_CATEGORY } from '../../../constants';\n\nexport const clearBucket = () =>\n  Meteor.isTest && S3Service.deleteObjectsWithPrefix('');\n\ndescribe('S3Service', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'admin') {\n      // When running these tests in parallel, it breaks tests\n      this.parent.pending = true;\n      this.skip();\n    }\n  });\n\n  describe('API', () => {\n    let json;\n    let binaryData;\n    let key;\n\n    before(() => {\n      // Safety check\n      expect(S3Service.params.Bucket).to.equal('e-potek-test-bucket');\n    });\n\n    beforeEach(() => {\n      json = { hello: 'world' };\n      binaryData = Buffer.from(JSON.stringify(json), 'utf-8');\n      key = 'test/hello.json';\n\n      return clearBucket();\n    });\n\n    describe('putObject', () => {\n      it('puts an object without failing', () =>\n        S3Service.putObject(binaryData, key).then(result =>\n          expect(result).to.not.equal(undefined)));\n    });\n\n    describe('deleteObject', () => {\n      it('deletes an object without failing', () =>\n        S3Service.putObject(binaryData, key)\n          .then(() => S3Service.getObject(key))\n          .then(result => expect(result).to.not.equal(undefined))\n          .then(() => S3Service.deleteObject(key))\n          .catch(err => expect(err).to.equal(undefined))\n          .then(() => S3Service.getObject(key))\n          .catch(err => expect(err.name).to.equal('NoSuchKey')));\n\n      it('throws if you try to delete an unexisting object', () => {\n        key = 'someKey.txt';\n        return S3Service.deleteObject(key).catch((err) => {\n          expect(err.name).to.equal('NoSuchKey');\n        });\n      });\n    });\n\n    describe('getObject', () => {\n      it('gets an object if it exists', () =>\n        S3Service.putObject(binaryData, key)\n          .then(() => S3Service.getObject(key))\n          .then(result =>\n            expect(JSON.parse(result.Body.toString())).to.deep.equal(json)));\n\n      it('returns an error if the object does not exist', () =>\n        S3Service.getObject(key).catch(err =>\n          expect(err.name).to.equal('NoSuchKey')));\n    });\n\n    describe('listObjects', () => {\n      it('returns an empty array if no objects exist at that key', () => {\n        key = 'root.json';\n\n        return S3Service.putObject(binaryData, key)\n          .then(() => S3Service.listObjects('emptyPrefix'))\n          .then(results => expect(results).to.deep.equal([]));\n      });\n\n      it('returns all objects under a certain prefix', () => {\n        const key1 = 'asdf/root1.json';\n        const key2 = 'asdf/root2.json';\n\n        return Promise.all([\n          S3Service.putObject(binaryData, key1),\n          S3Service.putObject(binaryData, key2),\n        ])\n          .then(() => S3Service.listObjects('asdf'))\n          .then(results =>\n            expect(results.map(({ Key }) => Key)).to.deep.equal([key1, key2]));\n      });\n    });\n\n    describe('updateMetadata', () => {\n      it('sets metadata if none existed before', () => {\n        const metadata2 = { status: 'final' };\n\n        return S3Service.putObject(binaryData, key)\n          .then(() => S3Service.updateMetadata(key, metadata2))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata2));\n      });\n\n      it('updates metadata on an existing object', () => {\n        const metadata1 = { status: 'initial', hello: 'world' };\n        const metadata2 = { status: 'final' };\n\n        return S3Service.putObject(binaryData, key, metadata1)\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata1))\n          .then(() => S3Service.updateMetadata(key, metadata2))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) =>\n            expect(Metadata).to.deep.equal({ ...metadata1, ...metadata2 }));\n      });\n\n      it('lowercases your metadata keys', () => {\n        const metadata = { camelCase: 'Hello world' };\n\n        return S3Service.putObject(binaryData, key)\n          .then(() => S3Service.updateMetadata(key, metadata))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata: { camelcase } }) =>\n            expect(camelcase).to.deep.equal(metadata.camelCase));\n      });\n\n      it('does not fail if you set the same metadata', () => {\n        const metadata1 = { status: 'initial', hello: 'world' };\n        const metadata2 = metadata1;\n\n        return S3Service.putObject(binaryData, key, metadata1)\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata1))\n          .then(() => S3Service.updateMetadata(key, metadata2))\n          .then(() => S3Service.getObject(key))\n          .then(({ Metadata }) =>\n            expect(Metadata).to.deep.equal(metadata1));\n      });\n    });\n\n    describe('headObject', () => {\n      it('gets the metadata of an object if it exists', () => {\n        const metadata = { hello: 'ma dude' };\n        return S3Service.putObject(binaryData, key, metadata)\n          .then(() => S3Service.headObject(key))\n          .then(({ Metadata }) => expect(Metadata).to.deep.equal(metadata));\n      });\n\n      it('returns an error if the object does not exist', () =>\n        S3Service.headObject(key).catch(err =>\n          expect(err.name).to.equal('NotFound')));\n    });\n\n    describe('listObjectsWithMetadata', () => {\n      it('returns a list of objects with their metadata ', () => {\n        const key1 = 'asdf/root1.json';\n        const key2 = 'asdf/root2.json';\n        const statuses = ['hello', 'dude'];\n\n        return Promise.all([\n          S3Service.putObject(binaryData, key1, { status: statuses[0] }),\n          S3Service.putObject(binaryData, key2, { status: statuses[1] }),\n        ])\n          .then(() => S3Service.listObjectsWithMetadata('asdf'))\n          .then((results) => {\n            results.forEach(({ status }, index) => {\n              expect(status).to.equal(statuses[index]);\n            });\n          });\n      });\n    });\n  });\n\n  describe('isAllowed', () => {\n    let userId;\n    let user;\n\n    beforeEach(() => {\n      resetDatabase();\n      user = Factory.create('user');\n      userId = user._id;\n      sinon.stub(Meteor, 'user').callsFake(() => user);\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n\n    afterEach(() => {\n      Meteor.user.restore();\n      Meteor.userId.restore();\n    });\n\n    it('should return true if the user is dev', () => {\n      Meteor.users.update(userId, { $set: { roles: ['dev'] } });\n\n      expect(S3Service.isAllowedToAccess('')).to.equal(true);\n    });\n\n    it('should return true if the user is admin', () => {\n      Meteor.users.update(userId, { $set: { roles: 'admin' } });\n\n      expect(S3Service.isAllowedToAccess('')).to.equal(true);\n    });\n\n    it('should throw if no loan or borrower is associated to this account', () => {\n      expect(() => S3Service.isAllowedToAccess('')).to.throw('Unauthorized download');\n    });\n\n    it('should return true if this user has the loan', () => {\n      const loan = Factory.create('loan', { userId });\n\n      expect(S3Service.isAllowedToAccess(`${loan._id}/`)).to.equal(true);\n      Loans.remove(loan._id);\n    });\n\n    it('should return true if this user has the borrower', () => {\n      const borrower = Factory.create('borrower', { userId });\n\n      expect(S3Service.isAllowedToAccess(`${borrower._id}/`)).to.equal(true);\n      Borrowers.remove(borrower._id);\n    });\n\n    it('should return true if this user has the property', () => {\n      const property = Factory.create('property', { userId });\n\n      expect(S3Service.isAllowedToAccess(`${property._id}/`)).to.equal(true);\n      Properties.remove(property._id);\n    });\n\n    it('should return true if the property is pro and the user exists', () => {\n      const property = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PRO,\n      });\n\n      expect(S3Service.isAllowedToAccess(`${property._id}/`)).to.equal(true);\n      Properties.remove(property._id);\n    });\n\n    it('should return true for a promotion and the user exists', () => {\n      const promotion = Factory.create('promotion', {\n        userLinks: [{ _id: userId, permissions: { canManageDocuments: true } }],\n      });\n\n      expect(S3Service.isAllowedToAccess(`${promotion._id}/`)).to.equal(true);\n      Promotions.remove(promotion._id);\n    });\n  });\n\n  describe('makeSignedUrl', () => {\n    it('should return a signed url', () => {\n      expect(S3Service.makeSignedUrl('dude/file.pdf')).to.include('dude/file.pdf');\n    });\n  });\n});\n"]},"sourceType":"script","hash":"82c541e7a1bfbb96f13446791046184056295231"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js"],"names":["pick","SimpleSchema","PropertyService","proPropertyLoans","getImpersonateUserId","checkQuery","querySchema","type","String","optional","getPropertyLoansAPI","user","_id","userId","params","query","propertyId","impersonateUser","schema","exists","propertyByExternalId","fetchOne","$filters","externalId","proId","loans","clone","fetch","filteredLoans","map","loan","properties","property","find","solvent"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,OAAOC,eAAP;AACA,SAASC,gBAAT;AACA,SAASC,oBAAT,EAA+BC,UAA/B;AAEA,MAAMC,WAAW,GAAG,IAAIL,YAAJ,CAAiB;AACnC,sBAAoB;AAAEM,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B;AADe,CAAjB,CAApB;;AAIA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAEC;AAAP,GAAR;AAAyBC,EAAAA,MAAzB;AAAiCC,EAAAA;AAAjC,CAAD,KAA8C;AACxE,MAAI;AAAEC,IAAAA;AAAF,MAAiBF,MAArB;AACA,QAAM;AAAE,wBAAoBG;AAAtB,MAA0CZ,UAAU,CAAC;AACzDU,IAAAA,KADyD;AAEzDG,IAAAA,MAAM,EAAEZ;AAFiD,GAAD,CAA1D;AAKA,QAAMa,MAAM,GAAGjB,eAAe,CAACiB,MAAhB,CAAuBH,UAAvB,CAAf;;AAEA,MAAI,CAACG,MAAL,EAAa;AACX,UAAMC,oBAAoB,GAAGlB,eAAe,CAACmB,QAAhB,CAAyB;AACpDC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,UAAU,EAAEP;AAAd;AAD0C,KAAzB,CAA7B;;AAGA,QAAII,oBAAJ,EAA0B;AACxBJ,MAAAA,UAAU,GAAGI,oBAAoB,CAACR,GAAlC;AACD;AACF;;AAED,MAAIY,KAAJ;;AACA,MAAIP,eAAJ,EAAqB;AACnBO,IAAAA,KAAK,GAAGpB,oBAAoB,CAAC;AAAES,MAAAA,MAAF;AAAUI,MAAAA;AAAV,KAAD,CAA5B;AACD;;AAED,QAAMQ,KAAK,GAAGtB,gBAAgB,CAC3BuB,KADW,CACL;AAAEV,IAAAA;AAAF,GADK,EAEXW,KAFW,CAEL;AAAEd,IAAAA,MAAM,EAAEW,KAAK,IAAIX;AAAnB,GAFK,CAAd;AAIA,QAAMe,aAAa,GAAGH,KAAK,CAACI,GAAN,CAAUC,IAAI,IAClC9B,IAAI,CAAC8B,IAAD,EAAO,CACT,WADS,EAET,mBAFS,EAGT,YAHS,EAIT,0BAJS,EAKT,kCALS,EAMT,WANS,EAOT,MAPS,EAQT,cARS,EAST,QATS,EAUT,YAVS,CAAP,CADgB,CAAtB;AAcA,SAAOF,aAAa,CAACC,GAAd,CAAkB,CAAC;AAAEE,IAAAA,UAAF;AAAc,OAAGD;AAAjB,GAAD,KAA6B;AACpD,UAAME,QAAQ,GAAGD,UAAU,CAACE,IAAX,CAAgB,CAAC;AAAErB,MAAAA;AAAF,KAAD,KAAaA,GAAG,KAAKI,UAArC,KAAoD,EAArE;AACA,UAAM;AAAEkB,MAAAA;AAAF,QAAcF,QAApB;AACA,WAAO,EAAE,GAAGF,IAAL;AAAWI,MAAAA;AAAX,KAAP;AACD,GAJM,CAAP;AAKD,CA9CD;;AAgDA,eAAexB,mBAAf","sourcesContent":["import pick from 'lodash/pick';\nimport SimpleSchema from 'simpl-schema';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport { proPropertyLoans } from '../../../loans/queries';\nimport { getImpersonateUserId, checkQuery } from './helpers';\n\nconst querySchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst getPropertyLoansAPI = ({ user: { _id: userId }, params, query }) => {\n  let { propertyId } = params;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId: propertyId },\n    });\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    }\n  }\n\n  let proId;\n  if (impersonateUser) {\n    proId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const loans = proPropertyLoans\n    .clone({ propertyId })\n    .fetch({ userId: proId || userId });\n\n  const filteredLoans = loans.map(loan =>\n    pick(loan, [\n      'user.name',\n      'user.phoneNumbers',\n      'user.email',\n      'user.referredByUser.name',\n      'user.referredByOrganisation.name',\n      'createdAt',\n      'name',\n      'loanProgress',\n      'status',\n      'properties',\n    ]));\n\n  return filteredLoans.map(({ properties, ...loan }) => {\n    const property = properties.find(({ _id }) => _id === propertyId) || {};\n    const { solvent } = property;\n    return { ...loan, solvent };\n  });\n};\n\nexport default getPropertyLoansAPI;\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nlet pick;\nmodule.link(\"lodash/pick\", {\n  default(v) {\n    pick = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet PropertyService;\nmodule.link(\"../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 2);\nlet proPropertyLoans;\nmodule.link(\"../../../loans/queries\", {\n  proPropertyLoans(v) {\n    proPropertyLoans = v;\n  }\n\n}, 3);\nlet getImpersonateUserId, checkQuery;\nmodule.link(\"./helpers\", {\n  getImpersonateUserId(v) {\n    getImpersonateUserId = v;\n  },\n\n  checkQuery(v) {\n    checkQuery = v;\n  }\n\n}, 4);\nconst querySchema = new SimpleSchema({\n  'impersonate-user': {\n    type: String,\n    optional: true\n  }\n});\n\nconst getPropertyLoansAPI = ({\n  user: {\n    _id: userId\n  },\n  params,\n  query\n}) => {\n  let {\n    propertyId\n  } = params;\n  const {\n    'impersonate-user': impersonateUser\n  } = checkQuery({\n    query,\n    schema: querySchema\n  });\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: {\n        externalId: propertyId\n      }\n    });\n\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    }\n  }\n\n  let proId;\n\n  if (impersonateUser) {\n    proId = getImpersonateUserId({\n      userId,\n      impersonateUser\n    });\n  }\n\n  const loans = proPropertyLoans.clone({\n    propertyId\n  }).fetch({\n    userId: proId || userId\n  });\n  const filteredLoans = loans.map(loan => pick(loan, ['user.name', 'user.phoneNumbers', 'user.email', 'user.referredByUser.name', 'user.referredByOrganisation.name', 'createdAt', 'name', 'loanProgress', 'status', 'properties']));\n  return filteredLoans.map((_ref) => {\n    let {\n      properties\n    } = _ref,\n        loan = (0, _objectWithoutProperties2.default)(_ref, [\"properties\"]);\n    const property = properties.find(({\n      _id\n    }) => _id === propertyId) || {};\n    const {\n      solvent\n    } = property;\n    return (0, _objectSpread2.default)({}, loan, {\n      solvent\n    });\n  });\n};\n\nmodule.exportDefault(getPropertyLoansAPI);","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/getPropertyLoans.js"],"names":["pick","querySchema","type","optional","getPropertyLoansAPI","user","_id","userId","query","propertyId","impersonateUser","checkQuery","schema","exists","PropertyService","propertyByExternalId","$filters","externalId","proId","getImpersonateUserId","loans","filteredLoans","loan","property","properties","solvent"],"mappings":"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","sourcesContent":["import pick from 'lodash/pick';\nimport SimpleSchema from 'simpl-schema';\n\nimport PropertyService from 'core/api/properties/server/PropertyService';\nimport { proPropertyLoans } from '../../../loans/queries';\nimport { getImpersonateUserId, checkQuery } from './helpers';\n\nconst querySchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst getPropertyLoansAPI = ({ user: { _id: userId }, params, query }) => {\n  let { propertyId } = params;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  const exists = PropertyService.exists(propertyId);\n\n  if (!exists) {\n    const propertyByExternalId = PropertyService.fetchOne({\n      $filters: { externalId: propertyId },\n    });\n    if (propertyByExternalId) {\n      propertyId = propertyByExternalId._id;\n    }\n  }\n\n  let proId;\n  if (impersonateUser) {\n    proId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const loans = proPropertyLoans\n    .clone({ propertyId })\n    .fetch({ userId: proId || userId });\n\n  const filteredLoans = loans.map(loan =>\n    pick(loan, [\n      'user.name',\n      'user.phoneNumbers',\n      'user.email',\n      'user.referredByUser.name',\n      'user.referredByOrganisation.name',\n      'createdAt',\n      'name',\n      'loanProgress',\n      'status',\n      'properties',\n    ]));\n\n  return filteredLoans.map(({ properties, ...loan }) => {\n    const property = properties.find(({ _id }) => _id === propertyId) || {};\n    const { solvent } = property;\n    return { ...loan, solvent };\n  });\n};\n\nexport default getPropertyLoansAPI;\n"]},"sourceType":"script","hash":"c1dc591fa92fc2a9a8f65dcaf3157140d7402e11"}

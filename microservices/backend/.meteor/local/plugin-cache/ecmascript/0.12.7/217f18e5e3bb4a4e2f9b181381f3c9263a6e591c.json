{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/checkObjectStructure.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/utils/test/checkObjectStructure.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/checkObjectStructure.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/test/checkObjectStructure.spec.js"],"names":["expect","makeCheckObjectStructure","checkObjectStructure","describe","it","template","a","obj","to","not","throw","b","c","d","e","f","g","h","i","j","abc","undefined","def","efg","parentKey"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { makeCheckObjectStructure } from '../checkObjectStructure';\n\nconst checkObjectStructure = makeCheckObjectStructure();\n\ndescribe('checkObjectStructure', () => {\n  describe('does not throw when object matches the template', () => {\n    it('with a single key string', () => {\n      const template = { a: 1 };\n      const obj = { a: 'hello' };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key number', () => {\n      const template = { a: 1 };\n      const obj = { a: 12 };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key empty array that can be empty', () => {\n      const template = { a: [] };\n      const obj = { a: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key array that can be empty', () => {\n      const template = { a: [] };\n      const obj = { a: [1, 2, 3] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key array that cannot be empty', () => {\n      const template = { a: [1] };\n      const obj = { a: [1, 2, 3] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key array that contains objects', () => {\n      const template = { a: [{ b: 1, c: [], d: { e: 1, f: 1 } }] };\n      const obj = {\n        a: [\n          {\n            b: 'hello',\n            c: [],\n            d: { e: 123, f: 456 },\n          },\n          {\n            b: 'hola',\n            c: [1, 2, 3],\n            d: { e: 123, f: 456 },\n          },\n        ],\n      };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key object', () => {\n      const template = { a: { b: 1 } };\n      const obj = { a: { b: 'hello' } };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with several keys and nested objects', () => {\n      const template = {\n        a: 1,\n        b: [],\n        c: [1],\n        d: { e: 1, f: [], g: [1], h: { i: 1, j: 1 } },\n      };\n      const obj = {\n        a: 'hello',\n        b: [1, 2, 3],\n        c: [1, 2, 3],\n        d: { e: 12, f: [], g: ['hello'], h: { i: 123, j: 'hello' } },\n      };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n  });\n\n  describe('throws when the object does not match the template', () => {\n    it('with a key missing', () => {\n      const template = { abc: 1 };\n      const obj = {};\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key abc from object');\n    });\n\n    it('with a key that is undefined', () => {\n      const template = { abc: 1 };\n      const obj = { abc: undefined };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key abc from object');\n    });\n\n    it('with a key that is expected to be an array but is not', () => {\n      const template = { abc: [] };\n      const obj = { abc: 2 };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Object key abc must be an array');\n    });\n\n    it('with a key that is expected to be a non-empty array but is empty', () => {\n      const template = { abc: [1] };\n      const obj = { abc: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Array at object key abc in undefined should not be empty');\n    });\n\n    it('with a key that is expected to be a non-empty array but is empty and parent object', () => {\n      const template = { abc: { def: [1] } };\n      const obj = { abc: { def: [] } };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Array at object key def in abc should not be empty');\n    });\n\n    it('with a non matching object in array', () => {\n      const template = { a: [{ b: 1, c: [], d: { e: 1, f: 1 } }] };\n      const obj = {\n        a: [\n          {\n            b: 'hello',\n            c: [],\n            d: { e: 123, f: 456 },\n          },\n          {\n            b: 'hola',\n            d: { e: 123, f: 456 },\n          },\n        ],\n      };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key c from object');\n    });\n\n    it('with a key that is expected to be an object but is not', () => {\n      const template = { abc: {} };\n      const obj = { abc: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Object key abc must be an object');\n    });\n\n    it('says which parent object a key should be in', () => {\n      const template = { abc: { efg: 1 } };\n      const obj = { abc: {} };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key efg from object abc');\n    });\n\n    it('throws multiple errors', () => {\n      const template = { a: { b: 1 }, c: {}, d: [1] };\n      const obj = { a: {}, c: [], d: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key b from object a, Object key c must be an object, Array at object key d in undefined should not be empty');\n    });\n\n    it('skips the rest of the function if it should be an object but it is empty', () => {\n      const template = { a: { b: { c: 1 } } };\n      const obj = {};\n\n      expect(() => checkObjectStructure({ obj, template, parentKey: 'Root' })).to.throw('Missing key a from object Root');\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/checkObjectStructure.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/test/checkObjectStructure.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet makeCheckObjectStructure;\nmodule.link(\"../checkObjectStructure\", {\n  makeCheckObjectStructure(v) {\n    makeCheckObjectStructure = v;\n  }\n\n}, 1);\nconst checkObjectStructure = makeCheckObjectStructure();\ndescribe('checkObjectStructure', () => {\n  describe('does not throw when object matches the template', () => {\n    it('with a single key string', () => {\n      const template = {\n        a: 1\n      };\n      const obj = {\n        a: 'hello'\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n    it('with a single key number', () => {\n      const template = {\n        a: 1\n      };\n      const obj = {\n        a: 12\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n    it('with a single key empty array that can be empty', () => {\n      const template = {\n        a: []\n      };\n      const obj = {\n        a: []\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n    it('with a single key array that can be empty', () => {\n      const template = {\n        a: []\n      };\n      const obj = {\n        a: [1, 2, 3]\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n    it('with a single key array that cannot be empty', () => {\n      const template = {\n        a: [1]\n      };\n      const obj = {\n        a: [1, 2, 3]\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n    it('with a single key array that contains objects', () => {\n      const template = {\n        a: [{\n          b: 1,\n          c: [],\n          d: {\n            e: 1,\n            f: 1\n          }\n        }]\n      };\n      const obj = {\n        a: [{\n          b: 'hello',\n          c: [],\n          d: {\n            e: 123,\n            f: 456\n          }\n        }, {\n          b: 'hola',\n          c: [1, 2, 3],\n          d: {\n            e: 123,\n            f: 456\n          }\n        }]\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n    it('with a single key object', () => {\n      const template = {\n        a: {\n          b: 1\n        }\n      };\n      const obj = {\n        a: {\n          b: 'hello'\n        }\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n    it('with several keys and nested objects', () => {\n      const template = {\n        a: 1,\n        b: [],\n        c: [1],\n        d: {\n          e: 1,\n          f: [],\n          g: [1],\n          h: {\n            i: 1,\n            j: 1\n          }\n        }\n      };\n      const obj = {\n        a: 'hello',\n        b: [1, 2, 3],\n        c: [1, 2, 3],\n        d: {\n          e: 12,\n          f: [],\n          g: ['hello'],\n          h: {\n            i: 123,\n            j: 'hello'\n          }\n        }\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.not.throw();\n    });\n  });\n  describe('throws when the object does not match the template', () => {\n    it('with a key missing', () => {\n      const template = {\n        abc: 1\n      };\n      const obj = {};\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Missing key abc from object');\n    });\n    it('with a key that is undefined', () => {\n      const template = {\n        abc: 1\n      };\n      const obj = {\n        abc: undefined\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Missing key abc from object');\n    });\n    it('with a key that is expected to be an array but is not', () => {\n      const template = {\n        abc: []\n      };\n      const obj = {\n        abc: 2\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Object key abc must be an array');\n    });\n    it('with a key that is expected to be a non-empty array but is empty', () => {\n      const template = {\n        abc: [1]\n      };\n      const obj = {\n        abc: []\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Array at object key abc in undefined should not be empty');\n    });\n    it('with a key that is expected to be a non-empty array but is empty and parent object', () => {\n      const template = {\n        abc: {\n          def: [1]\n        }\n      };\n      const obj = {\n        abc: {\n          def: []\n        }\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Array at object key def in abc should not be empty');\n    });\n    it('with a non matching object in array', () => {\n      const template = {\n        a: [{\n          b: 1,\n          c: [],\n          d: {\n            e: 1,\n            f: 1\n          }\n        }]\n      };\n      const obj = {\n        a: [{\n          b: 'hello',\n          c: [],\n          d: {\n            e: 123,\n            f: 456\n          }\n        }, {\n          b: 'hola',\n          d: {\n            e: 123,\n            f: 456\n          }\n        }]\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Missing key c from object');\n    });\n    it('with a key that is expected to be an object but is not', () => {\n      const template = {\n        abc: {}\n      };\n      const obj = {\n        abc: []\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Object key abc must be an object');\n    });\n    it('says which parent object a key should be in', () => {\n      const template = {\n        abc: {\n          efg: 1\n        }\n      };\n      const obj = {\n        abc: {}\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Missing key efg from object abc');\n    });\n    it('throws multiple errors', () => {\n      const template = {\n        a: {\n          b: 1\n        },\n        c: {},\n        d: [1]\n      };\n      const obj = {\n        a: {},\n        c: [],\n        d: []\n      };\n      expect(() => checkObjectStructure({\n        obj,\n        template\n      })).to.throw('Missing key b from object a, Object key c must be an object, Array at object key d in undefined should not be empty');\n    });\n    it('skips the rest of the function if it should be an object but it is empty', () => {\n      const template = {\n        a: {\n          b: {\n            c: 1\n          }\n        }\n      };\n      const obj = {};\n      expect(() => checkObjectStructure({\n        obj,\n        template,\n        parentKey: 'Root'\n      })).to.throw('Missing key a from object Root');\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/test/checkObjectStructure.spec.js"],"names":["checkObjectStructure","makeCheckObjectStructure","describe","it","template","a","obj","expect","b","c","d","e","f","g","h","i","j","abc","undefined","def","efg","parentKey"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { makeCheckObjectStructure } from '../checkObjectStructure';\n\nconst checkObjectStructure = makeCheckObjectStructure();\n\ndescribe('checkObjectStructure', () => {\n  describe('does not throw when object matches the template', () => {\n    it('with a single key string', () => {\n      const template = { a: 1 };\n      const obj = { a: 'hello' };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key number', () => {\n      const template = { a: 1 };\n      const obj = { a: 12 };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key empty array that can be empty', () => {\n      const template = { a: [] };\n      const obj = { a: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key array that can be empty', () => {\n      const template = { a: [] };\n      const obj = { a: [1, 2, 3] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key array that cannot be empty', () => {\n      const template = { a: [1] };\n      const obj = { a: [1, 2, 3] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key array that contains objects', () => {\n      const template = { a: [{ b: 1, c: [], d: { e: 1, f: 1 } }] };\n      const obj = {\n        a: [\n          {\n            b: 'hello',\n            c: [],\n            d: { e: 123, f: 456 },\n          },\n          {\n            b: 'hola',\n            c: [1, 2, 3],\n            d: { e: 123, f: 456 },\n          },\n        ],\n      };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with a single key object', () => {\n      const template = { a: { b: 1 } };\n      const obj = { a: { b: 'hello' } };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n\n    it('with several keys and nested objects', () => {\n      const template = {\n        a: 1,\n        b: [],\n        c: [1],\n        d: { e: 1, f: [], g: [1], h: { i: 1, j: 1 } },\n      };\n      const obj = {\n        a: 'hello',\n        b: [1, 2, 3],\n        c: [1, 2, 3],\n        d: { e: 12, f: [], g: ['hello'], h: { i: 123, j: 'hello' } },\n      };\n\n      expect(() => checkObjectStructure({ obj, template })).to.not.throw();\n    });\n  });\n\n  describe('throws when the object does not match the template', () => {\n    it('with a key missing', () => {\n      const template = { abc: 1 };\n      const obj = {};\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key abc from object');\n    });\n\n    it('with a key that is undefined', () => {\n      const template = { abc: 1 };\n      const obj = { abc: undefined };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key abc from object');\n    });\n\n    it('with a key that is expected to be an array but is not', () => {\n      const template = { abc: [] };\n      const obj = { abc: 2 };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Object key abc must be an array');\n    });\n\n    it('with a key that is expected to be a non-empty array but is empty', () => {\n      const template = { abc: [1] };\n      const obj = { abc: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Array at object key abc in undefined should not be empty');\n    });\n\n    it('with a key that is expected to be a non-empty array but is empty and parent object', () => {\n      const template = { abc: { def: [1] } };\n      const obj = { abc: { def: [] } };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Array at object key def in abc should not be empty');\n    });\n\n    it('with a non matching object in array', () => {\n      const template = { a: [{ b: 1, c: [], d: { e: 1, f: 1 } }] };\n      const obj = {\n        a: [\n          {\n            b: 'hello',\n            c: [],\n            d: { e: 123, f: 456 },\n          },\n          {\n            b: 'hola',\n            d: { e: 123, f: 456 },\n          },\n        ],\n      };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key c from object');\n    });\n\n    it('with a key that is expected to be an object but is not', () => {\n      const template = { abc: {} };\n      const obj = { abc: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Object key abc must be an object');\n    });\n\n    it('says which parent object a key should be in', () => {\n      const template = { abc: { efg: 1 } };\n      const obj = { abc: {} };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key efg from object abc');\n    });\n\n    it('throws multiple errors', () => {\n      const template = { a: { b: 1 }, c: {}, d: [1] };\n      const obj = { a: {}, c: [], d: [] };\n\n      expect(() => checkObjectStructure({ obj, template })).to.throw('Missing key b from object a, Object key c must be an object, Array at object key d in undefined should not be empty');\n    });\n\n    it('skips the rest of the function if it should be an object but it is empty', () => {\n      const template = { a: { b: { c: 1 } } };\n      const obj = {};\n\n      expect(() => checkObjectStructure({ obj, template, parentKey: 'Root' })).to.throw('Missing key a from object Root');\n    });\n  });\n});\n"]},"sourceType":"script","hash":"217f18e5e3bb4a4e2f9b181381f3c9263a6e591c"}

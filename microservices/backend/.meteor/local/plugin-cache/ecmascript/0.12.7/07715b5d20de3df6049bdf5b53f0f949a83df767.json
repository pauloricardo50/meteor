{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/TextInput/test/TextInput.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/TextInput/test/TextInput.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/TextInput/test/TextInput.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/components/TextInput/test/TextInput.spec.js"],"names":["expect","getFinalPlaceholder","describe","context","it","intl","formatMessage","id","prefix","placeholder","options","noIntl","to","equal","defaultPlaceholder","type","undefined"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SAASC,mBAAT;AAEAC,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCC,EAAAA,OAAO,CAAC,sBAAD,EAAyB,MAAM;AACpCC,IAAAA,EAAE,CAAC,2CAAD,EAA8C,MAAM;AACpD,YAAMC,IAAI,GAAG;AACXC,QAAAA,aAAa,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAYA;AADhB,OAAb;AAGA,YAAMC,MAAM,GAAG,mCAAf;AACA,YAAMC,WAAW,GAAG,YAApB;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,MAAM,EAAE,KADM;AAEdN,QAAAA,IAFc;AAGdI,QAAAA;AAHc,OAAhB;AAKAT,MAAAA,MAAM,CAACC,mBAAmB,CAACS,OAAD,CAApB,CAAN,CAAqCE,EAArC,CAAwCC,KAAxC,CAA+C,GAAEL,MAAO,IAAGC,WAAY,EAAvE;AACD,KAZC,CAAF;AAcAL,IAAAA,EAAE,CAAC,iEAAD,EAAoE,MAAM;AAC1E,YAAMC,IAAI,GAAG;AACXC,QAAAA,aAAa,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAYA;AADhB,OAAb;AAGA,YAAMO,kBAAkB,GAAG,oBAA3B;AACA,YAAMJ,OAAO,GAAG;AACdC,QAAAA,MAAM,EAAE,KADM;AAEdN,QAAAA,IAFc;AAGdS,QAAAA;AAHc,OAAhB;AAKAd,MAAAA,MAAM,CAACC,mBAAmB,CAACS,OAAD,CAApB,CAAN,CAAqCE,EAArC,CAAwCC,KAAxC,CAA8CC,kBAA9C;AACD,KAXC,CAAF;AAaAV,IAAAA,EAAE,CAAC,qDAAD,EAAwD,MAAM;AAC9D,YAAMU,kBAAkB,GAAG,oBAA3B;AACA,YAAMJ,OAAO,GAAG;AACdI,QAAAA,kBADc;AAEdC,QAAAA,IAAI,EAAE;AAFQ,OAAhB;AAKAf,MAAAA,MAAM,CAACC,mBAAmB,CAACS,OAAD,CAApB,CAAN,CAAqCE,EAArC,CAAwCC,KAAxC,CAA8CC,kBAA9C;AACD,KARC,CAAF;AASD,GArCM,CAAP;AAsCAX,EAAAA,OAAO,CAAC,qBAAD,EAAwB,MAAM;AACnCC,IAAAA,EAAE,CAAC,8CAAD,EAAiD,MAAM;AACvD,YAAMK,WAAW,GAAG,aAApB;AACA,YAAMC,OAAO,GAAG;AACdC,QAAAA,MAAM,EAAE,IADM;AAEdF,QAAAA;AAFc,OAAhB;AAIAT,MAAAA,MAAM,CAACC,mBAAmB,CAACS,OAAD,CAApB,CAAN,CAAqCE,EAArC,CAAwCC,KAAxC,CAA8CJ,WAA9C;AACD,KAPC,CAAF;AASAL,IAAAA,EAAE,CAAC,kEAAD,EAAqE,MAAM;AAC3E,YAAMK,WAAW,GAAGO,SAApB;AACA,YAAMF,kBAAkB,GAAG,oBAA3B;AACA,YAAMJ,OAAO,GAAG;AACdC,QAAAA,MAAM,EAAE,IADM;AAEdF,QAAAA,WAFc;AAGdK,QAAAA;AAHc,OAAhB;AAKAd,MAAAA,MAAM,CAACC,mBAAmB,CAACS,OAAD,CAApB,CAAN,CAAqCE,EAArC,CAAwCC,KAAxC,CAA8CC,kBAA9C;AACD,KATC,CAAF;AAUD,GApBM,CAAP;AAqBD,CA5DO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { getFinalPlaceholder } from '../TextInput';\n\ndescribe('getFinalPlaceholder', () => {\n  context('when noIntl is false', () => {\n    it('should return a placeholder with a prefix', () => {\n      const intl = {\n        formatMessage: ({ id }) => id,\n      };\n      const prefix = 'Forms.textInput.placeholderPrefix';\n      const placeholder = 'placeholer';\n      const options = {\n        noIntl: false,\n        intl,\n        placeholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(`${prefix} ${placeholder}`);\n    });\n\n    it('should return default placeholder if no placeholder is provided', () => {\n      const intl = {\n        formatMessage: ({ id }) => id,\n      };\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        noIntl: false,\n        intl,\n        defaultPlaceholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n\n    it('should return defaultPlaceholder when type is money', () => {\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        defaultPlaceholder,\n        type: 'money',\n      };\n\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n  });\n  context('when noIntl is true', () => {\n    it('should return placeholder when it is defined', () => {\n      const placeholder = 'placeholder';\n      const options = {\n        noIntl: true,\n        placeholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(placeholder);\n    });\n\n    it('should return default placeholder when no placeholder is defined', () => {\n      const placeholder = undefined;\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        noIntl: true,\n        placeholder,\n        defaultPlaceholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/TextInput/test/TextInput.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/TextInput/test/TextInput.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet getFinalPlaceholder;\nmodule.link(\"../TextInput\", {\n  getFinalPlaceholder(v) {\n    getFinalPlaceholder = v;\n  }\n\n}, 1);\ndescribe('getFinalPlaceholder', () => {\n  context('when noIntl is false', () => {\n    it('should return a placeholder with a prefix', () => {\n      const intl = {\n        formatMessage: (_ref) => {\n          let {\n            id\n          } = _ref;\n          return id;\n        }\n      };\n      const prefix = 'Forms.textInput.placeholderPrefix';\n      const placeholder = 'placeholer';\n      const options = {\n        noIntl: false,\n        intl,\n        placeholder\n      };\n      expect(getFinalPlaceholder(options)).to.equal(\"\".concat(prefix, \" \").concat(placeholder));\n    });\n    it('should return default placeholder if no placeholder is provided', () => {\n      const intl = {\n        formatMessage: (_ref2) => {\n          let {\n            id\n          } = _ref2;\n          return id;\n        }\n      };\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        noIntl: false,\n        intl,\n        defaultPlaceholder\n      };\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n    it('should return defaultPlaceholder when type is money', () => {\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        defaultPlaceholder,\n        type: 'money'\n      };\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n  });\n  context('when noIntl is true', () => {\n    it('should return placeholder when it is defined', () => {\n      const placeholder = 'placeholder';\n      const options = {\n        noIntl: true,\n        placeholder\n      };\n      expect(getFinalPlaceholder(options)).to.equal(placeholder);\n    });\n    it('should return default placeholder when no placeholder is defined', () => {\n      const placeholder = undefined;\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        noIntl: true,\n        placeholder,\n        defaultPlaceholder\n      };\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/TextInput/test/TextInput.spec.js"],"names":["describe","context","it","intl","formatMessage","id","prefix","placeholder","options","noIntl","expect","getFinalPlaceholder","defaultPlaceholder","type"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { getFinalPlaceholder } from '../TextInput';\n\ndescribe('getFinalPlaceholder', () => {\n  context('when noIntl is false', () => {\n    it('should return a placeholder with a prefix', () => {\n      const intl = {\n        formatMessage: ({ id }) => id,\n      };\n      const prefix = 'Forms.textInput.placeholderPrefix';\n      const placeholder = 'placeholer';\n      const options = {\n        noIntl: false,\n        intl,\n        placeholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(`${prefix} ${placeholder}`);\n    });\n\n    it('should return default placeholder if no placeholder is provided', () => {\n      const intl = {\n        formatMessage: ({ id }) => id,\n      };\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        noIntl: false,\n        intl,\n        defaultPlaceholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n\n    it('should return defaultPlaceholder when type is money', () => {\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        defaultPlaceholder,\n        type: 'money',\n      };\n\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n  });\n  context('when noIntl is true', () => {\n    it('should return placeholder when it is defined', () => {\n      const placeholder = 'placeholder';\n      const options = {\n        noIntl: true,\n        placeholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(placeholder);\n    });\n\n    it('should return default placeholder when no placeholder is defined', () => {\n      const placeholder = undefined;\n      const defaultPlaceholder = 'defaultPlaceholder';\n      const options = {\n        noIntl: true,\n        placeholder,\n        defaultPlaceholder,\n      };\n      expect(getFinalPlaceholder(options)).to.equal(defaultPlaceholder);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"07715b5d20de3df6049bdf5b53f0f949a83df767"}

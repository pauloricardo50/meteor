{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Translation/numberComponents/test/IntlNumber.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/Translation/numberComponents/test/IntlNumber.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Translation/numberComponents/test/IntlNumber.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/Translation/numberComponents/test/IntlNumber.spec.jsx"],"names":["React","expect","shallow","FormattedNumber","IntlNumber","describe","props","component","beforeEach","it","value","find","length","to","equal","equals","undefined","NaN","Number","Infinity"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'core/utils/testHelpers/enzyme';\nimport { FormattedNumber } from 'react-intl';\n\nimport IntlNumber from '../IntlNumber';\n\ndescribe('IntlNumber', () => {\n  let props;\n  const component = () => shallow(<IntlNumber {...props} />);\n\n  beforeEach(() => {\n    props = {};\n  });\n\n  it('should render FormattedNumber for a regular number', () => {\n    props.value = 10000;\n    expect(component().find(FormattedNumber).length).to.equal(1);\n  });\n\n  it('does not render a dash for a normal number', () => {\n    props.value = 10000;\n    expect(component().equals('-')).to.equal(false);\n  });\n\n  it('should render FormattedNumber for 0', () => {\n    props.value = 0;\n    expect(component().find(FormattedNumber).length).to.equal(1);\n  });\n\n  it('should render a dash for falsy values', () => {\n    props.value = undefined;\n    expect(component().equals('-')).to.equal(true);\n    props.value = false;\n    expect(component().equals('-')).to.equal(true);\n    props.value = null;\n    expect(component().equals('-')).to.equal(true);\n    props.value = NaN;\n    expect(component().equals('-')).to.equal(true);\n  });\n\n  it('should render a dash for + and - Infinity', () => {\n    props.value = Number.Infinity;\n    expect(component().equals('-')).to.equal(true);\n    props.value = -Number.Infinity;\n    expect(component().equals('-')).to.equal(true);\n  });\n\n  it('renders the value if it is not a number', () => {\n    props.value = 'hello world';\n    expect(component().equals('hello world')).to.equal(true);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/Translation/numberComponents/test/IntlNumber.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/Translation/numberComponents/test/IntlNumber.spec.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet shallow;\nmodule.link(\"../../../../utils/testHelpers/enzyme\", {\n  shallow(v) {\n    shallow = v;\n  }\n\n}, 2);\nlet FormattedNumber;\nmodule.link(\"react-intl\", {\n  FormattedNumber(v) {\n    FormattedNumber = v;\n  }\n\n}, 3);\nlet IntlNumber;\nmodule.link(\"../IntlNumber\", {\n  default(v) {\n    IntlNumber = v;\n  }\n\n}, 4);\ndescribe('IntlNumber', () => {\n  let props;\n\n  const component = () => shallow(React.createElement(IntlNumber, props));\n\n  beforeEach(() => {\n    props = {};\n  });\n  it('should render FormattedNumber for a regular number', () => {\n    props.value = 10000;\n    expect(component().find(FormattedNumber).length).to.equal(1);\n  });\n  it('does not render a dash for a normal number', () => {\n    props.value = 10000;\n    expect(component().equals('-')).to.equal(false);\n  });\n  it('should render FormattedNumber for 0', () => {\n    props.value = 0;\n    expect(component().find(FormattedNumber).length).to.equal(1);\n  });\n  it('should render a dash for falsy values', () => {\n    props.value = undefined;\n    expect(component().equals('-')).to.equal(true);\n    props.value = false;\n    expect(component().equals('-')).to.equal(true);\n    props.value = null;\n    expect(component().equals('-')).to.equal(true);\n    props.value = NaN;\n    expect(component().equals('-')).to.equal(true);\n  });\n  it('should render a dash for + and - Infinity', () => {\n    props.value = Number.Infinity;\n    expect(component().equals('-')).to.equal(true);\n    props.value = -Number.Infinity;\n    expect(component().equals('-')).to.equal(true);\n  });\n  it('renders the value if it is not a number', () => {\n    props.value = 'hello world';\n    expect(component().equals('hello world')).to.equal(true);\n  });\n});","map":{"version":3,"sources":["imports/core/components/Translation/numberComponents/test/IntlNumber.spec.jsx"],"names":["describe","component","shallow","beforeEach","props","it","expect","Number"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'core/utils/testHelpers/enzyme';\nimport { FormattedNumber } from 'react-intl';\n\nimport IntlNumber from '../IntlNumber';\n\ndescribe('IntlNumber', () => {\n  let props;\n  const component = () => shallow(<IntlNumber {...props} />);\n\n  beforeEach(() => {\n    props = {};\n  });\n\n  it('should render FormattedNumber for a regular number', () => {\n    props.value = 10000;\n    expect(component().find(FormattedNumber).length).to.equal(1);\n  });\n\n  it('does not render a dash for a normal number', () => {\n    props.value = 10000;\n    expect(component().equals('-')).to.equal(false);\n  });\n\n  it('should render FormattedNumber for 0', () => {\n    props.value = 0;\n    expect(component().find(FormattedNumber).length).to.equal(1);\n  });\n\n  it('should render a dash for falsy values', () => {\n    props.value = undefined;\n    expect(component().equals('-')).to.equal(true);\n    props.value = false;\n    expect(component().equals('-')).to.equal(true);\n    props.value = null;\n    expect(component().equals('-')).to.equal(true);\n    props.value = NaN;\n    expect(component().equals('-')).to.equal(true);\n  });\n\n  it('should render a dash for + and - Infinity', () => {\n    props.value = Number.Infinity;\n    expect(component().equals('-')).to.equal(true);\n    props.value = -Number.Infinity;\n    expect(component().equals('-')).to.equal(true);\n  });\n\n  it('renders the value if it is not a number', () => {\n    props.value = 'hello world';\n    expect(component().equals('hello world')).to.equal(true);\n  });\n});\n"]},"sourceType":"script","hash":"264a491dcfcecb75697bc059b4c7286d3c39affc"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/helpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/helpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/helpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/helpers.js"],"names":["DDPCommon","DDP","Meteor","Match","Random","NodeRSA","get","set","Analytics","EVENTS","UserService","getClientHost","storeOnFiber","getFromFiber","sortObject","HTTP_STATUS_CODES","getImpersonateUserId","AUTH_ITEMS","RSA_PUBLIC_KEY","RSA_SIGNATURE","OBJECT_FORMATS","DEFAULT","TO_LITERRAL","TO_STRING","getHeader","req","name","headers","getAuthItem","item","authorization","undefined","includes","replace","split","getPublicKey","getSignature","getRequestPath","_parsedUrl","parsedUrl","pathname","getRequestMethod","method","updateCustomerReferral","customer","userId","impersonateUser","customerId","getByEmail","email","_id","mainOrg","getUserMainOrganisation","setReferredByOrganisation","organisationId","Promise","resolve","withMeteorUserId","func","impersonateUserId","invocation","MethodInvocation","_CurrentInvocation","withValue","getErrorObject","error","res","statusCode","status","message","errorName","SERVER_ERROR","Error","BAD_REQUEST","stringToLiteral","value","maps","true","false","NaN","Infinity","null","isNaN","parseInt","Object","keys","literalToString","toString","getObjectPropertiesPath","obj","stack","arr","property","hasOwnProperty","Array","isArray","length","str","substr","formatObject","format","properties","formattedObject","forEach","formatParams","params","reduce","object","key","logRequest","result","user","emails","body","query","verifiedFormat","isTest","console","log","JSON","stringify","verifySignature","publicKey","signature","isMultipart","timestamp","nonce","importKey","objectToVerify","security","queryParams","files","file","originalFilename","size","type","verified","some","isValid","verify","toVerify","acceptedStringifiedVersions","map","trackRequest","clientAddress","realIp","analytics","connection","httpHeaders","host","identify","id","track","API_CALLED","endpoint","getMatchingPathOptions","options","endpoints","path","parts","decodeURI","matchingPathOptions","endpointParts","filter","x","part","slice","match","every","i","setIsAPI","isAPI","setAPIUser","getAPIUser"],"mappings":"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","sourcesContent":["import { DDPCommon } from 'meteor/ddp-common';\nimport { DDP } from 'meteor/ddp-client';\nimport { Meteor } from 'meteor/meteor';\nimport { Match } from 'meteor/check';\nimport { Random } from 'meteor/random';\n\nimport NodeRSA from 'node-rsa';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport Analytics from 'core/api/analytics/server/Analytics';\nimport EVENTS from 'core/api/analytics/events';\nimport UserService from 'core/api/users/server/UserService';\nimport { getClientHost } from 'core/utils/server/getClientUrl';\nimport { storeOnFiber, getFromFiber } from 'core/utils/server/fiberStorage';\nimport { sortObject } from '../../helpers';\nimport { HTTP_STATUS_CODES } from './restApiConstants';\nimport { getImpersonateUserId } from './endpoints/helpers';\n\nexport const AUTH_ITEMS = {\n  RSA_PUBLIC_KEY: 'RSA_PUBLIC_KEY',\n  RSA_SIGNATURE: 'RSA_SIGNATURE',\n};\n\nexport const OBJECT_FORMATS = {\n  DEFAULT: 'DEFAULT',\n  TO_LITERRAL: 'TO_LITERRAL',\n  TO_STRING: 'TO_STRING',\n};\n\nexport const getHeader = (req, name) => req.headers[name];\n\nconst getAuthItem = ({ req, item }) => {\n  const authorization = getHeader(req, 'x-epotek-authorization');\n  if (!authorization) {\n    return undefined;\n  }\n\n  if (!authorization.includes('EPOTEK')) {\n    return undefined;\n  }\n\n  switch (item) {\n  case AUTH_ITEMS.RSA_PUBLIC_KEY: {\n    return authorization.replace('EPOTEK ', '').split(':')[0];\n  }\n  case AUTH_ITEMS.RSA_SIGNATURE: {\n    return authorization.replace('EPOTEK ', '').split(':')[1];\n  }\n  default:\n    return undefined;\n  }\n};\n\nexport const getPublicKey = req =>\n  getAuthItem({ req, item: AUTH_ITEMS.RSA_PUBLIC_KEY });\n\nexport const getSignature = req =>\n  getAuthItem({ req, item: AUTH_ITEMS.RSA_SIGNATURE });\n\nexport const getRequestPath = (req) => {\n  const { _parsedUrl: parsedUrl } = req;\n  return parsedUrl && parsedUrl.pathname;\n};\n\nexport const getRequestMethod = req => req.method;\n\nexport const updateCustomerReferral = ({\n  customer,\n  userId,\n  impersonateUser,\n}) => {\n  if (impersonateUser) {\n    const customerId = UserService.getByEmail(customer.email)._id;\n    const mainOrg = UserService.getUserMainOrganisation(userId);\n    return UserService.setReferredByOrganisation({\n      userId: customerId,\n      organisationId: mainOrg && mainOrg._id,\n    });\n  }\n  return Promise.resolve();\n};\n\nexport const withMeteorUserId = ({ userId, impersonateUser }, func) => {\n  let impersonateUserId;\n  if (impersonateUser) {\n    impersonateUserId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const invocation = new DDPCommon.MethodInvocation({\n    userId: impersonateUserId || userId,\n    // isSimulation: false,\n    // setUserId,\n    // unblock,\n    // connection: self.connectionHandle,\n    // randomSeed,\n  });\n\n  return DDP._CurrentInvocation.withValue(invocation, func);\n};\n\nexport const getErrorObject = (error, res) => {\n  let { statusCode: status } = res;\n  let message;\n  let errorName;\n\n  if (!status || status === 200) {\n    status = HTTP_STATUS_CODES.SERVER_ERROR;\n  }\n\n  if (error instanceof Meteor.Error || error instanceof Match.Error) {\n    message = error.message;\n    status = error.error && typeof error.error === 'number'\n      ? error.error\n      : HTTP_STATUS_CODES.BAD_REQUEST;\n  } else {\n    message = 'Internal server error';\n  }\n\n  if (error && error.status && error.message && error.errorName) {\n    // This is one of our custom errors\n    errorName = error.errorName;\n    status = error.status;\n    message = error.message;\n  }\n\n  return { status, errorName, message };\n};\n\nexport const stringToLiteral = (value) => {\n  const maps = {\n    true: true,\n    false: false,\n    undefined,\n    NaN,\n    Infinity,\n    '-Infinity': -Infinity,\n    null: null,\n  };\n  if (value && !isNaN(value)) {\n    return parseInt(value);\n  }\n\n  return Object.keys(maps).includes(value) ? maps[value] : value;\n};\n\nexport const literalToString = (value) => {\n  switch (value) {\n  case true:\n    return 'true';\n  case false:\n    return 'false';\n  case undefined:\n    return 'undefined';\n  case null:\n    return 'null';\n  case NaN:\n    return 'NaN';\n  case Infinity:\n    return 'Infinity';\n  case -Infinity:\n    return '-Infinity';\n  default:\n    return value.toString();\n  }\n};\n\n// Return array of every object's properties\nconst getObjectPropertiesPath = (obj, stack, res) => {\n  let arr = res;\n  for (const property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (obj[property] && typeof obj[property] === 'object') {\n        if (\n          (Array.isArray(obj[property]) && obj[property].length === 0)\n          || Object.keys(obj[property]).length === 0\n        ) {\n          const str = `${stack}.${property}`.substr(1);\n          arr = [...arr, str];\n        } else {\n          arr = getObjectPropertiesPath(\n            obj[property],\n            `${stack}.${property}`,\n            arr,\n          );\n        }\n      } else {\n        const str = `${stack}.${property}`.substr(1);\n        arr = [...arr, str];\n      }\n    }\n  }\n\n  return arr;\n};\n\nexport const formatObject = (obj, format) => {\n  if (format === OBJECT_FORMATS.DEFAULT) {\n    return obj;\n  }\n\n  const properties = getObjectPropertiesPath(obj, '', []);\n  const formattedObject = {};\n\n  properties.forEach((property) => {\n    const value = get(obj, property);\n    switch (format) {\n    // String to literal\n    case OBJECT_FORMATS.TO_LITERRAL: {\n      set(formattedObject, property, stringToLiteral(value));\n      break;\n    }\n    // Literal to string\n    case OBJECT_FORMATS.TO_STRING: {\n      set(formattedObject, property, literalToString(value));\n      break;\n    }\n    default:\n      break;\n    }\n  });\n\n  return formattedObject;\n};\n\nexport const formatParams = params =>\n  Object.keys(params).reduce(\n    (object, key) => ({\n      ...object,\n      [key]: stringToLiteral(params[key]),\n    }),\n    {},\n  );\n\nexport const logRequest = ({ req, result }) => {\n  const {\n    user: { _id, emails } = {},\n    body = {},\n    params = {},\n    query = {},\n    headers = {},\n    verifiedFormat,\n  } = req;\n\n  if (Meteor.isTest) {\n    return;\n  }\n\n  console.log('----- API CALL -----');\n  console.log('USER:', JSON.stringify({ _id, emails }, null, 2));\n  console.log('URL:', getRequestPath(req));\n  console.log('HEADERS:', JSON.stringify(headers, null, 2));\n  console.log('BODY:', JSON.stringify(body, null, 2));\n  console.log('PARAMS:', JSON.stringify(params, null, 2));\n  console.log('QUERY:', JSON.stringify(query, null, 2));\n  console.log('VERIFIED FORMAT:', verifiedFormat);\n  console.log('RESULT:', result);\n  console.log('-----------------');\n};\n\nexport const verifySignature = (req) => {\n  const { publicKey, signature, body, query, isMultipart } = req;\n  const timestamp = getHeader(req, 'x-epotek-timestamp');\n  const nonce = getHeader(req, 'x-epotek-nonce');\n\n  const method = getRequestMethod(req);\n\n  // Import public key\n  const key = new NodeRSA();\n  key.importKey(publicKey, 'pkcs1-public-pem');\n\n  let objectToVerify = { security: sortObject({ timestamp, nonce }) };\n\n  if (Object.keys(query).length > 0) {\n    objectToVerify = {\n      ...objectToVerify,\n      queryParams: sortObject(query),\n    };\n  }\n\n  if (!['GET', 'HEAD'].includes(method) && Object.keys(body).length > 0) {\n    objectToVerify = { ...objectToVerify, body: sortObject(body) };\n  }\n\n  if (isMultipart) {\n    const { files: { file = {} } = {} } = req;\n    const { originalFilename, size, type } = file;\n    objectToVerify = {\n      ...objectToVerify,\n      file: sortObject({ name: originalFilename, size, type }),\n    };\n  }\n\n  const verified = Object.keys(OBJECT_FORMATS).some((format) => {\n    const isValid = key.verify(\n      JSON.stringify(formatObject(objectToVerify, format)),\n      signature,\n      'utf8',\n      'base64',\n    );\n\n    if (isValid) {\n      req.verifiedFormat = format;\n    }\n    return isValid;\n  });\n\n  return {\n    verified,\n    toVerify: {\n      object: objectToVerify,\n      acceptedStringifiedVersions: Object.keys(OBJECT_FORMATS).map(format =>\n        JSON.stringify(formatObject(objectToVerify, format))),\n    },\n  };\n};\n\nexport const trackRequest = ({ req, result }) => {\n  const { user: { _id: userId } = {}, headers = {} } = req;\n  const {\n    'x-forwarded-for': clientAddress,\n    'x-real-ip': realIp,\n  } = headers;\n\n  const analytics = new Analytics({\n    userId,\n    connection: {\n      clientAddress,\n      httpHeaders: { 'x-real-ip': realIp, host: getClientHost() },\n    },\n  });\n\n  if (userId) {\n    analytics.identify(Random.id(16));\n  }\n\n  analytics.track(EVENTS.API_CALLED, { endpoint: getRequestPath(req), result });\n};\n\nexport const getMatchingPathOptions = (req, options) => {\n  const endpoints = Object.keys(options);\n  const path = getRequestPath(req);\n  const method = getRequestMethod(req);\n  const parts = decodeURI(path)\n    .split('?', 1)[0]\n    .replace(/^[\\s\\/]+|[\\s\\/]+$/g, '')\n    .split('/');\n\n  let matchingPathOptions = {};\n\n  endpoints.forEach((endpoint) => {\n    const endpointParts = endpoint\n      .split('/')\n      .filter(x => x)\n      .map(part => (part.slice(0, 1) === ':' ? '*' : part));\n    const match = endpointParts.length === parts.length\n      && endpointParts.every((part, i) => {\n        if (part === '*') {\n          return true;\n        }\n        return part === parts[i];\n      })\n      && !!options[endpoint][method];\n\n    if (match) {\n      matchingPathOptions = options[endpoint][method].options;\n    }\n  });\n\n  return matchingPathOptions;\n};\n\nexport const setIsAPI = () => {\n  storeOnFiber('isAPI', true);\n};\n\n// Can be used to determine if server-side code is being run from an API call\nexport const isAPI = () => !!getFromFiber('isAPI');\n\nexport const setAPIUser = (user) => {\n  storeOnFiber('APIUser', user);\n};\n\nexport const getAPIUser = () => getFromFiber('APIUser');\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/helpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/helpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  AUTH_ITEMS: () => AUTH_ITEMS,\n  OBJECT_FORMATS: () => OBJECT_FORMATS,\n  getHeader: () => getHeader,\n  getPublicKey: () => getPublicKey,\n  getSignature: () => getSignature,\n  getRequestPath: () => getRequestPath,\n  getRequestMethod: () => getRequestMethod,\n  updateCustomerReferral: () => updateCustomerReferral,\n  withMeteorUserId: () => withMeteorUserId,\n  getErrorObject: () => getErrorObject,\n  stringToLiteral: () => stringToLiteral,\n  literalToString: () => literalToString,\n  formatObject: () => formatObject,\n  formatParams: () => formatParams,\n  logRequest: () => logRequest,\n  verifySignature: () => verifySignature,\n  trackRequest: () => trackRequest,\n  getMatchingPathOptions: () => getMatchingPathOptions,\n  setIsAPI: () => setIsAPI,\n  isAPI: () => isAPI,\n  setAPIUser: () => setAPIUser,\n  getAPIUser: () => getAPIUser\n});\nlet DDPCommon;\nmodule.link(\"meteor/ddp-common\", {\n  DDPCommon(v) {\n    DDPCommon = v;\n  }\n\n}, 0);\nlet DDP;\nmodule.link(\"meteor/ddp-client\", {\n  DDP(v) {\n    DDP = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 3);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 4);\nlet NodeRSA;\nmodule.link(\"node-rsa\", {\n  default(v) {\n    NodeRSA = v;\n  }\n\n}, 5);\nlet get;\nmodule.link(\"lodash/get\", {\n  default(v) {\n    get = v;\n  }\n\n}, 6);\nlet set;\nmodule.link(\"lodash/set\", {\n  default(v) {\n    set = v;\n  }\n\n}, 7);\nlet Analytics;\nmodule.link(\"../../analytics/server/Analytics\", {\n  default(v) {\n    Analytics = v;\n  }\n\n}, 8);\nlet EVENTS;\nmodule.link(\"../../analytics/events\", {\n  default(v) {\n    EVENTS = v;\n  }\n\n}, 9);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 10);\nlet getClientHost;\nmodule.link(\"../../../utils/server/getClientUrl\", {\n  getClientHost(v) {\n    getClientHost = v;\n  }\n\n}, 11);\nlet storeOnFiber, getFromFiber;\nmodule.link(\"../../../utils/server/fiberStorage\", {\n  storeOnFiber(v) {\n    storeOnFiber = v;\n  },\n\n  getFromFiber(v) {\n    getFromFiber = v;\n  }\n\n}, 12);\nlet sortObject;\nmodule.link(\"../../helpers\", {\n  sortObject(v) {\n    sortObject = v;\n  }\n\n}, 13);\nlet HTTP_STATUS_CODES;\nmodule.link(\"./restApiConstants\", {\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 14);\nlet getImpersonateUserId;\nmodule.link(\"./endpoints/helpers\", {\n  getImpersonateUserId(v) {\n    getImpersonateUserId = v;\n  }\n\n}, 15);\nconst AUTH_ITEMS = {\n  RSA_PUBLIC_KEY: 'RSA_PUBLIC_KEY',\n  RSA_SIGNATURE: 'RSA_SIGNATURE'\n};\nconst OBJECT_FORMATS = {\n  DEFAULT: 'DEFAULT',\n  TO_LITERRAL: 'TO_LITERRAL',\n  TO_STRING: 'TO_STRING'\n};\n\nconst getHeader = (req, name) => req.headers[name];\n\nconst getAuthItem = ({\n  req,\n  item\n}) => {\n  const authorization = getHeader(req, 'x-epotek-authorization');\n\n  if (!authorization) {\n    return undefined;\n  }\n\n  if (!authorization.includes('EPOTEK')) {\n    return undefined;\n  }\n\n  switch (item) {\n    case AUTH_ITEMS.RSA_PUBLIC_KEY:\n      {\n        return authorization.replace('EPOTEK ', '').split(':')[0];\n      }\n\n    case AUTH_ITEMS.RSA_SIGNATURE:\n      {\n        return authorization.replace('EPOTEK ', '').split(':')[1];\n      }\n\n    default:\n      return undefined;\n  }\n};\n\nconst getPublicKey = req => getAuthItem({\n  req,\n  item: AUTH_ITEMS.RSA_PUBLIC_KEY\n});\n\nconst getSignature = req => getAuthItem({\n  req,\n  item: AUTH_ITEMS.RSA_SIGNATURE\n});\n\nconst getRequestPath = req => {\n  const {\n    _parsedUrl: parsedUrl\n  } = req;\n  return parsedUrl && parsedUrl.pathname;\n};\n\nconst getRequestMethod = req => req.method;\n\nconst updateCustomerReferral = ({\n  customer,\n  userId,\n  impersonateUser\n}) => {\n  if (impersonateUser) {\n    const customerId = UserService.getByEmail(customer.email)._id;\n\n    const mainOrg = UserService.getUserMainOrganisation(userId);\n    return UserService.setReferredByOrganisation({\n      userId: customerId,\n      organisationId: mainOrg && mainOrg._id\n    });\n  }\n\n  return Promise.resolve();\n};\n\nconst withMeteorUserId = ({\n  userId,\n  impersonateUser\n}, func) => {\n  let impersonateUserId;\n\n  if (impersonateUser) {\n    impersonateUserId = getImpersonateUserId({\n      userId,\n      impersonateUser\n    });\n  }\n\n  const invocation = new DDPCommon.MethodInvocation({\n    userId: impersonateUserId || userId // isSimulation: false,\n    // setUserId,\n    // unblock,\n    // connection: self.connectionHandle,\n    // randomSeed,\n\n  });\n  return DDP._CurrentInvocation.withValue(invocation, func);\n};\n\nconst getErrorObject = (error, res) => {\n  let {\n    statusCode: status\n  } = res;\n  let message;\n  let errorName;\n\n  if (!status || status === 200) {\n    status = HTTP_STATUS_CODES.SERVER_ERROR;\n  }\n\n  if (error instanceof Meteor.Error || error instanceof Match.Error) {\n    message = error.message;\n    status = error.error && typeof error.error === 'number' ? error.error : HTTP_STATUS_CODES.BAD_REQUEST;\n  } else {\n    message = 'Internal server error';\n  }\n\n  if (error && error.status && error.message && error.errorName) {\n    // This is one of our custom errors\n    errorName = error.errorName;\n    status = error.status;\n    message = error.message;\n  }\n\n  return {\n    status,\n    errorName,\n    message\n  };\n};\n\nconst stringToLiteral = value => {\n  const maps = {\n    true: true,\n    false: false,\n    undefined,\n    NaN,\n    Infinity,\n    '-Infinity': -Infinity,\n    null: null\n  };\n\n  if (value && !isNaN(value)) {\n    return parseInt(value);\n  }\n\n  return Object.keys(maps).includes(value) ? maps[value] : value;\n};\n\nconst literalToString = value => {\n  switch (value) {\n    case true:\n      return 'true';\n\n    case false:\n      return 'false';\n\n    case undefined:\n      return 'undefined';\n\n    case null:\n      return 'null';\n\n    case NaN:\n      return 'NaN';\n\n    case Infinity:\n      return 'Infinity';\n\n    case -Infinity:\n      return '-Infinity';\n\n    default:\n      return value.toString();\n  }\n};\n\n// Return array of every object's properties\nconst getObjectPropertiesPath = (obj, stack, res) => {\n  let arr = res;\n\n  for (const property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (obj[property] && typeof obj[property] === 'object') {\n        if (Array.isArray(obj[property]) && obj[property].length === 0 || Object.keys(obj[property]).length === 0) {\n          const str = `${stack}.${property}`.substr(1);\n          arr = [...arr, str];\n        } else {\n          arr = getObjectPropertiesPath(obj[property], `${stack}.${property}`, arr);\n        }\n      } else {\n        const str = `${stack}.${property}`.substr(1);\n        arr = [...arr, str];\n      }\n    }\n  }\n\n  return arr;\n};\n\nconst formatObject = (obj, format) => {\n  if (format === OBJECT_FORMATS.DEFAULT) {\n    return obj;\n  }\n\n  const properties = getObjectPropertiesPath(obj, '', []);\n  const formattedObject = {};\n  properties.forEach(property => {\n    const value = get(obj, property);\n\n    switch (format) {\n      // String to literal\n      case OBJECT_FORMATS.TO_LITERRAL:\n        {\n          set(formattedObject, property, stringToLiteral(value));\n          break;\n        }\n      // Literal to string\n\n      case OBJECT_FORMATS.TO_STRING:\n        {\n          set(formattedObject, property, literalToString(value));\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n  return formattedObject;\n};\n\nconst formatParams = params => Object.keys(params).reduce((object, key) => (0, _objectSpread2.default)({}, object, {\n  [key]: stringToLiteral(params[key])\n}), {});\n\nconst logRequest = ({\n  req,\n  result\n}) => {\n  const {\n    user: {\n      _id,\n      emails\n    } = {},\n    body = {},\n    params = {},\n    query = {},\n    headers = {},\n    verifiedFormat\n  } = req;\n\n  if (Meteor.isTest) {\n    return;\n  }\n\n  console.log('----- API CALL -----');\n  console.log('USER:', JSON.stringify({\n    _id,\n    emails\n  }, null, 2));\n  console.log('URL:', getRequestPath(req));\n  console.log('HEADERS:', JSON.stringify(headers, null, 2));\n  console.log('BODY:', JSON.stringify(body, null, 2));\n  console.log('PARAMS:', JSON.stringify(params, null, 2));\n  console.log('QUERY:', JSON.stringify(query, null, 2));\n  console.log('VERIFIED FORMAT:', verifiedFormat);\n  console.log('RESULT:', result);\n  console.log('-----------------');\n};\n\nconst verifySignature = req => {\n  const {\n    publicKey,\n    signature,\n    body,\n    query,\n    isMultipart\n  } = req;\n  const timestamp = getHeader(req, 'x-epotek-timestamp');\n  const nonce = getHeader(req, 'x-epotek-nonce');\n  const method = getRequestMethod(req); // Import public key\n\n  const key = new NodeRSA();\n  key.importKey(publicKey, 'pkcs1-public-pem');\n  let objectToVerify = {\n    security: sortObject({\n      timestamp,\n      nonce\n    })\n  };\n\n  if (Object.keys(query).length > 0) {\n    objectToVerify = (0, _objectSpread2.default)({}, objectToVerify, {\n      queryParams: sortObject(query)\n    });\n  }\n\n  if (!['GET', 'HEAD'].includes(method) && Object.keys(body).length > 0) {\n    objectToVerify = (0, _objectSpread2.default)({}, objectToVerify, {\n      body: sortObject(body)\n    });\n  }\n\n  if (isMultipart) {\n    const {\n      files: {\n        file = {}\n      } = {}\n    } = req;\n    const {\n      originalFilename,\n      size,\n      type\n    } = file;\n    objectToVerify = (0, _objectSpread2.default)({}, objectToVerify, {\n      file: sortObject({\n        name: originalFilename,\n        size,\n        type\n      })\n    });\n  }\n\n  const verified = Object.keys(OBJECT_FORMATS).some(format => {\n    const isValid = key.verify(JSON.stringify(formatObject(objectToVerify, format)), signature, 'utf8', 'base64');\n\n    if (isValid) {\n      req.verifiedFormat = format;\n    }\n\n    return isValid;\n  });\n  return {\n    verified,\n    toVerify: {\n      object: objectToVerify,\n      acceptedStringifiedVersions: Object.keys(OBJECT_FORMATS).map(format => JSON.stringify(formatObject(objectToVerify, format)))\n    }\n  };\n};\n\nconst trackRequest = ({\n  req,\n  result\n}) => {\n  const {\n    user: {\n      _id: userId\n    } = {},\n    headers = {}\n  } = req;\n  const {\n    'x-forwarded-for': clientAddress,\n    'x-real-ip': realIp\n  } = headers;\n  const analytics = new Analytics({\n    userId,\n    connection: {\n      clientAddress,\n      httpHeaders: {\n        'x-real-ip': realIp,\n        host: getClientHost()\n      }\n    }\n  });\n\n  if (userId) {\n    analytics.identify(Random.id(16));\n  }\n\n  analytics.track(EVENTS.API_CALLED, {\n    endpoint: getRequestPath(req),\n    result\n  });\n};\n\nconst getMatchingPathOptions = (req, options) => {\n  const endpoints = Object.keys(options);\n  const path = getRequestPath(req);\n  const method = getRequestMethod(req);\n  const parts = decodeURI(path).split('?', 1)[0].replace(/^[\\s\\/]+|[\\s\\/]+$/g, '').split('/');\n  let matchingPathOptions = {};\n  endpoints.forEach(endpoint => {\n    const endpointParts = endpoint.split('/').filter(x => x).map(part => part.slice(0, 1) === ':' ? '*' : part);\n    const match = endpointParts.length === parts.length && endpointParts.every((part, i) => {\n      if (part === '*') {\n        return true;\n      }\n\n      return part === parts[i];\n    }) && !!options[endpoint][method];\n\n    if (match) {\n      matchingPathOptions = options[endpoint][method].options;\n    }\n  });\n  return matchingPathOptions;\n};\n\nconst setIsAPI = () => {\n  storeOnFiber('isAPI', true);\n};\n\nconst isAPI = () => !!getFromFiber('isAPI');\n\nconst setAPIUser = user => {\n  storeOnFiber('APIUser', user);\n};\n\nconst getAPIUser = () => getFromFiber('APIUser');","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/helpers.js"],"names":["DDPCommon","AUTH_ITEMS","RSA_PUBLIC_KEY","RSA_SIGNATURE","OBJECT_FORMATS","DEFAULT","TO_LITERRAL","TO_STRING","getHeader","req","getAuthItem","item","authorization","getPublicKey","getSignature","getRequestPath","_parsedUrl","parsedUrl","getRequestMethod","updateCustomerReferral","impersonateUser","customerId","UserService","customer","mainOrg","userId","organisationId","_id","Promise","withMeteorUserId","impersonateUserId","getImpersonateUserId","invocation","DDP","getErrorObject","statusCode","status","HTTP_STATUS_CODES","error","Meteor","Match","message","errorName","stringToLiteral","value","maps","true","false","null","isNaN","parseInt","Object","literalToString","getObjectPropertiesPath","arr","obj","Array","str","stack","property","formatObject","format","properties","formattedObject","get","set","formatParams","params","logRequest","result","user","emails","body","query","headers","verifiedFormat","console","JSON","verifySignature","isMultipart","timestamp","nonce","method","key","objectToVerify","security","sortObject","queryParams","files","file","type","name","verified","isValid","toVerify","object","acceptedStringifiedVersions","trackRequest","realIp","analytics","connection","httpHeaders","host","getClientHost","Random","EVENTS","endpoint","getMatchingPathOptions","endpoints","path","parts","decodeURI","matchingPathOptions","endpointParts","x","part","match","options","setIsAPI","storeOnFiber","isAPI","getFromFiber","setAPIUser","getAPIUser"],"mappings":"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","sourcesContent":["import { DDPCommon } from 'meteor/ddp-common';\nimport { DDP } from 'meteor/ddp-client';\nimport { Meteor } from 'meteor/meteor';\nimport { Match } from 'meteor/check';\nimport { Random } from 'meteor/random';\n\nimport NodeRSA from 'node-rsa';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport Analytics from 'core/api/analytics/server/Analytics';\nimport EVENTS from 'core/api/analytics/events';\nimport UserService from 'core/api/users/server/UserService';\nimport { getClientHost } from 'core/utils/server/getClientUrl';\nimport { storeOnFiber, getFromFiber } from 'core/utils/server/fiberStorage';\nimport { sortObject } from '../../helpers';\nimport { HTTP_STATUS_CODES } from './restApiConstants';\nimport { getImpersonateUserId } from './endpoints/helpers';\n\nexport const AUTH_ITEMS = {\n  RSA_PUBLIC_KEY: 'RSA_PUBLIC_KEY',\n  RSA_SIGNATURE: 'RSA_SIGNATURE',\n};\n\nexport const OBJECT_FORMATS = {\n  DEFAULT: 'DEFAULT',\n  TO_LITERRAL: 'TO_LITERRAL',\n  TO_STRING: 'TO_STRING',\n};\n\nexport const getHeader = (req, name) => req.headers[name];\n\nconst getAuthItem = ({ req, item }) => {\n  const authorization = getHeader(req, 'x-epotek-authorization');\n  if (!authorization) {\n    return undefined;\n  }\n\n  if (!authorization.includes('EPOTEK')) {\n    return undefined;\n  }\n\n  switch (item) {\n  case AUTH_ITEMS.RSA_PUBLIC_KEY: {\n    return authorization.replace('EPOTEK ', '').split(':')[0];\n  }\n  case AUTH_ITEMS.RSA_SIGNATURE: {\n    return authorization.replace('EPOTEK ', '').split(':')[1];\n  }\n  default:\n    return undefined;\n  }\n};\n\nexport const getPublicKey = req =>\n  getAuthItem({ req, item: AUTH_ITEMS.RSA_PUBLIC_KEY });\n\nexport const getSignature = req =>\n  getAuthItem({ req, item: AUTH_ITEMS.RSA_SIGNATURE });\n\nexport const getRequestPath = (req) => {\n  const { _parsedUrl: parsedUrl } = req;\n  return parsedUrl && parsedUrl.pathname;\n};\n\nexport const getRequestMethod = req => req.method;\n\nexport const updateCustomerReferral = ({\n  customer,\n  userId,\n  impersonateUser,\n}) => {\n  if (impersonateUser) {\n    const customerId = UserService.getByEmail(customer.email)._id;\n    const mainOrg = UserService.getUserMainOrganisation(userId);\n    return UserService.setReferredByOrganisation({\n      userId: customerId,\n      organisationId: mainOrg && mainOrg._id,\n    });\n  }\n  return Promise.resolve();\n};\n\nexport const withMeteorUserId = ({ userId, impersonateUser }, func) => {\n  let impersonateUserId;\n  if (impersonateUser) {\n    impersonateUserId = getImpersonateUserId({ userId, impersonateUser });\n  }\n\n  const invocation = new DDPCommon.MethodInvocation({\n    userId: impersonateUserId || userId,\n    // isSimulation: false,\n    // setUserId,\n    // unblock,\n    // connection: self.connectionHandle,\n    // randomSeed,\n  });\n\n  return DDP._CurrentInvocation.withValue(invocation, func);\n};\n\nexport const getErrorObject = (error, res) => {\n  let { statusCode: status } = res;\n  let message;\n  let errorName;\n\n  if (!status || status === 200) {\n    status = HTTP_STATUS_CODES.SERVER_ERROR;\n  }\n\n  if (error instanceof Meteor.Error || error instanceof Match.Error) {\n    message = error.message;\n    status = error.error && typeof error.error === 'number'\n      ? error.error\n      : HTTP_STATUS_CODES.BAD_REQUEST;\n  } else {\n    message = 'Internal server error';\n  }\n\n  if (error && error.status && error.message && error.errorName) {\n    // This is one of our custom errors\n    errorName = error.errorName;\n    status = error.status;\n    message = error.message;\n  }\n\n  return { status, errorName, message };\n};\n\nexport const stringToLiteral = (value) => {\n  const maps = {\n    true: true,\n    false: false,\n    undefined,\n    NaN,\n    Infinity,\n    '-Infinity': -Infinity,\n    null: null,\n  };\n  if (value && !isNaN(value)) {\n    return parseInt(value);\n  }\n\n  return Object.keys(maps).includes(value) ? maps[value] : value;\n};\n\nexport const literalToString = (value) => {\n  switch (value) {\n  case true:\n    return 'true';\n  case false:\n    return 'false';\n  case undefined:\n    return 'undefined';\n  case null:\n    return 'null';\n  case NaN:\n    return 'NaN';\n  case Infinity:\n    return 'Infinity';\n  case -Infinity:\n    return '-Infinity';\n  default:\n    return value.toString();\n  }\n};\n\n// Return array of every object's properties\nconst getObjectPropertiesPath = (obj, stack, res) => {\n  let arr = res;\n  for (const property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (obj[property] && typeof obj[property] === 'object') {\n        if (\n          (Array.isArray(obj[property]) && obj[property].length === 0)\n          || Object.keys(obj[property]).length === 0\n        ) {\n          const str = `${stack}.${property}`.substr(1);\n          arr = [...arr, str];\n        } else {\n          arr = getObjectPropertiesPath(\n            obj[property],\n            `${stack}.${property}`,\n            arr,\n          );\n        }\n      } else {\n        const str = `${stack}.${property}`.substr(1);\n        arr = [...arr, str];\n      }\n    }\n  }\n\n  return arr;\n};\n\nexport const formatObject = (obj, format) => {\n  if (format === OBJECT_FORMATS.DEFAULT) {\n    return obj;\n  }\n\n  const properties = getObjectPropertiesPath(obj, '', []);\n  const formattedObject = {};\n\n  properties.forEach((property) => {\n    const value = get(obj, property);\n    switch (format) {\n    // String to literal\n    case OBJECT_FORMATS.TO_LITERRAL: {\n      set(formattedObject, property, stringToLiteral(value));\n      break;\n    }\n    // Literal to string\n    case OBJECT_FORMATS.TO_STRING: {\n      set(formattedObject, property, literalToString(value));\n      break;\n    }\n    default:\n      break;\n    }\n  });\n\n  return formattedObject;\n};\n\nexport const formatParams = params =>\n  Object.keys(params).reduce(\n    (object, key) => ({\n      ...object,\n      [key]: stringToLiteral(params[key]),\n    }),\n    {},\n  );\n\nexport const logRequest = ({ req, result }) => {\n  const {\n    user: { _id, emails } = {},\n    body = {},\n    params = {},\n    query = {},\n    headers = {},\n    verifiedFormat,\n  } = req;\n\n  if (Meteor.isTest) {\n    return;\n  }\n\n  console.log('----- API CALL -----');\n  console.log('USER:', JSON.stringify({ _id, emails }, null, 2));\n  console.log('URL:', getRequestPath(req));\n  console.log('HEADERS:', JSON.stringify(headers, null, 2));\n  console.log('BODY:', JSON.stringify(body, null, 2));\n  console.log('PARAMS:', JSON.stringify(params, null, 2));\n  console.log('QUERY:', JSON.stringify(query, null, 2));\n  console.log('VERIFIED FORMAT:', verifiedFormat);\n  console.log('RESULT:', result);\n  console.log('-----------------');\n};\n\nexport const verifySignature = (req) => {\n  const { publicKey, signature, body, query, isMultipart } = req;\n  const timestamp = getHeader(req, 'x-epotek-timestamp');\n  const nonce = getHeader(req, 'x-epotek-nonce');\n\n  const method = getRequestMethod(req);\n\n  // Import public key\n  const key = new NodeRSA();\n  key.importKey(publicKey, 'pkcs1-public-pem');\n\n  let objectToVerify = { security: sortObject({ timestamp, nonce }) };\n\n  if (Object.keys(query).length > 0) {\n    objectToVerify = {\n      ...objectToVerify,\n      queryParams: sortObject(query),\n    };\n  }\n\n  if (!['GET', 'HEAD'].includes(method) && Object.keys(body).length > 0) {\n    objectToVerify = { ...objectToVerify, body: sortObject(body) };\n  }\n\n  if (isMultipart) {\n    const { files: { file = {} } = {} } = req;\n    const { originalFilename, size, type } = file;\n    objectToVerify = {\n      ...objectToVerify,\n      file: sortObject({ name: originalFilename, size, type }),\n    };\n  }\n\n  const verified = Object.keys(OBJECT_FORMATS).some((format) => {\n    const isValid = key.verify(\n      JSON.stringify(formatObject(objectToVerify, format)),\n      signature,\n      'utf8',\n      'base64',\n    );\n\n    if (isValid) {\n      req.verifiedFormat = format;\n    }\n    return isValid;\n  });\n\n  return {\n    verified,\n    toVerify: {\n      object: objectToVerify,\n      acceptedStringifiedVersions: Object.keys(OBJECT_FORMATS).map(format =>\n        JSON.stringify(formatObject(objectToVerify, format))),\n    },\n  };\n};\n\nexport const trackRequest = ({ req, result }) => {\n  const { user: { _id: userId } = {}, headers = {} } = req;\n  const {\n    'x-forwarded-for': clientAddress,\n    'x-real-ip': realIp,\n  } = headers;\n\n  const analytics = new Analytics({\n    userId,\n    connection: {\n      clientAddress,\n      httpHeaders: { 'x-real-ip': realIp, host: getClientHost() },\n    },\n  });\n\n  if (userId) {\n    analytics.identify(Random.id(16));\n  }\n\n  analytics.track(EVENTS.API_CALLED, { endpoint: getRequestPath(req), result });\n};\n\nexport const getMatchingPathOptions = (req, options) => {\n  const endpoints = Object.keys(options);\n  const path = getRequestPath(req);\n  const method = getRequestMethod(req);\n  const parts = decodeURI(path)\n    .split('?', 1)[0]\n    .replace(/^[\\s\\/]+|[\\s\\/]+$/g, '')\n    .split('/');\n\n  let matchingPathOptions = {};\n\n  endpoints.forEach((endpoint) => {\n    const endpointParts = endpoint\n      .split('/')\n      .filter(x => x)\n      .map(part => (part.slice(0, 1) === ':' ? '*' : part));\n    const match = endpointParts.length === parts.length\n      && endpointParts.every((part, i) => {\n        if (part === '*') {\n          return true;\n        }\n        return part === parts[i];\n      })\n      && !!options[endpoint][method];\n\n    if (match) {\n      matchingPathOptions = options[endpoint][method].options;\n    }\n  });\n\n  return matchingPathOptions;\n};\n\nexport const setIsAPI = () => {\n  storeOnFiber('isAPI', true);\n};\n\n// Can be used to determine if server-side code is being run from an API call\nexport const isAPI = () => !!getFromFiber('isAPI');\n\nexport const setAPIUser = (user) => {\n  storeOnFiber('APIUser', user);\n};\n\nexport const getAPIUser = () => getFromFiber('APIUser');\n"]},"sourceType":"script","hash":"2a438902a26d02d6d89f488b96bb194c15be03c7"}

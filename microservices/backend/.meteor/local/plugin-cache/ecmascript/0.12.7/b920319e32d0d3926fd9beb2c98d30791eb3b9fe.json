{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js"],"names":["SimpleSchema","MAX_BORROW_RATIO_PRIMARY_PROPERTY","Calculator","CalculatorClass","zipcodes","address","RESIDENCE_TYPE","INTEREST_RATES","PURCHASE_TYPE","currentInterestRates","checkQuery","LUXURY_VALUE_THRESHOLD","SECOND_OR_LUXURY_AMORTIZATION_GOAL","SECOND_OR_LUXURY_BORROW_RATIO","roundToCents","val","Number","toFixed","getBorrowRatio","residenceType","propertyValue","SECOND_RESIDENCE","querySchema","type","min","optional","defaultValue","String","MAIN_RESIDENCE","allowedValues","Object","values","ACQUISITION","Boolean","zipCode","canton","mortgageEstimateAPI","query","purchaseType","maintenance","includeNotaryFees","schema","date","Date","toISOString","rates","clone","fetch","interestRates","reduce","obj","rateLow","finalCanton","borrowRatio","loanValue","loanObject","createLoanObject","wantedLoan","loanTranches","value","YEARS_10","amortizationGoal","undefined","calc","loan","getInterestsForType","getInterests","interests10","interests15","YEARS_15","interests5","YEARS_5","interestsLibor","LIBOR","amortization","getAmortization","notaryFees","getFees","totalValue","total","monthlyAmortization","monthlyInterests","monthlyMaintenance","monthlyTotals","estimate","ownFunds"],"mappings":"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","sourcesContent":["import SimpleSchema from 'simpl-schema';\n\nimport { MAX_BORROW_RATIO_PRIMARY_PROPERTY } from '../../../../config/financeConstants';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from '../../../../utils/Calculator';\nimport zipcodes from '../../../../utils/zipcodes';\nimport { address } from '../../../helpers/sharedSchemas';\nimport {\n  RESIDENCE_TYPE,\n  INTEREST_RATES,\n  PURCHASE_TYPE,\n} from '../../../constants';\nimport { currentInterestRates } from '../../../interestRates/queries';\nimport { checkQuery } from './helpers';\n\nconst LUXURY_VALUE_THRESHOLD = 2500000;\nconst SECOND_OR_LUXURY_AMORTIZATION_GOAL = 0.5;\nconst SECOND_OR_LUXURY_BORROW_RATIO = 0.67;\n\nconst roundToCents = val => Number(val.toFixed(2));\nconst getBorrowRatio = (residenceType, propertyValue) => {\n  if (residenceType === RESIDENCE_TYPE.SECOND_RESIDENCE) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  if (propertyValue >= LUXURY_VALUE_THRESHOLD) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  return MAX_BORROW_RATIO_PRIMARY_PROPERTY;\n};\n\nconst querySchema = new SimpleSchema({\n  'property-value': { type: Number, min: 50000 },\n  'monthly-maintenance': {\n    type: Number,\n    optional: true,\n    defaultValue: 0,\n    min: 0,\n  },\n  'residence-type': {\n    type: String,\n    optional: true,\n    defaultValue: RESIDENCE_TYPE.MAIN_RESIDENCE,\n    allowedValues: Object.values(RESIDENCE_TYPE),\n  },\n  'purchase-type': {\n    type: String,\n    optional: true,\n    defaultValue: PURCHASE_TYPE.ACQUISITION,\n    allowedValues: Object.values(PURCHASE_TYPE),\n  },\n  'include-notary-fees': {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n  },\n  ...{ 'zip-code': address.zipCode, canton: address.canton },\n});\n\nconst mortgageEstimateAPI = ({ query }) => {\n  const {\n    'property-value': propertyValue,\n    'residence-type': residenceType,\n    'purchase-type': purchaseType,\n    'zip-code': zipCode,\n    'monthly-maintenance': maintenance,\n    'include-notary-fees': includeNotaryFees,\n    canton,\n  } = checkQuery({ query, schema: querySchema });\n\n  const date = new Date().toISOString();\n  const rates = currentInterestRates.clone().fetch();\n  const interestRates = rates.rates.reduce(\n    (obj, { type, rateLow }) => ({ ...obj, [type]: rateLow }),\n    {},\n  );\n  const finalCanton = zipCode ? zipcodes(zipCode) : canton;\n  const borrowRatio = getBorrowRatio(residenceType, propertyValue);\n  const loanValue = roundToCents(propertyValue * borrowRatio);\n  const loanObject = Calculator.createLoanObject({\n    residenceType,\n    wantedLoan: loanValue,\n    propertyValue,\n    canton: finalCanton,\n    currentInterestRates: interestRates,\n    loanTranches: [{ value: 1, type: INTEREST_RATES.YEARS_10 }],\n  });\n  const amortizationGoal = borrowRatio === SECOND_OR_LUXURY_BORROW_RATIO\n    ? SECOND_OR_LUXURY_AMORTIZATION_GOAL\n    : undefined;\n\n  const calc = new CalculatorClass({ loan: loanObject, amortizationGoal });\n  const getInterestsForType = type =>\n    calc.getInterests({\n      loan: Calculator.createLoanObject({\n        residenceType,\n        wantedLoan: loanValue,\n        propertyValue,\n        canton: finalCanton,\n        currentInterestRates: interestRates,\n        loanTranches: [{ value: 1, type }],\n      }),\n    });\n\n  const interests10 = calc.getInterests({ loan: loanObject });\n  const interests15 = getInterestsForType(INTEREST_RATES.YEARS_15);\n  const interests5 = getInterestsForType(INTEREST_RATES.YEARS_5);\n  const interestsLibor = getInterestsForType(INTEREST_RATES.LIBOR);\n  const amortization = roundToCents(calc.getAmortization({ loan: loanObject }));\n  const notaryFees = includeNotaryFees\n    ? calc.getFees({ loan: loanObject })\n    : null;\n  const totalValue = roundToCents(propertyValue + (notaryFees ? notaryFees.total : 0));\n\n  return {\n    borrowRatio,\n    date,\n    loanValue,\n    monthlyAmortization: amortization,\n    monthlyInterests: {\n      interestsLibor,\n      interests5,\n      interests10,\n      interests15,\n    },\n    monthlyMaintenance: maintenance,\n    monthlyTotals: {\n      interestsLibor: amortization + maintenance + interestsLibor,\n      interests5: amortization + maintenance + interests5,\n      interests10: amortization + maintenance + interests10,\n      interests15: amortization + maintenance + interests15,\n    },\n    notaryFees: notaryFees\n      ? {\n        canton: notaryFees.canton,\n        estimate: notaryFees.estimate,\n        total: notaryFees.total,\n      }\n      : undefined,\n    ownFunds: roundToCents(totalValue - loanValue),\n    purchaseType,\n    residenceType,\n    totalValue,\n  };\n};\n\nexport default mortgageEstimateAPI;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet MAX_BORROW_RATIO_PRIMARY_PROPERTY;\nmodule.link(\"../../../../config/financeConstants\", {\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY(v) {\n    MAX_BORROW_RATIO_PRIMARY_PROPERTY = v;\n  }\n\n}, 1);\nlet Calculator, CalculatorClass;\nmodule.link(\"../../../../utils/Calculator\", {\n  default(v) {\n    Calculator = v;\n  },\n\n  Calculator(v) {\n    CalculatorClass = v;\n  }\n\n}, 2);\nlet zipcodes;\nmodule.link(\"../../../../utils/zipcodes\", {\n  default(v) {\n    zipcodes = v;\n  }\n\n}, 3);\nlet address;\nmodule.link(\"../../../helpers/sharedSchemas\", {\n  address(v) {\n    address = v;\n  }\n\n}, 4);\nlet RESIDENCE_TYPE, INTEREST_RATES, PURCHASE_TYPE;\nmodule.link(\"../../../constants\", {\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  },\n\n  INTEREST_RATES(v) {\n    INTEREST_RATES = v;\n  },\n\n  PURCHASE_TYPE(v) {\n    PURCHASE_TYPE = v;\n  }\n\n}, 5);\nlet currentInterestRates;\nmodule.link(\"../../../interestRates/queries\", {\n  currentInterestRates(v) {\n    currentInterestRates = v;\n  }\n\n}, 6);\nlet checkQuery;\nmodule.link(\"./helpers\", {\n  checkQuery(v) {\n    checkQuery = v;\n  }\n\n}, 7);\nconst LUXURY_VALUE_THRESHOLD = 2500000;\nconst SECOND_OR_LUXURY_AMORTIZATION_GOAL = 0.5;\nconst SECOND_OR_LUXURY_BORROW_RATIO = 0.67;\n\nconst roundToCents = val => Number(val.toFixed(2));\n\nconst getBorrowRatio = (residenceType, propertyValue) => {\n  if (residenceType === RESIDENCE_TYPE.SECOND_RESIDENCE) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  if (propertyValue >= LUXURY_VALUE_THRESHOLD) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  return MAX_BORROW_RATIO_PRIMARY_PROPERTY;\n};\n\nconst querySchema = new SimpleSchema((0, _objectSpread2.default)({\n  'property-value': {\n    type: Number,\n    min: 50000\n  },\n  'monthly-maintenance': {\n    type: Number,\n    optional: true,\n    defaultValue: 0,\n    min: 0\n  },\n  'residence-type': {\n    type: String,\n    optional: true,\n    defaultValue: RESIDENCE_TYPE.MAIN_RESIDENCE,\n    allowedValues: Object.values(RESIDENCE_TYPE)\n  },\n  'purchase-type': {\n    type: String,\n    optional: true,\n    defaultValue: PURCHASE_TYPE.ACQUISITION,\n    allowedValues: Object.values(PURCHASE_TYPE)\n  },\n  'include-notary-fees': {\n    type: Boolean,\n    optional: true,\n    defaultValue: true\n  }\n}, {\n  'zip-code': address.zipCode,\n  canton: address.canton\n}));\n\nconst mortgageEstimateAPI = ({\n  query\n}) => {\n  const {\n    'property-value': propertyValue,\n    'residence-type': residenceType,\n    'purchase-type': purchaseType,\n    'zip-code': zipCode,\n    'monthly-maintenance': maintenance,\n    'include-notary-fees': includeNotaryFees,\n    canton\n  } = checkQuery({\n    query,\n    schema: querySchema\n  });\n  const date = new Date().toISOString();\n  const rates = currentInterestRates.clone().fetch();\n  const interestRates = rates.rates.reduce((obj, {\n    type,\n    rateLow\n  }) => (0, _objectSpread2.default)({}, obj, {\n    [type]: rateLow\n  }), {});\n  const finalCanton = zipCode ? zipcodes(zipCode) : canton;\n  const borrowRatio = getBorrowRatio(residenceType, propertyValue);\n  const loanValue = roundToCents(propertyValue * borrowRatio);\n  const loanObject = Calculator.createLoanObject({\n    residenceType,\n    wantedLoan: loanValue,\n    propertyValue,\n    canton: finalCanton,\n    currentInterestRates: interestRates,\n    loanTranches: [{\n      value: 1,\n      type: INTEREST_RATES.YEARS_10\n    }]\n  });\n  const amortizationGoal = borrowRatio === SECOND_OR_LUXURY_BORROW_RATIO ? SECOND_OR_LUXURY_AMORTIZATION_GOAL : undefined;\n  const calc = new CalculatorClass({\n    loan: loanObject,\n    amortizationGoal\n  });\n\n  const getInterestsForType = type => calc.getInterests({\n    loan: Calculator.createLoanObject({\n      residenceType,\n      wantedLoan: loanValue,\n      propertyValue,\n      canton: finalCanton,\n      currentInterestRates: interestRates,\n      loanTranches: [{\n        value: 1,\n        type\n      }]\n    })\n  });\n\n  const interests10 = calc.getInterests({\n    loan: loanObject\n  });\n  const interests15 = getInterestsForType(INTEREST_RATES.YEARS_15);\n  const interests5 = getInterestsForType(INTEREST_RATES.YEARS_5);\n  const interestsLibor = getInterestsForType(INTEREST_RATES.LIBOR);\n  const amortization = roundToCents(calc.getAmortization({\n    loan: loanObject\n  }));\n  const notaryFees = includeNotaryFees ? calc.getFees({\n    loan: loanObject\n  }) : null;\n  const totalValue = roundToCents(propertyValue + (notaryFees ? notaryFees.total : 0));\n  return {\n    borrowRatio,\n    date,\n    loanValue,\n    monthlyAmortization: amortization,\n    monthlyInterests: {\n      interestsLibor,\n      interests5,\n      interests10,\n      interests15\n    },\n    monthlyMaintenance: maintenance,\n    monthlyTotals: {\n      interestsLibor: amortization + maintenance + interestsLibor,\n      interests5: amortization + maintenance + interests5,\n      interests10: amortization + maintenance + interests10,\n      interests15: amortization + maintenance + interests15\n    },\n    notaryFees: notaryFees ? {\n      canton: notaryFees.canton,\n      estimate: notaryFees.estimate,\n      total: notaryFees.total\n    } : undefined,\n    ownFunds: roundToCents(totalValue - loanValue),\n    purchaseType,\n    residenceType,\n    totalValue\n  };\n};\n\nmodule.exportDefault(mortgageEstimateAPI);","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/mortgageEstimate.js"],"names":["SimpleSchema","LUXURY_VALUE_THRESHOLD","SECOND_OR_LUXURY_AMORTIZATION_GOAL","SECOND_OR_LUXURY_BORROW_RATIO","roundToCents","val","Number","getBorrowRatio","residenceType","RESIDENCE_TYPE","propertyValue","querySchema","type","min","optional","defaultValue","allowedValues","Object","PURCHASE_TYPE","address","canton","mortgageEstimateAPI","query","checkQuery","schema","date","rates","currentInterestRates","interestRates","rateLow","finalCanton","zipCode","zipcodes","borrowRatio","loanValue","loanObject","wantedLoan","loanTranches","value","INTEREST_RATES","YEARS_10","amortizationGoal","calc","loan","getInterestsForType","interests10","interests15","interests5","interestsLibor","amortization","notaryFees","includeNotaryFees","totalValue","monthlyAmortization","monthlyInterests","monthlyMaintenance","monthlyTotals","estimate","total","ownFunds"],"mappings":"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","sourcesContent":["import SimpleSchema from 'simpl-schema';\n\nimport { MAX_BORROW_RATIO_PRIMARY_PROPERTY } from '../../../../config/financeConstants';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from '../../../../utils/Calculator';\nimport zipcodes from '../../../../utils/zipcodes';\nimport { address } from '../../../helpers/sharedSchemas';\nimport {\n  RESIDENCE_TYPE,\n  INTEREST_RATES,\n  PURCHASE_TYPE,\n} from '../../../constants';\nimport { currentInterestRates } from '../../../interestRates/queries';\nimport { checkQuery } from './helpers';\n\nconst LUXURY_VALUE_THRESHOLD = 2500000;\nconst SECOND_OR_LUXURY_AMORTIZATION_GOAL = 0.5;\nconst SECOND_OR_LUXURY_BORROW_RATIO = 0.67;\n\nconst roundToCents = val => Number(val.toFixed(2));\nconst getBorrowRatio = (residenceType, propertyValue) => {\n  if (residenceType === RESIDENCE_TYPE.SECOND_RESIDENCE) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  if (propertyValue >= LUXURY_VALUE_THRESHOLD) {\n    return SECOND_OR_LUXURY_BORROW_RATIO;\n  }\n\n  return MAX_BORROW_RATIO_PRIMARY_PROPERTY;\n};\n\nconst querySchema = new SimpleSchema({\n  'property-value': { type: Number, min: 50000 },\n  'monthly-maintenance': {\n    type: Number,\n    optional: true,\n    defaultValue: 0,\n    min: 0,\n  },\n  'residence-type': {\n    type: String,\n    optional: true,\n    defaultValue: RESIDENCE_TYPE.MAIN_RESIDENCE,\n    allowedValues: Object.values(RESIDENCE_TYPE),\n  },\n  'purchase-type': {\n    type: String,\n    optional: true,\n    defaultValue: PURCHASE_TYPE.ACQUISITION,\n    allowedValues: Object.values(PURCHASE_TYPE),\n  },\n  'include-notary-fees': {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n  },\n  ...{ 'zip-code': address.zipCode, canton: address.canton },\n});\n\nconst mortgageEstimateAPI = ({ query }) => {\n  const {\n    'property-value': propertyValue,\n    'residence-type': residenceType,\n    'purchase-type': purchaseType,\n    'zip-code': zipCode,\n    'monthly-maintenance': maintenance,\n    'include-notary-fees': includeNotaryFees,\n    canton,\n  } = checkQuery({ query, schema: querySchema });\n\n  const date = new Date().toISOString();\n  const rates = currentInterestRates.clone().fetch();\n  const interestRates = rates.rates.reduce(\n    (obj, { type, rateLow }) => ({ ...obj, [type]: rateLow }),\n    {},\n  );\n  const finalCanton = zipCode ? zipcodes(zipCode) : canton;\n  const borrowRatio = getBorrowRatio(residenceType, propertyValue);\n  const loanValue = roundToCents(propertyValue * borrowRatio);\n  const loanObject = Calculator.createLoanObject({\n    residenceType,\n    wantedLoan: loanValue,\n    propertyValue,\n    canton: finalCanton,\n    currentInterestRates: interestRates,\n    loanTranches: [{ value: 1, type: INTEREST_RATES.YEARS_10 }],\n  });\n  const amortizationGoal = borrowRatio === SECOND_OR_LUXURY_BORROW_RATIO\n    ? SECOND_OR_LUXURY_AMORTIZATION_GOAL\n    : undefined;\n\n  const calc = new CalculatorClass({ loan: loanObject, amortizationGoal });\n  const getInterestsForType = type =>\n    calc.getInterests({\n      loan: Calculator.createLoanObject({\n        residenceType,\n        wantedLoan: loanValue,\n        propertyValue,\n        canton: finalCanton,\n        currentInterestRates: interestRates,\n        loanTranches: [{ value: 1, type }],\n      }),\n    });\n\n  const interests10 = calc.getInterests({ loan: loanObject });\n  const interests15 = getInterestsForType(INTEREST_RATES.YEARS_15);\n  const interests5 = getInterestsForType(INTEREST_RATES.YEARS_5);\n  const interestsLibor = getInterestsForType(INTEREST_RATES.LIBOR);\n  const amortization = roundToCents(calc.getAmortization({ loan: loanObject }));\n  const notaryFees = includeNotaryFees\n    ? calc.getFees({ loan: loanObject })\n    : null;\n  const totalValue = roundToCents(propertyValue + (notaryFees ? notaryFees.total : 0));\n\n  return {\n    borrowRatio,\n    date,\n    loanValue,\n    monthlyAmortization: amortization,\n    monthlyInterests: {\n      interestsLibor,\n      interests5,\n      interests10,\n      interests15,\n    },\n    monthlyMaintenance: maintenance,\n    monthlyTotals: {\n      interestsLibor: amortization + maintenance + interestsLibor,\n      interests5: amortization + maintenance + interests5,\n      interests10: amortization + maintenance + interests10,\n      interests15: amortization + maintenance + interests15,\n    },\n    notaryFees: notaryFees\n      ? {\n        canton: notaryFees.canton,\n        estimate: notaryFees.estimate,\n        total: notaryFees.total,\n      }\n      : undefined,\n    ownFunds: roundToCents(totalValue - loanValue),\n    purchaseType,\n    residenceType,\n    totalValue,\n  };\n};\n\nexport default mortgageEstimateAPI;\n"]},"sourceType":"script","hash":"b920319e32d0d3926fd9beb2c98d30791eb3b9fe"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/exposures.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/loans/server/exposures.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/exposures.js","inputSourceMap":{"version":3,"sources":["imports/core/api/loans/server/exposures.js"],"names":["Match","Meteor","formatLoanWithDocuments","UserService","createSearchFilters","exposeQuery","SecurityService","adminLoans","anonymousLoan","fullLoan","loanSearch","proLoans","proPromotionLoans","proPropertyLoans","proReferredByLoans","userLoans","LOAN_STATUS","proLoansResolver","getLoanIds","proPromotionLoansResolver","proPropertyLoansResolver","proReferredByLoansResolver","query","overrides","embody","body","params","$filter","filters","_id","assignedEmployeeId","category","hasPromotion","noPromotion","lenderId","name","owned","promotionId","relevantOnly","status","step","userId","$exists","$nin","TEST","UNSUCCESSFUL","anonymous","$ne","$or","lendersCache","$elemMatch","validateParams","Maybe","String","OneOf","Object","Boolean","firewall","loans","checkAnonymousLoan","options","allowFilterById","$postFilter","map","checkUserIsAdmin","searchQuery","assign","providedUserId","fetchOrganisationLoans","organisationId","propertyId","calledByUserId","isUserAdmin","organisations","fetchOne","$filters","length","Error","checkUserIsPro","cacher","getDataToHash","withReferredBy","ttl","resolver","promotions","isAllowedToView","properties","loanId","embodyParams","maxPropertyValue"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { formatLoanWithDocuments } from '../../../utils/loanFunctions';\nimport UserService from '../../users/server/UserService';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\n\nimport {\n  adminLoans,\n  anonymousLoan,\n  fullLoan,\n  loanSearch,\n  proLoans,\n  proPromotionLoans,\n  proPropertyLoans,\n  proReferredByLoans,\n  userLoans,\n} from '../queries';\nimport { LOAN_STATUS } from '../loanConstants';\nimport {\n  proLoansResolver,\n  getLoanIds,\n  proPromotionLoansResolver,\n  proPropertyLoansResolver,\n  proReferredByLoansResolver,\n} from './resolvers';\n\nexposeQuery({\n  query: adminLoans,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: {\n          _id,\n          assignedEmployeeId,\n          category,\n          hasPromotion,\n          noPromotion,\n          lenderId,\n          name,\n          owned,\n          promotionId,\n          relevantOnly,\n          status,\n          step,\n        },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (name) {\n          filters.name = name;\n        }\n\n        if (owned) {\n          filters.userId = { $exists: true };\n        }\n\n        if (assignedEmployeeId) {\n          filters['userCache.assignedEmployeeCache._id'] = assignedEmployeeId;\n        }\n\n        if (relevantOnly) {\n          filters.status = {\n            $nin: [LOAN_STATUS.TEST, LOAN_STATUS.UNSUCCESSFUL],\n          };\n          filters.anonymous = { $ne: true };\n        }\n\n        if (step) {\n          filters.step = step;\n        }\n\n        if (category) {\n          filters.category = category;\n        }\n\n        if (status) {\n          filters.status = status;\n        }\n\n        if (hasPromotion) {\n          filters.$or = [\n            { 'promotionLinks.0._id': { $exists: true } },\n            { 'financedPromotionLink._id': { $exists: true } },\n          ];\n        }\n\n        if (promotionId) {\n          filters.$or = [\n            { 'promotionLinks.0._id': promotionId },\n            { 'financedPromotionLink._id': promotionId },\n          ];\n        }\n\n        if (noPromotion) {\n          filters['promotionLinks.0._id'] = { $exists: false };\n        }\n\n        if (lenderId) {\n          filters.lendersCache = {\n            $elemMatch: { 'organisationLink._id': lenderId },\n          };\n        }\n      };\n    },\n    validateParams: {\n      _id: Match.Maybe(String),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String)),\n      category: Match.Maybe(Match.OneOf(Object, String)),\n      hasPromotion: Match.Maybe(Boolean),\n      lenderId: Match.Maybe(Match.OneOf(Object, String)),\n      name: Match.Maybe(String),\n      noPromotion: Match.Maybe(Boolean),\n      owned: Match.Maybe(Boolean),\n      promotionId: Match.Maybe(Match.OneOf(Object, String)),\n      relevantOnly: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(Object, String)),\n      step: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n});\n\nexposeQuery({\n  query: anonymousLoan,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.loans.checkAnonymousLoan(params._id);\n    },\n    validateParams: { _id: String },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: fullLoan,\n  overrides: {\n    embody: (body) => {\n      body.$postFilter = (loans = []) => loans.map(formatLoanWithDocuments);\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: loanSearch,\n  overrides: {\n    firewall(userId) {\n      SecurityService.checkUserIsAdmin(userId);\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['name', '_id', 'customName'], searchQuery),\n        );\n      };\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proLoans,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        fetchOrganisationLoans,\n        organisationId,\n        promotionId,\n        propertyId,\n      } = params;\n      params.calledByUserId = userId;\n\n      if (providedUserId && SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n\n      if (fetchOrganisationLoans) {\n        if (organisationId) {\n          SecurityService.checkUserIsAdmin(userId);\n        } else {\n          const { organisations } = UserService.fetchOne({\n            $filters: { _id: userId },\n            organisations: { _id: 1 },\n          });\n\n          if (!organisations || organisations.length === 0) {\n            throw new Meteor.Error(\"Pas d'organisation!\");\n          }\n\n          params.organisationId = organisations[0]._id;\n        }\n      }\n\n      SecurityService.checkUserIsPro(userId);\n    },\n    validateParams: {\n      promotionId: Match.Maybe(Match.OneOf(String, Object)),\n      propertyId: Match.Maybe(Match.OneOf(String, Object)),\n      userId: String,\n      calledByUserId: String,\n      organisationId: Match.Maybe(String),\n      fetchOrganisationLoans: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(String, Object)),\n    },\n  },\n  cacher: {\n    getDataToHash: getLoanIds({ withReferredBy: true }),\n    ttl: 60 * 1000,\n  },\n  resolver: proLoansResolver,\n});\n\nexposeQuery({\n  query: proPromotionLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { promotionId } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.promotions.isAllowedToView({ userId, promotionId });\n    },\n    validateParams: {\n      promotionId: String,\n      userId: String,\n    },\n  },\n  resolver: ({ userId, promotionId }) =>\n    proPromotionLoansResolver({ calledByUserId: userId, promotionId }),\n});\n\nexposeQuery({\n  query: proPropertyLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { propertyId } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.properties.isAllowedToView({ propertyId, userId });\n    },\n    validateParams: {\n      propertyId: String,\n      userId: String,\n    },\n  },\n  resolver: ({ userId, propertyId }) =>\n    proPropertyLoansResolver({ calledByUserId: userId, propertyId }),\n});\n\nexposeQuery({\n  query: proReferredByLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { userId: providedUserId } = params;\n      SecurityService.checkUserIsPro(userId);\n      if (SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n      params.calledByUserId = userId;\n    },\n    validateParams: {\n      userId: String,\n      calledByUserId: String,\n    },\n  },\n  resolver: proReferredByLoansResolver,\n});\n\nexposeQuery({\n  query: userLoans,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        SecurityService.checkUserIsAdmin(userId);\n      } else {\n        params.userId = userId;\n\n        if (!userId) {\n          SecurityService.loans.checkAnonymousLoan(params.loanId);\n        }\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        filters.userId = params.userId;\n        if (params.loanId) {\n          filters._id = params.loanId;\n        }\n      };\n\n      if (!embodyParams.userId) {\n        body.maxPropertyValue = 0;\n      }\n    },\n    validateParams: {\n      loanId: Match.Maybe(String),\n      userId: Match.Maybe(String),\n    },\n  },\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/exposures.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/loans/server/exposures.js"}},"code":"let Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet formatLoanWithDocuments;\nmodule.link(\"../../../utils/loanFunctions\", {\n  formatLoanWithDocuments(v) {\n    formatLoanWithDocuments = v;\n  }\n\n}, 2);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 3);\nlet createSearchFilters;\nmodule.link(\"../../helpers/mongoHelpers\", {\n  createSearchFilters(v) {\n    createSearchFilters = v;\n  }\n\n}, 4);\nlet exposeQuery;\nmodule.link(\"../../queries/queryHelpers\", {\n  exposeQuery(v) {\n    exposeQuery = v;\n  }\n\n}, 5);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 6);\nlet adminLoans, anonymousLoan, fullLoan, loanSearch, proLoans, proPromotionLoans, proPropertyLoans, proReferredByLoans, userLoans;\nmodule.link(\"../queries\", {\n  adminLoans(v) {\n    adminLoans = v;\n  },\n\n  anonymousLoan(v) {\n    anonymousLoan = v;\n  },\n\n  fullLoan(v) {\n    fullLoan = v;\n  },\n\n  loanSearch(v) {\n    loanSearch = v;\n  },\n\n  proLoans(v) {\n    proLoans = v;\n  },\n\n  proPromotionLoans(v) {\n    proPromotionLoans = v;\n  },\n\n  proPropertyLoans(v) {\n    proPropertyLoans = v;\n  },\n\n  proReferredByLoans(v) {\n    proReferredByLoans = v;\n  },\n\n  userLoans(v) {\n    userLoans = v;\n  }\n\n}, 7);\nlet LOAN_STATUS;\nmodule.link(\"../loanConstants\", {\n  LOAN_STATUS(v) {\n    LOAN_STATUS = v;\n  }\n\n}, 8);\nlet proLoansResolver, getLoanIds, proPromotionLoansResolver, proPropertyLoansResolver, proReferredByLoansResolver;\nmodule.link(\"./resolvers\", {\n  proLoansResolver(v) {\n    proLoansResolver = v;\n  },\n\n  getLoanIds(v) {\n    getLoanIds = v;\n  },\n\n  proPromotionLoansResolver(v) {\n    proPromotionLoansResolver = v;\n  },\n\n  proPropertyLoansResolver(v) {\n    proPropertyLoansResolver = v;\n  },\n\n  proReferredByLoansResolver(v) {\n    proReferredByLoansResolver = v;\n  }\n\n}, 9);\nexposeQuery({\n  query: adminLoans,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: {\n          _id,\n          assignedEmployeeId,\n          category,\n          hasPromotion,\n          noPromotion,\n          lenderId,\n          name,\n          owned,\n          promotionId,\n          relevantOnly,\n          status,\n          step\n        }\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (name) {\n          filters.name = name;\n        }\n\n        if (owned) {\n          filters.userId = {\n            $exists: true\n          };\n        }\n\n        if (assignedEmployeeId) {\n          filters['userCache.assignedEmployeeCache._id'] = assignedEmployeeId;\n        }\n\n        if (relevantOnly) {\n          filters.status = {\n            $nin: [LOAN_STATUS.TEST, LOAN_STATUS.UNSUCCESSFUL]\n          };\n          filters.anonymous = {\n            $ne: true\n          };\n        }\n\n        if (step) {\n          filters.step = step;\n        }\n\n        if (category) {\n          filters.category = category;\n        }\n\n        if (status) {\n          filters.status = status;\n        }\n\n        if (hasPromotion) {\n          filters.$or = [{\n            'promotionLinks.0._id': {\n              $exists: true\n            }\n          }, {\n            'financedPromotionLink._id': {\n              $exists: true\n            }\n          }];\n        }\n\n        if (promotionId) {\n          filters.$or = [{\n            'promotionLinks.0._id': promotionId\n          }, {\n            'financedPromotionLink._id': promotionId\n          }];\n        }\n\n        if (noPromotion) {\n          filters['promotionLinks.0._id'] = {\n            $exists: false\n          };\n        }\n\n        if (lenderId) {\n          filters.lendersCache = {\n            $elemMatch: {\n              'organisationLink._id': lenderId\n            }\n          };\n        }\n      };\n    },\n    validateParams: {\n      _id: Match.Maybe(String),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String)),\n      category: Match.Maybe(Match.OneOf(Object, String)),\n      hasPromotion: Match.Maybe(Boolean),\n      lenderId: Match.Maybe(Match.OneOf(Object, String)),\n      name: Match.Maybe(String),\n      noPromotion: Match.Maybe(Boolean),\n      owned: Match.Maybe(Boolean),\n      promotionId: Match.Maybe(Match.OneOf(Object, String)),\n      relevantOnly: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(Object, String)),\n      step: Match.Maybe(Match.OneOf(Object, String))\n    }\n  }\n});\nexposeQuery({\n  query: anonymousLoan,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.loans.checkAnonymousLoan(params._id);\n    },\n\n    validateParams: {\n      _id: String\n    }\n  },\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: fullLoan,\n  overrides: {\n    embody: body => {\n      body.$postFilter = (loans = []) => loans.map(formatLoanWithDocuments);\n    }\n  },\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: loanSearch,\n  overrides: {\n    firewall(userId) {\n      SecurityService.checkUserIsAdmin(userId);\n    },\n\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params: {\n          searchQuery\n        }\n      }) => {\n        Object.assign(filters, createSearchFilters(['name', '_id', 'customName'], searchQuery));\n      };\n    },\n    validateParams: {\n      searchQuery: Match.Maybe(String)\n    }\n  }\n});\nexposeQuery({\n  query: proLoans,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        fetchOrganisationLoans,\n        organisationId,\n        promotionId,\n        propertyId\n      } = params;\n      params.calledByUserId = userId;\n\n      if (providedUserId && SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n\n      if (fetchOrganisationLoans) {\n        if (organisationId) {\n          SecurityService.checkUserIsAdmin(userId);\n        } else {\n          const {\n            organisations\n          } = UserService.fetchOne({\n            $filters: {\n              _id: userId\n            },\n            organisations: {\n              _id: 1\n            }\n          });\n\n          if (!organisations || organisations.length === 0) {\n            throw new Meteor.Error(\"Pas d'organisation!\");\n          }\n\n          params.organisationId = organisations[0]._id;\n        }\n      }\n\n      SecurityService.checkUserIsPro(userId);\n    },\n\n    validateParams: {\n      promotionId: Match.Maybe(Match.OneOf(String, Object)),\n      propertyId: Match.Maybe(Match.OneOf(String, Object)),\n      userId: String,\n      calledByUserId: String,\n      organisationId: Match.Maybe(String),\n      fetchOrganisationLoans: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(String, Object))\n    }\n  },\n  cacher: {\n    getDataToHash: getLoanIds({\n      withReferredBy: true\n    }),\n    ttl: 60 * 1000\n  },\n  resolver: proLoansResolver\n});\nexposeQuery({\n  query: proPromotionLoans,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        promotionId\n      } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.promotions.isAllowedToView({\n        userId,\n        promotionId\n      });\n    },\n\n    validateParams: {\n      promotionId: String,\n      userId: String\n    }\n  },\n  resolver: ({\n    userId,\n    promotionId\n  }) => proPromotionLoansResolver({\n    calledByUserId: userId,\n    promotionId\n  })\n});\nexposeQuery({\n  query: proPropertyLoans,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        propertyId\n      } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.properties.isAllowedToView({\n        propertyId,\n        userId\n      });\n    },\n\n    validateParams: {\n      propertyId: String,\n      userId: String\n    }\n  },\n  resolver: ({\n    userId,\n    propertyId\n  }) => proPropertyLoansResolver({\n    calledByUserId: userId,\n    propertyId\n  })\n});\nexposeQuery({\n  query: proReferredByLoans,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId\n      } = params;\n      SecurityService.checkUserIsPro(userId);\n\n      if (SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n\n      params.calledByUserId = userId;\n    },\n\n    validateParams: {\n      userId: String,\n      calledByUserId: String\n    }\n  },\n  resolver: proReferredByLoansResolver\n});\nexposeQuery({\n  query: userLoans,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        SecurityService.checkUserIsAdmin(userId);\n      } else {\n        params.userId = userId;\n\n        if (!userId) {\n          SecurityService.loans.checkAnonymousLoan(params.loanId);\n        }\n      }\n    },\n\n    embody: (body, embodyParams) => {\n      body.$filter = ({\n        filters,\n        params\n      }) => {\n        filters.userId = params.userId;\n\n        if (params.loanId) {\n          filters._id = params.loanId;\n        }\n      };\n\n      if (!embodyParams.userId) {\n        body.maxPropertyValue = 0;\n      }\n    },\n    validateParams: {\n      loanId: Match.Maybe(String),\n      userId: Match.Maybe(String)\n    }\n  }\n});","map":{"version":3,"sources":["imports/core/api/loans/server/exposures.js"],"names":["exposeQuery","query","overrides","embody","body","params","step","filters","$exists","$nin","LOAN_STATUS","$ne","promotionId","$elemMatch","lenderId","validateParams","_id","Match","assignedEmployeeId","category","hasPromotion","name","noPromotion","owned","relevantOnly","status","firewall","SecurityService","String","options","allowFilterById","loans","searchQuery","Object","createSearchFilters","userId","propertyId","providedUserId","organisations","$filters","Meteor","calledByUserId","organisationId","fetchOrganisationLoans","cacher","getDataToHash","getLoanIds","withReferredBy","ttl","resolver","proLoansResolver","proPromotionLoansResolver","proPropertyLoansResolver","proReferredByLoansResolver","embodyParams","loanId"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { formatLoanWithDocuments } from '../../../utils/loanFunctions';\nimport UserService from '../../users/server/UserService';\nimport { createSearchFilters } from '../../helpers/mongoHelpers';\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport SecurityService from '../../security';\n\nimport {\n  adminLoans,\n  anonymousLoan,\n  fullLoan,\n  loanSearch,\n  proLoans,\n  proPromotionLoans,\n  proPropertyLoans,\n  proReferredByLoans,\n  userLoans,\n} from '../queries';\nimport { LOAN_STATUS } from '../loanConstants';\nimport {\n  proLoansResolver,\n  getLoanIds,\n  proPromotionLoansResolver,\n  proPropertyLoansResolver,\n  proReferredByLoansResolver,\n} from './resolvers';\n\nexposeQuery({\n  query: adminLoans,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: {\n          _id,\n          assignedEmployeeId,\n          category,\n          hasPromotion,\n          noPromotion,\n          lenderId,\n          name,\n          owned,\n          promotionId,\n          relevantOnly,\n          status,\n          step,\n        },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (name) {\n          filters.name = name;\n        }\n\n        if (owned) {\n          filters.userId = { $exists: true };\n        }\n\n        if (assignedEmployeeId) {\n          filters['userCache.assignedEmployeeCache._id'] = assignedEmployeeId;\n        }\n\n        if (relevantOnly) {\n          filters.status = {\n            $nin: [LOAN_STATUS.TEST, LOAN_STATUS.UNSUCCESSFUL],\n          };\n          filters.anonymous = { $ne: true };\n        }\n\n        if (step) {\n          filters.step = step;\n        }\n\n        if (category) {\n          filters.category = category;\n        }\n\n        if (status) {\n          filters.status = status;\n        }\n\n        if (hasPromotion) {\n          filters.$or = [\n            { 'promotionLinks.0._id': { $exists: true } },\n            { 'financedPromotionLink._id': { $exists: true } },\n          ];\n        }\n\n        if (promotionId) {\n          filters.$or = [\n            { 'promotionLinks.0._id': promotionId },\n            { 'financedPromotionLink._id': promotionId },\n          ];\n        }\n\n        if (noPromotion) {\n          filters['promotionLinks.0._id'] = { $exists: false };\n        }\n\n        if (lenderId) {\n          filters.lendersCache = {\n            $elemMatch: { 'organisationLink._id': lenderId },\n          };\n        }\n      };\n    },\n    validateParams: {\n      _id: Match.Maybe(String),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String)),\n      category: Match.Maybe(Match.OneOf(Object, String)),\n      hasPromotion: Match.Maybe(Boolean),\n      lenderId: Match.Maybe(Match.OneOf(Object, String)),\n      name: Match.Maybe(String),\n      noPromotion: Match.Maybe(Boolean),\n      owned: Match.Maybe(Boolean),\n      promotionId: Match.Maybe(Match.OneOf(Object, String)),\n      relevantOnly: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(Object, String)),\n      step: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n});\n\nexposeQuery({\n  query: anonymousLoan,\n  overrides: {\n    firewall(userId, params) {\n      SecurityService.loans.checkAnonymousLoan(params._id);\n    },\n    validateParams: { _id: String },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: fullLoan,\n  overrides: {\n    embody: (body) => {\n      body.$postFilter = (loans = []) => loans.map(formatLoanWithDocuments);\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: loanSearch,\n  overrides: {\n    firewall(userId) {\n      SecurityService.checkUserIsAdmin(userId);\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params: { searchQuery } }) => {\n        Object.assign(\n          filters,\n          createSearchFilters(['name', '_id', 'customName'], searchQuery),\n        );\n      };\n    },\n    validateParams: { searchQuery: Match.Maybe(String) },\n  },\n});\n\nexposeQuery({\n  query: proLoans,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        fetchOrganisationLoans,\n        organisationId,\n        promotionId,\n        propertyId,\n      } = params;\n      params.calledByUserId = userId;\n\n      if (providedUserId && SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n\n      if (fetchOrganisationLoans) {\n        if (organisationId) {\n          SecurityService.checkUserIsAdmin(userId);\n        } else {\n          const { organisations } = UserService.fetchOne({\n            $filters: { _id: userId },\n            organisations: { _id: 1 },\n          });\n\n          if (!organisations || organisations.length === 0) {\n            throw new Meteor.Error(\"Pas d'organisation!\");\n          }\n\n          params.organisationId = organisations[0]._id;\n        }\n      }\n\n      SecurityService.checkUserIsPro(userId);\n    },\n    validateParams: {\n      promotionId: Match.Maybe(Match.OneOf(String, Object)),\n      propertyId: Match.Maybe(Match.OneOf(String, Object)),\n      userId: String,\n      calledByUserId: String,\n      organisationId: Match.Maybe(String),\n      fetchOrganisationLoans: Match.Maybe(Boolean),\n      status: Match.Maybe(Match.OneOf(String, Object)),\n    },\n  },\n  cacher: {\n    getDataToHash: getLoanIds({ withReferredBy: true }),\n    ttl: 60 * 1000,\n  },\n  resolver: proLoansResolver,\n});\n\nexposeQuery({\n  query: proPromotionLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { promotionId } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.promotions.isAllowedToView({ userId, promotionId });\n    },\n    validateParams: {\n      promotionId: String,\n      userId: String,\n    },\n  },\n  resolver: ({ userId, promotionId }) =>\n    proPromotionLoansResolver({ calledByUserId: userId, promotionId }),\n});\n\nexposeQuery({\n  query: proPropertyLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { propertyId } = params;\n      params.userId = userId;\n      SecurityService.checkUserIsPro(userId);\n      SecurityService.properties.isAllowedToView({ propertyId, userId });\n    },\n    validateParams: {\n      propertyId: String,\n      userId: String,\n    },\n  },\n  resolver: ({ userId, propertyId }) =>\n    proPropertyLoansResolver({ calledByUserId: userId, propertyId }),\n});\n\nexposeQuery({\n  query: proReferredByLoans,\n  overrides: {\n    firewall(userId, params) {\n      const { userId: providedUserId } = params;\n      SecurityService.checkUserIsPro(userId);\n      if (SecurityService.isUserAdmin(userId)) {\n        params.userId = providedUserId;\n      } else {\n        params.userId = userId;\n      }\n      params.calledByUserId = userId;\n    },\n    validateParams: {\n      userId: String,\n      calledByUserId: String,\n    },\n  },\n  resolver: proReferredByLoansResolver,\n});\n\nexposeQuery({\n  query: userLoans,\n  overrides: {\n    firewall(userId, params) {\n      if (params.userId) {\n        SecurityService.checkUserIsAdmin(userId);\n      } else {\n        params.userId = userId;\n\n        if (!userId) {\n          SecurityService.loans.checkAnonymousLoan(params.loanId);\n        }\n      }\n    },\n    embody: (body, embodyParams) => {\n      body.$filter = ({ filters, params }) => {\n        filters.userId = params.userId;\n        if (params.loanId) {\n          filters._id = params.loanId;\n        }\n      };\n\n      if (!embodyParams.userId) {\n        body.maxPropertyValue = 0;\n      }\n    },\n    validateParams: {\n      loanId: Match.Maybe(String),\n      userId: Match.Maybe(String),\n    },\n  },\n});\n"]},"sourceType":"script","hash":"d3e1534e23ccc84ce1b9766b442e438ecb046013"}

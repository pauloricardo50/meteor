{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/localization/simpleSchemaLocalization.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/localization/simpleSchemaLocalization.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/localization/simpleSchemaLocalization.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/localization/simpleSchemaLocalization.js"],"names":["SimpleSchema","Intl","translate","key","keyWithoutNumbers","split","filter","subKey","length","join","formatMessage","id","translateSimpleSchema","setDefaultMessages","initialLanguage","messages","fr","required","args","minString","min","maxString","max","minNumber","maxNumber","minNumberExclusive","maxNumberExclusive","minDate","maxDate","badDate","minCount","maxCount","noDecimal","notAllowed","value","expectedType","dataType","regEx","label","regExp","RegEx","Email","WeakEmail"],"mappings":"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","sourcesContent":["import SimpleSchema from 'simpl-schema';\nimport Intl from '../intl';\n\nconst translate = ({ key }) => {\n  // Turns a key called \"expenses.0.value\" into \"expenses.value\"\n  const keyWithoutNumbers = key\n    .split('.')\n    .filter(subKey => subKey.length !== 1)\n    .join('.');\n  return Intl.formatMessage({ id: `Forms.${keyWithoutNumbers}` });\n};\n\nconst translateSimpleSchema = () => {\n  SimpleSchema.setDefaultMessages({\n    initialLanguage: 'fr',\n    messages: {\n      fr: {\n        // Can also use \"name\"\n        required: args => `${translate(args)} est requis`,\n        minString: args =>\n          `${translate(args)} doit faire au minimum ${args.min} caractères`,\n        maxString: args =>\n          `${translate(args)} peut faire au maximum ${args.max} caractères`,\n        minNumber: args => `${translate(args)} doit être au moins ${args.min}`,\n        maxNumber: args =>\n          `${translate(args)} ne peut pas dépasser ${args.max}`,\n        minNumberExclusive: args =>\n          `${translate(args)} doit être plus grand que ${args.min}`,\n        maxNumberExclusive: args =>\n          `${translate(args)} doit être plus petit que ${args.max}`,\n        minDate: args =>\n          `${translate(args)} doit être au plus tôt le ${args.min}`,\n        maxDate: args =>\n          `${translate(args)} doit être au plus tard le ${args.max}`,\n        badDate: args => `${translate(args)} n'est pas une date valide`,\n        minCount: ({ minCount }) =>\n          `Vous devez ajouter au moins ${minCount} valeurs`,\n        maxCount: ({ maxCount }) =>\n          `Vous devez choisir moins de ${maxCount} valeurs`,\n        noDecimal: args => `${translate(args)} doit être un nombre entier`,\n        notAllowed: ({ value }) => `${value} n'est pas valide`,\n        expectedType: args =>\n          `${translate(args)} doit être un ${args.dataType}`,\n        regEx({ label, regExp }) {\n          switch (regExp) {\n          case SimpleSchema.RegEx.Email:\n          case SimpleSchema.RegEx.WeakEmail:\n            return 'Cette adresse e-mail est incorrecte';\n          default:\n            return \"Le format n'est pas valide\";\n          }\n        },\n      },\n    },\n  });\n};\n\nexport default translateSimpleSchema;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/localization/simpleSchemaLocalization.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/localization/simpleSchemaLocalization.js"}},"code":"var SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar Intl;\nmodule.link(\"../intl\", {\n  \"default\": function (v) {\n    Intl = v;\n  }\n}, 1);\n\nvar translate = function (_ref) {\n  var key = _ref.key;\n  // Turns a key called \"expenses.0.value\" into \"expenses.value\"\n  var keyWithoutNumbers = key.split('.').filter(function (subKey) {\n    return subKey.length !== 1;\n  }).join('.');\n  return Intl.formatMessage({\n    id: \"Forms.\" + keyWithoutNumbers\n  });\n};\n\nvar translateSimpleSchema = function () {\n  SimpleSchema.setDefaultMessages({\n    initialLanguage: 'fr',\n    messages: {\n      fr: {\n        // Can also use \"name\"\n        required: function (args) {\n          return translate(args) + \" est requis\";\n        },\n        minString: function (args) {\n          return translate(args) + \" doit faire au minimum \" + args.min + \" caract\\xE8res\";\n        },\n        maxString: function (args) {\n          return translate(args) + \" peut faire au maximum \" + args.max + \" caract\\xE8res\";\n        },\n        minNumber: function (args) {\n          return translate(args) + \" doit \\xEAtre au moins \" + args.min;\n        },\n        maxNumber: function (args) {\n          return translate(args) + \" ne peut pas d\\xE9passer \" + args.max;\n        },\n        minNumberExclusive: function (args) {\n          return translate(args) + \" doit \\xEAtre plus grand que \" + args.min;\n        },\n        maxNumberExclusive: function (args) {\n          return translate(args) + \" doit \\xEAtre plus petit que \" + args.max;\n        },\n        minDate: function (args) {\n          return translate(args) + \" doit \\xEAtre au plus t\\xF4t le \" + args.min;\n        },\n        maxDate: function (args) {\n          return translate(args) + \" doit \\xEAtre au plus tard le \" + args.max;\n        },\n        badDate: function (args) {\n          return translate(args) + \" n'est pas une date valide\";\n        },\n        minCount: function (_ref2) {\n          var minCount = _ref2.minCount;\n          return \"Vous devez ajouter au moins \" + minCount + \" valeurs\";\n        },\n        maxCount: function (_ref3) {\n          var maxCount = _ref3.maxCount;\n          return \"Vous devez choisir moins de \" + maxCount + \" valeurs\";\n        },\n        noDecimal: function (args) {\n          return translate(args) + \" doit \\xEAtre un nombre entier\";\n        },\n        notAllowed: function (_ref4) {\n          var value = _ref4.value;\n          return value + \" n'est pas valide\";\n        },\n        expectedType: function (args) {\n          return translate(args) + \" doit \\xEAtre un \" + args.dataType;\n        },\n        regEx: function (_ref5) {\n          var label = _ref5.label,\n              regExp = _ref5.regExp;\n\n          switch (regExp) {\n            case SimpleSchema.RegEx.Email:\n            case SimpleSchema.RegEx.WeakEmail:\n              return 'Cette adresse e-mail est incorrecte';\n\n            default:\n              return \"Le format n'est pas valide\";\n          }\n        }\n      }\n    }\n  });\n};\n\nmodule.exportDefault(translateSimpleSchema);","map":{"version":3,"sources":["imports/core/utils/localization/simpleSchemaLocalization.js"],"names":["SimpleSchema","translate","key","keyWithoutNumbers","subKey","id","translateSimpleSchema","initialLanguage","messages","fr","required","args","minString","maxString","minNumber","maxNumber","minNumberExclusive","maxNumberExclusive","minDate","maxDate","badDate","minCount","maxCount","noDecimal","notAllowed","value","expectedType","regEx","regExp"],"mappings":"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","sourcesContent":["import SimpleSchema from 'simpl-schema';\nimport Intl from '../intl';\n\nconst translate = ({ key }) => {\n  // Turns a key called \"expenses.0.value\" into \"expenses.value\"\n  const keyWithoutNumbers = key\n    .split('.')\n    .filter(subKey => subKey.length !== 1)\n    .join('.');\n  return Intl.formatMessage({ id: `Forms.${keyWithoutNumbers}` });\n};\n\nconst translateSimpleSchema = () => {\n  SimpleSchema.setDefaultMessages({\n    initialLanguage: 'fr',\n    messages: {\n      fr: {\n        // Can also use \"name\"\n        required: args => `${translate(args)} est requis`,\n        minString: args =>\n          `${translate(args)} doit faire au minimum ${args.min} caractères`,\n        maxString: args =>\n          `${translate(args)} peut faire au maximum ${args.max} caractères`,\n        minNumber: args => `${translate(args)} doit être au moins ${args.min}`,\n        maxNumber: args =>\n          `${translate(args)} ne peut pas dépasser ${args.max}`,\n        minNumberExclusive: args =>\n          `${translate(args)} doit être plus grand que ${args.min}`,\n        maxNumberExclusive: args =>\n          `${translate(args)} doit être plus petit que ${args.max}`,\n        minDate: args =>\n          `${translate(args)} doit être au plus tôt le ${args.min}`,\n        maxDate: args =>\n          `${translate(args)} doit être au plus tard le ${args.max}`,\n        badDate: args => `${translate(args)} n'est pas une date valide`,\n        minCount: ({ minCount }) =>\n          `Vous devez ajouter au moins ${minCount} valeurs`,\n        maxCount: ({ maxCount }) =>\n          `Vous devez choisir moins de ${maxCount} valeurs`,\n        noDecimal: args => `${translate(args)} doit être un nombre entier`,\n        notAllowed: ({ value }) => `${value} n'est pas valide`,\n        expectedType: args =>\n          `${translate(args)} doit être un ${args.dataType}`,\n        regEx({ label, regExp }) {\n          switch (regExp) {\n          case SimpleSchema.RegEx.Email:\n          case SimpleSchema.RegEx.WeakEmail:\n            return 'Cette adresse e-mail est incorrecte';\n          default:\n            return \"Le format n'est pas valide\";\n          }\n        },\n      },\n    },\n  });\n};\n\nexport default translateSimpleSchema;\n"]},"sourceType":"script","hash":"7a20dc30a5fb3bdc687d97e0777fa7f3b0a0112c"}

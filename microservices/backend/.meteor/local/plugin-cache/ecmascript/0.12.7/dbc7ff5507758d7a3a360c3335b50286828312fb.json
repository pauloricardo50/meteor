{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/conversionFunctions.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/conversionFunctions.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/conversionFunctions.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/conversionFunctions.js"],"names":["toMoney","value","noPrefix","rounded","Number","isNaN","parsedValue","Math","round","negativePrefix","String","replace","roundedDecimals","integer","decimals","split","integerPart","decimalPart","join","length","rounding","slice","toNumber","toDecimalNumber","newValue","commaReplaced","toDistanceString","dist","toFixed","roundValue","digits","roundTo","roundedValue","parseFloat"],"mappings":"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","sourcesContent":["// Rounds the value, adds thousands markers every 3 digits\n// (and removes non-digit characters)\nexport function toMoney(value, { noPrefix, rounded = true } = {}) {\n  if (value === 0) {\n    return 0;\n  }\n  if (Number.isNaN(value)) {\n    // Exception for isNaN which should never appear\n    return 0;\n  }\n  if (!value) {\n    // Don't format the value if it is undefined or an empty string\n    return value;\n  }\n  const parsedValue = rounded\n    ? Math.round(Number(Math.round(value)))\n    : Number(value);\n  const negativePrefix = !noPrefix && value < 0 && parsedValue !== 0 ? '-' : '';\n\n  if (rounded) {\n    return (\n      negativePrefix\n      + String(parsedValue)\n        .replace(/\\D/g, '')\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')\n    );\n  }\n\n  const roundedDecimals = Math.round(parsedValue * 100) / 100;\n\n  const [integer, decimals] = String(roundedDecimals).split('.');\n\n  const integerPart = negativePrefix\n    + integer.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n  let decimalPart = decimals;\n\n  if (!decimals) {\n    return [integerPart, '00'].join('.');\n  }\n\n  if (decimals && decimals.length > 2) {\n    const rounding = 10 ** (decimals.length - 2);\n    decimalPart = Math.round(Number(decimals) / rounding) * rounding;\n  }\n\n  return [integerPart, String(decimalPart).slice(0, 2)].join('.');\n}\n\n// Replaces any nondigit character by an empty character,\n// to prevent the use of non-digits\n// Only do this if the value actually exists\nexport function toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value ? Number(String(value).replace(/\\D/g, '')) : value;\n}\n\n// Like toNumber, but allows decimals\nexport function toDecimalNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  // Remove unwanted characters, except digits, dots and commas\n  const newValue = value ? String(value).replace(/[^\\d.,]/g, '') : value;\n  // replace commas with dots\n  const commaReplaced = newValue\n    ? Number(newValue.replace(',', '.'))\n    : newValue;\n  return commaReplaced;\n}\n\nexport const toDistanceString = (dist) => {\n  if (dist <= 0) {\n    return '0 m';\n  }\n  if (dist < 1000) {\n    return `${Math.round(dist / 10) * 10} m`;\n  }\n  if (dist < 10000) {\n    return `${(Math.round(dist / 100) / 10).toFixed(1)} km`;\n  }\n\n  return `${Math.round(dist / 1000)} km`;\n};\n\nexport const roundValue = (value, digits) =>\n  Math.round(value / 10 ** digits) * 10 ** digits;\n\nexport const roundTo = (value, digits) => {\n  if (digits === 0) {\n    return value;\n  }\n\n  const roundedValue = roundValue(value, digits);\n\n  if (digits > 0) {\n    return roundedValue;\n  }\n\n  return parseFloat(roundedValue.toFixed(-digits));\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/conversionFunctions.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/conversionFunctions.js"}},"code":"module.export({\n  toMoney: () => toMoney,\n  toNumber: () => toNumber,\n  toDecimalNumber: () => toDecimalNumber,\n  toDistanceString: () => toDistanceString,\n  roundValue: () => roundValue,\n  roundTo: () => roundTo\n});\n\nfunction toMoney(value) {\n  let {\n    noPrefix,\n    rounded = true\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (value === 0) {\n    return 0;\n  }\n\n  if (Number.isNaN(value)) {\n    // Exception for isNaN which should never appear\n    return 0;\n  }\n\n  if (!value) {\n    // Don't format the value if it is undefined or an empty string\n    return value;\n  }\n\n  const parsedValue = rounded ? Math.round(Number(Math.round(value))) : Number(value);\n  const negativePrefix = !noPrefix && value < 0 && parsedValue !== 0 ? '-' : '';\n\n  if (rounded) {\n    return negativePrefix + String(parsedValue).replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n  }\n\n  const roundedDecimals = Math.round(parsedValue * 100) / 100;\n  const [integer, decimals] = String(roundedDecimals).split('.');\n  const integerPart = negativePrefix + integer.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n  let decimalPart = decimals;\n\n  if (!decimals) {\n    return [integerPart, '00'].join('.');\n  }\n\n  if (decimals && decimals.length > 2) {\n    const rounding = Math.pow(10, decimals.length - 2);\n    decimalPart = Math.round(Number(decimals) / rounding) * rounding;\n  }\n\n  return [integerPart, String(decimalPart).slice(0, 2)].join('.');\n}\n\nfunction toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return value ? Number(String(value).replace(/\\D/g, '')) : value;\n}\n\nfunction toDecimalNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  } // Remove unwanted characters, except digits, dots and commas\n\n\n  const newValue = value ? String(value).replace(/[^\\d.,]/g, '') : value; // replace commas with dots\n\n  const commaReplaced = newValue ? Number(newValue.replace(',', '.')) : newValue;\n  return commaReplaced;\n}\n\nconst toDistanceString = dist => {\n  if (dist <= 0) {\n    return '0 m';\n  }\n\n  if (dist < 1000) {\n    return \"\".concat(Math.round(dist / 10) * 10, \" m\");\n  }\n\n  if (dist < 10000) {\n    return \"\".concat((Math.round(dist / 100) / 10).toFixed(1), \" km\");\n  }\n\n  return \"\".concat(Math.round(dist / 1000), \" km\");\n};\n\nconst roundValue = (value, digits) => Math.round(value / Math.pow(10, digits)) * Math.pow(10, digits);\n\nconst roundTo = (value, digits) => {\n  if (digits === 0) {\n    return value;\n  }\n\n  const roundedValue = roundValue(value, digits);\n\n  if (digits > 0) {\n    return roundedValue;\n  }\n\n  return parseFloat(roundedValue.toFixed(-digits));\n};","map":{"version":3,"sources":["imports/core/utils/conversionFunctions.js"],"names":["rounded","value","Number","parsedValue","Math","negativePrefix","String","roundedDecimals","integerPart","integer","decimalPart","decimals","rounding","newValue","commaReplaced","toDistanceString","dist","roundValue","roundTo","digits","roundedValue","parseFloat"],"mappings":"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","sourcesContent":["// Rounds the value, adds thousands markers every 3 digits\n// (and removes non-digit characters)\nexport function toMoney(value, { noPrefix, rounded = true } = {}) {\n  if (value === 0) {\n    return 0;\n  }\n  if (Number.isNaN(value)) {\n    // Exception for isNaN which should never appear\n    return 0;\n  }\n  if (!value) {\n    // Don't format the value if it is undefined or an empty string\n    return value;\n  }\n  const parsedValue = rounded\n    ? Math.round(Number(Math.round(value)))\n    : Number(value);\n  const negativePrefix = !noPrefix && value < 0 && parsedValue !== 0 ? '-' : '';\n\n  if (rounded) {\n    return (\n      negativePrefix\n      + String(parsedValue)\n        .replace(/\\D/g, '')\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')\n    );\n  }\n\n  const roundedDecimals = Math.round(parsedValue * 100) / 100;\n\n  const [integer, decimals] = String(roundedDecimals).split('.');\n\n  const integerPart = negativePrefix\n    + integer.replace(/\\D/g, '').replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');\n  let decimalPart = decimals;\n\n  if (!decimals) {\n    return [integerPart, '00'].join('.');\n  }\n\n  if (decimals && decimals.length > 2) {\n    const rounding = 10 ** (decimals.length - 2);\n    decimalPart = Math.round(Number(decimals) / rounding) * rounding;\n  }\n\n  return [integerPart, String(decimalPart).slice(0, 2)].join('.');\n}\n\n// Replaces any nondigit character by an empty character,\n// to prevent the use of non-digits\n// Only do this if the value actually exists\nexport function toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value ? Number(String(value).replace(/\\D/g, '')) : value;\n}\n\n// Like toNumber, but allows decimals\nexport function toDecimalNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  // Remove unwanted characters, except digits, dots and commas\n  const newValue = value ? String(value).replace(/[^\\d.,]/g, '') : value;\n  // replace commas with dots\n  const commaReplaced = newValue\n    ? Number(newValue.replace(',', '.'))\n    : newValue;\n  return commaReplaced;\n}\n\nexport const toDistanceString = (dist) => {\n  if (dist <= 0) {\n    return '0 m';\n  }\n  if (dist < 1000) {\n    return `${Math.round(dist / 10) * 10} m`;\n  }\n  if (dist < 10000) {\n    return `${(Math.round(dist / 100) / 10).toFixed(1)} km`;\n  }\n\n  return `${Math.round(dist / 1000)} km`;\n};\n\nexport const roundValue = (value, digits) =>\n  Math.round(value / 10 ** digits) * 10 ** digits;\n\nexport const roundTo = (value, digits) => {\n  if (digits === 0) {\n    return value;\n  }\n\n  const roundedValue = roundValue(value, digits);\n\n  if (digits > 0) {\n    return roundedValue;\n  }\n\n  return parseFloat(roundedValue.toFixed(-digits));\n};\n"]},"sourceType":"script","hash":"dbc7ff5507758d7a3a360c3335b50286828312fb"}

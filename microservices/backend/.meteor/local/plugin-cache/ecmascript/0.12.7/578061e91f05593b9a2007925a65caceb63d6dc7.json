{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/test/BorrowersPdfPage.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/test/BorrowersPdfPage.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/test/BorrowersPdfPage.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/test/BorrowersPdfPage.spec.jsx"],"names":["expect","getMountedComponent","REAL_ESTATE_INCOME_ALGORITHMS","Calculator","CalculatorClass","BorrowersPdfPage","describe","props","component","Component","getRowValue","table","at","find","last","text","getRowLabel","first","beforeEach","reset","loan","borrowers","expenses","calculator","it","length","to","equal","childrenCount","company","salary","realEstate","value","income","realEstateIncomeAlgorithm","POSITIVE_NEGATIVE_SPLIT","include"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport getMountedComponent from 'core/utils/testHelpers/getMountedComponent';\nimport { REAL_ESTATE_INCOME_ALGORITHMS } from 'core/config/financeConstants';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from 'core/utils/Calculator';\nimport BorrowersPdfPage from '../BorrowersPdfPage';\n\ndescribe('BorrowersPdfPage', () => {\n  let props;\n  const component = () =>\n    getMountedComponent({ Component: BorrowersPdfPage, props });\n  const getRowValue = (table, at) =>\n    component()\n      .find(`${table} tr`)\n      .at(at)\n      .find('td')\n      .last()\n      .text();\n  const getRowLabel = (table, at) =>\n    component()\n      .find(`${table} tr`)\n      .at(at)\n      .find('td')\n      .first()\n      .text();\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    getMountedComponent.reset();\n    props = {\n      loan: { borrowers: [{ expenses: [] }] },\n      calculator: Calculator,\n    };\n  });\n\n  it('renders a title and 2 tables', () => {\n    expect(component().find('h1').length).to.equal(1);\n    expect(component().find('table').length).to.equal(2);\n  });\n\n  describe('Info table', () => {\n    it('renders an info table with rows depending on content', () => {\n      expect(component()\n        .find('table')\n        .at(0)\n        .find('tr').length).to.equal(3);\n\n      props.loan.borrowers = [\n        { expenses: [], childrenCount: 2, company: 'e-Potek' },\n      ];\n      getMountedComponent.reset();\n      expect(component()\n        .find('table')\n        .at(0)\n        .find('tr').length).to.equal(5);\n    });\n  });\n\n  describe('Finance table', () => {\n    it('has 2 subsections', () => {\n      expect(component()\n        .find('table')\n        .at(1)\n        .find('.subsection-row').length).to.equal(2);\n    });\n\n    it('contains income of the borrowers', () => {\n      props.loan.borrowers = [{ expenses: [], salary: 100000 }];\n      expect(getRowValue('.finance', 2)).to.equal('100 000');\n\n      props.loan.borrowers = [\n        { expenses: [], salary: 100000 },\n        { expenses: [], salary: 100000 },\n      ];\n      getMountedComponent.reset();\n      expect(getRowValue('.finance', 2)).to.equal('200 000');\n    });\n\n    it('renders realEstate income', () => {\n      props.loan.borrowers = [\n        {\n          expenses: [],\n          salary: 100000,\n          realEstate: [\n            { value: 1200000, loan: 960000, income: 100000 },\n            { value: 1200000, loan: 960000, income: 200000 },\n          ],\n        },\n      ];\n      expect(getRowValue('.finance', 3)).to.equal('300 000');\n    });\n\n    it('renders positive realEstate deltas', () => {\n      // Negative deltas are only displayed in the expenses\n      props.calculator = new CalculatorClass({\n        realEstateIncomeAlgorithm:\n          REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT,\n      });\n      props.loan.borrowers = [\n        {\n          expenses: [],\n          salary: 100000,\n          realEstate: [\n            { value: 1200000, loan: 960000, income: 100000 },\n            { value: 1200000, loan: 960000, income: 50000 },\n          ],\n        },\n      ];\n      expect(getRowLabel('.finance', 3)).to.equal('Delta immobilier positif');\n      expect(getRowValue('.finance', 3)).to.equal('28 000');\n      expect(getRowLabel('.finance', 4)).to.include('Total');\n      expect(getRowValue('.finance', 4)).to.equal('128 000');\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/test/BorrowersPdfPage.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/test/BorrowersPdfPage.spec.jsx"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet getMountedComponent;\nmodule.link(\"../../../../../../../utils/testHelpers/getMountedComponent\", {\n  default(v) {\n    getMountedComponent = v;\n  }\n\n}, 1);\nlet REAL_ESTATE_INCOME_ALGORITHMS;\nmodule.link(\"../../../../../../../config/financeConstants\", {\n  REAL_ESTATE_INCOME_ALGORITHMS(v) {\n    REAL_ESTATE_INCOME_ALGORITHMS = v;\n  }\n\n}, 2);\nlet Calculator, CalculatorClass;\nmodule.link(\"../../../../../../../utils/Calculator\", {\n  default(v) {\n    Calculator = v;\n  },\n\n  Calculator(v) {\n    CalculatorClass = v;\n  }\n\n}, 3);\nlet BorrowersPdfPage;\nmodule.link(\"../BorrowersPdfPage\", {\n  default(v) {\n    BorrowersPdfPage = v;\n  }\n\n}, 4);\ndescribe('BorrowersPdfPage', () => {\n  let props;\n\n  const component = () => getMountedComponent({\n    Component: BorrowersPdfPage,\n    props\n  });\n\n  const getRowValue = (table, at) => component().find(`${table} tr`).at(at).find('td').last().text();\n\n  const getRowLabel = (table, at) => component().find(`${table} tr`).at(at).find('td').first().text();\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    getMountedComponent.reset();\n    props = {\n      loan: {\n        borrowers: [{\n          expenses: []\n        }]\n      },\n      calculator: Calculator\n    };\n  });\n  it('renders a title and 2 tables', () => {\n    expect(component().find('h1').length).to.equal(1);\n    expect(component().find('table').length).to.equal(2);\n  });\n  describe('Info table', () => {\n    it('renders an info table with rows depending on content', () => {\n      expect(component().find('table').at(0).find('tr').length).to.equal(3);\n      props.loan.borrowers = [{\n        expenses: [],\n        childrenCount: 2,\n        company: 'e-Potek'\n      }];\n      getMountedComponent.reset();\n      expect(component().find('table').at(0).find('tr').length).to.equal(5);\n    });\n  });\n  describe('Finance table', () => {\n    it('has 2 subsections', () => {\n      expect(component().find('table').at(1).find('.subsection-row').length).to.equal(2);\n    });\n    it('contains income of the borrowers', () => {\n      props.loan.borrowers = [{\n        expenses: [],\n        salary: 100000\n      }];\n      expect(getRowValue('.finance', 2)).to.equal('100 000');\n      props.loan.borrowers = [{\n        expenses: [],\n        salary: 100000\n      }, {\n        expenses: [],\n        salary: 100000\n      }];\n      getMountedComponent.reset();\n      expect(getRowValue('.finance', 2)).to.equal('200 000');\n    });\n    it('renders realEstate income', () => {\n      props.loan.borrowers = [{\n        expenses: [],\n        salary: 100000,\n        realEstate: [{\n          value: 1200000,\n          loan: 960000,\n          income: 100000\n        }, {\n          value: 1200000,\n          loan: 960000,\n          income: 200000\n        }]\n      }];\n      expect(getRowValue('.finance', 3)).to.equal('300 000');\n    });\n    it('renders positive realEstate deltas', () => {\n      // Negative deltas are only displayed in the expenses\n      props.calculator = new CalculatorClass({\n        realEstateIncomeAlgorithm: REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT\n      });\n      props.loan.borrowers = [{\n        expenses: [],\n        salary: 100000,\n        realEstate: [{\n          value: 1200000,\n          loan: 960000,\n          income: 100000\n        }, {\n          value: 1200000,\n          loan: 960000,\n          income: 50000\n        }]\n      }];\n      expect(getRowLabel('.finance', 3)).to.equal('Delta immobilier positif');\n      expect(getRowValue('.finance', 3)).to.equal('28 000');\n      expect(getRowLabel('.finance', 4)).to.include('Total');\n      expect(getRowValue('.finance', 4)).to.equal('128 000');\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/test/BorrowersPdfPage.spec.jsx"],"names":["describe","component","getMountedComponent","Component","props","getRowValue","table","getRowLabel","beforeEach","loan","borrowers","expenses","calculator","Calculator","it","expect","childrenCount","company","salary","realEstate","value","income","realEstateIncomeAlgorithm","REAL_ESTATE_INCOME_ALGORITHMS","POSITIVE_NEGATIVE_SPLIT"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport getMountedComponent from 'core/utils/testHelpers/getMountedComponent';\nimport { REAL_ESTATE_INCOME_ALGORITHMS } from 'core/config/financeConstants';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from 'core/utils/Calculator';\nimport BorrowersPdfPage from '../BorrowersPdfPage';\n\ndescribe('BorrowersPdfPage', () => {\n  let props;\n  const component = () =>\n    getMountedComponent({ Component: BorrowersPdfPage, props });\n  const getRowValue = (table, at) =>\n    component()\n      .find(`${table} tr`)\n      .at(at)\n      .find('td')\n      .last()\n      .text();\n  const getRowLabel = (table, at) =>\n    component()\n      .find(`${table} tr`)\n      .at(at)\n      .find('td')\n      .first()\n      .text();\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    getMountedComponent.reset();\n    props = {\n      loan: { borrowers: [{ expenses: [] }] },\n      calculator: Calculator,\n    };\n  });\n\n  it('renders a title and 2 tables', () => {\n    expect(component().find('h1').length).to.equal(1);\n    expect(component().find('table').length).to.equal(2);\n  });\n\n  describe('Info table', () => {\n    it('renders an info table with rows depending on content', () => {\n      expect(component()\n        .find('table')\n        .at(0)\n        .find('tr').length).to.equal(3);\n\n      props.loan.borrowers = [\n        { expenses: [], childrenCount: 2, company: 'e-Potek' },\n      ];\n      getMountedComponent.reset();\n      expect(component()\n        .find('table')\n        .at(0)\n        .find('tr').length).to.equal(5);\n    });\n  });\n\n  describe('Finance table', () => {\n    it('has 2 subsections', () => {\n      expect(component()\n        .find('table')\n        .at(1)\n        .find('.subsection-row').length).to.equal(2);\n    });\n\n    it('contains income of the borrowers', () => {\n      props.loan.borrowers = [{ expenses: [], salary: 100000 }];\n      expect(getRowValue('.finance', 2)).to.equal('100 000');\n\n      props.loan.borrowers = [\n        { expenses: [], salary: 100000 },\n        { expenses: [], salary: 100000 },\n      ];\n      getMountedComponent.reset();\n      expect(getRowValue('.finance', 2)).to.equal('200 000');\n    });\n\n    it('renders realEstate income', () => {\n      props.loan.borrowers = [\n        {\n          expenses: [],\n          salary: 100000,\n          realEstate: [\n            { value: 1200000, loan: 960000, income: 100000 },\n            { value: 1200000, loan: 960000, income: 200000 },\n          ],\n        },\n      ];\n      expect(getRowValue('.finance', 3)).to.equal('300 000');\n    });\n\n    it('renders positive realEstate deltas', () => {\n      // Negative deltas are only displayed in the expenses\n      props.calculator = new CalculatorClass({\n        realEstateIncomeAlgorithm:\n          REAL_ESTATE_INCOME_ALGORITHMS.POSITIVE_NEGATIVE_SPLIT,\n      });\n      props.loan.borrowers = [\n        {\n          expenses: [],\n          salary: 100000,\n          realEstate: [\n            { value: 1200000, loan: 960000, income: 100000 },\n            { value: 1200000, loan: 960000, income: 50000 },\n          ],\n        },\n      ];\n      expect(getRowLabel('.finance', 3)).to.equal('Delta immobilier positif');\n      expect(getRowValue('.finance', 3)).to.equal('28 000');\n      expect(getRowLabel('.finance', 4)).to.include('Total');\n      expect(getRowValue('.finance', 4)).to.equal('128 000');\n    });\n  });\n});\n"]},"sourceType":"script","hash":"578061e91f05593b9a2007925a65caceb63d6dc7"}

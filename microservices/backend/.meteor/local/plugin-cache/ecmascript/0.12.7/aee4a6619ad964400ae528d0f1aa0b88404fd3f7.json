{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/slackListeners.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/slack/server/slackListeners.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/slackListeners.js","inputSourceMap":{"version":3,"sources":["imports/core/api/slack/server/slackListeners.js"],"names":["PropertyService","ServerEventService","bookPromotionLot","sellPromotionLot","proInviteUser","anonymousLoanInsert","userLoanInsert","anonymousCreateUser","PromotionLotService","UserService","LoanService","promotionLotBooked","promotionLotSold","referralOnlyNotification","newAnonymousLoan","newLoan","newUser","sendPropertyInvitations","sendPromotionInvitations","addMethodListener","context","userId","params","promotionLotId","loanId","currentUser","get","promotionLot","fetchOne","$filters","_id","name","promotion","assignedEmployee","email","user","attributedTo","propertyIds","properties","promotionIds","notificationPropertyIds","map","externalId","invitedUser","getByEmail","length","proPropertyId","referralId","result","property","address1","loanName","referral","organisations","loans"],"mappings":"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","sourcesContent":["import PropertyService from 'core/api/properties/server/PropertyService';\nimport ServerEventService from '../../events/server/ServerEventService';\nimport {\n  bookPromotionLot,\n  sellPromotionLot,\n  proInviteUser,\n  anonymousLoanInsert,\n  userLoanInsert,\n  anonymousCreateUser,\n} from '../../methods';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport UserService from '../../users/server/UserService';\nimport LoanService from '../../loans/server/LoanService';\nimport {\n  promotionLotBooked,\n  promotionLotSold,\n  referralOnlyNotification,\n  newAnonymousLoan,\n  newLoan,\n  newUser,\n} from './slackNotifications';\nimport {\n  sendPropertyInvitations,\n  sendPromotionInvitations,\n} from './slackNotificationHelpers';\n\nServerEventService.addMethodListener(\n  bookPromotionLot,\n  ({ context: { userId }, params: { promotionLotId, loanId } }) => {\n    const currentUser = UserService.get(userId);\n    const promotionLot = PromotionLotService.fetchOne({\n      $filters: { _id: promotionLotId },\n      name: 1,\n      promotion: { name: 1, assignedEmployee: { email: 1 } },\n    });\n    const { user } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      user: { name: 1 },\n    });\n\n    promotionLotBooked({ currentUser, promotionLot, user });\n  },\n);\n\nServerEventService.addMethodListener(\n  sellPromotionLot,\n  ({ context: { userId }, params: { promotionLotId } }) => {\n    const currentUser = UserService.get(userId);\n    const { attributedTo, ...promotionLot } = PromotionLotService.fetchOne({\n      $filters: { _id: promotionLotId },\n      name: 1,\n      promotion: { name: 1, assignedEmployee: { email: 1 } },\n      attributedTo: { _id: 1 },\n    });\n    const { user } = LoanService.fetchOne({\n      $filters: { _id: attributedTo._id },\n      user: { name: 1 },\n    });\n\n    promotionLotSold({ currentUser, promotionLot, user });\n  },\n);\n\nServerEventService.addMethodListener(\n  proInviteUser,\n  ({\n    context: { userId },\n    params: { propertyIds = [], properties = [], promotionIds = [], user },\n  }) => {\n    const notificationPropertyIds = [\n      ...propertyIds,\n      ...properties.map(({ _id, externalId }) => _id || externalId),\n    ];\n    const currentUser = UserService.get(userId);\n    const invitedUser = UserService.getByEmail(user.email);\n\n    sendPropertyInvitations(notificationPropertyIds, currentUser, {\n      ...invitedUser,\n      email: user.email,\n    });\n\n    sendPromotionInvitations(promotionIds, currentUser, {\n      ...invitedUser,\n      email: user.email,\n    });\n\n    if (notificationPropertyIds.length === 0 && promotionIds.length === 0) {\n      referralOnlyNotification({\n        currentUser,\n        user: { ...invitedUser, email: user.email },\n      });\n    }\n  },\n);\n\nServerEventService.addMethodListener(\n  anonymousLoanInsert,\n  ({ params: { proPropertyId, referralId }, result: loanId }) => {\n    const property = proPropertyId\n      && PropertyService.fetchOne({\n        $filters: { _id: proPropertyId },\n        address1: 1,\n      });\n    const { name: loanName } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      name: 1,\n    });\n    const referral = referralId\n      && UserService.fetchOne({\n        $filters: { _id: referralId },\n        name: 1,\n        organisations: { name: 1 },\n      });\n\n    newAnonymousLoan({ loanName, loanId, property, referral });\n  },\n);\n\nServerEventService.addMethodListener(\n  userLoanInsert,\n  ({ context: { userId }, result: loanId }) => {\n    const currentUser = UserService.get(userId);\n    const { name: loanName } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      name: 1,\n    });\n\n    newLoan({ loanId, loanName, currentUser });\n  },\n);\n\nServerEventService.addMethodListener(\n  anonymousCreateUser,\n  ({ result: userId }) => {\n    const currentUser = UserService.get(userId);\n    const { loans, name } = UserService.get(userId);\n\n    newUser({ loans, name, currentUser });\n  },\n);\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/slackListeners.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/slack/server/slackListeners.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nlet PropertyService;\nmodule.link(\"../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 0);\nlet ServerEventService;\nmodule.link(\"../../events/server/ServerEventService\", {\n  default(v) {\n    ServerEventService = v;\n  }\n\n}, 1);\nlet bookPromotionLot, sellPromotionLot, proInviteUser, anonymousLoanInsert, userLoanInsert, anonymousCreateUser;\nmodule.link(\"../../methods\", {\n  bookPromotionLot(v) {\n    bookPromotionLot = v;\n  },\n\n  sellPromotionLot(v) {\n    sellPromotionLot = v;\n  },\n\n  proInviteUser(v) {\n    proInviteUser = v;\n  },\n\n  anonymousLoanInsert(v) {\n    anonymousLoanInsert = v;\n  },\n\n  userLoanInsert(v) {\n    userLoanInsert = v;\n  },\n\n  anonymousCreateUser(v) {\n    anonymousCreateUser = v;\n  }\n\n}, 2);\nlet PromotionLotService;\nmodule.link(\"../../promotionLots/server/PromotionLotService\", {\n  default(v) {\n    PromotionLotService = v;\n  }\n\n}, 3);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 4);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 5);\nlet promotionLotBooked, promotionLotSold, referralOnlyNotification, newAnonymousLoan, newLoan, newUser;\nmodule.link(\"./slackNotifications\", {\n  promotionLotBooked(v) {\n    promotionLotBooked = v;\n  },\n\n  promotionLotSold(v) {\n    promotionLotSold = v;\n  },\n\n  referralOnlyNotification(v) {\n    referralOnlyNotification = v;\n  },\n\n  newAnonymousLoan(v) {\n    newAnonymousLoan = v;\n  },\n\n  newLoan(v) {\n    newLoan = v;\n  },\n\n  newUser(v) {\n    newUser = v;\n  }\n\n}, 6);\nlet sendPropertyInvitations, sendPromotionInvitations;\nmodule.link(\"./slackNotificationHelpers\", {\n  sendPropertyInvitations(v) {\n    sendPropertyInvitations = v;\n  },\n\n  sendPromotionInvitations(v) {\n    sendPromotionInvitations = v;\n  }\n\n}, 7);\nServerEventService.addMethodListener(bookPromotionLot, ({\n  context: {\n    userId\n  },\n  params: {\n    promotionLotId,\n    loanId\n  }\n}) => {\n  const currentUser = UserService.get(userId);\n  const promotionLot = PromotionLotService.fetchOne({\n    $filters: {\n      _id: promotionLotId\n    },\n    name: 1,\n    promotion: {\n      name: 1,\n      assignedEmployee: {\n        email: 1\n      }\n    }\n  });\n  const {\n    user\n  } = LoanService.fetchOne({\n    $filters: {\n      _id: loanId\n    },\n    user: {\n      name: 1\n    }\n  });\n  promotionLotBooked({\n    currentUser,\n    promotionLot,\n    user\n  });\n});\nServerEventService.addMethodListener(sellPromotionLot, ({\n  context: {\n    userId\n  },\n  params: {\n    promotionLotId\n  }\n}) => {\n  const currentUser = UserService.get(userId);\n\n  const _PromotionLotService$ = PromotionLotService.fetchOne({\n    $filters: {\n      _id: promotionLotId\n    },\n    name: 1,\n    promotion: {\n      name: 1,\n      assignedEmployee: {\n        email: 1\n      }\n    },\n    attributedTo: {\n      _id: 1\n    }\n  }),\n        {\n    attributedTo\n  } = _PromotionLotService$,\n        promotionLot = (0, _objectWithoutProperties2.default)(_PromotionLotService$, [\"attributedTo\"]);\n\n  const {\n    user\n  } = LoanService.fetchOne({\n    $filters: {\n      _id: attributedTo._id\n    },\n    user: {\n      name: 1\n    }\n  });\n  promotionLotSold({\n    currentUser,\n    promotionLot,\n    user\n  });\n});\nServerEventService.addMethodListener(proInviteUser, ({\n  context: {\n    userId\n  },\n  params: {\n    propertyIds = [],\n    properties = [],\n    promotionIds = [],\n    user\n  }\n}) => {\n  const notificationPropertyIds = [...propertyIds, ...properties.map(({\n    _id,\n    externalId\n  }) => _id || externalId)];\n  const currentUser = UserService.get(userId);\n  const invitedUser = UserService.getByEmail(user.email);\n  sendPropertyInvitations(notificationPropertyIds, currentUser, (0, _objectSpread2.default)({}, invitedUser, {\n    email: user.email\n  }));\n  sendPromotionInvitations(promotionIds, currentUser, (0, _objectSpread2.default)({}, invitedUser, {\n    email: user.email\n  }));\n\n  if (notificationPropertyIds.length === 0 && promotionIds.length === 0) {\n    referralOnlyNotification({\n      currentUser,\n      user: (0, _objectSpread2.default)({}, invitedUser, {\n        email: user.email\n      })\n    });\n  }\n});\nServerEventService.addMethodListener(anonymousLoanInsert, ({\n  params: {\n    proPropertyId,\n    referralId\n  },\n  result: loanId\n}) => {\n  const property = proPropertyId && PropertyService.fetchOne({\n    $filters: {\n      _id: proPropertyId\n    },\n    address1: 1\n  });\n  const {\n    name: loanName\n  } = LoanService.fetchOne({\n    $filters: {\n      _id: loanId\n    },\n    name: 1\n  });\n  const referral = referralId && UserService.fetchOne({\n    $filters: {\n      _id: referralId\n    },\n    name: 1,\n    organisations: {\n      name: 1\n    }\n  });\n  newAnonymousLoan({\n    loanName,\n    loanId,\n    property,\n    referral\n  });\n});\nServerEventService.addMethodListener(userLoanInsert, ({\n  context: {\n    userId\n  },\n  result: loanId\n}) => {\n  const currentUser = UserService.get(userId);\n  const {\n    name: loanName\n  } = LoanService.fetchOne({\n    $filters: {\n      _id: loanId\n    },\n    name: 1\n  });\n  newLoan({\n    loanId,\n    loanName,\n    currentUser\n  });\n});\nServerEventService.addMethodListener(anonymousCreateUser, ({\n  result: userId\n}) => {\n  const currentUser = UserService.get(userId);\n  const {\n    loans,\n    name\n  } = UserService.get(userId);\n  newUser({\n    loans,\n    name,\n    currentUser\n  });\n});","map":{"version":3,"sources":["imports/core/api/slack/server/slackListeners.js"],"names":["ServerEventService","context","userId","params","loanId","currentUser","UserService","promotionLot","$filters","_id","promotionLotId","name","promotion","assignedEmployee","email","user","promotionLotBooked","attributedTo","promotionLotSold","propertyIds","properties","promotionIds","notificationPropertyIds","externalId","invitedUser","sendPropertyInvitations","sendPromotionInvitations","referralOnlyNotification","referralId","result","property","proPropertyId","address1","loanName","referral","organisations","newAnonymousLoan","newLoan","newUser"],"mappings":"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","sourcesContent":["import PropertyService from 'core/api/properties/server/PropertyService';\nimport ServerEventService from '../../events/server/ServerEventService';\nimport {\n  bookPromotionLot,\n  sellPromotionLot,\n  proInviteUser,\n  anonymousLoanInsert,\n  userLoanInsert,\n  anonymousCreateUser,\n} from '../../methods';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport UserService from '../../users/server/UserService';\nimport LoanService from '../../loans/server/LoanService';\nimport {\n  promotionLotBooked,\n  promotionLotSold,\n  referralOnlyNotification,\n  newAnonymousLoan,\n  newLoan,\n  newUser,\n} from './slackNotifications';\nimport {\n  sendPropertyInvitations,\n  sendPromotionInvitations,\n} from './slackNotificationHelpers';\n\nServerEventService.addMethodListener(\n  bookPromotionLot,\n  ({ context: { userId }, params: { promotionLotId, loanId } }) => {\n    const currentUser = UserService.get(userId);\n    const promotionLot = PromotionLotService.fetchOne({\n      $filters: { _id: promotionLotId },\n      name: 1,\n      promotion: { name: 1, assignedEmployee: { email: 1 } },\n    });\n    const { user } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      user: { name: 1 },\n    });\n\n    promotionLotBooked({ currentUser, promotionLot, user });\n  },\n);\n\nServerEventService.addMethodListener(\n  sellPromotionLot,\n  ({ context: { userId }, params: { promotionLotId } }) => {\n    const currentUser = UserService.get(userId);\n    const { attributedTo, ...promotionLot } = PromotionLotService.fetchOne({\n      $filters: { _id: promotionLotId },\n      name: 1,\n      promotion: { name: 1, assignedEmployee: { email: 1 } },\n      attributedTo: { _id: 1 },\n    });\n    const { user } = LoanService.fetchOne({\n      $filters: { _id: attributedTo._id },\n      user: { name: 1 },\n    });\n\n    promotionLotSold({ currentUser, promotionLot, user });\n  },\n);\n\nServerEventService.addMethodListener(\n  proInviteUser,\n  ({\n    context: { userId },\n    params: { propertyIds = [], properties = [], promotionIds = [], user },\n  }) => {\n    const notificationPropertyIds = [\n      ...propertyIds,\n      ...properties.map(({ _id, externalId }) => _id || externalId),\n    ];\n    const currentUser = UserService.get(userId);\n    const invitedUser = UserService.getByEmail(user.email);\n\n    sendPropertyInvitations(notificationPropertyIds, currentUser, {\n      ...invitedUser,\n      email: user.email,\n    });\n\n    sendPromotionInvitations(promotionIds, currentUser, {\n      ...invitedUser,\n      email: user.email,\n    });\n\n    if (notificationPropertyIds.length === 0 && promotionIds.length === 0) {\n      referralOnlyNotification({\n        currentUser,\n        user: { ...invitedUser, email: user.email },\n      });\n    }\n  },\n);\n\nServerEventService.addMethodListener(\n  anonymousLoanInsert,\n  ({ params: { proPropertyId, referralId }, result: loanId }) => {\n    const property = proPropertyId\n      && PropertyService.fetchOne({\n        $filters: { _id: proPropertyId },\n        address1: 1,\n      });\n    const { name: loanName } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      name: 1,\n    });\n    const referral = referralId\n      && UserService.fetchOne({\n        $filters: { _id: referralId },\n        name: 1,\n        organisations: { name: 1 },\n      });\n\n    newAnonymousLoan({ loanName, loanId, property, referral });\n  },\n);\n\nServerEventService.addMethodListener(\n  userLoanInsert,\n  ({ context: { userId }, result: loanId }) => {\n    const currentUser = UserService.get(userId);\n    const { name: loanName } = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      name: 1,\n    });\n\n    newLoan({ loanId, loanName, currentUser });\n  },\n);\n\nServerEventService.addMethodListener(\n  anonymousCreateUser,\n  ({ result: userId }) => {\n    const currentUser = UserService.get(userId);\n    const { loans, name } = UserService.get(userId);\n\n    newUser({ loans, name, currentUser });\n  },\n);\n"]},"sourceType":"script","hash":"aee4a6619ad964400ae528d0f1aa0b88404fd3f7"}

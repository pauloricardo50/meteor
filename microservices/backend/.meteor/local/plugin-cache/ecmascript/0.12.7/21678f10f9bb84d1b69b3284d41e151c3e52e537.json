{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/MiddlewareManager/test/argumentMapperMiddleware.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/MiddlewareManager/test/argumentMapperMiddleware.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/MiddlewareManager/test/argumentMapperMiddleware.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/MiddlewareManager/test/argumentMapperMiddleware.spec.js"],"names":["expect","makeArgumentMapper","MiddlewareManager","describe","Calculator","multiply","a","b","divide","calc","beforeEach","it","to","equal","middleware","c","d","middlewareManager"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport makeArgumentMapper from '../argumentMapperMiddleware';\nimport MiddlewareManager from '../MiddlewareManager';\n\ndescribe('argumentMapperMiddleware', () => {\n  class Calculator {\n    multiply({ a, b }) {\n      return a * b;\n    }\n\n    divide(a, b) {\n      return a / b;\n    }\n  }\n\n  let calc;\n\n  beforeEach(() => {\n    calc = new Calculator();\n  });\n\n  it('works for functions that take objects', () => {\n    expect(calc.multiply({ a: 2, b: 3 })).to.equal(6);\n\n    const middleware = makeArgumentMapper({\n      multiply: ({ c, d }) => ({ a: c, b: d }),\n    });\n    const middlewareManager = new MiddlewareManager(calc, middleware);\n\n    expect(calc.multiply({ c: 2, d: 3 })).to.equal(6);\n  });\n\n  it('works for functions that take multiple arguments', () => {\n    expect(calc.divide(4, 4)).to.equal(1);\n\n    const middleware = makeArgumentMapper({\n      divide: ({ a, b }) => [a, b],\n    });\n    const middlewareManager = new MiddlewareManager(calc, middleware);\n\n    expect(calc.divide({ a: 4, b: 4 })).to.equal(1);\n  });\n\n  it('does not alter methods without mappings', () => {\n    const middleware = makeArgumentMapper({\n      multiply: ({ c, d }) => ({ a: c, b: d }),\n    });\n    const middlewareManager = new MiddlewareManager(calc, middleware);\n\n    expect(calc.multiply({ c: 2, d: 3 })).to.equal(6);\n    expect(calc.divide(4, 4)).to.equal(1);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/MiddlewareManager/test/argumentMapperMiddleware.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/MiddlewareManager/test/argumentMapperMiddleware.spec.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar makeArgumentMapper;\nmodule.link(\"../argumentMapperMiddleware\", {\n  \"default\": function (v) {\n    makeArgumentMapper = v;\n  }\n}, 1);\nvar MiddlewareManager;\nmodule.link(\"../MiddlewareManager\", {\n  \"default\": function (v) {\n    MiddlewareManager = v;\n  }\n}, 2);\ndescribe('argumentMapperMiddleware', function () {\n  var Calculator =\n  /*#__PURE__*/\n  function () {\n    function Calculator() {}\n\n    var _proto = Calculator.prototype;\n\n    _proto.multiply = function () {\n      function multiply(_ref) {\n        var a = _ref.a,\n            b = _ref.b;\n        return a * b;\n      }\n\n      return multiply;\n    }();\n\n    _proto.divide = function () {\n      function divide(a, b) {\n        return a / b;\n      }\n\n      return divide;\n    }();\n\n    return Calculator;\n  }();\n\n  var calc;\n  beforeEach(function () {\n    calc = new Calculator();\n  });\n  it('works for functions that take objects', function () {\n    expect(calc.multiply({\n      a: 2,\n      b: 3\n    })).to.equal(6);\n    var middleware = makeArgumentMapper({\n      multiply: function (_ref2) {\n        var c = _ref2.c,\n            d = _ref2.d;\n        return {\n          a: c,\n          b: d\n        };\n      }\n    });\n    var middlewareManager = new MiddlewareManager(calc, middleware);\n    expect(calc.multiply({\n      c: 2,\n      d: 3\n    })).to.equal(6);\n  });\n  it('works for functions that take multiple arguments', function () {\n    expect(calc.divide(4, 4)).to.equal(1);\n    var middleware = makeArgumentMapper({\n      divide: function (_ref3) {\n        var a = _ref3.a,\n            b = _ref3.b;\n        return [a, b];\n      }\n    });\n    var middlewareManager = new MiddlewareManager(calc, middleware);\n    expect(calc.divide({\n      a: 4,\n      b: 4\n    })).to.equal(1);\n  });\n  it('does not alter methods without mappings', function () {\n    var middleware = makeArgumentMapper({\n      multiply: function (_ref4) {\n        var c = _ref4.c,\n            d = _ref4.d;\n        return {\n          a: c,\n          b: d\n        };\n      }\n    });\n    var middlewareManager = new MiddlewareManager(calc, middleware);\n    expect(calc.multiply({\n      c: 2,\n      d: 3\n    })).to.equal(6);\n    expect(calc.divide(4, 4)).to.equal(1);\n  });\n});","map":{"version":3,"sources":["imports/core/utils/MiddlewareManager/test/argumentMapperMiddleware.spec.js"],"names":["describe","multiply","b","a","divide","beforeEach","calc","it","expect","middleware","makeArgumentMapper","d","middlewareManager","c"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport makeArgumentMapper from '../argumentMapperMiddleware';\nimport MiddlewareManager from '../MiddlewareManager';\n\ndescribe('argumentMapperMiddleware', () => {\n  class Calculator {\n    multiply({ a, b }) {\n      return a * b;\n    }\n\n    divide(a, b) {\n      return a / b;\n    }\n  }\n\n  let calc;\n\n  beforeEach(() => {\n    calc = new Calculator();\n  });\n\n  it('works for functions that take objects', () => {\n    expect(calc.multiply({ a: 2, b: 3 })).to.equal(6);\n\n    const middleware = makeArgumentMapper({\n      multiply: ({ c, d }) => ({ a: c, b: d }),\n    });\n    const middlewareManager = new MiddlewareManager(calc, middleware);\n\n    expect(calc.multiply({ c: 2, d: 3 })).to.equal(6);\n  });\n\n  it('works for functions that take multiple arguments', () => {\n    expect(calc.divide(4, 4)).to.equal(1);\n\n    const middleware = makeArgumentMapper({\n      divide: ({ a, b }) => [a, b],\n    });\n    const middlewareManager = new MiddlewareManager(calc, middleware);\n\n    expect(calc.divide({ a: 4, b: 4 })).to.equal(1);\n  });\n\n  it('does not alter methods without mappings', () => {\n    const middleware = makeArgumentMapper({\n      multiply: ({ c, d }) => ({ a: c, b: d }),\n    });\n    const middlewareManager = new MiddlewareManager(calc, middleware);\n\n    expect(calc.multiply({ c: 2, d: 3 })).to.equal(6);\n    expect(calc.divide(4, 4)).to.equal(1);\n  });\n});\n"]},"sourceType":"script","hash":"21678f10f9bb84d1b69b3284d41e151c3e52e537"}

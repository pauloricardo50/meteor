{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/irs10y/server/test/Irs10yService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/irs10y/server/test/Irs10yService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/irs10y/server/test/Irs10yService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/irs10y/server/test/Irs10yService.test.js"],"names":["expect","resetDatabase","Irs10yService","describe","beforeEach","it","newRate","date","Date","rate","insert","results","find","fetch","to","deep","include","yesterday","setDate","getDate","length","equal","throw"],"mappings":"AAAA;;AACA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,OAAOC,aAAP;AAEAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC9BC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,aAAa;AACd,GAFS,CAAV;AAIAE,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBE,IAAAA,EAAE,CAAC,gBAAD,EAAmB,MAAM;AACzB,YAAMC,OAAO,GAAG;AAAEC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,EAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAhB;AACAP,MAAAA,aAAa,CAACQ,MAAd,CAAqBJ,OAArB;AAEA,YAAMK,OAAO,GAAGT,aAAa,CAACU,IAAd,CAAmB,EAAnB,EAAuBC,KAAvB,EAAhB;AAEAb,MAAAA,MAAM,CAACW,OAAO,CAAC,CAAD,CAAR,CAAN,CAAmBG,EAAnB,CAAsBC,IAAtB,CAA2BC,OAA3B,CAAmCV,OAAnC;AACD,KAPC,CAAF;AASAD,IAAAA,EAAE,CAAC,iDAAD,EAAoD,MAAM;AAC1D,YAAMC,OAAO,GAAG;AAAEC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,EAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAhB;AACA,YAAMQ,SAAS,GAAG,IAAIT,IAAJ,EAAlB;AACAS,MAAAA,SAAS,CAACC,OAAV,CAAkBD,SAAS,CAACE,OAAV,KAAsB,CAAxC;AAEAjB,MAAAA,aAAa,CAACQ,MAAd,CAAqB;AAAEH,QAAAA,IAAI,EAAEU,SAAR;AAAmBR,QAAAA,IAAI,EAAE;AAAzB,OAArB;AACAP,MAAAA,aAAa,CAACQ,MAAd,CAAqBJ,OAArB;AAEA,YAAMK,OAAO,GAAGT,aAAa,CAACU,IAAd,CAAmB,EAAnB,EAAuBC,KAAvB,EAAhB;AAEAb,MAAAA,MAAM,CAACW,OAAO,CAACS,MAAT,CAAN,CAAuBN,EAAvB,CAA0BO,KAA1B,CAAgC,CAAhC;AACD,KAXC,CAAF;AAaAhB,IAAAA,EAAE,CAAC,sDAAD,EAAyD,MAAM;AAC/D,YAAMC,OAAO,GAAG;AAAEC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,EAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAhB;AACAP,MAAAA,aAAa,CAACQ,MAAd,CAAqBJ,OAArB;AACAN,MAAAA,MAAM,CAAC,MAAME,aAAa,CAACQ,MAAd,CAAqBJ,OAArB,CAAP,CAAN,CAA4CQ,EAA5C,CAA+CQ,KAA/C,CAAqD,aAArD;AAEA,YAAMX,OAAO,GAAGT,aAAa,CAACU,IAAd,CAAmB,EAAnB,EAAuBC,KAAvB,EAAhB;AAEAb,MAAAA,MAAM,CAACW,OAAO,CAACS,MAAT,CAAN,CAAuBN,EAAvB,CAA0BO,KAA1B,CAAgC,CAAhC;AACD,KARC,CAAF;AASD,GAhCO,CAAR;AAiCD,CAtCO,CAAR","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport Irs10yService from '../Irs10yService';\n\ndescribe('Irs10yService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('insert', () => {\n    it('inserts a rate', () => {\n      const newRate = { date: new Date(), rate: 0.01 };\n      Irs10yService.insert(newRate);\n\n      const results = Irs10yService.find({}).fetch();\n\n      expect(results[0]).to.deep.include(newRate);\n    });\n\n    it('inserts a rate if there is none in the same day', () => {\n      const newRate = { date: new Date(), rate: 0.01 };\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n\n      Irs10yService.insert({ date: yesterday, rate: 0.01 });\n      Irs10yService.insert(newRate);\n\n      const results = Irs10yService.find({}).fetch();\n\n      expect(results.length).to.equal(2);\n    });\n\n    it('does not insert a rate if it already exists that day', () => {\n      const newRate = { date: new Date(), rate: 0.01 };\n      Irs10yService.insert(newRate);\n      expect(() => Irs10yService.insert(newRate)).to.throw('existe déjà');\n\n      const results = Irs10yService.find({}).fetch();\n\n      expect(results.length).to.equal(1);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/irs10y/server/test/Irs10yService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/irs10y/server/test/Irs10yService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Irs10yService;\nmodule.link(\"../Irs10yService\", {\n  default(v) {\n    Irs10yService = v;\n  }\n\n}, 2);\ndescribe('Irs10yService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('insert', () => {\n    it('inserts a rate', () => {\n      const newRate = {\n        date: new Date(),\n        rate: 0.01\n      };\n      Irs10yService.insert(newRate);\n      const results = Irs10yService.find({}).fetch();\n      expect(results[0]).to.deep.include(newRate);\n    });\n    it('inserts a rate if there is none in the same day', () => {\n      const newRate = {\n        date: new Date(),\n        rate: 0.01\n      };\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n      Irs10yService.insert({\n        date: yesterday,\n        rate: 0.01\n      });\n      Irs10yService.insert(newRate);\n      const results = Irs10yService.find({}).fetch();\n      expect(results.length).to.equal(2);\n    });\n    it('does not insert a rate if it already exists that day', () => {\n      const newRate = {\n        date: new Date(),\n        rate: 0.01\n      };\n      Irs10yService.insert(newRate);\n      expect(() => Irs10yService.insert(newRate)).to.throw('existe déjà');\n      const results = Irs10yService.find({}).fetch();\n      expect(results.length).to.equal(1);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/irs10y/server/test/Irs10yService.test.js"],"names":["describe","beforeEach","resetDatabase","it","newRate","date","rate","Irs10yService","results","expect","yesterday"],"mappings":"AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,uBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAOAA,QAAQ,CAAA,eAAA,EAAkB,MAAM;AAC9BC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,aAAa;AADfD,GAAU,CAAVA;AAIAD,EAAAA,QAAQ,CAAA,QAAA,EAAW,MAAM;AACvBG,IAAAA,EAAE,CAAA,gBAAA,EAAmB,MAAM;AACzB,YAAMC,OAAO,GAAG;AAAEC,QAAAA,IAAI,EAAE,IAAR,IAAQ,EAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAhB;AACAC,MAAAA,aAAa,CAAbA,MAAAA,CAAAA,OAAAA;AAEA,YAAMC,OAAO,GAAGD,aAAa,CAAbA,IAAAA,CAAAA,EAAAA,EAAhB,KAAgBA,EAAhB;AAEAE,MAAAA,MAAM,CAACD,OAAO,CAAdC,CAAc,CAAR,CAANA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,OAAAA,CAAAA,OAAAA;AANFN,KAAE,CAAFA;AASAA,IAAAA,EAAE,CAAA,iDAAA,EAAoD,MAAM;AAC1D,YAAMC,OAAO,GAAG;AAAEC,QAAAA,IAAI,EAAE,IAAR,IAAQ,EAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAhB;AACA,YAAMI,SAAS,GAAG,IAAlB,IAAkB,EAAlB;AACAA,MAAAA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAATA,OAAAA,KAAlBA,CAAAA;AAEAH,MAAAA,aAAa,CAAbA,MAAAA,CAAqB;AAAEF,QAAAA,IAAI,EAAN,SAAA;AAAmBC,QAAAA,IAAI,EAAE;AAAzB,OAArBC;AACAA,MAAAA,aAAa,CAAbA,MAAAA,CAAAA,OAAAA;AAEA,YAAMC,OAAO,GAAGD,aAAa,CAAbA,IAAAA,CAAAA,EAAAA,EAAhB,KAAgBA,EAAhB;AAEAE,MAAAA,MAAM,CAACD,OAAO,CAAdC,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAVFN,KAAE,CAAFA;AAaAA,IAAAA,EAAE,CAAA,sDAAA,EAAyD,MAAM;AAC/D,YAAMC,OAAO,GAAG;AAAEC,QAAAA,IAAI,EAAE,IAAR,IAAQ,EAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAhB;AACAC,MAAAA,aAAa,CAAbA,MAAAA,CAAAA,OAAAA;AACAE,MAAAA,MAAM,CAAC,MAAMF,aAAa,CAAbA,MAAAA,CAAbE,OAAaF,CAAP,CAANE,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,aAAAA;AAEA,YAAMD,OAAO,GAAGD,aAAa,CAAbA,IAAAA,CAAAA,EAAAA,EAAhB,KAAgBA,EAAhB;AAEAE,MAAAA,MAAM,CAACD,OAAO,CAAdC,MAAM,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,CAAAA;AAPFN,KAAE,CAAFA;AAvBFH,GAAQ,CAARA;AALFA,CAAQ,CAARA","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport Irs10yService from '../Irs10yService';\n\ndescribe('Irs10yService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('insert', () => {\n    it('inserts a rate', () => {\n      const newRate = { date: new Date(), rate: 0.01 };\n      Irs10yService.insert(newRate);\n\n      const results = Irs10yService.find({}).fetch();\n\n      expect(results[0]).to.deep.include(newRate);\n    });\n\n    it('inserts a rate if there is none in the same day', () => {\n      const newRate = { date: new Date(), rate: 0.01 };\n      const yesterday = new Date();\n      yesterday.setDate(yesterday.getDate() - 1);\n\n      Irs10yService.insert({ date: yesterday, rate: 0.01 });\n      Irs10yService.insert(newRate);\n\n      const results = Irs10yService.find({}).fetch();\n\n      expect(results.length).to.equal(2);\n    });\n\n    it('does not insert a rate if it already exists that day', () => {\n      const newRate = { date: new Date(), rate: 0.01 };\n      Irs10yService.insert(newRate);\n      expect(() => Irs10yService.insert(newRate)).to.throw('existe déjà');\n\n      const results = Irs10yService.find({}).fetch();\n\n      expect(results.length).to.equal(1);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"9637afe479b618a9d556084f0a6cceb816d6b8c7"}

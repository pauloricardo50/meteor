{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/revenues/server/hooks.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/revenues/server/hooks.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/revenues/server/hooks.js","inputSourceMap":{"version":3,"sources":["imports/core/api/revenues/server/hooks.js"],"names":["NotificationService","Revenues","REVENUE_STATUS","before","update","userId","_id","revenueId","expectedAt","oldDate","fieldNames","modifier","includes","newStatus","$set","status","newPaidAt","paidAt","CLOSED","readNotificationAll","filters","newDate","getTime","remove"],"mappings":"AAAA,OAAOA,mBAAP;AACA,OAAOC,QAAP,MAAqB,IAArB;AACA,SAASC,cAAT;AAEAD,QAAQ,CAACE,MAAT,CAAgBC,MAAhB,CAAuB,CAACC,MAAD,EAAS;AAAEC,EAAAA,GAAG,EAAEC,SAAP;AAAkBC,EAAAA,UAAU,EAAEC;AAA9B,CAAT,EAAkDC,UAAlD,EAA8DC,QAA9D,KAA2E;AAChG;AACA;AACA,MAAID,UAAU,CAACE,QAAX,CAAoB,QAApB,KAAiCF,UAAU,CAACE,QAAX,CAAoB,QAApB,CAArC,EAAoE;AAClE,UAAMC,SAAS,GAAGF,QAAQ,CAACG,IAAT,IAAiBH,QAAQ,CAACG,IAAT,CAAcC,MAAjD;AACA,UAAMC,SAAS,GAAGL,QAAQ,CAACG,IAAT,IAAiBH,QAAQ,CAACG,IAAT,CAAcG,MAAjD;;AAEA,QAAIJ,SAAS,KAAKX,cAAc,CAACgB,MAA7B,IAAuCF,SAA3C,EAAsD;AACpDhB,MAAAA,mBAAmB,CAACmB,mBAApB,CAAwC;AACtCC,QAAAA,OAAO,EAAE;AAAE,6BAAmBb;AAArB;AAD6B,OAAxC;AAGD;AACF,GAZ+F,CAchG;;;AACA,MAAIG,UAAU,CAACE,QAAX,CAAoB,YAApB,CAAJ,EAAuC;AACrC,UAAMS,OAAO,GAAGV,QAAQ,CAACG,IAAT,IAAiBH,QAAQ,CAACG,IAAT,CAAcN,UAA/C;;AAEA,QAAI,CAACa,OAAO,IAAIA,OAAO,CAACC,OAAR,EAAZ,OAAoCb,OAAO,IAAIA,OAAO,CAACa,OAAR,EAA/C,CAAJ,EAAuE;AACrEtB,MAAAA,mBAAmB,CAACuB,MAApB,CAA2B;AAAE,2BAAmBhB;AAArB,OAA3B;AACD;AACF;AACF,CAtBD","sourcesContent":["import NotificationService from '../../notifications/server/NotificationService';\nimport Revenues from '..';\nimport { REVENUE_STATUS } from '../revenueConstants';\n\nRevenues.before.update((userId, { _id: revenueId, expectedAt: oldDate }, fieldNames, modifier) => {\n  // Read the notification automatically if a paidAt date is added, or if\n  // the status is set to CLOSED\n  if (fieldNames.includes('status') || fieldNames.includes('paidAt')) {\n    const newStatus = modifier.$set && modifier.$set.status;\n    const newPaidAt = modifier.$set && modifier.$set.paidAt;\n\n    if (newStatus === REVENUE_STATUS.CLOSED || newPaidAt) {\n      NotificationService.readNotificationAll({\n        filters: { 'revenueLink._id': revenueId },\n      });\n    }\n  }\n\n  // Cancel notification if expetedAt changes\n  if (fieldNames.includes('expectedAt')) {\n    const newDate = modifier.$set && modifier.$set.expectedAt;\n\n    if ((newDate && newDate.getTime()) !== (oldDate && oldDate.getTime())) {\n      NotificationService.remove({ 'revenueLink._id': revenueId });\n    }\n  }\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/revenues/server/hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/revenues/server/hooks.js"}},"code":"let NotificationService;\nmodule.link(\"../../notifications/server/NotificationService\", {\n  default(v) {\n    NotificationService = v;\n  }\n\n}, 0);\nlet Revenues;\nmodule.link(\"..\", {\n  default(v) {\n    Revenues = v;\n  }\n\n}, 1);\nlet REVENUE_STATUS;\nmodule.link(\"../revenueConstants\", {\n  REVENUE_STATUS(v) {\n    REVENUE_STATUS = v;\n  }\n\n}, 2);\nRevenues.before.update((userId, {\n  _id: revenueId,\n  expectedAt: oldDate\n}, fieldNames, modifier) => {\n  // Read the notification automatically if a paidAt date is added, or if\n  // the status is set to CLOSED\n  if (fieldNames.includes('status') || fieldNames.includes('paidAt')) {\n    const newStatus = modifier.$set && modifier.$set.status;\n    const newPaidAt = modifier.$set && modifier.$set.paidAt;\n\n    if (newStatus === REVENUE_STATUS.CLOSED || newPaidAt) {\n      NotificationService.readNotificationAll({\n        filters: {\n          'revenueLink._id': revenueId\n        }\n      });\n    }\n  } // Cancel notification if expetedAt changes\n\n\n  if (fieldNames.includes('expectedAt')) {\n    const newDate = modifier.$set && modifier.$set.expectedAt;\n\n    if ((newDate && newDate.getTime()) !== (oldDate && oldDate.getTime())) {\n      NotificationService.remove({\n        'revenueLink._id': revenueId\n      });\n    }\n  }\n});","map":{"version":3,"sources":["imports/core/api/revenues/server/hooks.js"],"names":["Revenues","_id","expectedAt","oldDate","fieldNames","newStatus","modifier","newPaidAt","REVENUE_STATUS","NotificationService","filters","revenueId","newDate"],"mappings":"AAAA,IAAA,mBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,gDAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,QAAA;AAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,cAAA;AAAA,MAAA,CAAA,IAAA,CAAA,qBAAA,EAAA;AAAA,EAAA,cAAA,CAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAIAA,QAAQ,CAARA,MAAAA,CAAAA,MAAAA,CAAuB,CAAA,MAAA,EAAS;AAAEC,EAAAA,GAAG,EAAL,SAAA;AAAkBC,EAAAA,UAAU,EAAEC;AAA9B,CAAT,EAAA,UAAA,EAAA,QAAA,KAA2E;AAChG;AACA;AACA,MAAIC,UAAU,CAAVA,QAAAA,CAAAA,QAAAA,KAAiCA,UAAU,CAAVA,QAAAA,CAArC,QAAqCA,CAArC,EAAoE;AAClE,UAAMC,SAAS,GAAGC,QAAQ,CAARA,IAAAA,IAAiBA,QAAQ,CAARA,IAAAA,CAAnC,MAAA;AACA,UAAMC,SAAS,GAAGD,QAAQ,CAARA,IAAAA,IAAiBA,QAAQ,CAARA,IAAAA,CAAnC,MAAA;;AAEA,QAAID,SAAS,KAAKG,cAAc,CAA5BH,MAAAA,IAAJ,SAAA,EAAsD;AACpDI,MAAAA,mBAAmB,CAAnBA,mBAAAA,CAAwC;AACtCC,QAAAA,OAAO,EAAE;AAAE,6BAAmBC;AAArB;AAD6B,OAAxCF;AAGD;AAX6F,GAAA,CAchG;;;AACA,MAAIL,UAAU,CAAVA,QAAAA,CAAJ,YAAIA,CAAJ,EAAuC;AACrC,UAAMQ,OAAO,GAAGN,QAAQ,CAARA,IAAAA,IAAiBA,QAAQ,CAARA,IAAAA,CAAjC,UAAA;;AAEA,QAAI,CAACM,OAAO,IAAIA,OAAO,CAAnB,OAAYA,EAAZ,OAAoCT,OAAO,IAAIA,OAAO,CAA1D,OAAmDA,EAA/C,CAAJ,EAAuE;AACrEM,MAAAA,mBAAmB,CAAnBA,MAAAA,CAA2B;AAAE,2BAAmBE;AAArB,OAA3BF;AACD;AACF;AArBHT,CAAAA","sourcesContent":["import NotificationService from '../../notifications/server/NotificationService';\nimport Revenues from '..';\nimport { REVENUE_STATUS } from '../revenueConstants';\n\nRevenues.before.update((userId, { _id: revenueId, expectedAt: oldDate }, fieldNames, modifier) => {\n  // Read the notification automatically if a paidAt date is added, or if\n  // the status is set to CLOSED\n  if (fieldNames.includes('status') || fieldNames.includes('paidAt')) {\n    const newStatus = modifier.$set && modifier.$set.status;\n    const newPaidAt = modifier.$set && modifier.$set.paidAt;\n\n    if (newStatus === REVENUE_STATUS.CLOSED || newPaidAt) {\n      NotificationService.readNotificationAll({\n        filters: { 'revenueLink._id': revenueId },\n      });\n    }\n  }\n\n  // Cancel notification if expetedAt changes\n  if (fieldNames.includes('expectedAt')) {\n    const newDate = modifier.$set && modifier.$set.expectedAt;\n\n    if ((newDate && newDate.getTime()) !== (oldDate && oldDate.getTime())) {\n      NotificationService.remove({ 'revenueLink._id': revenueId });\n    }\n  }\n});\n"]},"sourceType":"script","hash":"0ca1e9e28841ffa5eaf8ab18cb5ca65b34b6ca92"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/exposures.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/users/server/exposures.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/exposures.js","inputSourceMap":{"version":3,"sources":["imports/core/api/users/server/exposures.js"],"names":["Match","Roles","Meteor","exposeQuery","ROLES","SecurityService","adminUsers","appUser","currentUser","proReferredByUsers","userEmails","userSearch","proUser","proReferredByUsersResolver","query","overrides","embody","body","params","$filter","filters","roles","_id","admins","assignedEmployeeId","_userId","$in","userIsDev","userIsInRole","user","DEV","ADMIN","validateParams","Maybe","String","Boolean","OneOf","Object","options","allowFilterById","firewall","userId","providedUserId","organisationId","ownReferredUsers","checkUserIsPro","checkUserIsAdmin","resolver","searchQuery"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Meteor } from 'meteor/meteor';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { ROLES } from '../../constants';\nimport SecurityService from '../../security';\nimport {\n  adminUsers,\n  appUser,\n  currentUser,\n  proReferredByUsers,\n  userEmails,\n  userSearch,\n  proUser,\n} from '../queries';\nimport { proReferredByUsersResolver } from './resolvers';\n\nexposeQuery({\n  query: adminUsers,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: { roles, _id, admins, assignedEmployeeId, _userId },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (roles) {\n          filters.roles = { $in: roles };\n        }\n\n        if (admins) {\n          const userIsDev = Roles.userIsInRole(Meteor.user(), ROLES.DEV);\n\n          if (userIsDev) {\n            filters.roles = { $in: [ROLES.ADMIN, ROLES.DEV] };\n          } else {\n            filters.roles = { $in: [ROLES.ADMIN] };\n          }\n        }\n\n        if (assignedEmployeeId) {\n          filters.assignedEmployeeId = assignedEmployeeId;\n        }\n      };\n    },\n    validateParams: {\n      roles: Match.Maybe([String]),\n      admins: Match.Maybe(Boolean),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: appUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: currentUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n    embody: (body) => {\n      // This will deepExtend your body\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: proReferredByUsers,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        organisationId,\n        ownReferredUsers,\n      } = params;\n\n      SecurityService.checkUserIsPro(userId);\n\n      if (providedUserId) {\n        SecurityService.checkUserIsAdmin(userId);\n        params.userId = providedUserId;\n      }\n\n      if (ownReferredUsers) {\n        params.userId = userId;\n      }\n\n      if (organisationId) {\n        SecurityService.checkUserIsAdmin(userId);\n      }\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      organisationId: Match.Maybe(String),\n      ownReferredUsers: Match.Maybe(Boolean),\n    },\n  },\n  resolver: proReferredByUsersResolver,\n});\n\nexposeQuery({ query: userEmails, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: userSearch,\n  overrides: {\n    validateParams: {\n      searchQuery: Match.Maybe(String),\n      roles: Match.Maybe([String]),\n    },\n  },\n});\n\nexposeQuery({\n  query: proUser,\n  overrides: {\n    firewall(userId, params) {},\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/exposures.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/users/server/exposures.js"}},"code":"let Match;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  }\n\n}, 0);\nlet Roles;\nmodule.link(\"meteor/alanning:roles\", {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet exposeQuery;\nmodule.link(\"../../queries/queryHelpers\", {\n  exposeQuery(v) {\n    exposeQuery = v;\n  }\n\n}, 3);\nlet ROLES;\nmodule.link(\"../../constants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 4);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 5);\nlet adminUsers, appUser, currentUser, proReferredByUsers, userEmails, userSearch, proUser;\nmodule.link(\"../queries\", {\n  adminUsers(v) {\n    adminUsers = v;\n  },\n\n  appUser(v) {\n    appUser = v;\n  },\n\n  currentUser(v) {\n    currentUser = v;\n  },\n\n  proReferredByUsers(v) {\n    proReferredByUsers = v;\n  },\n\n  userEmails(v) {\n    userEmails = v;\n  },\n\n  userSearch(v) {\n    userSearch = v;\n  },\n\n  proUser(v) {\n    proUser = v;\n  }\n\n}, 6);\nlet proReferredByUsersResolver;\nmodule.link(\"./resolvers\", {\n  proReferredByUsersResolver(v) {\n    proReferredByUsersResolver = v;\n  }\n\n}, 7);\nexposeQuery({\n  query: adminUsers,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: {\n          roles,\n          _id,\n          admins,\n          assignedEmployeeId,\n          _userId\n        }\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (roles) {\n          filters.roles = {\n            $in: roles\n          };\n        }\n\n        if (admins) {\n          const userIsDev = Roles.userIsInRole(Meteor.user(), ROLES.DEV);\n\n          if (userIsDev) {\n            filters.roles = {\n              $in: [ROLES.ADMIN, ROLES.DEV]\n            };\n          } else {\n            filters.roles = {\n              $in: [ROLES.ADMIN]\n            };\n          }\n        }\n\n        if (assignedEmployeeId) {\n          filters.assignedEmployeeId = assignedEmployeeId;\n        }\n      };\n    },\n    validateParams: {\n      roles: Match.Maybe([String]),\n      admins: Match.Maybe(Boolean),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String))\n    }\n  },\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: appUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params\n      }) => {\n        filters._id = params._userId;\n      };\n    }\n  }\n});\nexposeQuery({\n  query: currentUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n\n    embody: body => {\n      // This will deepExtend your body\n      body.$filter = ({\n        filters,\n        params\n      }) => {\n        filters._id = params._userId;\n      };\n    }\n  }\n});\nexposeQuery({\n  query: proReferredByUsers,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        organisationId,\n        ownReferredUsers\n      } = params;\n      SecurityService.checkUserIsPro(userId);\n\n      if (providedUserId) {\n        SecurityService.checkUserIsAdmin(userId);\n        params.userId = providedUserId;\n      }\n\n      if (ownReferredUsers) {\n        params.userId = userId;\n      }\n\n      if (organisationId) {\n        SecurityService.checkUserIsAdmin(userId);\n      }\n    },\n\n    validateParams: {\n      userId: Match.Maybe(String),\n      organisationId: Match.Maybe(String),\n      ownReferredUsers: Match.Maybe(Boolean)\n    }\n  },\n  resolver: proReferredByUsersResolver\n});\nexposeQuery({\n  query: userEmails,\n  options: {\n    allowFilterById: true\n  }\n});\nexposeQuery({\n  query: userSearch,\n  overrides: {\n    validateParams: {\n      searchQuery: Match.Maybe(String),\n      roles: Match.Maybe([String])\n    }\n  }\n});\nexposeQuery({\n  query: proUser,\n  overrides: {\n    firewall(userId, params) {},\n\n    embody: body => {\n      body.$filter = ({\n        filters,\n        params\n      }) => {\n        filters._id = params._userId;\n      };\n    }\n  }\n});","map":{"version":3,"sources":["imports/core/api/users/server/exposures.js"],"names":["exposeQuery","query","overrides","embody","body","params","_userId","filters","$in","roles","userIsDev","Roles","Meteor","ROLES","validateParams","Match","admins","assignedEmployeeId","options","allowFilterById","firewall","userId","ownReferredUsers","SecurityService","organisationId","resolver","proReferredByUsersResolver","searchQuery"],"mappings":"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","sourcesContent":["import { Match } from 'meteor/check';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Meteor } from 'meteor/meteor';\n\nimport { exposeQuery } from '../../queries/queryHelpers';\nimport { ROLES } from '../../constants';\nimport SecurityService from '../../security';\nimport {\n  adminUsers,\n  appUser,\n  currentUser,\n  proReferredByUsers,\n  userEmails,\n  userSearch,\n  proUser,\n} from '../queries';\nimport { proReferredByUsersResolver } from './resolvers';\n\nexposeQuery({\n  query: adminUsers,\n  overrides: {\n    embody: (body, params) => {\n      body.$filter = ({\n        filters,\n        params: { roles, _id, admins, assignedEmployeeId, _userId },\n      }) => {\n        if (_id) {\n          filters._id = _id;\n        }\n\n        if (roles) {\n          filters.roles = { $in: roles };\n        }\n\n        if (admins) {\n          const userIsDev = Roles.userIsInRole(Meteor.user(), ROLES.DEV);\n\n          if (userIsDev) {\n            filters.roles = { $in: [ROLES.ADMIN, ROLES.DEV] };\n          } else {\n            filters.roles = { $in: [ROLES.ADMIN] };\n          }\n        }\n\n        if (assignedEmployeeId) {\n          filters.assignedEmployeeId = assignedEmployeeId;\n        }\n      };\n    },\n    validateParams: {\n      roles: Match.Maybe([String]),\n      admins: Match.Maybe(Boolean),\n      assignedEmployeeId: Match.Maybe(Match.OneOf(Object, String)),\n    },\n  },\n  options: { allowFilterById: true },\n});\n\nexposeQuery({\n  query: appUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: currentUser,\n  overrides: {\n    firewall(userId, params) {\n      if (!userId) {\n        // Don't throw unauthorized error here, it causes race-conditions in E2E tests\n        // to not reload this subscription\n        // So simply set userId to an impossible id\n        params._userId = 'none';\n      }\n    },\n    embody: (body) => {\n      // This will deepExtend your body\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n\nexposeQuery({\n  query: proReferredByUsers,\n  overrides: {\n    firewall(userId, params) {\n      const {\n        userId: providedUserId,\n        organisationId,\n        ownReferredUsers,\n      } = params;\n\n      SecurityService.checkUserIsPro(userId);\n\n      if (providedUserId) {\n        SecurityService.checkUserIsAdmin(userId);\n        params.userId = providedUserId;\n      }\n\n      if (ownReferredUsers) {\n        params.userId = userId;\n      }\n\n      if (organisationId) {\n        SecurityService.checkUserIsAdmin(userId);\n      }\n    },\n    validateParams: {\n      userId: Match.Maybe(String),\n      organisationId: Match.Maybe(String),\n      ownReferredUsers: Match.Maybe(Boolean),\n    },\n  },\n  resolver: proReferredByUsersResolver,\n});\n\nexposeQuery({ query: userEmails, options: { allowFilterById: true } });\n\nexposeQuery({\n  query: userSearch,\n  overrides: {\n    validateParams: {\n      searchQuery: Match.Maybe(String),\n      roles: Match.Maybe([String]),\n    },\n  },\n});\n\nexposeQuery({\n  query: proUser,\n  overrides: {\n    firewall(userId, params) {},\n    embody: (body) => {\n      body.$filter = ({ filters, params }) => {\n        filters._id = params._userId;\n      };\n    },\n  },\n});\n"]},"sourceType":"script","hash":"bb4922be806dc7827d87177bfe5045d010c0814f"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/testHelpers/testHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/utils/testHelpers/testHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/testHelpers/testHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/testHelpers/testHelpers.js"],"names":["Meteor","Random","Accounts","faker","expect","Users","testUserAccount","ROLES","createLoginToken","userId","loginToken","id","hashedToken","_hashLoginToken","update","$set","createEmailVerificationToken","email","token","_id","$push","address","when","Date","userLogin","password","role","userEmail","internet","userPassword","random","word","isServer","user","run","USER","loginWithPassword","Promise","resolve","isClient","then","reject","err","checkEmails","expected","options","call","emails","noExpect","length","to","equal","error","resetDatabase","res"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport faker from 'faker';\nimport { expect } from 'chai';\n\nimport { Users, testUserAccount } from '../../api';\nimport { ROLES } from '../../api/constants';\n\n/**\n * createLoginToken - Generate & saves a login token on the user with the given id\n *\n * @param {string} userId  A Meteor user id\n *\n * @return {string} the generated login token\n */\nexport const createLoginToken = (userId) => {\n  const loginToken = Random.id();\n  const hashedToken = Accounts._hashLoginToken(loginToken);\n\n  Users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': [{ hashedToken }],\n    },\n  });\n\n  return loginToken;\n};\n\n/**\n * createEmailVerificationToken - Generate & saves a email verification token on the user with the given id\n *\n * @param {string} userId  A Meteor user id\n * @param {string} email  The email to be verified\n *\n * @return {string} the generated token\n */\nexport const createEmailVerificationToken = (userId, email) => {\n  const token = Random.id();\n\n  Users.update(\n    { _id: userId },\n    {\n      $push: {\n        'services.email.verificationTokens': {\n          // token has to be uniq in the Users collection\n          token,\n          address: email,\n          when: new Date(),\n        },\n      },\n    },\n  );\n\n  return token;\n};\n\nexport const userLogin = ({ email, password, role }) => {\n  const userEmail = email || faker.internet.email();\n  const userPassword = password || faker.random.word();\n\n  if (Meteor.isServer) {\n    const user = testUserAccount.run({\n      email: userEmail,\n      password: userPassword,\n      role: role || ROLES.USER,\n    });\n    Meteor.loginWithPassword({ id: user._id }, userPassword);\n    return Promise.resolve(user);\n  }\n\n  if (Meteor.isClient) {\n    return testUserAccount\n      .run({\n        email: userEmail,\n        password: userPassword,\n        role: role || ROLES.USER,\n      })\n      .then(user =>\n        new Promise((resolve, reject) => {\n          Meteor.loginWithPassword({ id: user._id }, userPassword, err =>\n            (err ? reject(err) : resolve(user)));\n        }));\n  }\n};\n\nexport const checkEmails = (expected, options = {}) =>\n  new Promise((resolve, reject) => {\n    Meteor.call('getAllTestEmails', { expected, ...options }, (err, emails) => {\n      if (err) {\n        reject(err);\n      }\n\n      try {\n        // getAllTestEmails returns when at least `expected` emails are found\n        // So it could be more. Make sure we always get exactly what we expect\n        if (expected && !options.noExpect) {\n          expect(emails.length).to.equal(expected);\n        }\n      } catch (error) {\n        reject(error);\n      }\n\n      resolve(emails);\n    });\n  });\n\nexport const resetDatabase = () =>\n  new Promise((resolve, reject) => {\n    Meteor.call('resetDatabase', (err, res) =>\n      (err ? reject(err) : resolve(res)));\n  });\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/testHelpers/testHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/testHelpers/testHelpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  createLoginToken: () => createLoginToken,\n  createEmailVerificationToken: () => createEmailVerificationToken,\n  userLogin: () => userLogin,\n  checkEmails: () => checkEmails,\n  resetDatabase: () => resetDatabase\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet faker;\nmodule.link(\"faker\", {\n  default(v) {\n    faker = v;\n  }\n\n}, 3);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 4);\nlet Users, testUserAccount;\nmodule.link(\"../../api\", {\n  Users(v) {\n    Users = v;\n  },\n\n  testUserAccount(v) {\n    testUserAccount = v;\n  }\n\n}, 5);\nlet ROLES;\nmodule.link(\"../../api/constants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 6);\n\nconst createLoginToken = userId => {\n  const loginToken = Random.id();\n\n  const hashedToken = Accounts._hashLoginToken(loginToken);\n\n  Users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': [{\n        hashedToken\n      }]\n    }\n  });\n  return loginToken;\n};\n\nconst createEmailVerificationToken = (userId, email) => {\n  const token = Random.id();\n  Users.update({\n    _id: userId\n  }, {\n    $push: {\n      'services.email.verificationTokens': {\n        // token has to be uniq in the Users collection\n        token,\n        address: email,\n        when: new Date()\n      }\n    }\n  });\n  return token;\n};\n\nconst userLogin = ({\n  email,\n  password,\n  role\n}) => {\n  const userEmail = email || faker.internet.email();\n  const userPassword = password || faker.random.word();\n\n  if (Meteor.isServer) {\n    const user = testUserAccount.run({\n      email: userEmail,\n      password: userPassword,\n      role: role || ROLES.USER\n    });\n    Meteor.loginWithPassword({\n      id: user._id\n    }, userPassword);\n    return Promise.resolve(user);\n  }\n\n  if (Meteor.isClient) {\n    return testUserAccount.run({\n      email: userEmail,\n      password: userPassword,\n      role: role || ROLES.USER\n    }).then(user => new Promise((resolve, reject) => {\n      Meteor.loginWithPassword({\n        id: user._id\n      }, userPassword, err => err ? reject(err) : resolve(user));\n    }));\n  }\n};\n\nconst checkEmails = (expected, options = {}) => new Promise((resolve, reject) => {\n  Meteor.call('getAllTestEmails', (0, _objectSpread2.default)({\n    expected\n  }, options), (err, emails) => {\n    if (err) {\n      reject(err);\n    }\n\n    try {\n      // getAllTestEmails returns when at least `expected` emails are found\n      // So it could be more. Make sure we always get exactly what we expect\n      if (expected && !options.noExpect) {\n        expect(emails.length).to.equal(expected);\n      }\n    } catch (error) {\n      reject(error);\n    }\n\n    resolve(emails);\n  });\n});\n\nconst resetDatabase = () => new Promise((resolve, reject) => {\n  Meteor.call('resetDatabase', (err, res) => err ? reject(err) : resolve(res));\n});","map":{"version":3,"sources":["imports/core/utils/testHelpers/testHelpers.js"],"names":["Meteor","createLoginToken","userId","loginToken","Random","hashedToken","Accounts","Users","$set","createEmailVerificationToken","token","_id","$push","address","when","userLogin","role","userEmail","email","faker","userPassword","password","user","ROLES","USER","id","Promise","err","reject","resolve","checkEmails","options","expected","expect","emails","resetDatabase"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport faker from 'faker';\nimport { expect } from 'chai';\n\nimport { Users, testUserAccount } from '../../api';\nimport { ROLES } from '../../api/constants';\n\n/**\n * createLoginToken - Generate & saves a login token on the user with the given id\n *\n * @param {string} userId  A Meteor user id\n *\n * @return {string} the generated login token\n */\nexport const createLoginToken = (userId) => {\n  const loginToken = Random.id();\n  const hashedToken = Accounts._hashLoginToken(loginToken);\n\n  Users.update(userId, {\n    $set: {\n      'services.resume.loginTokens': [{ hashedToken }],\n    },\n  });\n\n  return loginToken;\n};\n\n/**\n * createEmailVerificationToken - Generate & saves a email verification token on the user with the given id\n *\n * @param {string} userId  A Meteor user id\n * @param {string} email  The email to be verified\n *\n * @return {string} the generated token\n */\nexport const createEmailVerificationToken = (userId, email) => {\n  const token = Random.id();\n\n  Users.update(\n    { _id: userId },\n    {\n      $push: {\n        'services.email.verificationTokens': {\n          // token has to be uniq in the Users collection\n          token,\n          address: email,\n          when: new Date(),\n        },\n      },\n    },\n  );\n\n  return token;\n};\n\nexport const userLogin = ({ email, password, role }) => {\n  const userEmail = email || faker.internet.email();\n  const userPassword = password || faker.random.word();\n\n  if (Meteor.isServer) {\n    const user = testUserAccount.run({\n      email: userEmail,\n      password: userPassword,\n      role: role || ROLES.USER,\n    });\n    Meteor.loginWithPassword({ id: user._id }, userPassword);\n    return Promise.resolve(user);\n  }\n\n  if (Meteor.isClient) {\n    return testUserAccount\n      .run({\n        email: userEmail,\n        password: userPassword,\n        role: role || ROLES.USER,\n      })\n      .then(user =>\n        new Promise((resolve, reject) => {\n          Meteor.loginWithPassword({ id: user._id }, userPassword, err =>\n            (err ? reject(err) : resolve(user)));\n        }));\n  }\n};\n\nexport const checkEmails = (expected, options = {}) =>\n  new Promise((resolve, reject) => {\n    Meteor.call('getAllTestEmails', { expected, ...options }, (err, emails) => {\n      if (err) {\n        reject(err);\n      }\n\n      try {\n        // getAllTestEmails returns when at least `expected` emails are found\n        // So it could be more. Make sure we always get exactly what we expect\n        if (expected && !options.noExpect) {\n          expect(emails.length).to.equal(expected);\n        }\n      } catch (error) {\n        reject(error);\n      }\n\n      resolve(emails);\n    });\n  });\n\nexport const resetDatabase = () =>\n  new Promise((resolve, reject) => {\n    Meteor.call('resetDatabase', (err, res) =>\n      (err ? reject(err) : resolve(res)));\n  });\n"]},"sourceType":"script","hash":"3ce4a0f6d2949e87d2cfe6181646eda602a5fdae"}

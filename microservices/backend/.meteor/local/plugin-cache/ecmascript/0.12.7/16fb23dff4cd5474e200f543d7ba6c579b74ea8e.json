{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/localization/simpleSchemaLocalization.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/utils/localization/simpleSchemaLocalization.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/localization/simpleSchemaLocalization.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/localization/simpleSchemaLocalization.js"],"names":["SimpleSchema","Intl","translate","key","keyWithoutNumbers","split","filter","subKey","length","join","formatMessage","id","translateSimpleSchema","setDefaultMessages","initialLanguage","messages","fr","required","args","minString","min","maxString","max","minNumber","maxNumber","minNumberExclusive","maxNumberExclusive","minDate","maxDate","badDate","minCount","maxCount","noDecimal","notAllowed","value","expectedType","dataType","regEx","label","regExp","RegEx","Email","WeakEmail"],"mappings":"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","sourcesContent":["import SimpleSchema from 'simpl-schema';\nimport Intl from '../intl';\n\nconst translate = ({ key }) => {\n  // Turns a key called \"expenses.0.value\" into \"expenses.value\"\n  const keyWithoutNumbers = key\n    .split('.')\n    .filter(subKey => subKey.length !== 1)\n    .join('.');\n  return Intl.formatMessage({ id: `Forms.${keyWithoutNumbers}` });\n};\n\nconst translateSimpleSchema = () => {\n  SimpleSchema.setDefaultMessages({\n    initialLanguage: 'fr',\n    messages: {\n      fr: {\n        // Can also use \"name\"\n        required: args => `${translate(args)} est requis`,\n        minString: args =>\n          `${translate(args)} doit faire au minimum ${args.min} caractères`,\n        maxString: args =>\n          `${translate(args)} peut faire au maximum ${args.max} caractères`,\n        minNumber: args => `${translate(args)} doit être au moins ${args.min}`,\n        maxNumber: args =>\n          `${translate(args)} ne peut pas dépasser ${args.max}`,\n        minNumberExclusive: args =>\n          `${translate(args)} doit être plus grand que ${args.min}`,\n        maxNumberExclusive: args =>\n          `${translate(args)} doit être plus petit que ${args.max}`,\n        minDate: args =>\n          `${translate(args)} doit être au plus tôt le ${args.min}`,\n        maxDate: args =>\n          `${translate(args)} doit être au plus tard le ${args.max}`,\n        badDate: args => `${translate(args)} n'est pas une date valide`,\n        minCount: ({ minCount }) =>\n          `Vous devez ajouter au moins ${minCount} valeurs`,\n        maxCount: ({ maxCount }) =>\n          `Vous devez choisir moins de ${maxCount} valeurs`,\n        noDecimal: args => `${translate(args)} doit être un nombre entier`,\n        notAllowed: ({ value }) => `${value} n'est pas valide`,\n        expectedType: args =>\n          `${translate(args)} doit être un ${args.dataType}`,\n        regEx({ label, regExp }) {\n          switch (regExp) {\n          case SimpleSchema.RegEx.Email:\n          case SimpleSchema.RegEx.WeakEmail:\n            return 'Cette adresse e-mail est incorrecte';\n          default:\n            return \"Le format n'est pas valide\";\n          }\n        },\n      },\n    },\n  });\n};\n\nexport default translateSimpleSchema;\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/localization/simpleSchemaLocalization.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/localization/simpleSchemaLocalization.js"}},"code":"let SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Intl;\nmodule.link(\"../intl\", {\n  default(v) {\n    Intl = v;\n  }\n\n}, 1);\n\nconst translate = ({\n  key\n}) => {\n  // Turns a key called \"expenses.0.value\" into \"expenses.value\"\n  const keyWithoutNumbers = key.split('.').filter(subKey => subKey.length !== 1).join('.');\n  return Intl.formatMessage({\n    id: `Forms.${keyWithoutNumbers}`\n  });\n};\n\nconst translateSimpleSchema = () => {\n  SimpleSchema.setDefaultMessages({\n    initialLanguage: 'fr',\n    messages: {\n      fr: {\n        // Can also use \"name\"\n        required: args => `${translate(args)} est requis`,\n        minString: args => `${translate(args)} doit faire au minimum ${args.min} caractères`,\n        maxString: args => `${translate(args)} peut faire au maximum ${args.max} caractères`,\n        minNumber: args => `${translate(args)} doit être au moins ${args.min}`,\n        maxNumber: args => `${translate(args)} ne peut pas dépasser ${args.max}`,\n        minNumberExclusive: args => `${translate(args)} doit être plus grand que ${args.min}`,\n        maxNumberExclusive: args => `${translate(args)} doit être plus petit que ${args.max}`,\n        minDate: args => `${translate(args)} doit être au plus tôt le ${args.min}`,\n        maxDate: args => `${translate(args)} doit être au plus tard le ${args.max}`,\n        badDate: args => `${translate(args)} n'est pas une date valide`,\n        minCount: ({\n          minCount\n        }) => `Vous devez ajouter au moins ${minCount} valeurs`,\n        maxCount: ({\n          maxCount\n        }) => `Vous devez choisir moins de ${maxCount} valeurs`,\n        noDecimal: args => `${translate(args)} doit être un nombre entier`,\n        notAllowed: ({\n          value\n        }) => `${value} n'est pas valide`,\n        expectedType: args => `${translate(args)} doit être un ${args.dataType}`,\n\n        regEx({\n          label,\n          regExp\n        }) {\n          switch (regExp) {\n            case SimpleSchema.RegEx.Email:\n            case SimpleSchema.RegEx.WeakEmail:\n              return 'Cette adresse e-mail est incorrecte';\n\n            default:\n              return \"Le format n'est pas valide\";\n          }\n        }\n\n      }\n    }\n  });\n};\n\nmodule.exportDefault(translateSimpleSchema);","map":{"version":3,"sources":["imports/core/utils/localization/simpleSchemaLocalization.js"],"names":["SimpleSchema","translate","key","keyWithoutNumbers","subKey","id","translateSimpleSchema","initialLanguage","messages","fr","required","args","minString","min","maxString","max","minNumber","maxNumber","minNumberExclusive","maxNumberExclusive","minDate","maxDate","badDate","minCount","maxCount","noDecimal","notAllowed","value","expectedType","dataType","regEx","regExp"],"mappings":"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","sourcesContent":["import SimpleSchema from 'simpl-schema';\nimport Intl from '../intl';\n\nconst translate = ({ key }) => {\n  // Turns a key called \"expenses.0.value\" into \"expenses.value\"\n  const keyWithoutNumbers = key\n    .split('.')\n    .filter(subKey => subKey.length !== 1)\n    .join('.');\n  return Intl.formatMessage({ id: `Forms.${keyWithoutNumbers}` });\n};\n\nconst translateSimpleSchema = () => {\n  SimpleSchema.setDefaultMessages({\n    initialLanguage: 'fr',\n    messages: {\n      fr: {\n        // Can also use \"name\"\n        required: args => `${translate(args)} est requis`,\n        minString: args =>\n          `${translate(args)} doit faire au minimum ${args.min} caractères`,\n        maxString: args =>\n          `${translate(args)} peut faire au maximum ${args.max} caractères`,\n        minNumber: args => `${translate(args)} doit être au moins ${args.min}`,\n        maxNumber: args =>\n          `${translate(args)} ne peut pas dépasser ${args.max}`,\n        minNumberExclusive: args =>\n          `${translate(args)} doit être plus grand que ${args.min}`,\n        maxNumberExclusive: args =>\n          `${translate(args)} doit être plus petit que ${args.max}`,\n        minDate: args =>\n          `${translate(args)} doit être au plus tôt le ${args.min}`,\n        maxDate: args =>\n          `${translate(args)} doit être au plus tard le ${args.max}`,\n        badDate: args => `${translate(args)} n'est pas une date valide`,\n        minCount: ({ minCount }) =>\n          `Vous devez ajouter au moins ${minCount} valeurs`,\n        maxCount: ({ maxCount }) =>\n          `Vous devez choisir moins de ${maxCount} valeurs`,\n        noDecimal: args => `${translate(args)} doit être un nombre entier`,\n        notAllowed: ({ value }) => `${value} n'est pas valide`,\n        expectedType: args =>\n          `${translate(args)} doit être un ${args.dataType}`,\n        regEx({ label, regExp }) {\n          switch (regExp) {\n          case SimpleSchema.RegEx.Email:\n          case SimpleSchema.RegEx.WeakEmail:\n            return 'Cette adresse e-mail est incorrecte';\n          default:\n            return \"Le format n'est pas valide\";\n          }\n        },\n      },\n    },\n  });\n};\n\nexport default translateSimpleSchema;\n"]},"sourceType":"script","hash":"16fb23dff4cd5474e200f543d7ba6c579b74ea8e"}

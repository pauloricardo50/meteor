{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/mongoHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/api/helpers/mongoHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/mongoHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/helpers/mongoHelpers.js"],"names":["generateMatchAllWordsRegexp","words","map","word","join","generateMatchAnyWordRegexp","string","trim","replace","splitStringIntoWords","split","createRegexQuery","fieldName","searchQuery","searchQueryWords","containsMultipleWords","length","$regex","$options","createSearchFilters","searchFieldsArray","$or","searchField"],"mappings":"AAAA,OAAO,MAAMA,2BAA2B,GAAGC,KAAK,IAC7C,GAAEA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAK,QAAOA,IAAK,GAA/B,EAAmCC,IAAnC,CAAwC,EAAxC,CAA4C,IAD1C;AAGP,OAAO,MAAMC,0BAA0B,GAAGC,MAAM,IAC9CA,MAAM,CAACC,IAAP,GAAcC,OAAd,CAAsB,MAAtB,EAA8B,GAA9B,CADK;AAGP,OAAO,MAAMC,oBAAoB,GAAGH,MAAM,IAAIA,MAAM,CAACC,IAAP,GAAcG,KAAd,CAAoB,KAApB,CAAvC;AAEP,OAAO,MAAMC,gBAAgB,GAAG,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AAC1D,QAAMC,gBAAgB,GAAGL,oBAAoB,CAACI,WAAD,CAA7C;AACA,QAAME,qBAAqB,GAAGD,gBAAgB,CAACE,MAAjB,GAA0B,CAAxD;;AAEA,MAAID,qBAAJ,EAA2B;AACzB,WAAO;AACL,OAACH,SAAD,GAAa;AACXK,QAAAA,MAAM,EAAEjB,2BAA2B,CAACc,gBAAD,CADxB;AAEXI,QAAAA,QAAQ,EAAE;AAFC;AADR,KAAP;AAMD;;AAED,SAAO;AAAE,KAACN,SAAD,GAAa;AAAEK,MAAAA,MAAM,EAAEJ,WAAW,CAACN,IAAZ,EAAV;AAA8BW,MAAAA,QAAQ,EAAE;AAAxC;AAAf,GAAP;AACD,CAdM;AAgBP,OAAO,MAAMC,mBAAmB,GAAG,CAACC,iBAAD,EAAoBP,WAApB,KAAoC;AACrE,MAAIO,iBAAiB,CAACJ,MAAlB,GAA2B,CAA/B,EAAkC;AAChC;AACA,WAAO;AACLK,MAAAA,GAAG,EAAED,iBAAiB,CAAClB,GAAlB,CAAsBoB,WAAW,IACpCX,gBAAgB,CAACW,WAAD,EAAcT,WAAd,CADb;AADA,KAAP;AAID,GAPoE,CAQrE;;;AACA,QAAMD,SAAS,GAAGQ,iBAAiB,CAAC,CAAD,CAAnC;AACA,SAAOT,gBAAgB,CAACC,SAAD,EAAYC,WAAZ,CAAvB;AACD,CAXM","sourcesContent":["export const generateMatchAllWordsRegexp = words =>\n  `${words.map(word => `(?=.*${word})`).join('')}.+`;\n\nexport const generateMatchAnyWordRegexp = string =>\n  string.trim().replace(/\\s+/g, '|');\n\nexport const splitStringIntoWords = string => string.trim().split(/\\s+/);\n\nexport const createRegexQuery = (fieldName, searchQuery) => {\n  const searchQueryWords = splitStringIntoWords(searchQuery);\n  const containsMultipleWords = searchQueryWords.length > 1;\n\n  if (containsMultipleWords) {\n    return {\n      [fieldName]: {\n        $regex: generateMatchAllWordsRegexp(searchQueryWords),\n        $options: 'gi',\n      },\n    };\n  }\n\n  return { [fieldName]: { $regex: searchQuery.trim(), $options: 'ix' } };\n};\n\nexport const createSearchFilters = (searchFieldsArray, searchQuery) => {\n  if (searchFieldsArray.length > 1) {\n    // multiple fields to match\n    return {\n      $or: searchFieldsArray.map(searchField =>\n        createRegexQuery(searchField, searchQuery)),\n    };\n  }\n  // single field to match\n  const fieldName = searchFieldsArray[0];\n  return createRegexQuery(fieldName, searchQuery);\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/helpers/mongoHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/helpers/mongoHelpers.js"}},"code":"module.export({\n  generateMatchAllWordsRegexp: () => generateMatchAllWordsRegexp,\n  generateMatchAnyWordRegexp: () => generateMatchAnyWordRegexp,\n  splitStringIntoWords: () => splitStringIntoWords,\n  createRegexQuery: () => createRegexQuery,\n  createSearchFilters: () => createSearchFilters\n});\n\nconst generateMatchAllWordsRegexp = words => \"\".concat(words.map(word => \"(?=.*\".concat(word, \")\")).join(''), \".+\");\n\nconst generateMatchAnyWordRegexp = string => string.trim().replace(/\\s+/g, '|');\n\nconst splitStringIntoWords = string => string.trim().split(/\\s+/);\n\nconst createRegexQuery = (fieldName, searchQuery) => {\n  const searchQueryWords = splitStringIntoWords(searchQuery);\n  const containsMultipleWords = searchQueryWords.length > 1;\n\n  if (containsMultipleWords) {\n    return {\n      [fieldName]: {\n        $regex: generateMatchAllWordsRegexp(searchQueryWords),\n        $options: 'gi'\n      }\n    };\n  }\n\n  return {\n    [fieldName]: {\n      $regex: searchQuery.trim(),\n      $options: 'ix'\n    }\n  };\n};\n\nconst createSearchFilters = (searchFieldsArray, searchQuery) => {\n  if (searchFieldsArray.length > 1) {\n    // multiple fields to match\n    return {\n      $or: searchFieldsArray.map(searchField => createRegexQuery(searchField, searchQuery))\n    };\n  } // single field to match\n\n\n  const fieldName = searchFieldsArray[0];\n  return createRegexQuery(fieldName, searchQuery);\n};","map":{"version":3,"sources":["imports/core/api/helpers/mongoHelpers.js"],"names":["generateMatchAllWordsRegexp","words","word","generateMatchAnyWordRegexp","string","splitStringIntoWords","createRegexQuery","searchQueryWords","containsMultipleWords","$regex","$options","searchQuery","createSearchFilters","searchFieldsArray","$or","searchField","fieldName"],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAaA;AAAAA,EAAAA,2BAA2B,EAAGC,MAAAA,2BAA9BD;AACW,EAAA,0BAAyB,EAD1C,MAAA,0BAAMA;AAAN,EAAA,oBAAA,EAAA,MAAA,oBAAMA;AAAN,EAAA,gBAAA,EAAA,MAAA,gBAAMA;AAAN,EAAA,mBAAA,EAAA,MAAA;AAAMA,CAAb;;AAAO,MAAMA,2BAA2B,GAAGC,KAAK,cAC3CA,KAAK,CAALA,GAAAA,CAAUC,IAAI,mBAAdD,IAAc,MAAdA,EAAAA,IAAAA,CAAAA,EAAAA,CAD2C,OAAzC;;AAGA,MAAME,0BAA0B,GAAGC,MAAM,IAC9CA,MAAM,CAANA,IAAAA,GAAAA,OAAAA,CAAAA,MAAAA,EADK,GACLA,CADK;;AAGA,MAAMC,oBAAoB,GAAGD,MAAM,IAAIA,MAAM,CAANA,IAAAA,GAAAA,KAAAA,CAAvC,KAAuCA,CAAvC;;AAEA,MAAME,gBAAgB,GAAG,CAAA,SAAA,EAAA,WAAA,KAA4B;AAC1D,QAAMC,gBAAgB,GAAGF,oBAAoB,CAA7C,WAA6C,CAA7C;AACA,QAAMG,qBAAqB,GAAGD,gBAAgB,CAAhBA,MAAAA,GAA9B,CAAA;;AAEA,MAAA,qBAAA,EAA2B;AACzB,WAAO;AACL,OAAA,SAAA,GAAa;AACXE,QAAAA,MAAM,EAAET,2BAA2B,CADxB,gBACwB,CADxB;AAEXU,QAAAA,QAAQ,EAAE;AAFC;AADR,KAAP;AAMD;;AAED,SAAO;AAAE,KAAA,SAAA,GAAa;AAAED,MAAAA,MAAM,EAAEE,WAAW,CAArB,IAAUA,EAAV;AAA8BD,MAAAA,QAAQ,EAAE;AAAxC;AAAf,GAAP;AAbK,CAAA;;AAgBA,MAAME,mBAAmB,GAAG,CAAA,iBAAA,EAAA,WAAA,KAAoC;AACrE,MAAIC,iBAAiB,CAAjBA,MAAAA,GAAJ,CAAA,EAAkC;AAChC;AACA,WAAO;AACLC,MAAAA,GAAG,EAAED,iBAAiB,CAAjBA,GAAAA,CAAsBE,WAAW,IACpCT,gBAAgB,CAAA,WAAA,EADbO,WACa,CADbA;AADA,KAAP;AAHmE,GAAA,CAQrE;;;AACA,QAAMG,SAAS,GAAGH,iBAAiB,CAAnC,CAAmC,CAAnC;AACA,SAAOP,gBAAgB,CAAA,SAAA,EAAvB,WAAuB,CAAvB;AAVK,CAAA","sourcesContent":["export const generateMatchAllWordsRegexp = words =>\n  `${words.map(word => `(?=.*${word})`).join('')}.+`;\n\nexport const generateMatchAnyWordRegexp = string =>\n  string.trim().replace(/\\s+/g, '|');\n\nexport const splitStringIntoWords = string => string.trim().split(/\\s+/);\n\nexport const createRegexQuery = (fieldName, searchQuery) => {\n  const searchQueryWords = splitStringIntoWords(searchQuery);\n  const containsMultipleWords = searchQueryWords.length > 1;\n\n  if (containsMultipleWords) {\n    return {\n      [fieldName]: {\n        $regex: generateMatchAllWordsRegexp(searchQueryWords),\n        $options: 'gi',\n      },\n    };\n  }\n\n  return { [fieldName]: { $regex: searchQuery.trim(), $options: 'ix' } };\n};\n\nexport const createSearchFilters = (searchFieldsArray, searchQuery) => {\n  if (searchFieldsArray.length > 1) {\n    // multiple fields to match\n    return {\n      $or: searchFieldsArray.map(searchField =>\n        createRegexQuery(searchField, searchQuery)),\n    };\n  }\n  // single field to match\n  const fieldName = searchFieldsArray[0];\n  return createRegexQuery(fieldName, searchQuery);\n};\n"]},"sourceType":"script","hash":"a019c493ebf10e0be98a0eb7206cc13376547b1d"}

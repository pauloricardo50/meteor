{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/report/report-html.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-html.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/report/report-html.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/lmieulet:meteor-coverage/server/report/report-html.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/lmieulet:meteor-coverage/server/report/report-html.js"}},"code":"let CoverageData;\nmodule.link(\"../services/coverage-data\", {\n  default(v) {\n    CoverageData = v;\n  }\n\n}, 0);\nlet Core;\nmodule.link(\"../services/core\", {\n  default(v) {\n    Core = v;\n  }\n\n}, 1);\nlet fs;\nmodule.link(\"fs\", {\n  default(v) {\n    fs = v;\n  }\n\n}, 2);\nlet path;\nmodule.link(\"path\", {\n  default(v) {\n    path = v;\n  }\n\n}, 3);\nlet ReportCommon;\nmodule.link(\"./report-common\", {\n  default(v) {\n    ReportCommon = v;\n  }\n\n}, 4);\nlet Log;\nmodule.link(\"./../context/log\", {\n  default(v) {\n    Log = v;\n  }\n\n}, 5);\n\nconst Report = Npm.require('istanbul-lib-report'),\n      ReportImpl = Npm.require('istanbul-reports');\n\nmodule.exportDefault(class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.prefix = options.prefix;\n    this.options.subdir = this.options.path;\n    this.opts = this.generateOpts();\n    this.report = ReportImpl.create('html', this.opts);\n  }\n\n  generateOpts() {\n    const outputPath = this.options.path;\n    return {\n      verbose: this.options.verbose,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n\n          var filePath = node.getQualifiedName();\n\n          if (node.isSummary()) {\n            filePath = path.join(outputPath, 'index.html');\n          } else {\n            filePath = path.join(outputPath, filePath + '.html');\n          }\n\n          return filePath;\n        },\n        relativePath: function (source, target) {\n          return this.getPath(target);\n        },\n        assetPath: function (node, name) {\n          return path.join(outputPath, name);\n        }\n      }\n    };\n  }\n\n  generate() {\n    const folderPath = this.options.path;\n    this.copyStatic();\n    var coverage = Core.getCoverageObject();\n    /* istanbul ignore else */\n\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"failed\", \"message\": \"No coverage information have been collected\"}');\n    }\n\n    var root = CoverageData.getTreeReport(coverage);\n    let filepath = path.join(folderPath, 'index.html');\n    this.report.onSummary(root, ReportCommon.getContext(filepath));\n    const childrens = root.getChildren();\n    const report = this.report; // Todo : use future\n\n    childrens.forEach(function (child) {\n      var filepath = path.join(folderPath, child.getRelativeName() + '.html');\n      Log.info('Creating a new html report', filepath);\n      let fileReport = CoverageData.getFileReport(coverage, child.getRelativeName());\n      report.onDetail(fileReport, ReportCommon.getContext(filepath));\n    });\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  copyStatic() {\n    ReportCommon.checkDirectory(this.options.path);\n    this.report.onStart(null, this.getFolderContext(this.options.path));\n  }\n\n  getFolderContext(folderpath) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        copyFile: function (sourcePath, destPath) {\n          // fix no asset while using test runner\n          // do not use async - nothing is awaiting us\n          const data = fs.readFileSync(sourcePath);\n          let p = path.join(folderpath, destPath);\n          fs.writeFileSync(p, data);\n        }\n      }\n    });\n    return context;\n  }\n\n});","map":{"version":3,"sources":["packages/lmieulet:meteor-coverage/server/report/report-html.js"],"names":["CoverageData","module","link","default","v","Core","fs","path","ReportCommon","Log","Report","Npm","require","ReportImpl","exportDefault","constructor","res","options","prefix","subdir","opts","generateOpts","report","create","outputPath","verbose","linkMapper","getPath","node","filePath","getQualifiedName","isSummary","join","relativePath","source","target","assetPath","name","generate","folderPath","copyStatic","coverage","getCoverageObject","Object","keys","length","statusCode","end","root","getTreeReport","filepath","onSummary","getContext","childrens","getChildren","forEach","child","getRelativeName","info","fileReport","getFileReport","onDetail","checkDirectory","onStart","getFolderContext","folderpath","context","createContext","defineProperty","value","copyFile","sourcePath","destPath","data","readFileSync","p","writeFileSync"],"mappings":"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","sourcesContent":["import CoverageData from '../services/coverage-data';\nimport Core from '../services/core';\nimport fs from 'fs';\nimport path from 'path';\nimport ReportCommon from './report-common';\nimport Log from './../context/log';\nconst Report = Npm.require('istanbul-lib-report'),\n  ReportImpl = Npm.require('istanbul-reports');\n\nexport default class {\n  constructor(res, options) {\n    this.res = res;\n    this.options = options;\n    this.prefix = options.prefix;\n    this.options.subdir = this.options.path;\n    this.opts = this.generateOpts();\n    this.report = ReportImpl.create('html', this.opts);\n  }\n\n  generateOpts() {\n    const outputPath = this.options.path;\n    return {\n      verbose: this.options.verbose,\n      linkMapper: {\n        getPath: function (node) {\n          /* istanbul ignore else */\n          if (typeof node === 'string') {\n            return node;\n          }\n          var filePath = node.getQualifiedName();\n\n          if (node.isSummary()) {\n            filePath = path.join(outputPath, 'index.html');\n          } else {\n            filePath = path.join(outputPath, filePath + '.html');\n          }\n          return filePath;\n        },\n        relativePath: function (source, target) {\n          return this.getPath(target);\n        },\n\n        assetPath: function (node, name) {\n          return path.join(outputPath, name);\n        }\n      }\n    };\n  }\n\n  generate() {\n    const folderPath = this.options.path;\n    this.copyStatic();\n    var coverage = Core.getCoverageObject();\n\n    /* istanbul ignore else */\n    if (!(coverage && Object.keys(coverage).length > 0)) {\n      this.res.statusCode = 500;\n      return this.res.end('{\"type\":\"failed\", \"message\": \"No coverage information have been collected\"}');\n    }\n    var root = CoverageData.getTreeReport(coverage);\n    let filepath = path.join(folderPath, 'index.html');\n\n    this.report.onSummary(root, ReportCommon.getContext(filepath));\n\n    const childrens = root.getChildren();\n    const report = this.report;\n    // Todo : use future\n    childrens.forEach(function (child) {\n      var filepath = path.join(folderPath, child.getRelativeName() + '.html');\n      Log.info('Creating a new html report', filepath);\n      let fileReport = CoverageData.getFileReport(coverage, child.getRelativeName());\n      report.onDetail(fileReport, ReportCommon.getContext(filepath));\n    });\n    this.res.end('{\"type\":\"success\"}');\n  }\n\n  copyStatic() {\n    ReportCommon.checkDirectory(this.options.path);\n    this.report.onStart(null, this.getFolderContext(this.options.path));\n  }\n\n\n  getFolderContext(folderpath) {\n    var context = Report.createContext();\n    Object.defineProperty(context, 'writer', {\n      value: {\n        copyFile: function (sourcePath, destPath) {\n          // fix no asset while using test runner\n          // do not use async - nothing is awaiting us\n          const data = fs.readFileSync(sourcePath);\n          let p = path.join(folderpath, destPath);\n          fs.writeFileSync(p, data);\n        }\n      }\n    });\n    return context;\n  }\n}\n"]},"sourceType":"script","hash":"e1b2cf4f38e65b943910f7315572eea7e5b5bb20"}

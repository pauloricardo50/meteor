{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/LoanCalculator.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/utils/Calculator/LoanCalculator.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/LoanCalculator.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/LoanCalculator.js"],"names":["OWN_FUNDS_TYPES","getLoanDocuments","OWN_FUNDS_USAGE_TYPES","filesPercent","getMissingDocumentIds","getRefinancingFormArray","NotaryFeesCalculator","getCountedArray","getPercent","withLoanCalculator","SuperClass","getProjectValue","loan","structureId","propAndWork","getPropAndWork","value","getFees","total","getTotalUsed","ownFunds","selectStructureKey","key","reduce","sum","getTotalPledged","filter","usageType","PLEDGE","notaryFees","calculator","getFeesCalculator","calculatedNotaryFees","getNotaryFeesForLoan","canton","selectPropertyKey","getInterests","interestRates","finalInterestRates","currentInterestRates","offer","loanTranches","loanValue","selectLoanValue","interests","getInterestsWithTranches","tranches","getTheoreticalInterests","propertyValue","selectPropertyValue","propertyWork","firstRank","Math","min","amortizationGoal","secondRank","max","firstRankInterests","theoreticalInterestRate","secondRankInterests","theoreticalInterestRate2ndRank","getTheoreticalMaintenance","theoreticalMaintenanceRate","getAmortization","offerOverride","selectOffer","offerToUse","oldAmortizationGoal","amortizationRate","getAmortizationRate","amortizationYears","amortization","getTheoreticalAmortization","borrowRatio","getBorrowRatio","getAmortizationRateBase","cacheFix","getMonthly","getTheoreticalPropertyCost","asObject","maintenance","getTheoreticalMonthly","propertyCost","expensesToAddToTheoreticalCost","getFormattedExpenses","add","getIncomeRatio","cost","income","getTotalIncome","borrowers","ratio","wantedLoan","getMaxBorrowRatio","maxBorrowRatio","loanHasMinimalInformation","structure","selectStructure","length","getLoanFilesProgress","fileArray","doc","getMissingLoanDocuments","getTotalFinancing","getNonPledgedOwnFunds","getPledgedOwnFunds","getUsedFundsOfType","type","ownFundType","ownFundUsageType","getRemainingFundsOfType","getFunds","BANK_FORTUNE","WITHDRAW","undefined","getTotalRemainingFunds","Object","values","THIRD_PARTY_FORTUNE","refinancingPercent","array","getMortgageNoteIncrease","mortgageNoteIds","mortgageNotes","propertyMortgageNotes","selectProperty","borrowerMortgageNotes","getMortgageNotes","structureMortgageNotes","map","id","find","_id","allMortgageNotes","mortgageNoteValue","getCashUsed","INSURANCE_2","getCashRatio","fees","cashUsed","cashRatio","hasEnoughCash","minCash","structureIsValid","incomeRatio","maxIncomeRatio","allowPledge","getEstimatedRevenues","estimatedCommission","getEstimatedReferralRevenues","referralCommission","getRequiredOwnFunds","projectValue","getMissingOwnFunds","fundsRequired","totalCurrentFunds","isMissingOwnFunds","missingOwnFunds","ownFundsRoundingAmount","hasTooMuchOwnFunds","hasCompleteStructure","structures","some"],"mappings":"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","sourcesContent":["// @flow\nimport { OWN_FUNDS_TYPES } from 'core/api/constants';\nimport { getLoanDocuments } from '../../api/files/documents';\nimport { OWN_FUNDS_USAGE_TYPES } from '../../api/constants';\nimport {\n  filesPercent,\n  getMissingDocumentIds,\n} from '../../api/files/fileHelpers';\nimport getRefinancingFormArray from '../../arrays/RefinancingFormArray';\nimport NotaryFeesCalculator from '../notaryFees/NotaryFeesCalculator';\nimport { getCountedArray } from '../formArrayHelpers';\nimport { getPercent } from '../general';\n\nexport const withLoanCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    getProjectValue({ loan, structureId }) {\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      if (!propAndWork) {\n        return 0;\n      }\n\n      const value = propAndWork + this.getFees({ loan, structureId }).total;\n\n      return value;\n    }\n\n    getTotalUsed({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'ownFunds',\n      });\n      return ownFunds.reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getTotalPledged({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'ownFunds',\n      });\n      return ownFunds\n        .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getFees({ loan, structureId }): number {\n      const notaryFees = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'notaryFees',\n      });\n\n      // Custom notary fees are provided\n      if (notaryFees === 0 || notaryFees) {\n        return { total: notaryFees };\n      }\n\n      const calculator = this.getFeesCalculator({ loan, structureId });\n\n      const calculatedNotaryFees = calculator.getNotaryFeesForLoan({\n        loan,\n        structureId,\n      });\n\n      return calculatedNotaryFees;\n    }\n\n    getFeesCalculator({ loan, structureId }) {\n      const canton = this.selectPropertyKey({\n        loan,\n        structureId,\n        key: 'canton',\n      });\n      return new NotaryFeesCalculator({ canton });\n    }\n\n    getInterests({ loan, interestRates, structureId }) {\n      let finalInterestRates = interestRates || loan.currentInterestRates;\n      const offer = this.selectStructureKey({\n        loan,\n        key: 'offer',\n        structureId,\n      });\n      const loanTranches = this.selectStructureKey({\n        loan,\n        key: 'loanTranches',\n        structureId,\n      });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      if (offer) {\n        finalInterestRates = offer;\n      }\n\n      const interests = this.getInterestsWithTranches({\n        tranches: loanTranches,\n        interestRates: finalInterestRates,\n      });\n\n      return (interests * loanValue) / 12;\n    }\n\n    getTheoreticalInterests({ loan, structureId }) {\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const propertyValue = this.selectPropertyValue({ loan, structureId });\n      const propertyWork = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'propertyWork',\n      }) || 0;\n      const firstRank = Math.min(\n        loanValue,\n        this.amortizationGoal * (propertyValue + propertyWork),\n      );\n      const secondRank = Math.max(0, loanValue - firstRank);\n\n      const firstRankInterests = firstRank * this.theoreticalInterestRate;\n      const secondRankInterests = secondRank\n        * (this.theoreticalInterestRate2ndRank || this.theoreticalInterestRate);\n\n      return (firstRankInterests + secondRankInterests) / 12;\n    }\n\n    getTheoreticalMaintenance({ loan, structureId }) {\n      return (\n        (this.getPropAndWork({ loan, structureId })\n          * this.theoreticalMaintenanceRate)\n        / 12\n      );\n    }\n\n    getAmortization({ loan, structureId, offerOverride }) {\n      const offer = this.selectOffer({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const offerToUse = offerOverride || offer;\n\n      if (offerToUse) {\n        // Temporarily change amortizationGoal\n        const oldAmortizationGoal = this.amortizationGoal;\n        this.amortizationGoal = offerToUse.amortizationGoal;\n\n        const amortizationRate = this.getAmortizationRate({\n          loan,\n          amortizationYears: offerToUse.amortizationYears,\n          structureId,\n        });\n\n        const amortization = (amortizationRate * loanValue) / 12;\n\n        this.amortizationGoal = oldAmortizationGoal;\n\n        return amortization;\n      }\n\n      const amortizationRate = this.getAmortizationRate({ loan, structureId });\n      return (amortizationRate * loanValue) / 12;\n    }\n\n    getTheoreticalAmortization({ loan, structureId }) {\n      const loanValue = this.selectLoanValue({ loan, structureId });\n\n      return (this.getAmortizationRate({ loan, structureId }) * loanValue) / 12;\n    }\n\n    getAmortizationRate({ loan, amortizationYears, structureId }) {\n      const borrowRatio = this.getBorrowRatio({ loan, structureId });\n      return this.getAmortizationRateBase({\n        borrowRatio,\n        amortizationYears,\n        // Prevent caching of this function if amortizationGoal has changed\n        cacheFix: this.amortizationGoal,\n      });\n    }\n\n    getMonthly({ loan, interestRates, structureId }) {\n      return (\n        this.getInterests({ loan, interestRates, structureId })\n        + this.getAmortization({ loan, structureId })\n      );\n    }\n\n    getTheoreticalPropertyCost({ loan, structureId, asObject = false }) {\n      const interests = this.getTheoreticalInterests({ loan, structureId });\n      const amortization = this.getTheoreticalAmortization({\n        loan,\n        structureId,\n      });\n      const maintenance = this.getTheoreticalMaintenance({ loan, structureId });\n      return asObject\n        ? {\n          interests,\n          amortization,\n          maintenance,\n          total: interests + amortization + maintenance,\n        }\n        : interests + amortization + maintenance;\n    }\n\n    getTheoreticalMonthly({ loan, structureId }) {\n      const propertyCost = this.getTheoreticalPropertyCost({\n        loan,\n        structureId,\n      });\n      const expensesToAddToTheoreticalCost = this.getFormattedExpenses({ loan, structureId }).add / 12;\n\n      return propertyCost + expensesToAddToTheoreticalCost;\n    }\n\n    getIncomeRatio({ loan, structureId }) {\n      const cost = this.getTheoreticalMonthly({ loan, structureId });\n      const income = this.getTotalIncome({ borrowers: loan.borrowers });\n      const ratio = cost / (income / 12);\n\n      if (ratio > 1 || ratio < 0) {\n        return 1;\n      }\n\n      return ratio;\n    }\n\n    getBorrowRatio({ loan, structureId }) {\n      const wantedLoan = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'wantedLoan',\n      });\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      return wantedLoan / propAndWork;\n    }\n\n    getMaxBorrowRatio() {\n      return this.maxBorrowRatio;\n    }\n\n    loanHasMinimalInformation({ loan }) {\n      const structure = this.selectStructure({ loan });\n\n      return !!(\n        structure.ownFunds\n        && structure.ownFunds.length > 0\n        && this.selectPropertyValue({ loan })\n        && this.selectLoanValue({ loan })\n      );\n    }\n\n    getLoanFilesProgress({ loan }) {\n      return filesPercent({ fileArray: getLoanDocuments({ loan }), doc: loan });\n    }\n\n    getMissingLoanDocuments({ loan }) {\n      return getMissingDocumentIds({\n        fileArray: getLoanDocuments({ loan }),\n        doc: loan,\n      });\n    }\n\n    getTotalFinancing({ loan, structureId }) {\n      return (\n        this.selectStructureKey({ loan, structureId, key: 'wantedLoan' })\n        + this.getNonPledgedOwnFunds({ loan, structureId })\n      );\n    }\n\n    getNonPledgedOwnFunds({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ usageType }) => usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getPledgedOwnFunds({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getUsedFundsOfType({ loan, type, usageType, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ type: ownFundType }) => (type ? ownFundType === type : true))\n        .filter(({ usageType: ownFundUsageType }) =>\n          (usageType ? ownFundUsageType === usageType : true))\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getRemainingFundsOfType({ loan, structureId, type }) {\n      const ownFunds = this.getFunds({ loan, type, structureId });\n      return (\n        ownFunds\n        - this.getUsedFundsOfType({\n          loan,\n          type,\n          structureId,\n          usageType:\n            type !== OWN_FUNDS_TYPES.BANK_FORTUNE\n              ? OWN_FUNDS_USAGE_TYPES.WITHDRAW\n              : undefined,\n        })\n      );\n    }\n\n    getTotalRemainingFunds({ loan, structureId }) {\n      // Don't count extra third party fortune, as it is not a real \"loan\" from them\n      return Object.values(OWN_FUNDS_TYPES)\n        .filter(type => type !== OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE)\n        .reduce(\n          (sum, type) =>\n            sum + this.getRemainingFundsOfType({ loan, structureId, type }),\n          0,\n        );\n    }\n\n    refinancingPercent({ loan }) {\n      const array = getCountedArray(getRefinancingFormArray({ loan }), loan);\n      return getPercent(array);\n    }\n\n    getMortgageNoteIncrease({ loan, structureId }) {\n      const { borrowers = [] } = loan;\n      const { mortgageNoteIds = [] } = this.selectStructure({\n        loan,\n        structureId,\n      });\n\n      const { mortgageNotes: propertyMortgageNotes = [] } = this.selectProperty({ loan, structureId });\n      const borrowerMortgageNotes = this.getMortgageNotes({ borrowers });\n      const structureMortgageNotes = mortgageNoteIds.map(id =>\n        borrowerMortgageNotes.find(({ _id }) => _id === id));\n\n      const allMortgageNotes = [\n        ...structureMortgageNotes,\n        ...propertyMortgageNotes,\n      ];\n      const mortgageNoteValue = allMortgageNotes.reduce(\n        (total, { value }) => total + (value || 0),\n        0,\n      );\n      const loanValue = this.selectLoanValue({ loan, structureId });\n\n      return Math.max(0, loanValue - mortgageNoteValue);\n    }\n\n    getCashUsed({ loan, structureId }) {\n      const { ownFunds } = this.selectStructure({ loan, structureId });\n\n      return ownFunds\n        .filter(({ type, usageType }) =>\n          type !== OWN_FUNDS_TYPES.INSURANCE_2\n            && usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getCashRatio({ loan, structureId }) {\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      const fees = this.getFees({ loan, structureId }).total;\n      const cashUsed = this.getCashUsed({ loan, structureId });\n\n      const cashRatio = (cashUsed - fees) / propAndWork;\n      return cashRatio;\n    }\n\n    hasEnoughCash({ loan, structureId }) {\n      return this.getCashRatio({ loan, structureId }) >= this.minCash;\n    }\n\n    structureIsValid({ loan, structureId }) {\n      const incomeRatio = this.getIncomeRatio({ loan, structureId });\n      const borrowRatio = this.getBorrowRatio({ loan, structureId });\n\n      if (\n        incomeRatio > this.maxIncomeRatio\n        || borrowRatio > this.maxBorrowRatio\n      ) {\n        return false;\n      }\n\n      if (\n        !this.allowPledge\n        && this.getPledgedOwnFunds({ loan, structureId }) > 0\n      ) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getEstimatedRevenues({ loan, structureId }) {\n      const propertyValue = this.selectPropertyValue({ loan, structureId });\n      return propertyValue * this.estimatedCommission;\n    }\n\n    getEstimatedReferralRevenues({ loan, structureId }) {\n      return (\n        this.getEstimatedRevenues({ loan, structureId })\n        * this.referralCommission\n      );\n    }\n\n    getRequiredOwnFunds({ loan, structureId }) {\n      const projectValue = this.getProjectValue({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      return projectValue - loanValue;\n    }\n\n    getMissingOwnFunds({ loan, structureId }) {\n      const fundsRequired = this.getRequiredOwnFunds({ loan, structureId });\n      const totalCurrentFunds = this.getNonPledgedOwnFunds({\n        loan,\n        structureId,\n      });\n\n      return fundsRequired - totalCurrentFunds;\n    }\n\n    isMissingOwnFunds({ loan, structureId }) {\n      const missingOwnFunds = this.getMissingOwnFunds({ loan, structureId });\n      return missingOwnFunds >= this.ownFundsRoundingAmount;\n    }\n\n    hasTooMuchOwnFunds({ loan, structureId }) {\n      const missingOwnFunds = this.getMissingOwnFunds({ loan, structureId });\n      return missingOwnFunds <= -this.ownFundsRoundingAmount;\n    }\n\n    hasCompleteStructure({ loan }) {\n      return loan.structures.some(({ id }) => {\n        const fundsRequired = this.getRequiredOwnFunds({\n          loan,\n          structureId: id,\n        });\n\n        if (fundsRequired === 0) {\n          return false;\n        }\n\n        if (\n          !this.isMissingOwnFunds({ loan, structureId: id })\n          && !this.hasTooMuchOwnFunds({ loan, structureId: id })\n        ) {\n          return true;\n        }\n\n        return false;\n      });\n    }\n  };\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/LoanCalculator.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/LoanCalculator.js"}},"code":"module.export({\n  withLoanCalculator: () => withLoanCalculator\n});\nlet OWN_FUNDS_TYPES;\nmodule.link(\"../../api/constants\", {\n  OWN_FUNDS_TYPES(v) {\n    OWN_FUNDS_TYPES = v;\n  }\n\n}, 0);\nlet getLoanDocuments;\nmodule.link(\"../../api/files/documents\", {\n  getLoanDocuments(v) {\n    getLoanDocuments = v;\n  }\n\n}, 1);\nlet OWN_FUNDS_USAGE_TYPES;\nmodule.link(\"../../api/constants\", {\n  OWN_FUNDS_USAGE_TYPES(v) {\n    OWN_FUNDS_USAGE_TYPES = v;\n  }\n\n}, 2);\nlet filesPercent, getMissingDocumentIds;\nmodule.link(\"../../api/files/fileHelpers\", {\n  filesPercent(v) {\n    filesPercent = v;\n  },\n\n  getMissingDocumentIds(v) {\n    getMissingDocumentIds = v;\n  }\n\n}, 3);\nlet getRefinancingFormArray;\nmodule.link(\"../../arrays/RefinancingFormArray\", {\n  default(v) {\n    getRefinancingFormArray = v;\n  }\n\n}, 4);\nlet NotaryFeesCalculator;\nmodule.link(\"../notaryFees/NotaryFeesCalculator\", {\n  default(v) {\n    NotaryFeesCalculator = v;\n  }\n\n}, 5);\nlet getCountedArray;\nmodule.link(\"../formArrayHelpers\", {\n  getCountedArray(v) {\n    getCountedArray = v;\n  }\n\n}, 6);\nlet getPercent;\nmodule.link(\"../general\", {\n  getPercent(v) {\n    getPercent = v;\n  }\n\n}, 7);\n\nconst withLoanCalculator = (SuperClass = class {}) => class extends SuperClass {\n  getProjectValue({\n    loan,\n    structureId\n  }) {\n    const propAndWork = this.getPropAndWork({\n      loan,\n      structureId\n    });\n\n    if (!propAndWork) {\n      return 0;\n    }\n\n    const value = propAndWork + this.getFees({\n      loan,\n      structureId\n    }).total;\n    return value;\n  }\n\n  getTotalUsed({\n    loan,\n    structureId\n  }) {\n    const ownFunds = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'ownFunds'\n    });\n    return ownFunds.reduce((sum, {\n      value\n    }) => sum + value, 0);\n  }\n\n  getTotalPledged({\n    loan,\n    structureId\n  }) {\n    const ownFunds = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'ownFunds'\n    });\n    return ownFunds.filter(({\n      usageType\n    }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE).reduce((sum, {\n      value\n    }) => sum + value, 0);\n  }\n\n  getFees({\n    loan,\n    structureId\n  }) {\n    const notaryFees = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'notaryFees'\n    }); // Custom notary fees are provided\n\n    if (notaryFees === 0 || notaryFees) {\n      return {\n        total: notaryFees\n      };\n    }\n\n    const calculator = this.getFeesCalculator({\n      loan,\n      structureId\n    });\n    const calculatedNotaryFees = calculator.getNotaryFeesForLoan({\n      loan,\n      structureId\n    });\n    return calculatedNotaryFees;\n  }\n\n  getFeesCalculator({\n    loan,\n    structureId\n  }) {\n    const canton = this.selectPropertyKey({\n      loan,\n      structureId,\n      key: 'canton'\n    });\n    return new NotaryFeesCalculator({\n      canton\n    });\n  }\n\n  getInterests({\n    loan,\n    interestRates,\n    structureId\n  }) {\n    let finalInterestRates = interestRates || loan.currentInterestRates;\n    const offer = this.selectStructureKey({\n      loan,\n      key: 'offer',\n      structureId\n    });\n    const loanTranches = this.selectStructureKey({\n      loan,\n      key: 'loanTranches',\n      structureId\n    });\n    const loanValue = this.selectLoanValue({\n      loan,\n      structureId\n    });\n\n    if (offer) {\n      finalInterestRates = offer;\n    }\n\n    const interests = this.getInterestsWithTranches({\n      tranches: loanTranches,\n      interestRates: finalInterestRates\n    });\n    return interests * loanValue / 12;\n  }\n\n  getTheoreticalInterests({\n    loan,\n    structureId\n  }) {\n    const loanValue = this.selectLoanValue({\n      loan,\n      structureId\n    });\n    const propertyValue = this.selectPropertyValue({\n      loan,\n      structureId\n    });\n    const propertyWork = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'propertyWork'\n    }) || 0;\n    const firstRank = Math.min(loanValue, this.amortizationGoal * (propertyValue + propertyWork));\n    const secondRank = Math.max(0, loanValue - firstRank);\n    const firstRankInterests = firstRank * this.theoreticalInterestRate;\n    const secondRankInterests = secondRank * (this.theoreticalInterestRate2ndRank || this.theoreticalInterestRate);\n    return (firstRankInterests + secondRankInterests) / 12;\n  }\n\n  getTheoreticalMaintenance({\n    loan,\n    structureId\n  }) {\n    return this.getPropAndWork({\n      loan,\n      structureId\n    }) * this.theoreticalMaintenanceRate / 12;\n  }\n\n  getAmortization({\n    loan,\n    structureId,\n    offerOverride\n  }) {\n    const offer = this.selectOffer({\n      loan,\n      structureId\n    });\n    const loanValue = this.selectLoanValue({\n      loan,\n      structureId\n    });\n    const offerToUse = offerOverride || offer;\n\n    if (offerToUse) {\n      // Temporarily change amortizationGoal\n      const oldAmortizationGoal = this.amortizationGoal;\n      this.amortizationGoal = offerToUse.amortizationGoal;\n      const amortizationRate = this.getAmortizationRate({\n        loan,\n        amortizationYears: offerToUse.amortizationYears,\n        structureId\n      });\n      const amortization = amortizationRate * loanValue / 12;\n      this.amortizationGoal = oldAmortizationGoal;\n      return amortization;\n    }\n\n    const amortizationRate = this.getAmortizationRate({\n      loan,\n      structureId\n    });\n    return amortizationRate * loanValue / 12;\n  }\n\n  getTheoreticalAmortization({\n    loan,\n    structureId\n  }) {\n    const loanValue = this.selectLoanValue({\n      loan,\n      structureId\n    });\n    return this.getAmortizationRate({\n      loan,\n      structureId\n    }) * loanValue / 12;\n  }\n\n  getAmortizationRate({\n    loan,\n    amortizationYears,\n    structureId\n  }) {\n    const borrowRatio = this.getBorrowRatio({\n      loan,\n      structureId\n    });\n    return this.getAmortizationRateBase({\n      borrowRatio,\n      amortizationYears,\n      // Prevent caching of this function if amortizationGoal has changed\n      cacheFix: this.amortizationGoal\n    });\n  }\n\n  getMonthly({\n    loan,\n    interestRates,\n    structureId\n  }) {\n    return this.getInterests({\n      loan,\n      interestRates,\n      structureId\n    }) + this.getAmortization({\n      loan,\n      structureId\n    });\n  }\n\n  getTheoreticalPropertyCost({\n    loan,\n    structureId,\n    asObject = false\n  }) {\n    const interests = this.getTheoreticalInterests({\n      loan,\n      structureId\n    });\n    const amortization = this.getTheoreticalAmortization({\n      loan,\n      structureId\n    });\n    const maintenance = this.getTheoreticalMaintenance({\n      loan,\n      structureId\n    });\n    return asObject ? {\n      interests,\n      amortization,\n      maintenance,\n      total: interests + amortization + maintenance\n    } : interests + amortization + maintenance;\n  }\n\n  getTheoreticalMonthly({\n    loan,\n    structureId\n  }) {\n    const propertyCost = this.getTheoreticalPropertyCost({\n      loan,\n      structureId\n    });\n    const expensesToAddToTheoreticalCost = this.getFormattedExpenses({\n      loan,\n      structureId\n    }).add / 12;\n    return propertyCost + expensesToAddToTheoreticalCost;\n  }\n\n  getIncomeRatio({\n    loan,\n    structureId\n  }) {\n    const cost = this.getTheoreticalMonthly({\n      loan,\n      structureId\n    });\n    const income = this.getTotalIncome({\n      borrowers: loan.borrowers\n    });\n    const ratio = cost / (income / 12);\n\n    if (ratio > 1 || ratio < 0) {\n      return 1;\n    }\n\n    return ratio;\n  }\n\n  getBorrowRatio({\n    loan,\n    structureId\n  }) {\n    const wantedLoan = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'wantedLoan'\n    });\n    const propAndWork = this.getPropAndWork({\n      loan,\n      structureId\n    });\n    return wantedLoan / propAndWork;\n  }\n\n  getMaxBorrowRatio() {\n    return this.maxBorrowRatio;\n  }\n\n  loanHasMinimalInformation({\n    loan\n  }) {\n    const structure = this.selectStructure({\n      loan\n    });\n    return !!(structure.ownFunds && structure.ownFunds.length > 0 && this.selectPropertyValue({\n      loan\n    }) && this.selectLoanValue({\n      loan\n    }));\n  }\n\n  getLoanFilesProgress({\n    loan\n  }) {\n    return filesPercent({\n      fileArray: getLoanDocuments({\n        loan\n      }),\n      doc: loan\n    });\n  }\n\n  getMissingLoanDocuments({\n    loan\n  }) {\n    return getMissingDocumentIds({\n      fileArray: getLoanDocuments({\n        loan\n      }),\n      doc: loan\n    });\n  }\n\n  getTotalFinancing({\n    loan,\n    structureId\n  }) {\n    return this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'wantedLoan'\n    }) + this.getNonPledgedOwnFunds({\n      loan,\n      structureId\n    });\n  }\n\n  getNonPledgedOwnFunds({\n    loan,\n    structureId\n  }) {\n    const ownFunds = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'ownFunds'\n    }) || [];\n    return ownFunds.filter(({\n      usageType\n    }) => usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE).reduce((sum, {\n      value\n    }) => sum + value, 0);\n  }\n\n  getPledgedOwnFunds({\n    loan,\n    structureId\n  }) {\n    const ownFunds = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'ownFunds'\n    }) || [];\n    return ownFunds.filter(({\n      usageType\n    }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE).reduce((sum, {\n      value\n    }) => sum + value, 0);\n  }\n\n  getUsedFundsOfType({\n    loan,\n    type,\n    usageType,\n    structureId\n  }) {\n    const ownFunds = this.selectStructureKey({\n      loan,\n      structureId,\n      key: 'ownFunds'\n    }) || [];\n    return ownFunds.filter(({\n      type: ownFundType\n    }) => type ? ownFundType === type : true).filter(({\n      usageType: ownFundUsageType\n    }) => usageType ? ownFundUsageType === usageType : true).reduce((sum, {\n      value\n    }) => sum + value, 0);\n  }\n\n  getRemainingFundsOfType({\n    loan,\n    structureId,\n    type\n  }) {\n    const ownFunds = this.getFunds({\n      loan,\n      type,\n      structureId\n    });\n    return ownFunds - this.getUsedFundsOfType({\n      loan,\n      type,\n      structureId,\n      usageType: type !== OWN_FUNDS_TYPES.BANK_FORTUNE ? OWN_FUNDS_USAGE_TYPES.WITHDRAW : undefined\n    });\n  }\n\n  getTotalRemainingFunds({\n    loan,\n    structureId\n  }) {\n    // Don't count extra third party fortune, as it is not a real \"loan\" from them\n    return Object.values(OWN_FUNDS_TYPES).filter(type => type !== OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE).reduce((sum, type) => sum + this.getRemainingFundsOfType({\n      loan,\n      structureId,\n      type\n    }), 0);\n  }\n\n  refinancingPercent({\n    loan\n  }) {\n    const array = getCountedArray(getRefinancingFormArray({\n      loan\n    }), loan);\n    return getPercent(array);\n  }\n\n  getMortgageNoteIncrease({\n    loan,\n    structureId\n  }) {\n    const {\n      borrowers = []\n    } = loan;\n    const {\n      mortgageNoteIds = []\n    } = this.selectStructure({\n      loan,\n      structureId\n    });\n    const {\n      mortgageNotes: propertyMortgageNotes = []\n    } = this.selectProperty({\n      loan,\n      structureId\n    });\n    const borrowerMortgageNotes = this.getMortgageNotes({\n      borrowers\n    });\n    const structureMortgageNotes = mortgageNoteIds.map(id => borrowerMortgageNotes.find(({\n      _id\n    }) => _id === id));\n    const allMortgageNotes = [...structureMortgageNotes, ...propertyMortgageNotes];\n    const mortgageNoteValue = allMortgageNotes.reduce((total, {\n      value\n    }) => total + (value || 0), 0);\n    const loanValue = this.selectLoanValue({\n      loan,\n      structureId\n    });\n    return Math.max(0, loanValue - mortgageNoteValue);\n  }\n\n  getCashUsed({\n    loan,\n    structureId\n  }) {\n    const {\n      ownFunds\n    } = this.selectStructure({\n      loan,\n      structureId\n    });\n    return ownFunds.filter(({\n      type,\n      usageType\n    }) => type !== OWN_FUNDS_TYPES.INSURANCE_2 && usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE).reduce((sum, {\n      value\n    }) => sum + value, 0);\n  }\n\n  getCashRatio({\n    loan,\n    structureId\n  }) {\n    const propAndWork = this.getPropAndWork({\n      loan,\n      structureId\n    });\n    const fees = this.getFees({\n      loan,\n      structureId\n    }).total;\n    const cashUsed = this.getCashUsed({\n      loan,\n      structureId\n    });\n    const cashRatio = (cashUsed - fees) / propAndWork;\n    return cashRatio;\n  }\n\n  hasEnoughCash({\n    loan,\n    structureId\n  }) {\n    return this.getCashRatio({\n      loan,\n      structureId\n    }) >= this.minCash;\n  }\n\n  structureIsValid({\n    loan,\n    structureId\n  }) {\n    const incomeRatio = this.getIncomeRatio({\n      loan,\n      structureId\n    });\n    const borrowRatio = this.getBorrowRatio({\n      loan,\n      structureId\n    });\n\n    if (incomeRatio > this.maxIncomeRatio || borrowRatio > this.maxBorrowRatio) {\n      return false;\n    }\n\n    if (!this.allowPledge && this.getPledgedOwnFunds({\n      loan,\n      structureId\n    }) > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getEstimatedRevenues({\n    loan,\n    structureId\n  }) {\n    const propertyValue = this.selectPropertyValue({\n      loan,\n      structureId\n    });\n    return propertyValue * this.estimatedCommission;\n  }\n\n  getEstimatedReferralRevenues({\n    loan,\n    structureId\n  }) {\n    return this.getEstimatedRevenues({\n      loan,\n      structureId\n    }) * this.referralCommission;\n  }\n\n  getRequiredOwnFunds({\n    loan,\n    structureId\n  }) {\n    const projectValue = this.getProjectValue({\n      loan,\n      structureId\n    });\n    const loanValue = this.selectLoanValue({\n      loan,\n      structureId\n    });\n    return projectValue - loanValue;\n  }\n\n  getMissingOwnFunds({\n    loan,\n    structureId\n  }) {\n    const fundsRequired = this.getRequiredOwnFunds({\n      loan,\n      structureId\n    });\n    const totalCurrentFunds = this.getNonPledgedOwnFunds({\n      loan,\n      structureId\n    });\n    return fundsRequired - totalCurrentFunds;\n  }\n\n  isMissingOwnFunds({\n    loan,\n    structureId\n  }) {\n    const missingOwnFunds = this.getMissingOwnFunds({\n      loan,\n      structureId\n    });\n    return missingOwnFunds >= this.ownFundsRoundingAmount;\n  }\n\n  hasTooMuchOwnFunds({\n    loan,\n    structureId\n  }) {\n    const missingOwnFunds = this.getMissingOwnFunds({\n      loan,\n      structureId\n    });\n    return missingOwnFunds <= -this.ownFundsRoundingAmount;\n  }\n\n  hasCompleteStructure({\n    loan\n  }) {\n    return loan.structures.some(({\n      id\n    }) => {\n      const fundsRequired = this.getRequiredOwnFunds({\n        loan,\n        structureId: id\n      });\n\n      if (fundsRequired === 0) {\n        return false;\n      }\n\n      if (!this.isMissingOwnFunds({\n        loan,\n        structureId: id\n      }) && !this.hasTooMuchOwnFunds({\n        loan,\n        structureId: id\n      })) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n};","map":{"version":3,"sources":["imports/core/utils/Calculator/LoanCalculator.js"],"names":["withLoanCalculator","SuperClass","getProjectValue","structureId","propAndWork","value","getTotalUsed","ownFunds","key","sum","getTotalPledged","usageType","OWN_FUNDS_USAGE_TYPES","getFees","notaryFees","total","calculator","calculatedNotaryFees","getFeesCalculator","canton","getInterests","finalInterestRates","interestRates","loan","offer","loanTranches","loanValue","interests","tranches","getTheoreticalInterests","propertyValue","propertyWork","firstRank","Math","secondRank","firstRankInterests","secondRankInterests","getTheoreticalMaintenance","getAmortization","offerOverride","offerToUse","oldAmortizationGoal","amortizationRate","amortizationYears","amortization","getTheoreticalAmortization","getAmortizationRate","borrowRatio","cacheFix","amortizationGoal","getMonthly","getTheoreticalPropertyCost","asObject","maintenance","getTheoreticalMonthly","propertyCost","expensesToAddToTheoreticalCost","getIncomeRatio","cost","income","borrowers","ratio","getBorrowRatio","wantedLoan","getMaxBorrowRatio","loanHasMinimalInformation","structure","getLoanFilesProgress","filesPercent","fileArray","getLoanDocuments","doc","getMissingLoanDocuments","getMissingDocumentIds","getTotalFinancing","getNonPledgedOwnFunds","getPledgedOwnFunds","getUsedFundsOfType","type","ownFundType","ownFundUsageType","getRemainingFundsOfType","OWN_FUNDS_TYPES","undefined","getTotalRemainingFunds","refinancingPercent","array","getCountedArray","getRefinancingFormArray","getPercent","getMortgageNoteIncrease","mortgageNoteIds","mortgageNotes","propertyMortgageNotes","borrowerMortgageNotes","structureMortgageNotes","id","_id","allMortgageNotes","mortgageNoteValue","getCashUsed","getCashRatio","fees","cashUsed","cashRatio","hasEnoughCash","structureIsValid","incomeRatio","getEstimatedRevenues","getEstimatedReferralRevenues","getRequiredOwnFunds","projectValue","getMissingOwnFunds","fundsRequired","totalCurrentFunds","isMissingOwnFunds","missingOwnFunds","hasTooMuchOwnFunds","hasCompleteStructure"],"mappings":"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","sourcesContent":["// @flow\nimport { OWN_FUNDS_TYPES } from 'core/api/constants';\nimport { getLoanDocuments } from '../../api/files/documents';\nimport { OWN_FUNDS_USAGE_TYPES } from '../../api/constants';\nimport {\n  filesPercent,\n  getMissingDocumentIds,\n} from '../../api/files/fileHelpers';\nimport getRefinancingFormArray from '../../arrays/RefinancingFormArray';\nimport NotaryFeesCalculator from '../notaryFees/NotaryFeesCalculator';\nimport { getCountedArray } from '../formArrayHelpers';\nimport { getPercent } from '../general';\n\nexport const withLoanCalculator = (SuperClass = class {}) =>\n  class extends SuperClass {\n    getProjectValue({ loan, structureId }) {\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      if (!propAndWork) {\n        return 0;\n      }\n\n      const value = propAndWork + this.getFees({ loan, structureId }).total;\n\n      return value;\n    }\n\n    getTotalUsed({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'ownFunds',\n      });\n      return ownFunds.reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getTotalPledged({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'ownFunds',\n      });\n      return ownFunds\n        .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getFees({ loan, structureId }): number {\n      const notaryFees = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'notaryFees',\n      });\n\n      // Custom notary fees are provided\n      if (notaryFees === 0 || notaryFees) {\n        return { total: notaryFees };\n      }\n\n      const calculator = this.getFeesCalculator({ loan, structureId });\n\n      const calculatedNotaryFees = calculator.getNotaryFeesForLoan({\n        loan,\n        structureId,\n      });\n\n      return calculatedNotaryFees;\n    }\n\n    getFeesCalculator({ loan, structureId }) {\n      const canton = this.selectPropertyKey({\n        loan,\n        structureId,\n        key: 'canton',\n      });\n      return new NotaryFeesCalculator({ canton });\n    }\n\n    getInterests({ loan, interestRates, structureId }) {\n      let finalInterestRates = interestRates || loan.currentInterestRates;\n      const offer = this.selectStructureKey({\n        loan,\n        key: 'offer',\n        structureId,\n      });\n      const loanTranches = this.selectStructureKey({\n        loan,\n        key: 'loanTranches',\n        structureId,\n      });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      if (offer) {\n        finalInterestRates = offer;\n      }\n\n      const interests = this.getInterestsWithTranches({\n        tranches: loanTranches,\n        interestRates: finalInterestRates,\n      });\n\n      return (interests * loanValue) / 12;\n    }\n\n    getTheoreticalInterests({ loan, structureId }) {\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const propertyValue = this.selectPropertyValue({ loan, structureId });\n      const propertyWork = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'propertyWork',\n      }) || 0;\n      const firstRank = Math.min(\n        loanValue,\n        this.amortizationGoal * (propertyValue + propertyWork),\n      );\n      const secondRank = Math.max(0, loanValue - firstRank);\n\n      const firstRankInterests = firstRank * this.theoreticalInterestRate;\n      const secondRankInterests = secondRank\n        * (this.theoreticalInterestRate2ndRank || this.theoreticalInterestRate);\n\n      return (firstRankInterests + secondRankInterests) / 12;\n    }\n\n    getTheoreticalMaintenance({ loan, structureId }) {\n      return (\n        (this.getPropAndWork({ loan, structureId })\n          * this.theoreticalMaintenanceRate)\n        / 12\n      );\n    }\n\n    getAmortization({ loan, structureId, offerOverride }) {\n      const offer = this.selectOffer({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      const offerToUse = offerOverride || offer;\n\n      if (offerToUse) {\n        // Temporarily change amortizationGoal\n        const oldAmortizationGoal = this.amortizationGoal;\n        this.amortizationGoal = offerToUse.amortizationGoal;\n\n        const amortizationRate = this.getAmortizationRate({\n          loan,\n          amortizationYears: offerToUse.amortizationYears,\n          structureId,\n        });\n\n        const amortization = (amortizationRate * loanValue) / 12;\n\n        this.amortizationGoal = oldAmortizationGoal;\n\n        return amortization;\n      }\n\n      const amortizationRate = this.getAmortizationRate({ loan, structureId });\n      return (amortizationRate * loanValue) / 12;\n    }\n\n    getTheoreticalAmortization({ loan, structureId }) {\n      const loanValue = this.selectLoanValue({ loan, structureId });\n\n      return (this.getAmortizationRate({ loan, structureId }) * loanValue) / 12;\n    }\n\n    getAmortizationRate({ loan, amortizationYears, structureId }) {\n      const borrowRatio = this.getBorrowRatio({ loan, structureId });\n      return this.getAmortizationRateBase({\n        borrowRatio,\n        amortizationYears,\n        // Prevent caching of this function if amortizationGoal has changed\n        cacheFix: this.amortizationGoal,\n      });\n    }\n\n    getMonthly({ loan, interestRates, structureId }) {\n      return (\n        this.getInterests({ loan, interestRates, structureId })\n        + this.getAmortization({ loan, structureId })\n      );\n    }\n\n    getTheoreticalPropertyCost({ loan, structureId, asObject = false }) {\n      const interests = this.getTheoreticalInterests({ loan, structureId });\n      const amortization = this.getTheoreticalAmortization({\n        loan,\n        structureId,\n      });\n      const maintenance = this.getTheoreticalMaintenance({ loan, structureId });\n      return asObject\n        ? {\n          interests,\n          amortization,\n          maintenance,\n          total: interests + amortization + maintenance,\n        }\n        : interests + amortization + maintenance;\n    }\n\n    getTheoreticalMonthly({ loan, structureId }) {\n      const propertyCost = this.getTheoreticalPropertyCost({\n        loan,\n        structureId,\n      });\n      const expensesToAddToTheoreticalCost = this.getFormattedExpenses({ loan, structureId }).add / 12;\n\n      return propertyCost + expensesToAddToTheoreticalCost;\n    }\n\n    getIncomeRatio({ loan, structureId }) {\n      const cost = this.getTheoreticalMonthly({ loan, structureId });\n      const income = this.getTotalIncome({ borrowers: loan.borrowers });\n      const ratio = cost / (income / 12);\n\n      if (ratio > 1 || ratio < 0) {\n        return 1;\n      }\n\n      return ratio;\n    }\n\n    getBorrowRatio({ loan, structureId }) {\n      const wantedLoan = this.selectStructureKey({\n        loan,\n        structureId,\n        key: 'wantedLoan',\n      });\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      return wantedLoan / propAndWork;\n    }\n\n    getMaxBorrowRatio() {\n      return this.maxBorrowRatio;\n    }\n\n    loanHasMinimalInformation({ loan }) {\n      const structure = this.selectStructure({ loan });\n\n      return !!(\n        structure.ownFunds\n        && structure.ownFunds.length > 0\n        && this.selectPropertyValue({ loan })\n        && this.selectLoanValue({ loan })\n      );\n    }\n\n    getLoanFilesProgress({ loan }) {\n      return filesPercent({ fileArray: getLoanDocuments({ loan }), doc: loan });\n    }\n\n    getMissingLoanDocuments({ loan }) {\n      return getMissingDocumentIds({\n        fileArray: getLoanDocuments({ loan }),\n        doc: loan,\n      });\n    }\n\n    getTotalFinancing({ loan, structureId }) {\n      return (\n        this.selectStructureKey({ loan, structureId, key: 'wantedLoan' })\n        + this.getNonPledgedOwnFunds({ loan, structureId })\n      );\n    }\n\n    getNonPledgedOwnFunds({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ usageType }) => usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getPledgedOwnFunds({ loan, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ usageType }) => usageType === OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getUsedFundsOfType({ loan, type, usageType, structureId }) {\n      const ownFunds = this.selectStructureKey({ loan, structureId, key: 'ownFunds' }) || [];\n      return ownFunds\n        .filter(({ type: ownFundType }) => (type ? ownFundType === type : true))\n        .filter(({ usageType: ownFundUsageType }) =>\n          (usageType ? ownFundUsageType === usageType : true))\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getRemainingFundsOfType({ loan, structureId, type }) {\n      const ownFunds = this.getFunds({ loan, type, structureId });\n      return (\n        ownFunds\n        - this.getUsedFundsOfType({\n          loan,\n          type,\n          structureId,\n          usageType:\n            type !== OWN_FUNDS_TYPES.BANK_FORTUNE\n              ? OWN_FUNDS_USAGE_TYPES.WITHDRAW\n              : undefined,\n        })\n      );\n    }\n\n    getTotalRemainingFunds({ loan, structureId }) {\n      // Don't count extra third party fortune, as it is not a real \"loan\" from them\n      return Object.values(OWN_FUNDS_TYPES)\n        .filter(type => type !== OWN_FUNDS_TYPES.THIRD_PARTY_FORTUNE)\n        .reduce(\n          (sum, type) =>\n            sum + this.getRemainingFundsOfType({ loan, structureId, type }),\n          0,\n        );\n    }\n\n    refinancingPercent({ loan }) {\n      const array = getCountedArray(getRefinancingFormArray({ loan }), loan);\n      return getPercent(array);\n    }\n\n    getMortgageNoteIncrease({ loan, structureId }) {\n      const { borrowers = [] } = loan;\n      const { mortgageNoteIds = [] } = this.selectStructure({\n        loan,\n        structureId,\n      });\n\n      const { mortgageNotes: propertyMortgageNotes = [] } = this.selectProperty({ loan, structureId });\n      const borrowerMortgageNotes = this.getMortgageNotes({ borrowers });\n      const structureMortgageNotes = mortgageNoteIds.map(id =>\n        borrowerMortgageNotes.find(({ _id }) => _id === id));\n\n      const allMortgageNotes = [\n        ...structureMortgageNotes,\n        ...propertyMortgageNotes,\n      ];\n      const mortgageNoteValue = allMortgageNotes.reduce(\n        (total, { value }) => total + (value || 0),\n        0,\n      );\n      const loanValue = this.selectLoanValue({ loan, structureId });\n\n      return Math.max(0, loanValue - mortgageNoteValue);\n    }\n\n    getCashUsed({ loan, structureId }) {\n      const { ownFunds } = this.selectStructure({ loan, structureId });\n\n      return ownFunds\n        .filter(({ type, usageType }) =>\n          type !== OWN_FUNDS_TYPES.INSURANCE_2\n            && usageType !== OWN_FUNDS_USAGE_TYPES.PLEDGE)\n        .reduce((sum, { value }) => sum + value, 0);\n    }\n\n    getCashRatio({ loan, structureId }) {\n      const propAndWork = this.getPropAndWork({ loan, structureId });\n      const fees = this.getFees({ loan, structureId }).total;\n      const cashUsed = this.getCashUsed({ loan, structureId });\n\n      const cashRatio = (cashUsed - fees) / propAndWork;\n      return cashRatio;\n    }\n\n    hasEnoughCash({ loan, structureId }) {\n      return this.getCashRatio({ loan, structureId }) >= this.minCash;\n    }\n\n    structureIsValid({ loan, structureId }) {\n      const incomeRatio = this.getIncomeRatio({ loan, structureId });\n      const borrowRatio = this.getBorrowRatio({ loan, structureId });\n\n      if (\n        incomeRatio > this.maxIncomeRatio\n        || borrowRatio > this.maxBorrowRatio\n      ) {\n        return false;\n      }\n\n      if (\n        !this.allowPledge\n        && this.getPledgedOwnFunds({ loan, structureId }) > 0\n      ) {\n        return false;\n      }\n\n      return true;\n    }\n\n    getEstimatedRevenues({ loan, structureId }) {\n      const propertyValue = this.selectPropertyValue({ loan, structureId });\n      return propertyValue * this.estimatedCommission;\n    }\n\n    getEstimatedReferralRevenues({ loan, structureId }) {\n      return (\n        this.getEstimatedRevenues({ loan, structureId })\n        * this.referralCommission\n      );\n    }\n\n    getRequiredOwnFunds({ loan, structureId }) {\n      const projectValue = this.getProjectValue({ loan, structureId });\n      const loanValue = this.selectLoanValue({ loan, structureId });\n      return projectValue - loanValue;\n    }\n\n    getMissingOwnFunds({ loan, structureId }) {\n      const fundsRequired = this.getRequiredOwnFunds({ loan, structureId });\n      const totalCurrentFunds = this.getNonPledgedOwnFunds({\n        loan,\n        structureId,\n      });\n\n      return fundsRequired - totalCurrentFunds;\n    }\n\n    isMissingOwnFunds({ loan, structureId }) {\n      const missingOwnFunds = this.getMissingOwnFunds({ loan, structureId });\n      return missingOwnFunds >= this.ownFundsRoundingAmount;\n    }\n\n    hasTooMuchOwnFunds({ loan, structureId }) {\n      const missingOwnFunds = this.getMissingOwnFunds({ loan, structureId });\n      return missingOwnFunds <= -this.ownFundsRoundingAmount;\n    }\n\n    hasCompleteStructure({ loan }) {\n      return loan.structures.some(({ id }) => {\n        const fundsRequired = this.getRequiredOwnFunds({\n          loan,\n          structureId: id,\n        });\n\n        if (fundsRequired === 0) {\n          return false;\n        }\n\n        if (\n          !this.isMissingOwnFunds({ loan, structureId: id })\n          && !this.hasTooMuchOwnFunds({ loan, structureId: id })\n        ) {\n          return true;\n        }\n\n        return false;\n      });\n    }\n  };\n"]},"sourceType":"script","hash":"b78240c2a1949ae8101362644cacde3df61c9ff7"}

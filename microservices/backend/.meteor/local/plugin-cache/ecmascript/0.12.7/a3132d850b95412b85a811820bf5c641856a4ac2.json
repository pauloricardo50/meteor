{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenders/server/test/LenderService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/lenders/server/test/LenderService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenders/server/test/LenderService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/lenders/server/test/LenderService.test.js"],"names":["expect","resetDatabase","Factory","generator","LoanService","TaskService","OfferService","OrganisationService","LenderService","describe","beforeEach","it","loanId","create","_id","lenderId","insert","lender","offerId","addLink","id","linkName","linkId","remove","countAll","to","equal","organisationId","contactId1","firstName","contactId2","fetchOne","$filters","contact","loans","_factory","name","lenders","offers","tasks","organisation","structures","find","fetch","length","loan","get","map","not"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from '../../../factories';\nimport LoanService from '../../../loans/server/LoanService';\nimport TaskService from '../../../tasks/server/TaskService';\nimport OfferService from '../../../offers/server/OfferService';\nimport OrganisationService from '../../../organisations/server/OrganisationService';\nimport LenderService from '../LenderService';\n\ndescribe('LenderService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('remove', () => {\n    it('removes all offers related to this lender', () => {\n      const loanId = Factory.create('loan')._id;\n      const lenderId = LenderService.insert({ lender: { loanId } });\n      const offerId = Factory.create('offer')._id;\n\n      OfferService.addLink({\n        id: offerId,\n        linkName: 'lender',\n        linkId: lenderId,\n      });\n\n      LenderService.remove({ lenderId });\n\n      expect(LenderService.countAll()).to.equal(0, 'lender removed');\n      expect(OfferService.countAll()).to.equal(0, 'offer removed');\n    });\n  });\n\n  describe('insert', () => {\n    it('it gets the first contact of the organisation if none is provided', () => {\n      const loanId = Factory.create('loan')._id;\n      const organisationId = Factory.create('organisation')._id;\n      const contactId1 = Factory.create('contact', { firstName: 'john' })._id;\n      const contactId2 = Factory.create('contact', { firstName: 'joe' })._id;\n      OrganisationService.addLink({\n        id: organisationId,\n        linkName: 'contacts',\n        linkId: contactId1,\n      });\n      OrganisationService.addLink({\n        id: organisationId,\n        linkName: 'contacts',\n        linkId: contactId2,\n      });\n      const lenderId = LenderService.insert({\n        lender: { loanId },\n        organisationId,\n      });\n\n      const lender = LenderService.fetchOne({\n        $filters: { _id: lenderId },\n        contact: { firstName: 1 },\n      });\n\n      expect(lender.contact.firstName).to.equal('john');\n    });\n  });\n\n  describe('remove', () => {\n    it('removes the lender, the offer, the tasks and the offerId', () => {\n      generator({\n        loans: {\n          _factory: null,\n          name: '18-0001',\n          lenders: {\n            _factory: null,\n            _id: 'lenderId',\n            offers: { _id: 'offer1' },\n            tasks: [{}, {}],\n            organisation: {},\n          },\n          structures: [\n            { id: 'a', offerId: 'offer1' },\n            { id: 'b', offerId: 'offer2' },\n          ],\n        },\n      });\n\n      expect(LenderService.find({}).fetch().length).to.equal(1, 'a');\n      expect(OfferService.find({}).fetch().length).to.equal(1, 'b');\n      expect(TaskService.find({}).fetch().length).to.equal(2, 'c');\n\n      LenderService.remove({ lenderId: 'lenderId' });\n\n      expect(LenderService.find({}).fetch().length).to.equal(0);\n      expect(OfferService.find({}).fetch().length).to.equal(0);\n      expect(TaskService.find({}).fetch().length).to.equal(0);\n\n      const loan = LoanService.get({});\n\n      loan.structures.map(({ offerId }) => {\n        expect(offerId).to.not.equal('offer1');\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenders/server/test/LenderService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/lenders/server/test/LenderService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 3);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 4);\nlet TaskService;\nmodule.link(\"../../../tasks/server/TaskService\", {\n  default(v) {\n    TaskService = v;\n  }\n\n}, 5);\nlet OfferService;\nmodule.link(\"../../../offers/server/OfferService\", {\n  default(v) {\n    OfferService = v;\n  }\n\n}, 6);\nlet OrganisationService;\nmodule.link(\"../../../organisations/server/OrganisationService\", {\n  default(v) {\n    OrganisationService = v;\n  }\n\n}, 7);\nlet LenderService;\nmodule.link(\"../LenderService\", {\n  default(v) {\n    LenderService = v;\n  }\n\n}, 8);\ndescribe('LenderService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('remove', () => {\n    it('removes all offers related to this lender', () => {\n      const loanId = Factory.create('loan')._id;\n\n      const lenderId = LenderService.insert({\n        lender: {\n          loanId\n        }\n      });\n\n      const offerId = Factory.create('offer')._id;\n\n      OfferService.addLink({\n        id: offerId,\n        linkName: 'lender',\n        linkId: lenderId\n      });\n      LenderService.remove({\n        lenderId\n      });\n      expect(LenderService.countAll()).to.equal(0, 'lender removed');\n      expect(OfferService.countAll()).to.equal(0, 'offer removed');\n    });\n  });\n  describe('insert', () => {\n    it('it gets the first contact of the organisation if none is provided', () => {\n      const loanId = Factory.create('loan')._id;\n\n      const organisationId = Factory.create('organisation')._id;\n\n      const contactId1 = Factory.create('contact', {\n        firstName: 'john'\n      })._id;\n\n      const contactId2 = Factory.create('contact', {\n        firstName: 'joe'\n      })._id;\n\n      OrganisationService.addLink({\n        id: organisationId,\n        linkName: 'contacts',\n        linkId: contactId1\n      });\n      OrganisationService.addLink({\n        id: organisationId,\n        linkName: 'contacts',\n        linkId: contactId2\n      });\n      const lenderId = LenderService.insert({\n        lender: {\n          loanId\n        },\n        organisationId\n      });\n      const lender = LenderService.fetchOne({\n        $filters: {\n          _id: lenderId\n        },\n        contact: {\n          firstName: 1\n        }\n      });\n      expect(lender.contact.firstName).to.equal('john');\n    });\n  });\n  describe('remove', () => {\n    it('removes the lender, the offer, the tasks and the offerId', () => {\n      generator({\n        loans: {\n          _factory: null,\n          name: '18-0001',\n          lenders: {\n            _factory: null,\n            _id: 'lenderId',\n            offers: {\n              _id: 'offer1'\n            },\n            tasks: [{}, {}],\n            organisation: {}\n          },\n          structures: [{\n            id: 'a',\n            offerId: 'offer1'\n          }, {\n            id: 'b',\n            offerId: 'offer2'\n          }]\n        }\n      });\n      expect(LenderService.find({}).fetch().length).to.equal(1, 'a');\n      expect(OfferService.find({}).fetch().length).to.equal(1, 'b');\n      expect(TaskService.find({}).fetch().length).to.equal(2, 'c');\n      LenderService.remove({\n        lenderId: 'lenderId'\n      });\n      expect(LenderService.find({}).fetch().length).to.equal(0);\n      expect(OfferService.find({}).fetch().length).to.equal(0);\n      expect(TaskService.find({}).fetch().length).to.equal(0);\n      const loan = LoanService.get({});\n      loan.structures.map(({\n        offerId\n      }) => {\n        expect(offerId).to.not.equal('offer1');\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/lenders/server/test/LenderService.test.js"],"names":["describe","beforeEach","resetDatabase","it","loanId","Factory","lenderId","lender","offerId","OfferService","id","linkName","linkId","LenderService","expect","organisationId","contactId1","firstName","contactId2","OrganisationService","$filters","_id","contact","generator","loans","_factory","name","lenders","offers","tasks","organisation","structures","TaskService","loan","LoanService"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from '../../../factories';\nimport LoanService from '../../../loans/server/LoanService';\nimport TaskService from '../../../tasks/server/TaskService';\nimport OfferService from '../../../offers/server/OfferService';\nimport OrganisationService from '../../../organisations/server/OrganisationService';\nimport LenderService from '../LenderService';\n\ndescribe('LenderService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('remove', () => {\n    it('removes all offers related to this lender', () => {\n      const loanId = Factory.create('loan')._id;\n      const lenderId = LenderService.insert({ lender: { loanId } });\n      const offerId = Factory.create('offer')._id;\n\n      OfferService.addLink({\n        id: offerId,\n        linkName: 'lender',\n        linkId: lenderId,\n      });\n\n      LenderService.remove({ lenderId });\n\n      expect(LenderService.countAll()).to.equal(0, 'lender removed');\n      expect(OfferService.countAll()).to.equal(0, 'offer removed');\n    });\n  });\n\n  describe('insert', () => {\n    it('it gets the first contact of the organisation if none is provided', () => {\n      const loanId = Factory.create('loan')._id;\n      const organisationId = Factory.create('organisation')._id;\n      const contactId1 = Factory.create('contact', { firstName: 'john' })._id;\n      const contactId2 = Factory.create('contact', { firstName: 'joe' })._id;\n      OrganisationService.addLink({\n        id: organisationId,\n        linkName: 'contacts',\n        linkId: contactId1,\n      });\n      OrganisationService.addLink({\n        id: organisationId,\n        linkName: 'contacts',\n        linkId: contactId2,\n      });\n      const lenderId = LenderService.insert({\n        lender: { loanId },\n        organisationId,\n      });\n\n      const lender = LenderService.fetchOne({\n        $filters: { _id: lenderId },\n        contact: { firstName: 1 },\n      });\n\n      expect(lender.contact.firstName).to.equal('john');\n    });\n  });\n\n  describe('remove', () => {\n    it('removes the lender, the offer, the tasks and the offerId', () => {\n      generator({\n        loans: {\n          _factory: null,\n          name: '18-0001',\n          lenders: {\n            _factory: null,\n            _id: 'lenderId',\n            offers: { _id: 'offer1' },\n            tasks: [{}, {}],\n            organisation: {},\n          },\n          structures: [\n            { id: 'a', offerId: 'offer1' },\n            { id: 'b', offerId: 'offer2' },\n          ],\n        },\n      });\n\n      expect(LenderService.find({}).fetch().length).to.equal(1, 'a');\n      expect(OfferService.find({}).fetch().length).to.equal(1, 'b');\n      expect(TaskService.find({}).fetch().length).to.equal(2, 'c');\n\n      LenderService.remove({ lenderId: 'lenderId' });\n\n      expect(LenderService.find({}).fetch().length).to.equal(0);\n      expect(OfferService.find({}).fetch().length).to.equal(0);\n      expect(TaskService.find({}).fetch().length).to.equal(0);\n\n      const loan = LoanService.get({});\n\n      loan.structures.map(({ offerId }) => {\n        expect(offerId).to.not.equal('offer1');\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"a3132d850b95412b85a811820bf5c641856a4ac2"}

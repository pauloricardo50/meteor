{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/features/FeatureService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/features/FeatureService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/features/FeatureService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/features/FeatureService.js"],"names":["Meteor","pickBy","extend","withProps","renderNothing","TOGGLE_POINTS","enhanceChildrenWith","changeCodeWith","returnEmptyArray","returnFalse","WIDGET1_CONTINUE_BUTTON","STRIPPED_LITE_VERSION_UI","ROUTES_CONFIG_STRIPPED_IN_LITE_VERSION","ROUTES_NOT_PRODUCTION_READY","features","featureConfig","settings","public","featureMap","LITE_VERSION","to","NOT_PRODUCTION_READY","FeatureService","constructor","getEnabledFeatureDecisions","enabledFeatureMap","featureDecisions","featureName","featureIsEnabled","Object","values","getFeatureDecision","togglePointId","currentFeatureDecisions"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,WAAzC;AACA,SAASC,aAAT;AACA,SACEC,mBADF,EAEEC,cAFF;AAIA,SAASC,gBAAT,EAA2BC,WAA3B;AAEA,MAAM;AACJC,EAAAA,uBADI;AAEJC,EAAAA,wBAFI;AAGJC,EAAAA,sCAHI;AAIJC,EAAAA;AAJI,IAKFR,aALJ;AAOA,MAAM;AAAES,EAAAA,QAAQ,EAAEC;AAAZ,IAA8Bf,MAAM,CAACgB,QAAP,CAAgBC,MAApD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,YAAY,EAAE;AACZ;AACA,KAACT,uBAAD,GAA2BJ,mBAAmB,CAACH,SAAS,CAAC;AACvDiB,MAAAA,EAAE,EAAE;AADmD,KAAD,CAAV,CAFlC;AAMZ;AACA,KAACT,wBAAD,GAA4BL,mBAAmB,CAACF,aAAD,CAPnC;AASZ;AACA,KAACQ,sCAAD,GAA0CL,cAAc,CAACC,gBAAD;AAV5C,GADG;AAajBa,EAAAA,oBAAoB,EAAE;AACpB,KAACR,2BAAD,GAA+BN,cAAc,CAACC,gBAAD;AADzB;AAbL,CAAnB;AAkBA,OAAO,MAAMc,cAAN,CAAqB;AAC1BC,EAAAA,WAAW,CAAC;AAAEL,IAAAA,UAAU,GAAG,EAAf;AAAmBH,IAAAA,aAAa,GAAG;AAAnC,GAAD,EAA0C;AACnD,SAAKG,UAAL,GAAkBA,UAAlB;AACA,SAAKH,aAAL,GAAqBA,aAArB;AACD,GAJyB,CAM1B;;;AACAS,EAAAA,0BAA0B,CAAC;AAAEN,IAAAA,UAAF;AAAcH,IAAAA;AAAd,GAAD,EAAgC;AACxD;AACA,UAAMU,iBAAiB,GAAGxB,MAAM,CAC9BiB,UAD8B,EAE9B,CAACQ,gBAAD,EAAmBC,WAAnB,KAAmC;AACjC,YAAMC,gBAAgB,GAAGb,aAAa,CAACY,WAAD,CAAtC;AACA,aAAOC,gBAAP;AACD,KAL6B,CAAhC,CAFwD,CAUxD;;AACA,WAAO1B,MAAM,CAAC,EAAD,EAAK,GAAG2B,MAAM,CAACC,MAAP,CAAcL,iBAAd,CAAR,CAAb;AACD;;AAEDM,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAChC,UAAM;AAAEd,MAAAA,UAAF;AAAcH,MAAAA;AAAd,QAAgC,IAAtC;AACA,UAAMkB,uBAAuB,GAAG,KAAKT,0BAAL,CAAgC;AAC9DN,MAAAA,UAD8D;AAE9DH,MAAAA;AAF8D,KAAhC,CAAhC;AAKA,WAAOkB,uBAAuB,CAACD,aAAD,CAA9B;AACD;;AA7ByB;AAgC5B,eAAe,IAAIV,cAAJ,CAAmB;AAAEJ,EAAAA,UAAF;AAAcH,EAAAA;AAAd,CAAnB,CAAf","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport pickBy from 'lodash/pickBy';\nimport extend from 'lodash/extend';\nimport { withProps, renderNothing } from 'recompose';\nimport { TOGGLE_POINTS } from './featureConstants';\nimport {\n  enhanceChildrenWith,\n  changeCodeWith,\n} from './featureDecisionFactories';\nimport { returnEmptyArray, returnFalse } from '../../utils/featureFunctions';\n\nconst {\n  WIDGET1_CONTINUE_BUTTON,\n  STRIPPED_LITE_VERSION_UI,\n  ROUTES_CONFIG_STRIPPED_IN_LITE_VERSION,\n  ROUTES_NOT_PRODUCTION_READY,\n} = TOGGLE_POINTS;\n\nconst { features: featureConfig } = Meteor.settings.public;\n\n/**\n * A `Feature`, when enabled, changes the application in some way\n * (on frontend, backend, anywhere); when disabled, the application remains unchanged.\n *\n * A `Feature Decision` belongs to a certain feature and\n * represents a change performed in the application when that feature is enabled.\n * The actual place in the code where the feature decision will be applied\n * to change the code is called a `Toggle Point`.\n *\n * The `Toggle Point` is the technical implementation of the Feature Decision concept\n *\n * The `Feature Map` is a list of maches between a feature and its decisions.\n *\n * When multiple features are enabled, all their decisions get merged into\n * a single list of decisions. If the same feature decision (represented by a Toggle Point)\n * is used in more than one feature, the one in the latter feature overwrites others before it\n * (so only the latter decision gets applied); the features' order is dictated by the Feature Map.\n *\n * So in the end, tehnically speaking, we get a single list of Toggle Points which will\n * customize the code as we specify in the Feature Map.\n *\n * For each decision/toggle point it, you should pass a decision value\n * suitable for the way you use that Toggle Point.\n * E.g.: for a toggle point that wraps chilren, use `enhanceChildrenWith`\n *       for a toggle point that switches components on/off, use `switchElements`\n * First check how your TogglePoint component is used,\n * then configure it's behaviour here.\n */\n\nconst featureMap = {\n  LITE_VERSION: {\n    // change the link of the Continuer button to '/contact'\n    [WIDGET1_CONTINUE_BUTTON]: enhanceChildrenWith(withProps({\n      to: '/contact',\n    })),\n\n    // don't render the React UI that we don't want in the lite www version\n    [STRIPPED_LITE_VERSION_UI]: enhanceChildrenWith(renderNothing),\n\n    // remove the routes that we don't want in the lite www version\n    [ROUTES_CONFIG_STRIPPED_IN_LITE_VERSION]: changeCodeWith(returnEmptyArray),\n  },\n  NOT_PRODUCTION_READY: {\n    [ROUTES_NOT_PRODUCTION_READY]: changeCodeWith(returnEmptyArray),\n  },\n};\n\nexport class FeatureService {\n  constructor({ featureMap = {}, featureConfig = {} }) {\n    this.featureMap = featureMap;\n    this.featureConfig = featureConfig;\n  }\n\n  // Merges all feature decisions of the features that are enabled\n  getEnabledFeatureDecisions({ featureMap, featureConfig }) {\n    // Get a feature map of all enabled features\n    const enabledFeatureMap = pickBy(\n      featureMap,\n      (featureDecisions, featureName) => {\n        const featureIsEnabled = featureConfig[featureName];\n        return featureIsEnabled;\n      },\n    );\n\n    // merge all enabled feature decisions into a single object\n    return extend({}, ...Object.values(enabledFeatureMap));\n  }\n\n  getFeatureDecision(togglePointId) {\n    const { featureMap, featureConfig } = this;\n    const currentFeatureDecisions = this.getEnabledFeatureDecisions({\n      featureMap,\n      featureConfig,\n    });\n\n    return currentFeatureDecisions[togglePointId];\n  }\n}\n\nexport default new FeatureService({ featureMap, featureConfig });\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/features/FeatureService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/features/FeatureService.js"}},"code":"module.export({\n  FeatureService: () => FeatureService\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet pickBy;\nmodule.link(\"lodash/pickBy\", {\n  default(v) {\n    pickBy = v;\n  }\n\n}, 1);\nlet extend;\nmodule.link(\"lodash/extend\", {\n  default(v) {\n    extend = v;\n  }\n\n}, 2);\nlet withProps, renderNothing;\nmodule.link(\"recompose\", {\n  withProps(v) {\n    withProps = v;\n  },\n\n  renderNothing(v) {\n    renderNothing = v;\n  }\n\n}, 3);\nlet TOGGLE_POINTS;\nmodule.link(\"./featureConstants\", {\n  TOGGLE_POINTS(v) {\n    TOGGLE_POINTS = v;\n  }\n\n}, 4);\nlet enhanceChildrenWith, changeCodeWith;\nmodule.link(\"./featureDecisionFactories\", {\n  enhanceChildrenWith(v) {\n    enhanceChildrenWith = v;\n  },\n\n  changeCodeWith(v) {\n    changeCodeWith = v;\n  }\n\n}, 5);\nlet returnEmptyArray, returnFalse;\nmodule.link(\"../../utils/featureFunctions\", {\n  returnEmptyArray(v) {\n    returnEmptyArray = v;\n  },\n\n  returnFalse(v) {\n    returnFalse = v;\n  }\n\n}, 6);\nconst {\n  WIDGET1_CONTINUE_BUTTON,\n  STRIPPED_LITE_VERSION_UI,\n  ROUTES_CONFIG_STRIPPED_IN_LITE_VERSION,\n  ROUTES_NOT_PRODUCTION_READY\n} = TOGGLE_POINTS;\nconst {\n  features: featureConfig\n} = Meteor.settings.public;\n/**\n * A `Feature`, when enabled, changes the application in some way\n * (on frontend, backend, anywhere); when disabled, the application remains unchanged.\n *\n * A `Feature Decision` belongs to a certain feature and\n * represents a change performed in the application when that feature is enabled.\n * The actual place in the code where the feature decision will be applied\n * to change the code is called a `Toggle Point`.\n *\n * The `Toggle Point` is the technical implementation of the Feature Decision concept\n *\n * The `Feature Map` is a list of maches between a feature and its decisions.\n *\n * When multiple features are enabled, all their decisions get merged into\n * a single list of decisions. If the same feature decision (represented by a Toggle Point)\n * is used in more than one feature, the one in the latter feature overwrites others before it\n * (so only the latter decision gets applied); the features' order is dictated by the Feature Map.\n *\n * So in the end, tehnically speaking, we get a single list of Toggle Points which will\n * customize the code as we specify in the Feature Map.\n *\n * For each decision/toggle point it, you should pass a decision value\n * suitable for the way you use that Toggle Point.\n * E.g.: for a toggle point that wraps chilren, use `enhanceChildrenWith`\n *       for a toggle point that switches components on/off, use `switchElements`\n * First check how your TogglePoint component is used,\n * then configure it's behaviour here.\n */\n\nconst featureMap = {\n  LITE_VERSION: {\n    // change the link of the Continuer button to '/contact'\n    [WIDGET1_CONTINUE_BUTTON]: enhanceChildrenWith(withProps({\n      to: '/contact'\n    })),\n    // don't render the React UI that we don't want in the lite www version\n    [STRIPPED_LITE_VERSION_UI]: enhanceChildrenWith(renderNothing),\n    // remove the routes that we don't want in the lite www version\n    [ROUTES_CONFIG_STRIPPED_IN_LITE_VERSION]: changeCodeWith(returnEmptyArray)\n  },\n  NOT_PRODUCTION_READY: {\n    [ROUTES_NOT_PRODUCTION_READY]: changeCodeWith(returnEmptyArray)\n  }\n};\n\nclass FeatureService {\n  constructor({\n    featureMap = {},\n    featureConfig = {}\n  }) {\n    this.featureMap = featureMap;\n    this.featureConfig = featureConfig;\n  } // Merges all feature decisions of the features that are enabled\n\n\n  getEnabledFeatureDecisions({\n    featureMap,\n    featureConfig\n  }) {\n    // Get a feature map of all enabled features\n    const enabledFeatureMap = pickBy(featureMap, (featureDecisions, featureName) => {\n      const featureIsEnabled = featureConfig[featureName];\n      return featureIsEnabled;\n    }); // merge all enabled feature decisions into a single object\n\n    return extend({}, ...Object.values(enabledFeatureMap));\n  }\n\n  getFeatureDecision(togglePointId) {\n    const {\n      featureMap,\n      featureConfig\n    } = this;\n    const currentFeatureDecisions = this.getEnabledFeatureDecisions({\n      featureMap,\n      featureConfig\n    });\n    return currentFeatureDecisions[togglePointId];\n  }\n\n}\n\nmodule.exportDefault(new FeatureService({\n  featureMap,\n  featureConfig\n}));","map":{"version":3,"sources":["imports/core/api/features/FeatureService.js"],"names":["Meteor","ROUTES_NOT_PRODUCTION_READY","features","featureConfig","featureMap","LITE_VERSION","enhanceChildrenWith","withProps","to","changeCodeWith","NOT_PRODUCTION_READY","constructor","getEnabledFeatureDecisions","enabledFeatureMap","pickBy","featureIsEnabled","extend","Object","getFeatureDecision","currentFeatureDecisions"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport pickBy from 'lodash/pickBy';\nimport extend from 'lodash/extend';\nimport { withProps, renderNothing } from 'recompose';\nimport { TOGGLE_POINTS } from './featureConstants';\nimport {\n  enhanceChildrenWith,\n  changeCodeWith,\n} from './featureDecisionFactories';\nimport { returnEmptyArray, returnFalse } from '../../utils/featureFunctions';\n\nconst {\n  WIDGET1_CONTINUE_BUTTON,\n  STRIPPED_LITE_VERSION_UI,\n  ROUTES_CONFIG_STRIPPED_IN_LITE_VERSION,\n  ROUTES_NOT_PRODUCTION_READY,\n} = TOGGLE_POINTS;\n\nconst { features: featureConfig } = Meteor.settings.public;\n\n/**\n * A `Feature`, when enabled, changes the application in some way\n * (on frontend, backend, anywhere); when disabled, the application remains unchanged.\n *\n * A `Feature Decision` belongs to a certain feature and\n * represents a change performed in the application when that feature is enabled.\n * The actual place in the code where the feature decision will be applied\n * to change the code is called a `Toggle Point`.\n *\n * The `Toggle Point` is the technical implementation of the Feature Decision concept\n *\n * The `Feature Map` is a list of maches between a feature and its decisions.\n *\n * When multiple features are enabled, all their decisions get merged into\n * a single list of decisions. If the same feature decision (represented by a Toggle Point)\n * is used in more than one feature, the one in the latter feature overwrites others before it\n * (so only the latter decision gets applied); the features' order is dictated by the Feature Map.\n *\n * So in the end, tehnically speaking, we get a single list of Toggle Points which will\n * customize the code as we specify in the Feature Map.\n *\n * For each decision/toggle point it, you should pass a decision value\n * suitable for the way you use that Toggle Point.\n * E.g.: for a toggle point that wraps chilren, use `enhanceChildrenWith`\n *       for a toggle point that switches components on/off, use `switchElements`\n * First check how your TogglePoint component is used,\n * then configure it's behaviour here.\n */\n\nconst featureMap = {\n  LITE_VERSION: {\n    // change the link of the Continuer button to '/contact'\n    [WIDGET1_CONTINUE_BUTTON]: enhanceChildrenWith(withProps({\n      to: '/contact',\n    })),\n\n    // don't render the React UI that we don't want in the lite www version\n    [STRIPPED_LITE_VERSION_UI]: enhanceChildrenWith(renderNothing),\n\n    // remove the routes that we don't want in the lite www version\n    [ROUTES_CONFIG_STRIPPED_IN_LITE_VERSION]: changeCodeWith(returnEmptyArray),\n  },\n  NOT_PRODUCTION_READY: {\n    [ROUTES_NOT_PRODUCTION_READY]: changeCodeWith(returnEmptyArray),\n  },\n};\n\nexport class FeatureService {\n  constructor({ featureMap = {}, featureConfig = {} }) {\n    this.featureMap = featureMap;\n    this.featureConfig = featureConfig;\n  }\n\n  // Merges all feature decisions of the features that are enabled\n  getEnabledFeatureDecisions({ featureMap, featureConfig }) {\n    // Get a feature map of all enabled features\n    const enabledFeatureMap = pickBy(\n      featureMap,\n      (featureDecisions, featureName) => {\n        const featureIsEnabled = featureConfig[featureName];\n        return featureIsEnabled;\n      },\n    );\n\n    // merge all enabled feature decisions into a single object\n    return extend({}, ...Object.values(enabledFeatureMap));\n  }\n\n  getFeatureDecision(togglePointId) {\n    const { featureMap, featureConfig } = this;\n    const currentFeatureDecisions = this.getEnabledFeatureDecisions({\n      featureMap,\n      featureConfig,\n    });\n\n    return currentFeatureDecisions[togglePointId];\n  }\n}\n\nexport default new FeatureService({ featureMap, featureConfig });\n"]},"sourceType":"script","hash":"a5e43a15432fcc00a7291bfbd678324bdff69bcd"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/impersonation/server/ImpersonateService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/impersonation/server/ImpersonateService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/impersonation/server/ImpersonateService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/impersonation/server/ImpersonateService.test.js"],"names":["expect","Accounts","Meteor","Random","Users","ROLES","ImpersonateService","getDummies","adminId","createUser","email","password","userId","describe","it","done","FICTIONAL_TOKEN","id","HASHED_TOKEN","_hashLoginToken","update","$set","roles","ADMIN","hashedToken","impersonate","context","setUserId","impersonateId","to","equal","authToken","userIdToImpersonate","remove","_id","$in","LENDER","throw","Error"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,KAAP;AACA,SAASC,KAAT;AACA,OAAOC,kBAAP;;AAEA,SAASC,UAAT,GAAsB;AACpB,QAAMC,OAAO,GAAGP,QAAQ,CAACQ,UAAT,CAAoB;AAClCC,IAAAA,KAAK,EAAE,wBAD2B;AAElCC,IAAAA,QAAQ,EAAE;AAFwB,GAApB,CAAhB;AAKA,QAAMC,MAAM,GAAGX,QAAQ,CAACQ,UAAT,CAAoB;AACjCC,IAAAA,KAAK,EAAE,iBAD0B;AAEjCC,IAAAA,QAAQ,EAAE;AAFuB,GAApB,CAAf;AAKA,SAAO;AAAEH,IAAAA,OAAF;AAAWI,IAAAA;AAAX,GAAP;AACD;;AAEDC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnCC,EAAAA,EAAE,CAAC,mDAAD,EAAuDC,IAAD,IAAU;AAChE,UAAM;AAAEP,MAAAA,OAAF;AAAWI,MAAAA;AAAX,QAAsBL,UAAU,EAAtC;AAEA,UAAMS,eAAe,GAAGb,MAAM,CAACc,EAAP,EAAxB;;AACA,UAAMC,YAAY,GAAGjB,QAAQ,CAACkB,eAAT,CAAyBH,eAAzB,CAArB;;AAEAZ,IAAAA,KAAK,CAACgB,MAAN,CAAaZ,OAAb,EAAsB;AACpBa,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAEjB,KAAK,CAACkB,KADT;AAEJ,uCAA+B,CAAC;AAAEC,UAAAA,WAAW,EAAEN;AAAf,SAAD;AAF3B;AADc,KAAtB;AAOAZ,IAAAA,kBAAkB,CAACmB,WAAnB,CAA+B;AAC7BC,MAAAA,OAAO,EAAE;AACPC,QAAAA,SAAS,CAACC,aAAD,EAAgB;AACvB5B,UAAAA,MAAM,CAACY,MAAD,CAAN,CAAeiB,EAAf,CAAkBC,KAAlB,CAAwBF,aAAxB;AACAb,UAAAA,IAAI;AACL;;AAJM,OADoB;AAO7BgB,MAAAA,SAAS,EAAEf,eAPkB;AAQ7BgB,MAAAA,mBAAmB,EAAEpB;AARQ,KAA/B;AAWAR,IAAAA,KAAK,CAAC6B,MAAN,CAAa;AAAEC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,GAAG,EAAE,CAAC3B,OAAD,EAAUI,MAAV;AAAP;AAAP,KAAb;AACD,GAzBC,CAAF;AA2BAE,EAAAA,EAAE,CAAC,uEAAD,EAA0E,MAAM;AAChF,UAAM;AAAEN,MAAAA,OAAF;AAAWI,MAAAA;AAAX,QAAsBL,UAAU,EAAtC;AAEA,UAAMS,eAAe,GAAGb,MAAM,CAACc,EAAP,EAAxB;;AACA,UAAMC,YAAY,GAAGjB,QAAQ,CAACkB,eAAT,CAAyBH,eAAzB,CAArB;;AAEAZ,IAAAA,KAAK,CAACgB,MAAN,CAAaZ,OAAb,EAAsB;AACpBa,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAEjB,KAAK,CAAC+B,MADT;AAEJ,uCAA+B,CAAC;AAAEZ,UAAAA,WAAW,EAAEN;AAAf,SAAD;AAF3B;AADc,KAAtB;AAOAlB,IAAAA,MAAM,CAAC,MAAM;AACXM,MAAAA,kBAAkB,CAACmB,WAAnB,CAA+B;AAC7BC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,CAACC,aAAD,EAAgB,CAAE;;AADpB,SADoB;AAI7BG,QAAAA,SAAS,EAAEf,eAJkB;AAK7BgB,QAAAA,mBAAmB,EAAEpB;AALQ,OAA/B;AAOD,KARK,CAAN,CAQGiB,EARH,CAQMQ,KARN,CAQYnC,MAAM,CAACoC,KARnB;AAUAlC,IAAAA,KAAK,CAAC6B,MAAN,CAAa;AAAEC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,GAAG,EAAE,CAAC3B,OAAD,EAAUI,MAAV;AAAP;AAAP,KAAb;AACD,GAxBC,CAAF;AA0BAE,EAAAA,EAAE,CAAC,mDAAD,EAAsD,MAAM;AAC5D,UAAM;AAAEN,MAAAA,OAAF;AAAWI,MAAAA;AAAX,QAAsBL,UAAU,EAAtC;AAEA,UAAMS,eAAe,GAAGb,MAAM,CAACc,EAAP,EAAxB;;AACA,UAAMC,YAAY,GAAGjB,QAAQ,CAACkB,eAAT,CAAyBH,eAAzB,CAArB;;AAEAZ,IAAAA,KAAK,CAACgB,MAAN,CAAaZ,OAAb,EAAsB;AACpBa,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAEjB,KAAK,CAACkB,KADT;AAEJ,uCAA+B,CAAC;AAAEC,UAAAA,WAAW,EAAEN;AAAf,SAAD;AAF3B;AADc,KAAtB;AAOAlB,IAAAA,MAAM,CAAC,MAAM;AACXM,MAAAA,kBAAkB,CAACmB,WAAnB,CAA+B;AAC7BC,QAAAA,OAAO,EAAE;AACPC,UAAAA,SAAS,CAACC,aAAD,EAAgB;AACvBb,YAAAA,IAAI,CAAC,qBAAD,CAAJ;AACD;;AAHM,SADoB;AAM7BgB,QAAAA,SAAS,EAAG,GAAEf,eAAgB,SAND;AAO7BgB,QAAAA,mBAAmB,EAAEpB;AAPQ,OAA/B;AASD,KAVK,CAAN,CAUGiB,EAVH,CAUMQ,KAVN,CAUYnC,MAAM,CAACoC,KAVnB;AAYAlC,IAAAA,KAAK,CAAC6B,MAAN,CAAa;AAAEC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,GAAG,EAAE,CAAC3B,OAAD,EAAUI,MAAV;AAAP;AAAP,KAAb;AACD,GA1BC,CAAF;AA2BD,CAjFO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport Users from 'core/api/users';\nimport { ROLES } from 'core/api/users/userConstants';\nimport ImpersonateService from './ImpersonateService';\n\nfunction getDummies() {\n  const adminId = Accounts.createUser({\n    email: 'impersonator@epotek.ch',\n    password: '12345',\n  });\n\n  const userId = Accounts.createUser({\n    email: 'sheep@epotek.ch',\n    password: '12345',\n  });\n\n  return { adminId, userId };\n}\n\ndescribe('ImpersonateService', () => {\n  it('Should be able to authenticate a user as an admin', (done) => {\n    const { adminId, userId } = getDummies();\n\n    const FICTIONAL_TOKEN = Random.id();\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.ADMIN,\n        'services.resume.loginTokens': [{ hashedToken: HASHED_TOKEN }],\n      },\n    });\n\n    ImpersonateService.impersonate({\n      context: {\n        setUserId(impersonateId) {\n          expect(userId).to.equal(impersonateId);\n          done();\n        },\n      },\n      authToken: FICTIONAL_TOKEN,\n      userIdToImpersonate: userId,\n    });\n\n    Users.remove({ _id: { $in: [adminId, userId] } });\n  });\n\n  it('Should not allow impersonation of a user that is non-dev or non-admin', () => {\n    const { adminId, userId } = getDummies();\n\n    const FICTIONAL_TOKEN = Random.id();\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.LENDER,\n        'services.resume.loginTokens': [{ hashedToken: HASHED_TOKEN }],\n      },\n    });\n\n    expect(() => {\n      ImpersonateService.impersonate({\n        context: {\n          setUserId(impersonateId) {},\n        },\n        authToken: FICTIONAL_TOKEN,\n        userIdToImpersonate: userId,\n      });\n    }).to.throw(Meteor.Error);\n\n    Users.remove({ _id: { $in: [adminId, userId] } });\n  });\n\n  it('Should not allow impersonation with invalid token', () => {\n    const { adminId, userId } = getDummies();\n\n    const FICTIONAL_TOKEN = Random.id();\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.ADMIN,\n        'services.resume.loginTokens': [{ hashedToken: HASHED_TOKEN }],\n      },\n    });\n\n    expect(() => {\n      ImpersonateService.impersonate({\n        context: {\n          setUserId(impersonateId) {\n            done('Should not be here!');\n          },\n        },\n        authToken: `${FICTIONAL_TOKEN}HACKER!`,\n        userIdToImpersonate: userId,\n      });\n    }).to.throw(Meteor.Error);\n\n    Users.remove({ _id: { $in: [adminId, userId] } });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/impersonation/server/ImpersonateService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/impersonation/server/ImpersonateService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 3);\nlet Users;\nmodule.link(\"../../users\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 4);\nlet ROLES;\nmodule.link(\"../../users/userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 5);\nlet ImpersonateService;\nmodule.link(\"./ImpersonateService\", {\n  default(v) {\n    ImpersonateService = v;\n  }\n\n}, 6);\n\nfunction getDummies() {\n  const adminId = Accounts.createUser({\n    email: 'impersonator@epotek.ch',\n    password: '12345'\n  });\n  const userId = Accounts.createUser({\n    email: 'sheep@epotek.ch',\n    password: '12345'\n  });\n  return {\n    adminId,\n    userId\n  };\n}\n\ndescribe('ImpersonateService', () => {\n  it('Should be able to authenticate a user as an admin', done => {\n    const {\n      adminId,\n      userId\n    } = getDummies();\n    const FICTIONAL_TOKEN = Random.id();\n\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.ADMIN,\n        'services.resume.loginTokens': [{\n          hashedToken: HASHED_TOKEN\n        }]\n      }\n    });\n    ImpersonateService.impersonate({\n      context: {\n        setUserId(impersonateId) {\n          expect(userId).to.equal(impersonateId);\n          done();\n        }\n\n      },\n      authToken: FICTIONAL_TOKEN,\n      userIdToImpersonate: userId\n    });\n    Users.remove({\n      _id: {\n        $in: [adminId, userId]\n      }\n    });\n  });\n  it('Should not allow impersonation of a user that is non-dev or non-admin', () => {\n    const {\n      adminId,\n      userId\n    } = getDummies();\n    const FICTIONAL_TOKEN = Random.id();\n\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.LENDER,\n        'services.resume.loginTokens': [{\n          hashedToken: HASHED_TOKEN\n        }]\n      }\n    });\n    expect(() => {\n      ImpersonateService.impersonate({\n        context: {\n          setUserId(impersonateId) {}\n\n        },\n        authToken: FICTIONAL_TOKEN,\n        userIdToImpersonate: userId\n      });\n    }).to.throw(Meteor.Error);\n    Users.remove({\n      _id: {\n        $in: [adminId, userId]\n      }\n    });\n  });\n  it('Should not allow impersonation with invalid token', () => {\n    const {\n      adminId,\n      userId\n    } = getDummies();\n    const FICTIONAL_TOKEN = Random.id();\n\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.ADMIN,\n        'services.resume.loginTokens': [{\n          hashedToken: HASHED_TOKEN\n        }]\n      }\n    });\n    expect(() => {\n      ImpersonateService.impersonate({\n        context: {\n          setUserId(impersonateId) {\n            done('Should not be here!');\n          }\n\n        },\n        authToken: `${FICTIONAL_TOKEN}HACKER!`,\n        userIdToImpersonate: userId\n      });\n    }).to.throw(Meteor.Error);\n    Users.remove({\n      _id: {\n        $in: [adminId, userId]\n      }\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/impersonation/server/ImpersonateService.test.js"],"names":["adminId","email","password","userId","describe","it","done","getDummies","FICTIONAL_TOKEN","Random","HASHED_TOKEN","Accounts","Users","$set","roles","ROLES","hashedToken","ImpersonateService","context","setUserId","expect","authToken","userIdToImpersonate","_id","$in","Meteor"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport Users from 'core/api/users';\nimport { ROLES } from 'core/api/users/userConstants';\nimport ImpersonateService from './ImpersonateService';\n\nfunction getDummies() {\n  const adminId = Accounts.createUser({\n    email: 'impersonator@epotek.ch',\n    password: '12345',\n  });\n\n  const userId = Accounts.createUser({\n    email: 'sheep@epotek.ch',\n    password: '12345',\n  });\n\n  return { adminId, userId };\n}\n\ndescribe('ImpersonateService', () => {\n  it('Should be able to authenticate a user as an admin', (done) => {\n    const { adminId, userId } = getDummies();\n\n    const FICTIONAL_TOKEN = Random.id();\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.ADMIN,\n        'services.resume.loginTokens': [{ hashedToken: HASHED_TOKEN }],\n      },\n    });\n\n    ImpersonateService.impersonate({\n      context: {\n        setUserId(impersonateId) {\n          expect(userId).to.equal(impersonateId);\n          done();\n        },\n      },\n      authToken: FICTIONAL_TOKEN,\n      userIdToImpersonate: userId,\n    });\n\n    Users.remove({ _id: { $in: [adminId, userId] } });\n  });\n\n  it('Should not allow impersonation of a user that is non-dev or non-admin', () => {\n    const { adminId, userId } = getDummies();\n\n    const FICTIONAL_TOKEN = Random.id();\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.LENDER,\n        'services.resume.loginTokens': [{ hashedToken: HASHED_TOKEN }],\n      },\n    });\n\n    expect(() => {\n      ImpersonateService.impersonate({\n        context: {\n          setUserId(impersonateId) {},\n        },\n        authToken: FICTIONAL_TOKEN,\n        userIdToImpersonate: userId,\n      });\n    }).to.throw(Meteor.Error);\n\n    Users.remove({ _id: { $in: [adminId, userId] } });\n  });\n\n  it('Should not allow impersonation with invalid token', () => {\n    const { adminId, userId } = getDummies();\n\n    const FICTIONAL_TOKEN = Random.id();\n    const HASHED_TOKEN = Accounts._hashLoginToken(FICTIONAL_TOKEN);\n\n    Users.update(adminId, {\n      $set: {\n        roles: ROLES.ADMIN,\n        'services.resume.loginTokens': [{ hashedToken: HASHED_TOKEN }],\n      },\n    });\n\n    expect(() => {\n      ImpersonateService.impersonate({\n        context: {\n          setUserId(impersonateId) {\n            done('Should not be here!');\n          },\n        },\n        authToken: `${FICTIONAL_TOKEN}HACKER!`,\n        userIdToImpersonate: userId,\n      });\n    }).to.throw(Meteor.Error);\n\n    Users.remove({ _id: { $in: [adminId, userId] } });\n  });\n});\n"]},"sourceType":"script","hash":"11513ff25efd3f7be762d0d111002d9f57e8d606"}

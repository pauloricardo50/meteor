{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/test/UserService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/users/server/test/UserService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/test/UserService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/users/server/test/UserService.test.js"],"names":["expect","sinon","Factory","resetDatabase","checkEmails","LoanService","BorrowerService","PropertyService","generator","PROMOTION_STATUS","PROPERTY_CATEGORY","EMAIL_IDS","EMAIL_TEMPLATES","ROLES","UserService","UserServiceClass","describe","timeout","firstName","lastName","user","beforeEach","create","stub","callsFake","afterEach","sendEnrollmentEmail","restore","it","options","email","userId","createUser","getUserById","roles","to","deep","equal","USER","role","PRO","username","emails","address","undefined","adminCreateUser","getCall","args","adminId","assignedEmployeeId","ADMIN","_id","newFirstName","update","object","remove","countAll","category","insertPropertyLoan","propertyIds","assignAdminToUser","getUsersByRole","length","DEV","newRole","setRole","throw","verified","doesUserExist","slice","inexistentEmail","token","testCreateUser","services","password","reset","getUserByPasswordResetToken","phoneNumbers","loanId","promotionLinks","hasPromotion","promotionId","userToInvite","phoneNumber","users","_factory","organisations","name","proInviteUser","referOnly","proUserId","then","userCreated","getByEmail","referredByUserLink","referredByOrganisationLink","emailId","response","status","template","template_name","message","from_email","subject","global_merge_vars","from_name","find","REFER_USER","NOTIFICATION_AND_CTA","mandrillId","content","include","CONFIRM_USER_INVITATION","properties","promotions","OPEN","$metadata","permissions","canInviteCustomers","promotionLots","propertyLinks","showAllLots","promotionLotIds","promotionIds","loan","findOne","invitedBy","promotionOptionLinks","promotionLotLinks","loans","fetch","$filters","INVITE_USER_TO_PROPERTY","address1","merge_vars","filter","fetchOne","employees","employeeIds","map","service","newUserId","assignedEmployee","newUserId2"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport LoanService from '../../../loans/server/LoanService';\nimport BorrowerService from '../../../borrowers/server/BorrowerService';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport generator from '../../../factories';\nimport { PROMOTION_STATUS } from '../../../promotions/promotionConstants';\nimport { PROPERTY_CATEGORY } from '../../../properties/propertyConstants';\nimport { EMAIL_IDS, EMAIL_TEMPLATES } from '../../../email/emailConstants';\nimport { ROLES } from '../../userConstants';\nimport UserService, { UserServiceClass } from '../UserService';\n\ndescribe('UserService', function () {\n  this.timeout(10000);\n\n  const firstName = 'testFirstName';\n  const lastName = 'testLastName';\n  let user;\n\n  beforeEach(() => {\n    resetDatabase();\n\n    user = Factory.create('user', { firstName, lastName });\n    sinon.stub(UserService, 'sendEnrollmentEmail').callsFake(() => {});\n  });\n\n  afterEach(() => {\n    UserService.sendEnrollmentEmail.restore();\n  });\n\n  describe('createUser', () => {\n    it('creates a user with a USER role by default', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.createUser({ options });\n      user = UserService.getUserById({ userId });\n\n      expect(user.roles).to.deep.equal([ROLES.USER]);\n    });\n\n    it('creates a user with a PRO role', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.createUser({ options, role: ROLES.PRO });\n      user = UserService.getUserById({ userId });\n\n      expect(user.roles).to.deep.equal([ROLES.PRO]);\n    });\n\n    it('uses all options to create the user', () => {\n      const options = { email: 'test@test.com', username: 'dude' };\n      const userId = UserService.createUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(user.emails[0].address).to.equal(options.email);\n      expect(user.username).to.equal(options.username);\n    });\n\n    it('does not set additional stuff', () => {\n      const options = { email: 'test@test.com', firstName: 'dude' };\n      const userId = UserService.createUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(user.firstName).to.equal(undefined);\n    });\n  });\n\n  describe('adminCreateUser', () => {\n    it('creates a user', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.adminCreateUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(!!user).to.equal(true);\n    });\n\n    it('adds any additional info on options to the user', () => {\n      const options = { email: 'test@test.com', firstName: 'dude' };\n      const userId = UserService.adminCreateUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(user.firstName).to.equal(options.firstName);\n    });\n\n    it('does not send enrollment email by default', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER,\n      });\n\n      expect(UserService.sendEnrollmentEmail.getCall(0)).to.equal(null);\n    });\n\n    it('sends enrollment email when asked to', () => {\n      const options = { email: 'test@test.com', sendEnrollmentEmail: true };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER,\n      });\n\n      expect(UserService.sendEnrollmentEmail.getCall(0).args[0]).to.deep.equal({\n        userId,\n      });\n    });\n\n    it('assigns an adminId if the user is a USER', () => {\n      const options = { email: 'test@test.com' };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER,\n        adminId,\n      });\n      user = UserService.getUserById({ userId });\n\n      expect(user.assignedEmployeeId).to.equal(adminId);\n    });\n\n    it('does not assign anyone if the user is not USER', () => {\n      const options = { email: 'test@test.com' };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.ADMIN,\n        adminId,\n      });\n      user = UserService.getUserById({ userId });\n\n      expect(user.assignedEmployeeId).to.equal(undefined);\n    });\n\n    it('does not assign anyone if the user is not USER', () => {\n      const options = { email: 'test@test.com' };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.ADMIN,\n        adminId,\n      });\n      user = UserService.getUserById({ userId });\n\n      expect(user.assignedEmployeeId).to.equal(undefined);\n    });\n  });\n\n  describe('getUserById', () => {\n    it('returns a user', () => {\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n    });\n\n    it('returns undefined if no user exists', () => {\n      expect(UserService.getUserById({ userId: 'unknownId' })).to.equal(undefined);\n    });\n  });\n\n  describe('update', () => {\n    it('updates a user', () => {\n      const newFirstName = 'joe';\n      expect(UserService.getUserById({ userId: user._id }).firstName).to.equal(firstName);\n      UserService.update({\n        userId: user._id,\n        object: { firstName: newFirstName },\n      });\n      expect(UserService.getUserById({ userId: user._id }).firstName).to.equal(newFirstName);\n    });\n\n    it('does not do anything if object is not defined', () => {\n      UserService.update({ userId: user._id });\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n    });\n\n    it('does not do anything if object empty', () => {\n      UserService.update({ userId: user._id, object: {} });\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n    });\n  });\n\n  describe('remove', () => {\n    it('removes a user', () => {\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n      UserService.remove({ userId: user._id });\n      expect(UserService.getUserById({ userId: user._id })).to.equal(undefined);\n    });\n\n    it('autoremoves all loans, properties and borrowers', () => {\n      Factory.create('loan', { userId: user._id });\n      Factory.create('loan', { userId: user._id });\n      Factory.create('borrower', { userId: user._id });\n      Factory.create('borrower', { userId: user._id });\n      Factory.create('property', { userId: user._id });\n      Factory.create('property', { userId: user._id });\n      UserService.remove({ userId: user._id });\n      expect(UserService.getUserById({ userId: user._id })).to.equal(undefined);\n      expect(LoanService.countAll()).to.equal(0);\n      expect(BorrowerService.countAll()).to.equal(0);\n      expect(PropertyService.countAll()).to.equal(0);\n    });\n\n    it('does not remove proProperties when it is not the only customer', () => {\n      // User property\n      Factory.create('property', { userId: user._id });\n      // Pro property\n      Factory.create('property', {\n        _id: 'propertyId',\n        category: PROPERTY_CATEGORY.PRO,\n      });\n\n      Factory.create('user', { _id: 'userId2' });\n\n      LoanService.insertPropertyLoan({\n        userId: user._id,\n        propertyIds: ['propertyId'],\n      });\n\n      LoanService.insertPropertyLoan({\n        userId: 'userId2',\n        propertyIds: ['propertyId'],\n      });\n\n      UserService.remove({ userId: user._id });\n      expect(PropertyService.countAll()).to.equal(1);\n    });\n\n    it('does not remove proProperties when it is the only customer', () => {\n      // User property\n      Factory.create('property', { userId: user._id });\n      // Pro property\n      Factory.create('property', {\n        _id: 'propertyId',\n        category: PROPERTY_CATEGORY.PRO,\n      });\n      LoanService.insertPropertyLoan({\n        userId: user._id,\n        propertyIds: ['propertyId'],\n      });\n      UserService.remove({ userId: user._id });\n      expect(PropertyService.countAll()).to.equal(1);\n    });\n  });\n\n  describe('assignAdminToUser', () => {\n    it('assigns an admin to a user', () => {\n      const adminId = 'my dude';\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(undefined);\n      UserService.assignAdminToUser({ userId: user._id, adminId });\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(adminId);\n    });\n\n    it('does not fail if adminId is undefined', () => {\n      const adminId = undefined;\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(undefined);\n      UserService.assignAdminToUser({ userId: user._id, adminId });\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(adminId);\n    });\n  });\n\n  describe('getUsersByRole', () => {\n    it('gets all users for a role', () => {\n      Factory.create('admin', { firstName, lastName });\n      Factory.create('admin', { firstName, lastName });\n      Factory.create('dev', { firstName, lastName });\n      Factory.create('dev', { firstName, lastName });\n      Factory.create('dev', { firstName, lastName });\n\n      expect(UserService.getUsersByRole(ROLES.USER).length).to.equal(1);\n      expect(UserService.getUsersByRole(ROLES.ADMIN).length).to.equal(2);\n      expect(UserService.getUsersByRole(ROLES.DEV).length).to.equal(3);\n    });\n  });\n\n  describe('setRole', () => {\n    it('changes the role of a user', () => {\n      const newRole = ROLES.DEV;\n      expect(UserService.getUserById({ userId: user._id }).roles).to.deep.equal([ROLES.USER]);\n      UserService.setRole({ userId: user._id, role: newRole });\n      expect(UserService.getUserById({ userId: user._id }).roles).to.deep.equal([newRole]);\n    });\n\n    it('throws if an unauthorized role is set', () => {\n      const newRole = 'some role';\n\n      expect(() =>\n        UserService.setRole({ userId: user._id, role: newRole })).to.throw(`${newRole} is not an allowed value`);\n    });\n  });\n\n  describe('doesUserExist', () => {\n    let email;\n\n    beforeEach(() => {\n      email = 'yep@yop.com';\n      Factory.create('user', {\n        emails: [{ address: email, verified: false }],\n      });\n    });\n\n    it('finds an existing user', () => {\n      expect(UserService.doesUserExist({ email })).to.equal(true);\n    });\n\n    it('returns false with an email containing another one', () => {\n      email += 'a';\n      expect(UserService.doesUserExist({ email })).to.equal(false);\n    });\n\n    it('returns false with a substring of a user', () => {\n      email = email.slice(0, -1);\n      expect(UserService.doesUserExist({ email })).to.equal(false);\n    });\n\n    it('returns false with totally different email', () => {\n      const inexistentEmail = 'hello@world.com';\n      expect(UserService.doesUserExist({ email: inexistentEmail })).to.equal(false);\n    });\n  });\n\n  describe('getUserByPasswordResetToken', () => {\n    it('returns a user if found', () => {\n      const token = 'testToken';\n      const userId = UserService.testCreateUser({\n        user: {\n          services: { password: { reset: { token } } },\n        },\n      });\n      expect(!!UserService.getUserByPasswordResetToken({ token })).to.equal(true);\n    });\n\n    it('only returns the necessary data', () => {\n      const token = 'testToken';\n      const userId = UserService.testCreateUser({\n        user: {\n          services: { password: { reset: { token } } },\n          firstName,\n          lastName,\n          emails: [{ address: 'yo@dude.com', verified: false }],\n          phoneNumbers: ['secretNumber'],\n        },\n      });\n      expect(UserService.getUserByPasswordResetToken({ token })).to.deep.equal({\n        _id: userId,\n        firstName,\n        lastName,\n        emails: [{ address: 'yo@dude.com', verified: false }],\n      });\n    });\n\n    it('returns undefined if no user is found', () => {\n      expect(!!UserService.getUserByPasswordResetToken({\n        token: 'some unknown token',\n      })).to.equal(false);\n    });\n  });\n\n  describe('hasPromotion', () => {\n    it('returns false if the user does not have the promotion', () => {\n      const userId = Factory.create('user')._id;\n      const loanId = Factory.create('loan', {\n        userId,\n        promotionLinks: [{ _id: 'test' }],\n      })._id;\n\n      expect(UserService.hasPromotion({ userId, promotionId: 'test2' })).to.equal(false);\n    });\n  });\n\n  describe('proInviteUser', () => {\n    const userToInvite = {\n      firstName: 'Bob',\n      lastName: 'Dylan',\n      email: 'bob@dylan.com',\n      phoneNumber: '12345',\n    };\n\n    beforeEach(() => {\n      resetDatabase();\n      generator({\n        users: [\n          { _id: 'adminId', _factory: 'admin' },\n          {\n            _id: 'proId',\n            assignedEmployeeId: 'adminId',\n            organisations: { _id: 'organisationId', name: 'bank' },\n            _factory: 'pro',\n            firstName: 'John',\n            lastName: 'Doe',\n            emails: [{ address: 'john@doe.com', verified: true }],\n          },\n        ],\n      });\n    });\n\n    it('invites user to refer only', () =>\n      UserService.proInviteUser({\n        user: userToInvite,\n        referOnly: true,\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n\n        return checkEmails(2).then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            address,\n            response: { status },\n            template: {\n              template_name,\n              message: { from_email, subject, global_merge_vars, from_name },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.REFER_USER);\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.REFER_USER);\n          expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n          expect(address).to.equal('bob@dylan.com');\n          expect(from_email).to.equal('info@e-potek.ch');\n          expect(from_name).to.equal('e-Potek');\n          expect(subject).to.equal('Vous avez été invité sur e-Potek');\n          expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('John Doe (bank)');\n          {\n            const {\n              emailId,\n              address,\n              response: { status },\n              template: {\n                template_name,\n                message: { from_email, subject, global_merge_vars, from_name },\n              },\n            } = emails.find(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION);\n            expect(status).to.equal('sent');\n            expect(emailId).to.equal(EMAIL_IDS.CONFIRM_USER_INVITATION);\n            expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n            expect(address).to.equal('john@doe.com');\n            expect(from_email).to.equal('info@e-potek.ch');\n            expect(from_name).to.equal('e-Potek');\n            expect(subject).to.equal('Invitation réussie');\n            expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('Bob Dylan (bob@dylan.com)');\n          }\n        });\n      }));\n\n    it('throws if user already exists and it is referOnly', () => {\n      generator({\n        users: { emails: [{ address: userToInvite.email, verified: false }] },\n      });\n\n      expect(() =>\n        UserService.proInviteUser({\n          user: userToInvite,\n          referOnly: true,\n          proUserId: 'proId',\n        })).to.throw('Ce client existe déjà');\n    });\n\n    it('invites user to promotion', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n          promotionLots: { _id: 'pLotId', propertyLinks: [{ _id: 'prop' }] },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: {\n          ...userToInvite,\n          showAllLots: false,\n          promotionLotIds: ['pLotId'],\n        },\n        promotionIds: ['promotionId'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({ userId: userCreated._id });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.promotionLinks[0]._id).to.equal('promotionId');\n        expect(loan.promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loan.promotionLinks[0].showAllLots).to.equal(false);\n        expect(loan.promotionOptionLinks.length).to.equal(1);\n\n        return checkEmails(2);\n      });\n    });\n\n    it('invites user to multiple promotions', () => {\n      generator({\n        promotions: [\n          {\n            _id: 'promotionId1',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'promotionId2',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n            promotionLotLinks: [{ _id: 'lotId2' }],\n          },\n        ],\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        promotionIds: ['promotionId1', 'promotionId2'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loans = LoanService.fetch({\n          $filters: { userId: userCreated._id },\n          promotionLinks: 1,\n        });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loans.length).to.equal(2);\n        expect(loans[0].promotionLinks[0]._id).to.equal('promotionId1');\n        expect(loans[0].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[0].promotionLinks[0].showAllLots).to.equal(true);\n        expect(loans[1].promotionLinks[0]._id).to.equal('promotionId2');\n        expect(loans[1].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[1].promotionLinks[0].showAllLots).to.equal(true);\n\n        return checkEmails(4);\n      });\n    });\n\n    it('throws if user is already invited to promotion', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        promotionIds: ['promotionId'],\n        proUserId: 'proId',\n      })\n        .then(() => checkEmails(2))\n        .then((emails) => {\n          expect(() =>\n            UserService.proInviteUser({\n              user: userToInvite,\n              promotionIds: ['promotionId'],\n              proUserId: 'proId',\n            })).to.throw('Cet utilisateur est déjà invité à cette promotion');\n        });\n    });\n\n    it('invites user to pro property', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({ userId: userCreated._id });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.propertyIds[0]).to.equal('propertyId');\n\n        return checkEmails(2).then((emails) => {\n          expect(!!emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY)).to.equal(true);\n          expect(!!emails.find(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION)).to.equal(true);\n        });\n      });\n    });\n\n    it('invites user to multiple pro properties', () => {\n      generator({\n        properties: [\n          {\n            _id: 'propertyId1',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'propertyId2',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n        ],\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId1', 'propertyId2'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({ userId: userCreated._id });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.propertyIds.length).to.equal(2);\n        expect(loan.propertyIds[0]).to.equal('propertyId1');\n        expect(loan.propertyIds[1]).to.equal('propertyId2');\n\n        return checkEmails(2);\n      });\n    });\n\n    it('invites user to multiple pro properties and promotions', () => {\n      generator({\n        properties: [\n          {\n            _id: 'propertyId1',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'propertyId2',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n        ],\n        promotions: [\n          {\n            _id: 'promotionId1',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'promotionId2',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n            promotionLotLinks: [{ _id: 'lotId2' }],\n          },\n        ],\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId1', 'propertyId2'],\n        promotionIds: ['promotionId1', 'promotionId2'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loans = LoanService.fetch({\n          $filters: { userId: userCreated._id },\n          promotionLinks: 1,\n          propertyIds: 1,\n        });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loans.length).to.equal(3);\n        expect(loans[0].propertyIds.length).to.equal(2);\n        expect(loans[0].propertyIds[0]).to.equal('propertyId1');\n        expect(loans[0].propertyIds[1]).to.equal('propertyId2');\n        expect(loans[1].promotionLinks[0]._id).to.equal('promotionId1');\n        expect(loans[1].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[2].promotionLinks[0]._id).to.equal('promotionId2');\n        expect(loans[2].promotionLinks[0].invitedBy).to.equal('proId');\n\n        return checkEmails(6);\n      });\n    });\n\n    it('sends an invitation email', () => {\n      generator({\n        properties: {\n          address1: 'Rue du four 1',\n          _id: 'propertyId2',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId2'],\n        proUserId: 'proId',\n      })\n        .then(() => checkEmails(2))\n        .then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            address,\n            response: { status },\n            template: {\n              template_name,\n              message: { from_email, subject, merge_vars, from_name },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n          expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n          expect(address).to.equal('bob@dylan.com');\n          expect(from_email).to.equal('info@e-potek.ch');\n          expect(from_name).to.equal('e-Potek');\n          expect(subject).to.equal('e-Potek - \"Rue du four 1\"');\n\n          expect(emails.filter(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION).length).to.equal(1);\n        });\n    });\n\n    it('throws if user is already invited to pro property', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId'],\n        proUserId: 'proId',\n      })\n        .then(() => checkEmails(2))\n        .then(() => {\n          expect(() =>\n            UserService.proInviteUser({\n              user: userToInvite,\n              propertyIds: ['propertyId'],\n              proUserId: 'proId',\n            })).to.throw('Cet utilisateur est déjà invité à ce bien immobilier');\n        });\n    });\n\n    it('invites existing users to a new promotion', () => {\n      generator({\n        users: {\n          _id: 'userId',\n          emails: [{ address: 'test@e-potek.ch', verified: true }],\n        },\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: {\n          email: 'Test@e-potek.ch',\n          firstName: 'John',\n          lastName: 'Doe',\n          phoneNumber: '1234',\n          showAllLots: false,\n          promotionLotIds: [],\n          invitedBy: 'proId',\n        },\n        promotionIds: ['promotionId'],\n        proUserId: 'proId',\n        adminId: 'adminId',\n      }).then(() => {\n        const { loans } = UserService.fetchOne({\n          $filters: { _id: 'userId' },\n          loans: { _id: 1 },\n        });\n        expect(loans.length).to.equal(1);\n\n        return checkEmails(2);\n      });\n    });\n  });\n\n  describe('round robin', () => {\n    const employees = ['a@e-potek.ch', 'b@e-potek.ch', 'c@e-potek.ch'];\n    let employeeIds = [];\n\n    beforeEach(() => {\n      employeeIds = employees.map(email =>\n        UserService.adminCreateUser({ options: { email }, role: ROLES.ADMIN }));\n    });\n\n    it('sets the first user to the first in the array', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      const newUserId = service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[0]);\n    });\n\n    it('sets the second user to the second in the array', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const newUserId2 = service.adminCreateUser({\n        options: { email: '2@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId2 },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[1]);\n    });\n\n    it('loops back to first in array', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      generator({\n        users: { assignedEmployeeId: employeeIds[2], _factory: 'user' },\n      });\n\n      const newUserId = service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[0]);\n    });\n\n    it('ignores users assigned to people outside of employees list, and check latest one', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      generator({\n        users: [\n          { _id: 'a', assignedEmployeeId: employeeIds[2], _factory: 'user' },\n          { _id: 'b', assignedEmployeeId: employeeIds[2], _factory: 'user' },\n          { _id: 'c', assignedEmployeeId: employeeIds[2], _factory: 'user' },\n          { _id: 'd', assignedEmployeeId: employeeIds[1], _factory: 'user' },\n          { _id: 'e', assignedEmployee: { _id: 'adminId', _factory: 'admin' } },\n        ],\n      });\n\n      const newUserId = service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[2]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/test/UserService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/users/server/test/UserService.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet sinon;\nmodule.link(\"sinon\", {\n  default(v) {\n    sinon = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 3);\nlet checkEmails;\nmodule.link(\"../../../../utils/testHelpers\", {\n  checkEmails(v) {\n    checkEmails = v;\n  }\n\n}, 4);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 5);\nlet BorrowerService;\nmodule.link(\"../../../borrowers/server/BorrowerService\", {\n  default(v) {\n    BorrowerService = v;\n  }\n\n}, 6);\nlet PropertyService;\nmodule.link(\"../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 7);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 8);\nlet PROMOTION_STATUS;\nmodule.link(\"../../../promotions/promotionConstants\", {\n  PROMOTION_STATUS(v) {\n    PROMOTION_STATUS = v;\n  }\n\n}, 9);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 10);\nlet EMAIL_IDS, EMAIL_TEMPLATES;\nmodule.link(\"../../../email/emailConstants\", {\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  },\n\n  EMAIL_TEMPLATES(v) {\n    EMAIL_TEMPLATES = v;\n  }\n\n}, 11);\nlet ROLES;\nmodule.link(\"../../userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 12);\nlet UserService, UserServiceClass;\nmodule.link(\"../UserService\", {\n  default(v) {\n    UserService = v;\n  },\n\n  UserServiceClass(v) {\n    UserServiceClass = v;\n  }\n\n}, 13);\ndescribe('UserService', function () {\n  this.timeout(10000);\n  const firstName = 'testFirstName';\n  const lastName = 'testLastName';\n  let user;\n  beforeEach(() => {\n    resetDatabase();\n    user = Factory.create('user', {\n      firstName,\n      lastName\n    });\n    sinon.stub(UserService, 'sendEnrollmentEmail').callsFake(() => {});\n  });\n  afterEach(() => {\n    UserService.sendEnrollmentEmail.restore();\n  });\n  describe('createUser', () => {\n    it('creates a user with a USER role by default', () => {\n      const options = {\n        email: 'test@test.com'\n      };\n      const userId = UserService.createUser({\n        options\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.roles).to.deep.equal([ROLES.USER]);\n    });\n    it('creates a user with a PRO role', () => {\n      const options = {\n        email: 'test@test.com'\n      };\n      const userId = UserService.createUser({\n        options,\n        role: ROLES.PRO\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.roles).to.deep.equal([ROLES.PRO]);\n    });\n    it('uses all options to create the user', () => {\n      const options = {\n        email: 'test@test.com',\n        username: 'dude'\n      };\n      const userId = UserService.createUser({\n        options,\n        role: ROLES.USER\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.emails[0].address).to.equal(options.email);\n      expect(user.username).to.equal(options.username);\n    });\n    it('does not set additional stuff', () => {\n      const options = {\n        email: 'test@test.com',\n        firstName: 'dude'\n      };\n      const userId = UserService.createUser({\n        options,\n        role: ROLES.USER\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.firstName).to.equal(undefined);\n    });\n  });\n  describe('adminCreateUser', () => {\n    it('creates a user', () => {\n      const options = {\n        email: 'test@test.com'\n      };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(!!user).to.equal(true);\n    });\n    it('adds any additional info on options to the user', () => {\n      const options = {\n        email: 'test@test.com',\n        firstName: 'dude'\n      };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.firstName).to.equal(options.firstName);\n    });\n    it('does not send enrollment email by default', () => {\n      const options = {\n        email: 'test@test.com'\n      };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER\n      });\n      expect(UserService.sendEnrollmentEmail.getCall(0)).to.equal(null);\n    });\n    it('sends enrollment email when asked to', () => {\n      const options = {\n        email: 'test@test.com',\n        sendEnrollmentEmail: true\n      };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER\n      });\n      expect(UserService.sendEnrollmentEmail.getCall(0).args[0]).to.deep.equal({\n        userId\n      });\n    });\n    it('assigns an adminId if the user is a USER', () => {\n      const options = {\n        email: 'test@test.com'\n      };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER,\n        adminId\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.assignedEmployeeId).to.equal(adminId);\n    });\n    it('does not assign anyone if the user is not USER', () => {\n      const options = {\n        email: 'test@test.com'\n      };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.ADMIN,\n        adminId\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.assignedEmployeeId).to.equal(undefined);\n    });\n    it('does not assign anyone if the user is not USER', () => {\n      const options = {\n        email: 'test@test.com'\n      };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.ADMIN,\n        adminId\n      });\n      user = UserService.getUserById({\n        userId\n      });\n      expect(user.assignedEmployeeId).to.equal(undefined);\n    });\n  });\n  describe('getUserById', () => {\n    it('returns a user', () => {\n      expect(UserService.getUserById({\n        userId: user._id\n      })).to.deep.equal(user);\n    });\n    it('returns undefined if no user exists', () => {\n      expect(UserService.getUserById({\n        userId: 'unknownId'\n      })).to.equal(undefined);\n    });\n  });\n  describe('update', () => {\n    it('updates a user', () => {\n      const newFirstName = 'joe';\n      expect(UserService.getUserById({\n        userId: user._id\n      }).firstName).to.equal(firstName);\n      UserService.update({\n        userId: user._id,\n        object: {\n          firstName: newFirstName\n        }\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      }).firstName).to.equal(newFirstName);\n    });\n    it('does not do anything if object is not defined', () => {\n      UserService.update({\n        userId: user._id\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      })).to.deep.equal(user);\n    });\n    it('does not do anything if object empty', () => {\n      UserService.update({\n        userId: user._id,\n        object: {}\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      })).to.deep.equal(user);\n    });\n  });\n  describe('remove', () => {\n    it('removes a user', () => {\n      expect(UserService.getUserById({\n        userId: user._id\n      })).to.deep.equal(user);\n      UserService.remove({\n        userId: user._id\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      })).to.equal(undefined);\n    });\n    it('autoremoves all loans, properties and borrowers', () => {\n      Factory.create('loan', {\n        userId: user._id\n      });\n      Factory.create('loan', {\n        userId: user._id\n      });\n      Factory.create('borrower', {\n        userId: user._id\n      });\n      Factory.create('borrower', {\n        userId: user._id\n      });\n      Factory.create('property', {\n        userId: user._id\n      });\n      Factory.create('property', {\n        userId: user._id\n      });\n      UserService.remove({\n        userId: user._id\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      })).to.equal(undefined);\n      expect(LoanService.countAll()).to.equal(0);\n      expect(BorrowerService.countAll()).to.equal(0);\n      expect(PropertyService.countAll()).to.equal(0);\n    });\n    it('does not remove proProperties when it is not the only customer', () => {\n      // User property\n      Factory.create('property', {\n        userId: user._id\n      }); // Pro property\n\n      Factory.create('property', {\n        _id: 'propertyId',\n        category: PROPERTY_CATEGORY.PRO\n      });\n      Factory.create('user', {\n        _id: 'userId2'\n      });\n      LoanService.insertPropertyLoan({\n        userId: user._id,\n        propertyIds: ['propertyId']\n      });\n      LoanService.insertPropertyLoan({\n        userId: 'userId2',\n        propertyIds: ['propertyId']\n      });\n      UserService.remove({\n        userId: user._id\n      });\n      expect(PropertyService.countAll()).to.equal(1);\n    });\n    it('does not remove proProperties when it is the only customer', () => {\n      // User property\n      Factory.create('property', {\n        userId: user._id\n      }); // Pro property\n\n      Factory.create('property', {\n        _id: 'propertyId',\n        category: PROPERTY_CATEGORY.PRO\n      });\n      LoanService.insertPropertyLoan({\n        userId: user._id,\n        propertyIds: ['propertyId']\n      });\n      UserService.remove({\n        userId: user._id\n      });\n      expect(PropertyService.countAll()).to.equal(1);\n    });\n  });\n  describe('assignAdminToUser', () => {\n    it('assigns an admin to a user', () => {\n      const adminId = 'my dude';\n      expect(UserService.getUserById({\n        userId: user._id\n      }).assignedEmployeeId).to.equal(undefined);\n      UserService.assignAdminToUser({\n        userId: user._id,\n        adminId\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      }).assignedEmployeeId).to.equal(adminId);\n    });\n    it('does not fail if adminId is undefined', () => {\n      const adminId = undefined;\n      expect(UserService.getUserById({\n        userId: user._id\n      }).assignedEmployeeId).to.equal(undefined);\n      UserService.assignAdminToUser({\n        userId: user._id,\n        adminId\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      }).assignedEmployeeId).to.equal(adminId);\n    });\n  });\n  describe('getUsersByRole', () => {\n    it('gets all users for a role', () => {\n      Factory.create('admin', {\n        firstName,\n        lastName\n      });\n      Factory.create('admin', {\n        firstName,\n        lastName\n      });\n      Factory.create('dev', {\n        firstName,\n        lastName\n      });\n      Factory.create('dev', {\n        firstName,\n        lastName\n      });\n      Factory.create('dev', {\n        firstName,\n        lastName\n      });\n      expect(UserService.getUsersByRole(ROLES.USER).length).to.equal(1);\n      expect(UserService.getUsersByRole(ROLES.ADMIN).length).to.equal(2);\n      expect(UserService.getUsersByRole(ROLES.DEV).length).to.equal(3);\n    });\n  });\n  describe('setRole', () => {\n    it('changes the role of a user', () => {\n      const newRole = ROLES.DEV;\n      expect(UserService.getUserById({\n        userId: user._id\n      }).roles).to.deep.equal([ROLES.USER]);\n      UserService.setRole({\n        userId: user._id,\n        role: newRole\n      });\n      expect(UserService.getUserById({\n        userId: user._id\n      }).roles).to.deep.equal([newRole]);\n    });\n    it('throws if an unauthorized role is set', () => {\n      const newRole = 'some role';\n      expect(() => UserService.setRole({\n        userId: user._id,\n        role: newRole\n      })).to.throw(`${newRole} is not an allowed value`);\n    });\n  });\n  describe('doesUserExist', () => {\n    let email;\n    beforeEach(() => {\n      email = 'yep@yop.com';\n      Factory.create('user', {\n        emails: [{\n          address: email,\n          verified: false\n        }]\n      });\n    });\n    it('finds an existing user', () => {\n      expect(UserService.doesUserExist({\n        email\n      })).to.equal(true);\n    });\n    it('returns false with an email containing another one', () => {\n      email += 'a';\n      expect(UserService.doesUserExist({\n        email\n      })).to.equal(false);\n    });\n    it('returns false with a substring of a user', () => {\n      email = email.slice(0, -1);\n      expect(UserService.doesUserExist({\n        email\n      })).to.equal(false);\n    });\n    it('returns false with totally different email', () => {\n      const inexistentEmail = 'hello@world.com';\n      expect(UserService.doesUserExist({\n        email: inexistentEmail\n      })).to.equal(false);\n    });\n  });\n  describe('getUserByPasswordResetToken', () => {\n    it('returns a user if found', () => {\n      const token = 'testToken';\n      const userId = UserService.testCreateUser({\n        user: {\n          services: {\n            password: {\n              reset: {\n                token\n              }\n            }\n          }\n        }\n      });\n      expect(!!UserService.getUserByPasswordResetToken({\n        token\n      })).to.equal(true);\n    });\n    it('only returns the necessary data', () => {\n      const token = 'testToken';\n      const userId = UserService.testCreateUser({\n        user: {\n          services: {\n            password: {\n              reset: {\n                token\n              }\n            }\n          },\n          firstName,\n          lastName,\n          emails: [{\n            address: 'yo@dude.com',\n            verified: false\n          }],\n          phoneNumbers: ['secretNumber']\n        }\n      });\n      expect(UserService.getUserByPasswordResetToken({\n        token\n      })).to.deep.equal({\n        _id: userId,\n        firstName,\n        lastName,\n        emails: [{\n          address: 'yo@dude.com',\n          verified: false\n        }]\n      });\n    });\n    it('returns undefined if no user is found', () => {\n      expect(!!UserService.getUserByPasswordResetToken({\n        token: 'some unknown token'\n      })).to.equal(false);\n    });\n  });\n  describe('hasPromotion', () => {\n    it('returns false if the user does not have the promotion', () => {\n      const userId = Factory.create('user')._id;\n\n      const loanId = Factory.create('loan', {\n        userId,\n        promotionLinks: [{\n          _id: 'test'\n        }]\n      })._id;\n\n      expect(UserService.hasPromotion({\n        userId,\n        promotionId: 'test2'\n      })).to.equal(false);\n    });\n  });\n  describe('proInviteUser', () => {\n    const userToInvite = {\n      firstName: 'Bob',\n      lastName: 'Dylan',\n      email: 'bob@dylan.com',\n      phoneNumber: '12345'\n    };\n    beforeEach(() => {\n      resetDatabase();\n      generator({\n        users: [{\n          _id: 'adminId',\n          _factory: 'admin'\n        }, {\n          _id: 'proId',\n          assignedEmployeeId: 'adminId',\n          organisations: {\n            _id: 'organisationId',\n            name: 'bank'\n          },\n          _factory: 'pro',\n          firstName: 'John',\n          lastName: 'Doe',\n          emails: [{\n            address: 'john@doe.com',\n            verified: true\n          }]\n        }]\n      });\n    });\n    it('invites user to refer only', () => UserService.proInviteUser({\n      user: userToInvite,\n      referOnly: true,\n      proUserId: 'proId'\n    }).then(() => {\n      const userCreated = UserService.getByEmail(userToInvite.email);\n      expect(userCreated.assignedEmployeeId).to.equal('adminId');\n      expect(userCreated.referredByUserLink).to.equal('proId');\n      expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n      return checkEmails(2).then(emails => {\n        expect(emails.length).to.equal(2);\n        const {\n          emailId,\n          address,\n          response: {\n            status\n          },\n          template: {\n            template_name,\n            message: {\n              from_email,\n              subject,\n              global_merge_vars,\n              from_name\n            }\n          }\n        } = emails.find(({\n          emailId\n        }) => emailId === EMAIL_IDS.REFER_USER);\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.REFER_USER);\n        expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n        expect(address).to.equal('bob@dylan.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.equal('Vous avez été invité sur e-Potek');\n        expect(global_merge_vars.find(({\n          name\n        }) => name === 'BODY').content).to.include('John Doe (bank)');\n        {\n          const {\n            emailId,\n            address,\n            response: {\n              status\n            },\n            template: {\n              template_name,\n              message: {\n                from_email,\n                subject,\n                global_merge_vars,\n                from_name\n              }\n            }\n          } = emails.find(({\n            emailId\n          }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION);\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.CONFIRM_USER_INVITATION);\n          expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n          expect(address).to.equal('john@doe.com');\n          expect(from_email).to.equal('info@e-potek.ch');\n          expect(from_name).to.equal('e-Potek');\n          expect(subject).to.equal('Invitation réussie');\n          expect(global_merge_vars.find(({\n            name\n          }) => name === 'BODY').content).to.include('Bob Dylan (bob@dylan.com)');\n        }\n      });\n    }));\n    it('throws if user already exists and it is referOnly', () => {\n      generator({\n        users: {\n          emails: [{\n            address: userToInvite.email,\n            verified: false\n          }]\n        }\n      });\n      expect(() => UserService.proInviteUser({\n        user: userToInvite,\n        referOnly: true,\n        proUserId: 'proId'\n      })).to.throw('Ce client existe déjà');\n    });\n    it('invites user to promotion', () => {\n      generator({\n        properties: {\n          _id: 'prop'\n        },\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          },\n          promotionLots: {\n            _id: 'pLotId',\n            propertyLinks: [{\n              _id: 'prop'\n            }]\n          }\n        }\n      });\n      return UserService.proInviteUser({\n        user: (0, _objectSpread2.default)({}, userToInvite, {\n          showAllLots: false,\n          promotionLotIds: ['pLotId']\n        }),\n        promotionIds: ['promotionId'],\n        proUserId: 'proId'\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({\n          userId: userCreated._id\n        });\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.promotionLinks[0]._id).to.equal('promotionId');\n        expect(loan.promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loan.promotionLinks[0].showAllLots).to.equal(false);\n        expect(loan.promotionOptionLinks.length).to.equal(1);\n        return checkEmails(2);\n      });\n    });\n    it('invites user to multiple promotions', () => {\n      generator({\n        promotions: [{\n          _id: 'promotionId1',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }, {\n          _id: 'promotionId2',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          },\n          promotionLotLinks: [{\n            _id: 'lotId2'\n          }]\n        }]\n      });\n      return UserService.proInviteUser({\n        user: userToInvite,\n        promotionIds: ['promotionId1', 'promotionId2'],\n        proUserId: 'proId'\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loans = LoanService.fetch({\n          $filters: {\n            userId: userCreated._id\n          },\n          promotionLinks: 1\n        });\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loans.length).to.equal(2);\n        expect(loans[0].promotionLinks[0]._id).to.equal('promotionId1');\n        expect(loans[0].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[0].promotionLinks[0].showAllLots).to.equal(true);\n        expect(loans[1].promotionLinks[0]._id).to.equal('promotionId2');\n        expect(loans[1].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[1].promotionLinks[0].showAllLots).to.equal(true);\n        return checkEmails(4);\n      });\n    });\n    it('throws if user is already invited to promotion', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }\n      });\n      return UserService.proInviteUser({\n        user: userToInvite,\n        promotionIds: ['promotionId'],\n        proUserId: 'proId'\n      }).then(() => checkEmails(2)).then(emails => {\n        expect(() => UserService.proInviteUser({\n          user: userToInvite,\n          promotionIds: ['promotionId'],\n          proUserId: 'proId'\n        })).to.throw('Cet utilisateur est déjà invité à cette promotion');\n      });\n    });\n    it('invites user to pro property', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }\n      });\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId'],\n        proUserId: 'proId'\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({\n          userId: userCreated._id\n        });\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.propertyIds[0]).to.equal('propertyId');\n        return checkEmails(2).then(emails => {\n          expect(!!emails.find(({\n            emailId\n          }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY)).to.equal(true);\n          expect(!!emails.find(({\n            emailId\n          }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION)).to.equal(true);\n        });\n      });\n    });\n    it('invites user to multiple pro properties', () => {\n      generator({\n        properties: [{\n          _id: 'propertyId1',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }, {\n          _id: 'propertyId2',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }]\n      });\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId1', 'propertyId2'],\n        proUserId: 'proId'\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({\n          userId: userCreated._id\n        });\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.propertyIds.length).to.equal(2);\n        expect(loan.propertyIds[0]).to.equal('propertyId1');\n        expect(loan.propertyIds[1]).to.equal('propertyId2');\n        return checkEmails(2);\n      });\n    });\n    it('invites user to multiple pro properties and promotions', () => {\n      generator({\n        properties: [{\n          _id: 'propertyId1',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }, {\n          _id: 'propertyId2',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }],\n        promotions: [{\n          _id: 'promotionId1',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }, {\n          _id: 'promotionId2',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          },\n          promotionLotLinks: [{\n            _id: 'lotId2'\n          }]\n        }]\n      });\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId1', 'propertyId2'],\n        promotionIds: ['promotionId1', 'promotionId2'],\n        proUserId: 'proId'\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loans = LoanService.fetch({\n          $filters: {\n            userId: userCreated._id\n          },\n          promotionLinks: 1,\n          propertyIds: 1\n        });\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loans.length).to.equal(3);\n        expect(loans[0].propertyIds.length).to.equal(2);\n        expect(loans[0].propertyIds[0]).to.equal('propertyId1');\n        expect(loans[0].propertyIds[1]).to.equal('propertyId2');\n        expect(loans[1].promotionLinks[0]._id).to.equal('promotionId1');\n        expect(loans[1].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[2].promotionLinks[0]._id).to.equal('promotionId2');\n        expect(loans[2].promotionLinks[0].invitedBy).to.equal('proId');\n        return checkEmails(6);\n      });\n    });\n    it('sends an invitation email', () => {\n      generator({\n        properties: {\n          address1: 'Rue du four 1',\n          _id: 'propertyId2',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }\n      });\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId2'],\n        proUserId: 'proId'\n      }).then(() => checkEmails(2)).then(emails => {\n        expect(emails.length).to.equal(2);\n        const {\n          emailId,\n          address,\n          response: {\n            status\n          },\n          template: {\n            template_name,\n            message: {\n              from_email,\n              subject,\n              merge_vars,\n              from_name\n            }\n          }\n        } = emails.find(({\n          emailId\n        }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n        expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n        expect(address).to.equal('bob@dylan.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.equal('e-Potek - \"Rue du four 1\"');\n        expect(emails.filter(({\n          emailId\n        }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION).length).to.equal(1);\n      });\n    });\n    it('throws if user is already invited to pro property', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }\n      });\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId'],\n        proUserId: 'proId'\n      }).then(() => checkEmails(2)).then(() => {\n        expect(() => UserService.proInviteUser({\n          user: userToInvite,\n          propertyIds: ['propertyId'],\n          proUserId: 'proId'\n        })).to.throw('Cet utilisateur est déjà invité à ce bien immobilier');\n      });\n    });\n    it('invites existing users to a new promotion', () => {\n      generator({\n        users: {\n          _id: 'userId',\n          emails: [{\n            address: 'test@e-potek.ch',\n            verified: true\n          }]\n        },\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: {\n              permissions: {\n                canInviteCustomers: true\n              }\n            }\n          }\n        }\n      });\n      return UserService.proInviteUser({\n        user: {\n          email: 'Test@e-potek.ch',\n          firstName: 'John',\n          lastName: 'Doe',\n          phoneNumber: '1234',\n          showAllLots: false,\n          promotionLotIds: [],\n          invitedBy: 'proId'\n        },\n        promotionIds: ['promotionId'],\n        proUserId: 'proId',\n        adminId: 'adminId'\n      }).then(() => {\n        const {\n          loans\n        } = UserService.fetchOne({\n          $filters: {\n            _id: 'userId'\n          },\n          loans: {\n            _id: 1\n          }\n        });\n        expect(loans.length).to.equal(1);\n        return checkEmails(2);\n      });\n    });\n  });\n  describe('round robin', () => {\n    const employees = ['a@e-potek.ch', 'b@e-potek.ch', 'c@e-potek.ch'];\n    let employeeIds = [];\n    beforeEach(() => {\n      employeeIds = employees.map(email => UserService.adminCreateUser({\n        options: {\n          email\n        },\n        role: ROLES.ADMIN\n      }));\n    });\n    it('sets the first user to the first in the array', () => {\n      const service = new UserServiceClass({\n        employees\n      });\n      const newUserId = service.adminCreateUser({\n        options: {\n          email: '1@e-potek.ch'\n        }\n      });\n      const {\n        assignedEmployee\n      } = service.fetchOne({\n        $filters: {\n          _id: newUserId\n        },\n        assignedEmployee: {\n          email: 1\n        }\n      });\n      expect(assignedEmployee.email).to.equal(employees[0]);\n    });\n    it('sets the second user to the second in the array', () => {\n      const service = new UserServiceClass({\n        employees\n      });\n      service.adminCreateUser({\n        options: {\n          email: '1@e-potek.ch'\n        }\n      });\n      const newUserId2 = service.adminCreateUser({\n        options: {\n          email: '2@e-potek.ch'\n        }\n      });\n      const {\n        assignedEmployee\n      } = service.fetchOne({\n        $filters: {\n          _id: newUserId2\n        },\n        assignedEmployee: {\n          email: 1\n        }\n      });\n      expect(assignedEmployee.email).to.equal(employees[1]);\n    });\n    it('loops back to first in array', () => {\n      const service = new UserServiceClass({\n        employees\n      });\n      generator({\n        users: {\n          assignedEmployeeId: employeeIds[2],\n          _factory: 'user'\n        }\n      });\n      const newUserId = service.adminCreateUser({\n        options: {\n          email: '1@e-potek.ch'\n        }\n      });\n      const {\n        assignedEmployee\n      } = service.fetchOne({\n        $filters: {\n          _id: newUserId\n        },\n        assignedEmployee: {\n          email: 1\n        }\n      });\n      expect(assignedEmployee.email).to.equal(employees[0]);\n    });\n    it('ignores users assigned to people outside of employees list, and check latest one', () => {\n      const service = new UserServiceClass({\n        employees\n      });\n      generator({\n        users: [{\n          _id: 'a',\n          assignedEmployeeId: employeeIds[2],\n          _factory: 'user'\n        }, {\n          _id: 'b',\n          assignedEmployeeId: employeeIds[2],\n          _factory: 'user'\n        }, {\n          _id: 'c',\n          assignedEmployeeId: employeeIds[2],\n          _factory: 'user'\n        }, {\n          _id: 'd',\n          assignedEmployeeId: employeeIds[1],\n          _factory: 'user'\n        }, {\n          _id: 'e',\n          assignedEmployee: {\n            _id: 'adminId',\n            _factory: 'admin'\n          }\n        }]\n      });\n      const newUserId = service.adminCreateUser({\n        options: {\n          email: '1@e-potek.ch'\n        }\n      });\n      const {\n        assignedEmployee\n      } = service.fetchOne({\n        $filters: {\n          _id: newUserId\n        },\n        assignedEmployee: {\n          email: 1\n        }\n      });\n      expect(assignedEmployee.email).to.equal(employees[2]);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/users/server/test/UserService.test.js"],"names":["describe","firstName","lastName","beforeEach","resetDatabase","user","sinon","afterEach","UserService","it","options","email","userId","expect","ROLES","role","PRO","username","USER","sendEnrollmentEmail","adminId","_id","newFirstName","object","Factory","LoanService","BorrowerService","PropertyService","category","PROPERTY_CATEGORY","propertyIds","newRole","emails","address","verified","inexistentEmail","token","services","password","reset","phoneNumbers","loanId","promotionLinks","promotionId","userToInvite","phoneNumber","generator","users","_factory","assignedEmployeeId","organisations","name","referOnly","proUserId","userCreated","response","status","template","message","from_name","emailId","EMAIL_IDS","EMAIL_TEMPLATES","global_merge_vars","properties","promotions","PROMOTION_STATUS","$metadata","permissions","canInviteCustomers","promotionLots","propertyLinks","showAllLots","promotionLotIds","promotionIds","loan","checkEmails","promotionLotLinks","loans","$filters","address1","invitedBy","employees","employeeIds","ADMIN","service","newUserId","assignedEmployee","newUserId2"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport LoanService from '../../../loans/server/LoanService';\nimport BorrowerService from '../../../borrowers/server/BorrowerService';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport generator from '../../../factories';\nimport { PROMOTION_STATUS } from '../../../promotions/promotionConstants';\nimport { PROPERTY_CATEGORY } from '../../../properties/propertyConstants';\nimport { EMAIL_IDS, EMAIL_TEMPLATES } from '../../../email/emailConstants';\nimport { ROLES } from '../../userConstants';\nimport UserService, { UserServiceClass } from '../UserService';\n\ndescribe('UserService', function () {\n  this.timeout(10000);\n\n  const firstName = 'testFirstName';\n  const lastName = 'testLastName';\n  let user;\n\n  beforeEach(() => {\n    resetDatabase();\n\n    user = Factory.create('user', { firstName, lastName });\n    sinon.stub(UserService, 'sendEnrollmentEmail').callsFake(() => {});\n  });\n\n  afterEach(() => {\n    UserService.sendEnrollmentEmail.restore();\n  });\n\n  describe('createUser', () => {\n    it('creates a user with a USER role by default', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.createUser({ options });\n      user = UserService.getUserById({ userId });\n\n      expect(user.roles).to.deep.equal([ROLES.USER]);\n    });\n\n    it('creates a user with a PRO role', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.createUser({ options, role: ROLES.PRO });\n      user = UserService.getUserById({ userId });\n\n      expect(user.roles).to.deep.equal([ROLES.PRO]);\n    });\n\n    it('uses all options to create the user', () => {\n      const options = { email: 'test@test.com', username: 'dude' };\n      const userId = UserService.createUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(user.emails[0].address).to.equal(options.email);\n      expect(user.username).to.equal(options.username);\n    });\n\n    it('does not set additional stuff', () => {\n      const options = { email: 'test@test.com', firstName: 'dude' };\n      const userId = UserService.createUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(user.firstName).to.equal(undefined);\n    });\n  });\n\n  describe('adminCreateUser', () => {\n    it('creates a user', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.adminCreateUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(!!user).to.equal(true);\n    });\n\n    it('adds any additional info on options to the user', () => {\n      const options = { email: 'test@test.com', firstName: 'dude' };\n      const userId = UserService.adminCreateUser({ options, role: ROLES.USER });\n      user = UserService.getUserById({ userId });\n\n      expect(user.firstName).to.equal(options.firstName);\n    });\n\n    it('does not send enrollment email by default', () => {\n      const options = { email: 'test@test.com' };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER,\n      });\n\n      expect(UserService.sendEnrollmentEmail.getCall(0)).to.equal(null);\n    });\n\n    it('sends enrollment email when asked to', () => {\n      const options = { email: 'test@test.com', sendEnrollmentEmail: true };\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER,\n      });\n\n      expect(UserService.sendEnrollmentEmail.getCall(0).args[0]).to.deep.equal({\n        userId,\n      });\n    });\n\n    it('assigns an adminId if the user is a USER', () => {\n      const options = { email: 'test@test.com' };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.USER,\n        adminId,\n      });\n      user = UserService.getUserById({ userId });\n\n      expect(user.assignedEmployeeId).to.equal(adminId);\n    });\n\n    it('does not assign anyone if the user is not USER', () => {\n      const options = { email: 'test@test.com' };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.ADMIN,\n        adminId,\n      });\n      user = UserService.getUserById({ userId });\n\n      expect(user.assignedEmployeeId).to.equal(undefined);\n    });\n\n    it('does not assign anyone if the user is not USER', () => {\n      const options = { email: 'test@test.com' };\n      const adminId = 'some admin';\n      const userId = UserService.adminCreateUser({\n        options,\n        role: ROLES.ADMIN,\n        adminId,\n      });\n      user = UserService.getUserById({ userId });\n\n      expect(user.assignedEmployeeId).to.equal(undefined);\n    });\n  });\n\n  describe('getUserById', () => {\n    it('returns a user', () => {\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n    });\n\n    it('returns undefined if no user exists', () => {\n      expect(UserService.getUserById({ userId: 'unknownId' })).to.equal(undefined);\n    });\n  });\n\n  describe('update', () => {\n    it('updates a user', () => {\n      const newFirstName = 'joe';\n      expect(UserService.getUserById({ userId: user._id }).firstName).to.equal(firstName);\n      UserService.update({\n        userId: user._id,\n        object: { firstName: newFirstName },\n      });\n      expect(UserService.getUserById({ userId: user._id }).firstName).to.equal(newFirstName);\n    });\n\n    it('does not do anything if object is not defined', () => {\n      UserService.update({ userId: user._id });\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n    });\n\n    it('does not do anything if object empty', () => {\n      UserService.update({ userId: user._id, object: {} });\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n    });\n  });\n\n  describe('remove', () => {\n    it('removes a user', () => {\n      expect(UserService.getUserById({ userId: user._id })).to.deep.equal(user);\n      UserService.remove({ userId: user._id });\n      expect(UserService.getUserById({ userId: user._id })).to.equal(undefined);\n    });\n\n    it('autoremoves all loans, properties and borrowers', () => {\n      Factory.create('loan', { userId: user._id });\n      Factory.create('loan', { userId: user._id });\n      Factory.create('borrower', { userId: user._id });\n      Factory.create('borrower', { userId: user._id });\n      Factory.create('property', { userId: user._id });\n      Factory.create('property', { userId: user._id });\n      UserService.remove({ userId: user._id });\n      expect(UserService.getUserById({ userId: user._id })).to.equal(undefined);\n      expect(LoanService.countAll()).to.equal(0);\n      expect(BorrowerService.countAll()).to.equal(0);\n      expect(PropertyService.countAll()).to.equal(0);\n    });\n\n    it('does not remove proProperties when it is not the only customer', () => {\n      // User property\n      Factory.create('property', { userId: user._id });\n      // Pro property\n      Factory.create('property', {\n        _id: 'propertyId',\n        category: PROPERTY_CATEGORY.PRO,\n      });\n\n      Factory.create('user', { _id: 'userId2' });\n\n      LoanService.insertPropertyLoan({\n        userId: user._id,\n        propertyIds: ['propertyId'],\n      });\n\n      LoanService.insertPropertyLoan({\n        userId: 'userId2',\n        propertyIds: ['propertyId'],\n      });\n\n      UserService.remove({ userId: user._id });\n      expect(PropertyService.countAll()).to.equal(1);\n    });\n\n    it('does not remove proProperties when it is the only customer', () => {\n      // User property\n      Factory.create('property', { userId: user._id });\n      // Pro property\n      Factory.create('property', {\n        _id: 'propertyId',\n        category: PROPERTY_CATEGORY.PRO,\n      });\n      LoanService.insertPropertyLoan({\n        userId: user._id,\n        propertyIds: ['propertyId'],\n      });\n      UserService.remove({ userId: user._id });\n      expect(PropertyService.countAll()).to.equal(1);\n    });\n  });\n\n  describe('assignAdminToUser', () => {\n    it('assigns an admin to a user', () => {\n      const adminId = 'my dude';\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(undefined);\n      UserService.assignAdminToUser({ userId: user._id, adminId });\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(adminId);\n    });\n\n    it('does not fail if adminId is undefined', () => {\n      const adminId = undefined;\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(undefined);\n      UserService.assignAdminToUser({ userId: user._id, adminId });\n      expect(UserService.getUserById({ userId: user._id }).assignedEmployeeId).to.equal(adminId);\n    });\n  });\n\n  describe('getUsersByRole', () => {\n    it('gets all users for a role', () => {\n      Factory.create('admin', { firstName, lastName });\n      Factory.create('admin', { firstName, lastName });\n      Factory.create('dev', { firstName, lastName });\n      Factory.create('dev', { firstName, lastName });\n      Factory.create('dev', { firstName, lastName });\n\n      expect(UserService.getUsersByRole(ROLES.USER).length).to.equal(1);\n      expect(UserService.getUsersByRole(ROLES.ADMIN).length).to.equal(2);\n      expect(UserService.getUsersByRole(ROLES.DEV).length).to.equal(3);\n    });\n  });\n\n  describe('setRole', () => {\n    it('changes the role of a user', () => {\n      const newRole = ROLES.DEV;\n      expect(UserService.getUserById({ userId: user._id }).roles).to.deep.equal([ROLES.USER]);\n      UserService.setRole({ userId: user._id, role: newRole });\n      expect(UserService.getUserById({ userId: user._id }).roles).to.deep.equal([newRole]);\n    });\n\n    it('throws if an unauthorized role is set', () => {\n      const newRole = 'some role';\n\n      expect(() =>\n        UserService.setRole({ userId: user._id, role: newRole })).to.throw(`${newRole} is not an allowed value`);\n    });\n  });\n\n  describe('doesUserExist', () => {\n    let email;\n\n    beforeEach(() => {\n      email = 'yep@yop.com';\n      Factory.create('user', {\n        emails: [{ address: email, verified: false }],\n      });\n    });\n\n    it('finds an existing user', () => {\n      expect(UserService.doesUserExist({ email })).to.equal(true);\n    });\n\n    it('returns false with an email containing another one', () => {\n      email += 'a';\n      expect(UserService.doesUserExist({ email })).to.equal(false);\n    });\n\n    it('returns false with a substring of a user', () => {\n      email = email.slice(0, -1);\n      expect(UserService.doesUserExist({ email })).to.equal(false);\n    });\n\n    it('returns false with totally different email', () => {\n      const inexistentEmail = 'hello@world.com';\n      expect(UserService.doesUserExist({ email: inexistentEmail })).to.equal(false);\n    });\n  });\n\n  describe('getUserByPasswordResetToken', () => {\n    it('returns a user if found', () => {\n      const token = 'testToken';\n      const userId = UserService.testCreateUser({\n        user: {\n          services: { password: { reset: { token } } },\n        },\n      });\n      expect(!!UserService.getUserByPasswordResetToken({ token })).to.equal(true);\n    });\n\n    it('only returns the necessary data', () => {\n      const token = 'testToken';\n      const userId = UserService.testCreateUser({\n        user: {\n          services: { password: { reset: { token } } },\n          firstName,\n          lastName,\n          emails: [{ address: 'yo@dude.com', verified: false }],\n          phoneNumbers: ['secretNumber'],\n        },\n      });\n      expect(UserService.getUserByPasswordResetToken({ token })).to.deep.equal({\n        _id: userId,\n        firstName,\n        lastName,\n        emails: [{ address: 'yo@dude.com', verified: false }],\n      });\n    });\n\n    it('returns undefined if no user is found', () => {\n      expect(!!UserService.getUserByPasswordResetToken({\n        token: 'some unknown token',\n      })).to.equal(false);\n    });\n  });\n\n  describe('hasPromotion', () => {\n    it('returns false if the user does not have the promotion', () => {\n      const userId = Factory.create('user')._id;\n      const loanId = Factory.create('loan', {\n        userId,\n        promotionLinks: [{ _id: 'test' }],\n      })._id;\n\n      expect(UserService.hasPromotion({ userId, promotionId: 'test2' })).to.equal(false);\n    });\n  });\n\n  describe('proInviteUser', () => {\n    const userToInvite = {\n      firstName: 'Bob',\n      lastName: 'Dylan',\n      email: 'bob@dylan.com',\n      phoneNumber: '12345',\n    };\n\n    beforeEach(() => {\n      resetDatabase();\n      generator({\n        users: [\n          { _id: 'adminId', _factory: 'admin' },\n          {\n            _id: 'proId',\n            assignedEmployeeId: 'adminId',\n            organisations: { _id: 'organisationId', name: 'bank' },\n            _factory: 'pro',\n            firstName: 'John',\n            lastName: 'Doe',\n            emails: [{ address: 'john@doe.com', verified: true }],\n          },\n        ],\n      });\n    });\n\n    it('invites user to refer only', () =>\n      UserService.proInviteUser({\n        user: userToInvite,\n        referOnly: true,\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n\n        return checkEmails(2).then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            address,\n            response: { status },\n            template: {\n              template_name,\n              message: { from_email, subject, global_merge_vars, from_name },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.REFER_USER);\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.REFER_USER);\n          expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n          expect(address).to.equal('bob@dylan.com');\n          expect(from_email).to.equal('info@e-potek.ch');\n          expect(from_name).to.equal('e-Potek');\n          expect(subject).to.equal('Vous avez été invité sur e-Potek');\n          expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('John Doe (bank)');\n          {\n            const {\n              emailId,\n              address,\n              response: { status },\n              template: {\n                template_name,\n                message: { from_email, subject, global_merge_vars, from_name },\n              },\n            } = emails.find(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION);\n            expect(status).to.equal('sent');\n            expect(emailId).to.equal(EMAIL_IDS.CONFIRM_USER_INVITATION);\n            expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n            expect(address).to.equal('john@doe.com');\n            expect(from_email).to.equal('info@e-potek.ch');\n            expect(from_name).to.equal('e-Potek');\n            expect(subject).to.equal('Invitation réussie');\n            expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('Bob Dylan (bob@dylan.com)');\n          }\n        });\n      }));\n\n    it('throws if user already exists and it is referOnly', () => {\n      generator({\n        users: { emails: [{ address: userToInvite.email, verified: false }] },\n      });\n\n      expect(() =>\n        UserService.proInviteUser({\n          user: userToInvite,\n          referOnly: true,\n          proUserId: 'proId',\n        })).to.throw('Ce client existe déjà');\n    });\n\n    it('invites user to promotion', () => {\n      generator({\n        properties: { _id: 'prop' },\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n          promotionLots: { _id: 'pLotId', propertyLinks: [{ _id: 'prop' }] },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: {\n          ...userToInvite,\n          showAllLots: false,\n          promotionLotIds: ['pLotId'],\n        },\n        promotionIds: ['promotionId'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({ userId: userCreated._id });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.promotionLinks[0]._id).to.equal('promotionId');\n        expect(loan.promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loan.promotionLinks[0].showAllLots).to.equal(false);\n        expect(loan.promotionOptionLinks.length).to.equal(1);\n\n        return checkEmails(2);\n      });\n    });\n\n    it('invites user to multiple promotions', () => {\n      generator({\n        promotions: [\n          {\n            _id: 'promotionId1',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'promotionId2',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n            promotionLotLinks: [{ _id: 'lotId2' }],\n          },\n        ],\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        promotionIds: ['promotionId1', 'promotionId2'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loans = LoanService.fetch({\n          $filters: { userId: userCreated._id },\n          promotionLinks: 1,\n        });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loans.length).to.equal(2);\n        expect(loans[0].promotionLinks[0]._id).to.equal('promotionId1');\n        expect(loans[0].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[0].promotionLinks[0].showAllLots).to.equal(true);\n        expect(loans[1].promotionLinks[0]._id).to.equal('promotionId2');\n        expect(loans[1].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[1].promotionLinks[0].showAllLots).to.equal(true);\n\n        return checkEmails(4);\n      });\n    });\n\n    it('throws if user is already invited to promotion', () => {\n      generator({\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        promotionIds: ['promotionId'],\n        proUserId: 'proId',\n      })\n        .then(() => checkEmails(2))\n        .then((emails) => {\n          expect(() =>\n            UserService.proInviteUser({\n              user: userToInvite,\n              promotionIds: ['promotionId'],\n              proUserId: 'proId',\n            })).to.throw('Cet utilisateur est déjà invité à cette promotion');\n        });\n    });\n\n    it('invites user to pro property', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({ userId: userCreated._id });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.propertyIds[0]).to.equal('propertyId');\n\n        return checkEmails(2).then((emails) => {\n          expect(!!emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY)).to.equal(true);\n          expect(!!emails.find(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION)).to.equal(true);\n        });\n      });\n    });\n\n    it('invites user to multiple pro properties', () => {\n      generator({\n        properties: [\n          {\n            _id: 'propertyId1',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'propertyId2',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n        ],\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId1', 'propertyId2'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loan = LoanService.findOne({ userId: userCreated._id });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loan.propertyIds.length).to.equal(2);\n        expect(loan.propertyIds[0]).to.equal('propertyId1');\n        expect(loan.propertyIds[1]).to.equal('propertyId2');\n\n        return checkEmails(2);\n      });\n    });\n\n    it('invites user to multiple pro properties and promotions', () => {\n      generator({\n        properties: [\n          {\n            _id: 'propertyId1',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'propertyId2',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n        ],\n        promotions: [\n          {\n            _id: 'promotionId1',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n          },\n          {\n            _id: 'promotionId2',\n            status: PROMOTION_STATUS.OPEN,\n            assignedEmployeeId: 'adminId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canInviteCustomers: true } },\n            },\n            promotionLotLinks: [{ _id: 'lotId2' }],\n          },\n        ],\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId1', 'propertyId2'],\n        promotionIds: ['promotionId1', 'promotionId2'],\n        proUserId: 'proId',\n      }).then(() => {\n        const userCreated = UserService.getByEmail(userToInvite.email);\n        const loans = LoanService.fetch({\n          $filters: { userId: userCreated._id },\n          promotionLinks: 1,\n          propertyIds: 1,\n        });\n\n        expect(userCreated.assignedEmployeeId).to.equal('adminId');\n        expect(userCreated.referredByUserLink).to.equal('proId');\n        expect(userCreated.referredByOrganisationLink).to.equal('organisationId');\n        expect(loans.length).to.equal(3);\n        expect(loans[0].propertyIds.length).to.equal(2);\n        expect(loans[0].propertyIds[0]).to.equal('propertyId1');\n        expect(loans[0].propertyIds[1]).to.equal('propertyId2');\n        expect(loans[1].promotionLinks[0]._id).to.equal('promotionId1');\n        expect(loans[1].promotionLinks[0].invitedBy).to.equal('proId');\n        expect(loans[2].promotionLinks[0]._id).to.equal('promotionId2');\n        expect(loans[2].promotionLinks[0].invitedBy).to.equal('proId');\n\n        return checkEmails(6);\n      });\n    });\n\n    it('sends an invitation email', () => {\n      generator({\n        properties: {\n          address1: 'Rue du four 1',\n          _id: 'propertyId2',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId2'],\n        proUserId: 'proId',\n      })\n        .then(() => checkEmails(2))\n        .then((emails) => {\n          expect(emails.length).to.equal(2);\n          const {\n            emailId,\n            address,\n            response: { status },\n            template: {\n              template_name,\n              message: { from_email, subject, merge_vars, from_name },\n            },\n          } = emails.find(({ emailId }) => emailId === EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n          expect(status).to.equal('sent');\n          expect(emailId).to.equal(EMAIL_IDS.INVITE_USER_TO_PROPERTY);\n          expect(template_name).to.equal(EMAIL_TEMPLATES.NOTIFICATION_AND_CTA.mandrillId);\n          expect(address).to.equal('bob@dylan.com');\n          expect(from_email).to.equal('info@e-potek.ch');\n          expect(from_name).to.equal('e-Potek');\n          expect(subject).to.equal('e-Potek - \"Rue du four 1\"');\n\n          expect(emails.filter(({ emailId }) => emailId === EMAIL_IDS.CONFIRM_USER_INVITATION).length).to.equal(1);\n        });\n    });\n\n    it('throws if user is already invited to pro property', () => {\n      generator({\n        properties: {\n          _id: 'propertyId',\n          category: PROPERTY_CATEGORY.PRO,\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: userToInvite,\n        propertyIds: ['propertyId'],\n        proUserId: 'proId',\n      })\n        .then(() => checkEmails(2))\n        .then(() => {\n          expect(() =>\n            UserService.proInviteUser({\n              user: userToInvite,\n              propertyIds: ['propertyId'],\n              proUserId: 'proId',\n            })).to.throw('Cet utilisateur est déjà invité à ce bien immobilier');\n        });\n    });\n\n    it('invites existing users to a new promotion', () => {\n      generator({\n        users: {\n          _id: 'userId',\n          emails: [{ address: 'test@e-potek.ch', verified: true }],\n        },\n        promotions: {\n          _id: 'promotionId',\n          status: PROMOTION_STATUS.OPEN,\n          assignedEmployeeId: 'adminId',\n          users: {\n            _id: 'proId',\n            $metadata: { permissions: { canInviteCustomers: true } },\n          },\n        },\n      });\n\n      return UserService.proInviteUser({\n        user: {\n          email: 'Test@e-potek.ch',\n          firstName: 'John',\n          lastName: 'Doe',\n          phoneNumber: '1234',\n          showAllLots: false,\n          promotionLotIds: [],\n          invitedBy: 'proId',\n        },\n        promotionIds: ['promotionId'],\n        proUserId: 'proId',\n        adminId: 'adminId',\n      }).then(() => {\n        const { loans } = UserService.fetchOne({\n          $filters: { _id: 'userId' },\n          loans: { _id: 1 },\n        });\n        expect(loans.length).to.equal(1);\n\n        return checkEmails(2);\n      });\n    });\n  });\n\n  describe('round robin', () => {\n    const employees = ['a@e-potek.ch', 'b@e-potek.ch', 'c@e-potek.ch'];\n    let employeeIds = [];\n\n    beforeEach(() => {\n      employeeIds = employees.map(email =>\n        UserService.adminCreateUser({ options: { email }, role: ROLES.ADMIN }));\n    });\n\n    it('sets the first user to the first in the array', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      const newUserId = service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[0]);\n    });\n\n    it('sets the second user to the second in the array', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const newUserId2 = service.adminCreateUser({\n        options: { email: '2@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId2 },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[1]);\n    });\n\n    it('loops back to first in array', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      generator({\n        users: { assignedEmployeeId: employeeIds[2], _factory: 'user' },\n      });\n\n      const newUserId = service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[0]);\n    });\n\n    it('ignores users assigned to people outside of employees list, and check latest one', () => {\n      const service = new UserServiceClass({\n        employees,\n      });\n\n      generator({\n        users: [\n          { _id: 'a', assignedEmployeeId: employeeIds[2], _factory: 'user' },\n          { _id: 'b', assignedEmployeeId: employeeIds[2], _factory: 'user' },\n          { _id: 'c', assignedEmployeeId: employeeIds[2], _factory: 'user' },\n          { _id: 'd', assignedEmployeeId: employeeIds[1], _factory: 'user' },\n          { _id: 'e', assignedEmployee: { _id: 'adminId', _factory: 'admin' } },\n        ],\n      });\n\n      const newUserId = service.adminCreateUser({\n        options: { email: '1@e-potek.ch' },\n      });\n\n      const { assignedEmployee } = service.fetchOne({\n        $filters: { _id: newUserId },\n        assignedEmployee: { email: 1 },\n      });\n\n      expect(assignedEmployee.email).to.equal(employees[2]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"4f3b326f5d616c9a7a0d64a0769359f702681969"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/6.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/migrations/server/6.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/6.js","inputSourceMap":{"version":3,"sources":["imports/core/api/migrations/server/6.js"],"names":["Migrations","Organisations","up","allOrganisations","find","fetch","Promise","all","map","organisation","contactIds","userLinks","promises","length","newContactIds","role","contact","title","rawCollection","update","_id","$set","newUserLinks","user","resolve","down","add","version","name"],"mappings":"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","sourcesContent":["import { Migrations } from 'meteor/percolate:migrations';\n\nimport { Organisations } from '../..';\n\nexport const up = () => {\n  const allOrganisations = Organisations.find().fetch();\n\n  return Promise.all(allOrganisations.map((organisation) => {\n    const { contactIds = [], userLinks = [] } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map(({ role, ...contact }) => ({\n        title: role,\n        ...contact,\n      }));\n      promises = [\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { contactIds: newContactIds } },\n        ),\n      ];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map(({ role, ...user }) => ({\n        title: role,\n        ...user,\n      }));\n\n      promises = [\n        ...promises,\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { userLinks: newUserLinks } },\n        ),\n      ];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nexport const down = () => {\n  const allOrganisations = Organisations.find().fetch();\n\n  return Promise.all(allOrganisations.map((organisation) => {\n    const { contactIds = [], userLinks = [] } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map(({ title, ...contact }) => ({\n        role: title,\n        ...contact,\n      }));\n      promises = [\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { contactIds: newContactIds } },\n        ),\n      ];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map(({ title, ...user }) => ({\n        role: title,\n        ...user,\n      }));\n\n      promises = [\n        ...promises,\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { userLinks: newUserLinks } },\n        ),\n      ];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nMigrations.add({\n  version: 6,\n  name:\n    'Rename role into title in organisations userLinks and contactIds metadata',\n  up,\n  down,\n});\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/6.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/migrations/server/6.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  up: () => up,\n  down: () => down\n});\nlet Migrations;\nmodule.link(\"meteor/percolate:migrations\", {\n  Migrations(v) {\n    Migrations = v;\n  }\n\n}, 0);\nlet Organisations;\nmodule.link(\"../..\", {\n  Organisations(v) {\n    Organisations = v;\n  }\n\n}, 1);\n\nconst up = () => {\n  const allOrganisations = Organisations.find().fetch();\n  return Promise.all(allOrganisations.map(organisation => {\n    const {\n      contactIds = [],\n      userLinks = []\n    } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map((_ref) => {\n        let {\n          role\n        } = _ref,\n            contact = (0, _objectWithoutProperties2.default)(_ref, [\"role\"]);\n        return (0, _objectSpread2.default)({\n          title: role\n        }, contact);\n      });\n      promises = [Organisations.rawCollection().update({\n        _id: organisation._id\n      }, {\n        $set: {\n          contactIds: newContactIds\n        }\n      })];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map((_ref2) => {\n        let {\n          role\n        } = _ref2,\n            user = (0, _objectWithoutProperties2.default)(_ref2, [\"role\"]);\n        return (0, _objectSpread2.default)({\n          title: role\n        }, user);\n      });\n      promises = [...promises, Organisations.rawCollection().update({\n        _id: organisation._id\n      }, {\n        $set: {\n          userLinks: newUserLinks\n        }\n      })];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nconst down = () => {\n  const allOrganisations = Organisations.find().fetch();\n  return Promise.all(allOrganisations.map(organisation => {\n    const {\n      contactIds = [],\n      userLinks = []\n    } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map((_ref3) => {\n        let {\n          title\n        } = _ref3,\n            contact = (0, _objectWithoutProperties2.default)(_ref3, [\"title\"]);\n        return (0, _objectSpread2.default)({\n          role: title\n        }, contact);\n      });\n      promises = [Organisations.rawCollection().update({\n        _id: organisation._id\n      }, {\n        $set: {\n          contactIds: newContactIds\n        }\n      })];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map((_ref4) => {\n        let {\n          title\n        } = _ref4,\n            user = (0, _objectWithoutProperties2.default)(_ref4, [\"title\"]);\n        return (0, _objectSpread2.default)({\n          role: title\n        }, user);\n      });\n      promises = [...promises, Organisations.rawCollection().update({\n        _id: organisation._id\n      }, {\n        $set: {\n          userLinks: newUserLinks\n        }\n      })];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nMigrations.add({\n  version: 6,\n  name: 'Rename role into title in organisations userLinks and contactIds metadata',\n  up,\n  down\n});","map":{"version":3,"sources":["imports/core/api/migrations/server/6.js"],"names":["Migrations","up","allOrganisations","Organisations","organisation","contactIds","userLinks","promises","newContactIds","contact","title","_id","$set","newUserLinks","user","Promise","down","role","version","name"],"mappings":"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","sourcesContent":["import { Migrations } from 'meteor/percolate:migrations';\n\nimport { Organisations } from '../..';\n\nexport const up = () => {\n  const allOrganisations = Organisations.find().fetch();\n\n  return Promise.all(allOrganisations.map((organisation) => {\n    const { contactIds = [], userLinks = [] } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map(({ role, ...contact }) => ({\n        title: role,\n        ...contact,\n      }));\n      promises = [\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { contactIds: newContactIds } },\n        ),\n      ];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map(({ role, ...user }) => ({\n        title: role,\n        ...user,\n      }));\n\n      promises = [\n        ...promises,\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { userLinks: newUserLinks } },\n        ),\n      ];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nexport const down = () => {\n  const allOrganisations = Organisations.find().fetch();\n\n  return Promise.all(allOrganisations.map((organisation) => {\n    const { contactIds = [], userLinks = [] } = organisation;\n    let promises = [];\n\n    if (contactIds.length > 0) {\n      const newContactIds = contactIds.map(({ title, ...contact }) => ({\n        role: title,\n        ...contact,\n      }));\n      promises = [\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { contactIds: newContactIds } },\n        ),\n      ];\n    }\n\n    if (userLinks.length > 0) {\n      const newUserLinks = userLinks.map(({ title, ...user }) => ({\n        role: title,\n        ...user,\n      }));\n\n      promises = [\n        ...promises,\n        Organisations.rawCollection().update(\n          { _id: organisation._id },\n          { $set: { userLinks: newUserLinks } },\n        ),\n      ];\n    }\n\n    if (promises.length > 0) {\n      return Promise.all(promises);\n    }\n\n    return Promise.resolve();\n  }));\n};\n\nMigrations.add({\n  version: 6,\n  name:\n    'Rename role into title in organisations userLinks and contactIds metadata',\n  up,\n  down,\n});\n"]},"sourceType":"script","hash":"96db810330f1e0f93fd2bcc8461b62cf0c0dc491"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/general.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/general.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/general.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/general.js"],"names":["isArray","arrayify","value","getPercent","array","length","percent","reduce","tot","val","undefined","Number","isFinite","getAggregatePercent","percentageObjects","aggregatePercent","count","aggregateCount","obj","normalize","item","id","_id","simpleHash","data","string","JSON","stringify","hash","i","char","charCodeAt"],"mappings":"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","sourcesContent":["// @flow\nimport isArray from 'lodash/isArray';\n\nexport const arrayify = (value) => {\n  if (value) {\n    if (isArray(value)) {\n      return value;\n    }\n    return [value];\n  }\n\n  return [];\n};\n\n/**\n * getPercent - Given an array of values, any value that is undefined or null\n * will be counted as incomplete, make sure we don't divide by 0\n *\n * @param {array} array Array of numbers, strings, or dates\n *\n * @return {number} a value between 0 and 1\n */\nexport const getPercent = (array) => {\n  if (!array) {\n    return 0;\n  }\n  if (array.length === 0) {\n    // If array is empty, return 100%\n    return 1;\n  }\n\n  const percent = array.reduce((tot, val) => {\n    if (isArray(val)) {\n      // Empty arrays need to be filled\n      return tot + (val.length ? 1 : 0);\n    }\n    if (val !== undefined && val !== null) {\n      return tot + 1;\n    }\n    return tot;\n  }, 0) / array.length;\n  return Number.isFinite(percent) ? percent : 0;\n};\n\n// Given multiple objects of the form { percent, count },\n// Merge them together with a single count and percent\nexport const getAggregatePercent = (percentageObjects) => {\n  const {\n    percent: aggregatePercent,\n    count: aggregateCount,\n  } = percentageObjects.reduce(\n    (obj, { percent, count }) => ({\n      percent: obj.percent + percent * count,\n      count: obj.count + count,\n    }),\n    { percent: 0, count: 0 },\n  );\n\n  return {\n    count: aggregateCount,\n    percent: aggregateCount === 0 ? 0 : aggregatePercent / aggregateCount,\n  };\n};\n\nexport const normalize = array =>\n  array.reduce((obj, item) => ({ ...obj, [item.id || item._id]: item }), {});\n\nexport const simpleHash = (data) => {\n  let string = data;\n  if (typeof data !== 'string') {\n    string = JSON.stringify(data);\n  }\n\n  let hash = 0;\n  if (string.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash &= hash; // Convert to 32bit integer\n  }\n  return hash;\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/general.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/general.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread3 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  arrayify: function () {\n    return arrayify;\n  },\n  getPercent: function () {\n    return getPercent;\n  },\n  getAggregatePercent: function () {\n    return getAggregatePercent;\n  },\n  normalize: function () {\n    return normalize;\n  },\n  simpleHash: function () {\n    return simpleHash;\n  }\n});\nvar isArray;\nmodule.link(\"lodash/isArray\", {\n  \"default\": function (v) {\n    isArray = v;\n  }\n}, 0);\n\nvar arrayify = function (value) {\n  if (value) {\n    if (isArray(value)) {\n      return value;\n    }\n\n    return [value];\n  }\n\n  return [];\n};\n\nvar getPercent = function (array) {\n  if (!array) {\n    return 0;\n  }\n\n  if (array.length === 0) {\n    // If array is empty, return 100%\n    return 1;\n  }\n\n  var percent = array.reduce(function (tot, val) {\n    if (isArray(val)) {\n      // Empty arrays need to be filled\n      return tot + (val.length ? 1 : 0);\n    }\n\n    if (val !== undefined && val !== null) {\n      return tot + 1;\n    }\n\n    return tot;\n  }, 0) / array.length;\n  return Number.isFinite(percent) ? percent : 0;\n};\n\nvar getAggregatePercent = function (percentageObjects) {\n  var _percentageObjects$re = percentageObjects.reduce(function (obj, _ref) {\n    var percent = _ref.percent,\n        count = _ref.count;\n    return {\n      percent: obj.percent + percent * count,\n      count: obj.count + count\n    };\n  }, {\n    percent: 0,\n    count: 0\n  }),\n      aggregatePercent = _percentageObjects$re.percent,\n      aggregateCount = _percentageObjects$re.count;\n\n  return {\n    count: aggregateCount,\n    percent: aggregateCount === 0 ? 0 : aggregatePercent / aggregateCount\n  };\n};\n\nvar normalize = function (array) {\n  return array.reduce(function (obj, item) {\n    var _objectSpread2;\n\n    return (0, _objectSpread3.default)({}, obj, (_objectSpread2 = {}, _objectSpread2[item.id || item._id] = item, _objectSpread2));\n  }, {});\n};\n\nvar simpleHash = function (data) {\n  var string = data;\n\n  if (typeof data !== 'string') {\n    string = JSON.stringify(data);\n  }\n\n  var hash = 0;\n\n  if (string.length === 0) {\n    return hash;\n  }\n\n  for (var i = 0; i < string.length; i++) {\n    var char = string.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash &= hash; // Convert to 32bit integer\n  }\n\n  return hash;\n};","map":{"version":3,"sources":["imports/core/utils/general.js"],"names":["arrayify","value","isArray","getPercent","array","percent","tot","val","Number","getAggregatePercent","percentageObjects","count","aggregateCount","obj","aggregatePercent","normalize","item","simpleHash","data","string","JSON","hash","i","char"],"mappings":"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","sourcesContent":["// @flow\nimport isArray from 'lodash/isArray';\n\nexport const arrayify = (value) => {\n  if (value) {\n    if (isArray(value)) {\n      return value;\n    }\n    return [value];\n  }\n\n  return [];\n};\n\n/**\n * getPercent - Given an array of values, any value that is undefined or null\n * will be counted as incomplete, make sure we don't divide by 0\n *\n * @param {array} array Array of numbers, strings, or dates\n *\n * @return {number} a value between 0 and 1\n */\nexport const getPercent = (array) => {\n  if (!array) {\n    return 0;\n  }\n  if (array.length === 0) {\n    // If array is empty, return 100%\n    return 1;\n  }\n\n  const percent = array.reduce((tot, val) => {\n    if (isArray(val)) {\n      // Empty arrays need to be filled\n      return tot + (val.length ? 1 : 0);\n    }\n    if (val !== undefined && val !== null) {\n      return tot + 1;\n    }\n    return tot;\n  }, 0) / array.length;\n  return Number.isFinite(percent) ? percent : 0;\n};\n\n// Given multiple objects of the form { percent, count },\n// Merge them together with a single count and percent\nexport const getAggregatePercent = (percentageObjects) => {\n  const {\n    percent: aggregatePercent,\n    count: aggregateCount,\n  } = percentageObjects.reduce(\n    (obj, { percent, count }) => ({\n      percent: obj.percent + percent * count,\n      count: obj.count + count,\n    }),\n    { percent: 0, count: 0 },\n  );\n\n  return {\n    count: aggregateCount,\n    percent: aggregateCount === 0 ? 0 : aggregatePercent / aggregateCount,\n  };\n};\n\nexport const normalize = array =>\n  array.reduce((obj, item) => ({ ...obj, [item.id || item._id]: item }), {});\n\nexport const simpleHash = (data) => {\n  let string = data;\n  if (typeof data !== 'string') {\n    string = JSON.stringify(data);\n  }\n\n  let hash = 0;\n  if (string.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash &= hash; // Convert to 32bit integer\n  }\n  return hash;\n};\n"]},"sourceType":"script","hash":"2ff7eb3da93f48bf6736974668a1352e78768857"}

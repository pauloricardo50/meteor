{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/uploadDirective.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/files/server/uploadDirective.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/uploadDirective.js","inputSourceMap":{"version":3,"sources":["imports/core/api/files/server/uploadDirective.js"],"names":["Meteor","Match","check","Slingshot","_","crypto","OBJECT_STORAGE_PATH","BUCKET_NAME","OBJECT_STORAGE_REGION","FILE_STATUS","S3_ACLS","MAX_FILE_SIZE","ONE_KB","API_KEY","SECRET_KEY","settings","exoscale","FIVE_MINUTES","hmac256","key","data","encoding","createHmac","update","Buffer","from","toString","digest","formatNumber","num","digits","string","String","Array","length","join","concat","exoscaleStorageService","accessId","secretKey","directiveMatch","bucket","bucketUrl","OneOf","Function","region","AWSAccessKeyId","AWSSecretAccessKey","acl","Optional","Where","Object","values","indexOf","expire","Number","cacheControl","contentDisposition","directiveDefault","getContentDisposition","method","directive","file","meta","isFunction","filename","name","encodeURIComponent","call","getMaxSize","maxSize","upload","policy","StoragePolicy","expireIn","contentLength","Math","min","size","Error","payload","type","UNVERIFIED","downloadUrl","cdn","map","part","replace","applySignature","download","postData","value","chain","omit","isUndefined","compact","now","Date","today","getUTCFullYear","getUTCMonth","getUTCDate","service","extend","matchedPolicy","match","base64Policy","stringify","jsonPolicy","JSON","parse","signAwsV4","date","dateKey","dateRegionKey","dateRegionServiceKey","signingKey"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Slingshot } from 'meteor/edgee:slingshot';\nimport { _ } from 'meteor/underscore';\n\nimport crypto from 'crypto';\n\nimport {\n  OBJECT_STORAGE_PATH,\n  BUCKET_NAME,\n  OBJECT_STORAGE_REGION,\n  FILE_STATUS,\n  S3_ACLS,\n  MAX_FILE_SIZE,\n  ONE_KB,\n} from '../fileConstants';\n\nconst { API_KEY, SECRET_KEY } = Meteor.settings.exoscale;\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\n\nconst hmac256 = (key, data, encoding) =>\n  crypto\n    .createHmac('sha256', key)\n    .update(Buffer.from(data).toString('utf-8'))\n    .digest(encoding);\n\nconst formatNumber = (num, digits) => {\n  const string = String(num);\n  return Array(digits - string.length + 1)\n    .join('0')\n    .concat(string);\n};\n\nconst exoscaleStorageService = {\n  accessId: 'AWSAccessKeyId',\n  secretKey: 'AWSSecretAccessKey',\n\n  directiveMatch: {\n    bucket: String,\n    bucketUrl: Match.OneOf(String, Function),\n\n    region: String,\n\n    AWSAccessKeyId: String,\n    AWSSecretAccessKey: String,\n\n    acl: Match.Optional(Match.Where((acl) => {\n      check(acl, String);\n\n      return Object.values(S3_ACLS).indexOf(acl) >= 0;\n    })),\n\n    key: Match.OneOf(String, Function),\n\n    expire: Match.Where((expire) => {\n      check(expire, Number);\n\n      return expire > 0;\n    }),\n\n    cacheControl: Match.Optional(String),\n    contentDisposition: Match.Optional(Match.OneOf(String, Function, null)),\n\n    'x-amz-meta-status': Match.Optional(String),\n  },\n\n  directiveDefault: {\n    bucket: BUCKET_NAME,\n    bucketUrl: OBJECT_STORAGE_PATH,\n    region: OBJECT_STORAGE_REGION,\n    expire: FIVE_MINUTES,\n    AWSAccessKeyId: API_KEY,\n    AWSSecretAccessKey: SECRET_KEY,\n    acl: 'private',\n  },\n\n  getContentDisposition(method, directive, file, meta) {\n    let getContentDisposition = directive.contentDisposition;\n\n    if (!_.isFunction(getContentDisposition)) {\n      getContentDisposition = function () {\n        const filename = file.name && encodeURIComponent(file.name);\n\n        return (\n          directive.contentDisposition\n          || (filename\n            && `inline; filename=\"${filename}\"; filename*=utf-8''${filename}`)\n        );\n      };\n    }\n\n    return getContentDisposition.call(method, file, meta);\n  },\n\n  getMaxSize(directive, meta) {\n    // Only allow client maxSizes that are smaller than server defined maxSize\n    if (meta.maxSize && meta.maxSize <= directive.maxSize) {\n      return meta.maxSize;\n    }\n\n    return directive.maxSize || MAX_FILE_SIZE;\n  },\n\n  /**\n   *\n   * @param {{userId: String}} method\n   * @param {Directive} directive\n   * @param {FileInfo} file\n   * @param {Object} [meta]\n   *\n   * @returns {UploadInstructions}\n   */\n\n  upload(method, directive, file, meta) {\n    const maxSize = this.getMaxSize(directive, meta);\n    const policy = new Slingshot.StoragePolicy()\n      .expireIn(directive.expire)\n      .contentLength(0, Math.min(file.size, maxSize));\n\n    if (file.size > maxSize) {\n      throw new Meteor.Error(`Votre fichier ne peut pas dépasser ${maxSize\n          / ONE_KB}kb, essayez de réduire la résolution du fichier, ou de le compresser à l'aide de tinyjpg.com`);\n    }\n\n    const payload = {\n      key: _.isFunction(directive.key)\n        ? directive.key.call(method, file, meta)\n        : directive.key,\n\n      bucket: directive.bucket,\n\n      'Content-Type': file.type,\n      acl: meta.acl || directive.acl,\n\n      'Cache-Control': directive.cacheControl,\n      'Content-Disposition': this.getContentDisposition(\n        method,\n        directive,\n        file,\n        meta,\n      ),\n      'x-amz-meta-status': FILE_STATUS.UNVERIFIED,\n    };\n\n    const bucketUrl = _.isFunction(directive.bucketUrl)\n      ? directive.bucketUrl(directive.bucket, directive.region)\n      : directive.bucketUrl;\n\n    const downloadUrl = [directive.cdn || bucketUrl, payload.key]\n      .map(part => part.replace(/\\/+$/, ''))\n      .join('/');\n\n    this.applySignature(payload, policy, directive);\n\n    return {\n      upload: bucketUrl,\n      download: downloadUrl,\n      postData: [\n        {\n          name: 'key',\n          value: payload.key,\n        },\n      ].concat(_.chain(payload)\n        .omit('key')\n        .map((value, name) =>\n          !_.isUndefined(value) && {\n            name,\n            value,\n          })\n        .compact()\n        .value()),\n    };\n  },\n\n  /** Applies signature an upload payload\n   *\n   * @param {Object} payload - Data to be upload along with file\n   * @param {Slingshot.StoragePolicy} policy\n   * @param {Directive} directive\n   */\n\n  applySignature(payload, policy, directive) {\n    const now = new Date();\n\n    const today = now.getUTCFullYear()\n      + formatNumber(now.getUTCMonth() + 1, 2)\n      + formatNumber(now.getUTCDate(), 2);\n\n    const service = 's3';\n\n    _.extend(payload, {\n      'x-amz-algorithm': 'AWS4-HMAC-SHA256',\n      'x-amz-credential': [\n        directive[this.accessId],\n        today,\n        directive.region,\n        service,\n        'aws4_request',\n      ].join('/'),\n      'x-amz-date': `${today}T000000Z`,\n    });\n\n    const matchedPolicy = policy.match(payload);\n    const base64Policy = matchedPolicy.stringify();\n    const jsonPolicy = JSON.parse(matchedPolicy.stringify('utf-8'));\n\n    payload.policy = base64Policy;\n    payload['x-amz-signature'] = this.signAwsV4(\n      payload.policy,\n      directive[this.secretKey],\n      today,\n      directive.region,\n      service,\n    );\n  },\n\n  /** Generate a AWS Signature Version 4\n   *\n   * @param {String} policy - Base64 encoded policy to sign.\n   * @param {String} secretKey - AWSSecretAccessKey\n   * @param {String} date - Signature date (yyyymmdd)\n   * @param {String} region - AWS Data-Center region\n   * @param {String} service - type of service to use\n   * @returns {String} hex encoded HMAC-256 signature\n   */\n\n  signAwsV4(policy, secretKey, date, region, service) {\n    const dateKey = hmac256(`AWS4${secretKey}`, date);\n    const dateRegionKey = hmac256(dateKey, region);\n    const dateRegionServiceKey = hmac256(dateRegionKey, service);\n    const signingKey = hmac256(dateRegionServiceKey, 'aws4_request');\n\n    return hmac256(signingKey, policy, 'hex');\n  },\n};\n\nexport default exoscaleStorageService;\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/uploadDirective.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/files/server/uploadDirective.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.link(\"meteor/check\", {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet Slingshot;\nmodule.link(\"meteor/edgee:slingshot\", {\n  Slingshot(v) {\n    Slingshot = v;\n  }\n\n}, 2);\n\nlet _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 3);\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 4);\nlet OBJECT_STORAGE_PATH, BUCKET_NAME, OBJECT_STORAGE_REGION, FILE_STATUS, S3_ACLS, MAX_FILE_SIZE, ONE_KB;\nmodule.link(\"../fileConstants\", {\n  OBJECT_STORAGE_PATH(v) {\n    OBJECT_STORAGE_PATH = v;\n  },\n\n  BUCKET_NAME(v) {\n    BUCKET_NAME = v;\n  },\n\n  OBJECT_STORAGE_REGION(v) {\n    OBJECT_STORAGE_REGION = v;\n  },\n\n  FILE_STATUS(v) {\n    FILE_STATUS = v;\n  },\n\n  S3_ACLS(v) {\n    S3_ACLS = v;\n  },\n\n  MAX_FILE_SIZE(v) {\n    MAX_FILE_SIZE = v;\n  },\n\n  ONE_KB(v) {\n    ONE_KB = v;\n  }\n\n}, 5);\nconst {\n  API_KEY,\n  SECRET_KEY\n} = Meteor.settings.exoscale;\nconst FIVE_MINUTES = 5 * 60 * 1000;\n\nconst hmac256 = (key, data, encoding) => crypto.createHmac('sha256', key).update(Buffer.from(data).toString('utf-8')).digest(encoding);\n\nconst formatNumber = (num, digits) => {\n  const string = String(num);\n  return Array(digits - string.length + 1).join('0').concat(string);\n};\n\nconst exoscaleStorageService = {\n  accessId: 'AWSAccessKeyId',\n  secretKey: 'AWSSecretAccessKey',\n  directiveMatch: {\n    bucket: String,\n    bucketUrl: Match.OneOf(String, Function),\n    region: String,\n    AWSAccessKeyId: String,\n    AWSSecretAccessKey: String,\n    acl: Match.Optional(Match.Where(acl => {\n      check(acl, String);\n      return Object.values(S3_ACLS).indexOf(acl) >= 0;\n    })),\n    key: Match.OneOf(String, Function),\n    expire: Match.Where(expire => {\n      check(expire, Number);\n      return expire > 0;\n    }),\n    cacheControl: Match.Optional(String),\n    contentDisposition: Match.Optional(Match.OneOf(String, Function, null)),\n    'x-amz-meta-status': Match.Optional(String)\n  },\n  directiveDefault: {\n    bucket: BUCKET_NAME,\n    bucketUrl: OBJECT_STORAGE_PATH,\n    region: OBJECT_STORAGE_REGION,\n    expire: FIVE_MINUTES,\n    AWSAccessKeyId: API_KEY,\n    AWSSecretAccessKey: SECRET_KEY,\n    acl: 'private'\n  },\n\n  getContentDisposition(method, directive, file, meta) {\n    let getContentDisposition = directive.contentDisposition;\n\n    if (!_.isFunction(getContentDisposition)) {\n      getContentDisposition = function () {\n        const filename = file.name && encodeURIComponent(file.name);\n        return directive.contentDisposition || filename && `inline; filename=\"${filename}\"; filename*=utf-8''${filename}`;\n      };\n    }\n\n    return getContentDisposition.call(method, file, meta);\n  },\n\n  getMaxSize(directive, meta) {\n    // Only allow client maxSizes that are smaller than server defined maxSize\n    if (meta.maxSize && meta.maxSize <= directive.maxSize) {\n      return meta.maxSize;\n    }\n\n    return directive.maxSize || MAX_FILE_SIZE;\n  },\n\n  /**\n   *\n   * @param {{userId: String}} method\n   * @param {Directive} directive\n   * @param {FileInfo} file\n   * @param {Object} [meta]\n   *\n   * @returns {UploadInstructions}\n   */\n  upload(method, directive, file, meta) {\n    const maxSize = this.getMaxSize(directive, meta);\n    const policy = new Slingshot.StoragePolicy().expireIn(directive.expire).contentLength(0, Math.min(file.size, maxSize));\n\n    if (file.size > maxSize) {\n      throw new Meteor.Error(`Votre fichier ne peut pas dépasser ${maxSize / ONE_KB}kb, essayez de réduire la résolution du fichier, ou de le compresser à l'aide de tinyjpg.com`);\n    }\n\n    const payload = {\n      key: _.isFunction(directive.key) ? directive.key.call(method, file, meta) : directive.key,\n      bucket: directive.bucket,\n      'Content-Type': file.type,\n      acl: meta.acl || directive.acl,\n      'Cache-Control': directive.cacheControl,\n      'Content-Disposition': this.getContentDisposition(method, directive, file, meta),\n      'x-amz-meta-status': FILE_STATUS.UNVERIFIED\n    };\n    const bucketUrl = _.isFunction(directive.bucketUrl) ? directive.bucketUrl(directive.bucket, directive.region) : directive.bucketUrl;\n    const downloadUrl = [directive.cdn || bucketUrl, payload.key].map(part => part.replace(/\\/+$/, '')).join('/');\n    this.applySignature(payload, policy, directive);\n    return {\n      upload: bucketUrl,\n      download: downloadUrl,\n      postData: [{\n        name: 'key',\n        value: payload.key\n      }].concat(_.chain(payload).omit('key').map((value, name) => !_.isUndefined(value) && {\n        name,\n        value\n      }).compact().value())\n    };\n  },\n\n  /** Applies signature an upload payload\n   *\n   * @param {Object} payload - Data to be upload along with file\n   * @param {Slingshot.StoragePolicy} policy\n   * @param {Directive} directive\n   */\n  applySignature(payload, policy, directive) {\n    const now = new Date();\n    const today = now.getUTCFullYear() + formatNumber(now.getUTCMonth() + 1, 2) + formatNumber(now.getUTCDate(), 2);\n    const service = 's3';\n\n    _.extend(payload, {\n      'x-amz-algorithm': 'AWS4-HMAC-SHA256',\n      'x-amz-credential': [directive[this.accessId], today, directive.region, service, 'aws4_request'].join('/'),\n      'x-amz-date': `${today}T000000Z`\n    });\n\n    const matchedPolicy = policy.match(payload);\n    const base64Policy = matchedPolicy.stringify();\n    const jsonPolicy = JSON.parse(matchedPolicy.stringify('utf-8'));\n    payload.policy = base64Policy;\n    payload['x-amz-signature'] = this.signAwsV4(payload.policy, directive[this.secretKey], today, directive.region, service);\n  },\n\n  /** Generate a AWS Signature Version 4\n   *\n   * @param {String} policy - Base64 encoded policy to sign.\n   * @param {String} secretKey - AWSSecretAccessKey\n   * @param {String} date - Signature date (yyyymmdd)\n   * @param {String} region - AWS Data-Center region\n   * @param {String} service - type of service to use\n   * @returns {String} hex encoded HMAC-256 signature\n   */\n  signAwsV4(policy, secretKey, date, region, service) {\n    const dateKey = hmac256(`AWS4${secretKey}`, date);\n    const dateRegionKey = hmac256(dateKey, region);\n    const dateRegionServiceKey = hmac256(dateRegionKey, service);\n    const signingKey = hmac256(dateRegionServiceKey, 'aws4_request');\n    return hmac256(signingKey, policy, 'hex');\n  }\n\n};\nmodule.exportDefault(exoscaleStorageService);","map":{"version":3,"sources":["imports/core/api/files/server/uploadDirective.js"],"names":["SECRET_KEY","Meteor","FIVE_MINUTES","hmac256","crypto","Buffer","formatNumber","string","String","Array","digits","exoscaleStorageService","accessId","secretKey","directiveMatch","bucket","bucketUrl","Match","region","AWSAccessKeyId","AWSSecretAccessKey","acl","check","Object","key","expire","cacheControl","contentDisposition","directiveDefault","getContentDisposition","directive","_","filename","file","encodeURIComponent","getMaxSize","meta","upload","maxSize","policy","Slingshot","Math","ONE_KB","payload","FILE_STATUS","UNVERIFIED","downloadUrl","part","download","postData","name","value","applySignature","now","today","service","matchedPolicy","base64Policy","jsonPolicy","JSON","signAwsV4","dateKey","dateRegionKey","dateRegionServiceKey","signingKey"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { Slingshot } from 'meteor/edgee:slingshot';\nimport { _ } from 'meteor/underscore';\n\nimport crypto from 'crypto';\n\nimport {\n  OBJECT_STORAGE_PATH,\n  BUCKET_NAME,\n  OBJECT_STORAGE_REGION,\n  FILE_STATUS,\n  S3_ACLS,\n  MAX_FILE_SIZE,\n  ONE_KB,\n} from '../fileConstants';\n\nconst { API_KEY, SECRET_KEY } = Meteor.settings.exoscale;\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\n\nconst hmac256 = (key, data, encoding) =>\n  crypto\n    .createHmac('sha256', key)\n    .update(Buffer.from(data).toString('utf-8'))\n    .digest(encoding);\n\nconst formatNumber = (num, digits) => {\n  const string = String(num);\n  return Array(digits - string.length + 1)\n    .join('0')\n    .concat(string);\n};\n\nconst exoscaleStorageService = {\n  accessId: 'AWSAccessKeyId',\n  secretKey: 'AWSSecretAccessKey',\n\n  directiveMatch: {\n    bucket: String,\n    bucketUrl: Match.OneOf(String, Function),\n\n    region: String,\n\n    AWSAccessKeyId: String,\n    AWSSecretAccessKey: String,\n\n    acl: Match.Optional(Match.Where((acl) => {\n      check(acl, String);\n\n      return Object.values(S3_ACLS).indexOf(acl) >= 0;\n    })),\n\n    key: Match.OneOf(String, Function),\n\n    expire: Match.Where((expire) => {\n      check(expire, Number);\n\n      return expire > 0;\n    }),\n\n    cacheControl: Match.Optional(String),\n    contentDisposition: Match.Optional(Match.OneOf(String, Function, null)),\n\n    'x-amz-meta-status': Match.Optional(String),\n  },\n\n  directiveDefault: {\n    bucket: BUCKET_NAME,\n    bucketUrl: OBJECT_STORAGE_PATH,\n    region: OBJECT_STORAGE_REGION,\n    expire: FIVE_MINUTES,\n    AWSAccessKeyId: API_KEY,\n    AWSSecretAccessKey: SECRET_KEY,\n    acl: 'private',\n  },\n\n  getContentDisposition(method, directive, file, meta) {\n    let getContentDisposition = directive.contentDisposition;\n\n    if (!_.isFunction(getContentDisposition)) {\n      getContentDisposition = function () {\n        const filename = file.name && encodeURIComponent(file.name);\n\n        return (\n          directive.contentDisposition\n          || (filename\n            && `inline; filename=\"${filename}\"; filename*=utf-8''${filename}`)\n        );\n      };\n    }\n\n    return getContentDisposition.call(method, file, meta);\n  },\n\n  getMaxSize(directive, meta) {\n    // Only allow client maxSizes that are smaller than server defined maxSize\n    if (meta.maxSize && meta.maxSize <= directive.maxSize) {\n      return meta.maxSize;\n    }\n\n    return directive.maxSize || MAX_FILE_SIZE;\n  },\n\n  /**\n   *\n   * @param {{userId: String}} method\n   * @param {Directive} directive\n   * @param {FileInfo} file\n   * @param {Object} [meta]\n   *\n   * @returns {UploadInstructions}\n   */\n\n  upload(method, directive, file, meta) {\n    const maxSize = this.getMaxSize(directive, meta);\n    const policy = new Slingshot.StoragePolicy()\n      .expireIn(directive.expire)\n      .contentLength(0, Math.min(file.size, maxSize));\n\n    if (file.size > maxSize) {\n      throw new Meteor.Error(`Votre fichier ne peut pas dépasser ${maxSize\n          / ONE_KB}kb, essayez de réduire la résolution du fichier, ou de le compresser à l'aide de tinyjpg.com`);\n    }\n\n    const payload = {\n      key: _.isFunction(directive.key)\n        ? directive.key.call(method, file, meta)\n        : directive.key,\n\n      bucket: directive.bucket,\n\n      'Content-Type': file.type,\n      acl: meta.acl || directive.acl,\n\n      'Cache-Control': directive.cacheControl,\n      'Content-Disposition': this.getContentDisposition(\n        method,\n        directive,\n        file,\n        meta,\n      ),\n      'x-amz-meta-status': FILE_STATUS.UNVERIFIED,\n    };\n\n    const bucketUrl = _.isFunction(directive.bucketUrl)\n      ? directive.bucketUrl(directive.bucket, directive.region)\n      : directive.bucketUrl;\n\n    const downloadUrl = [directive.cdn || bucketUrl, payload.key]\n      .map(part => part.replace(/\\/+$/, ''))\n      .join('/');\n\n    this.applySignature(payload, policy, directive);\n\n    return {\n      upload: bucketUrl,\n      download: downloadUrl,\n      postData: [\n        {\n          name: 'key',\n          value: payload.key,\n        },\n      ].concat(_.chain(payload)\n        .omit('key')\n        .map((value, name) =>\n          !_.isUndefined(value) && {\n            name,\n            value,\n          })\n        .compact()\n        .value()),\n    };\n  },\n\n  /** Applies signature an upload payload\n   *\n   * @param {Object} payload - Data to be upload along with file\n   * @param {Slingshot.StoragePolicy} policy\n   * @param {Directive} directive\n   */\n\n  applySignature(payload, policy, directive) {\n    const now = new Date();\n\n    const today = now.getUTCFullYear()\n      + formatNumber(now.getUTCMonth() + 1, 2)\n      + formatNumber(now.getUTCDate(), 2);\n\n    const service = 's3';\n\n    _.extend(payload, {\n      'x-amz-algorithm': 'AWS4-HMAC-SHA256',\n      'x-amz-credential': [\n        directive[this.accessId],\n        today,\n        directive.region,\n        service,\n        'aws4_request',\n      ].join('/'),\n      'x-amz-date': `${today}T000000Z`,\n    });\n\n    const matchedPolicy = policy.match(payload);\n    const base64Policy = matchedPolicy.stringify();\n    const jsonPolicy = JSON.parse(matchedPolicy.stringify('utf-8'));\n\n    payload.policy = base64Policy;\n    payload['x-amz-signature'] = this.signAwsV4(\n      payload.policy,\n      directive[this.secretKey],\n      today,\n      directive.region,\n      service,\n    );\n  },\n\n  /** Generate a AWS Signature Version 4\n   *\n   * @param {String} policy - Base64 encoded policy to sign.\n   * @param {String} secretKey - AWSSecretAccessKey\n   * @param {String} date - Signature date (yyyymmdd)\n   * @param {String} region - AWS Data-Center region\n   * @param {String} service - type of service to use\n   * @returns {String} hex encoded HMAC-256 signature\n   */\n\n  signAwsV4(policy, secretKey, date, region, service) {\n    const dateKey = hmac256(`AWS4${secretKey}`, date);\n    const dateRegionKey = hmac256(dateKey, region);\n    const dateRegionServiceKey = hmac256(dateRegionKey, service);\n    const signingKey = hmac256(dateRegionServiceKey, 'aws4_request');\n\n    return hmac256(signingKey, policy, 'hex');\n  },\n};\n\nexport default exoscaleStorageService;\n"]},"sourceType":"script","hash":"ed600c505b15bd345db1f1c275995c25e6f4d86a"}

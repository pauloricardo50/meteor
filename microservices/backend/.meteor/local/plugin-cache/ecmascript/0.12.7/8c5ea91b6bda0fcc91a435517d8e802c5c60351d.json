{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/fileHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/files/fileHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/fileHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/files/fileHelpers.js"],"names":["getPercent","FILE_STATUS","documentIsRequired","required","getDocumentsToCount","documentArray","Array","Object","doc","checkDocumentStatus","documents","undefined","reduce","documentsToCount","id","documentId","allFilesAreValid","every","status","VALID","filesPercent","fileArray","checkValidity","percent","count","length","documentExists","getMissingDocumentIds","ids","filter","map"],"mappings":"AAAA;AACA,SAASA,UAAT;AACA,SAASC,WAAT;;AAEA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAIA,QAAQ,KAAK,KAApD;;AAEA,MAAMC,mBAAmB,GAAG,CAC1BC,aAAa,EAAEC,KAAK,CAACC,MAAD,CADM,EAE1BC,GAAG,EAAED,MAFqB,EAG1BE,mBAH0B,CAGN,EAAE,OAHI,CAI3B,EAAEH,KAAK,CAACC,MAAD,CAJoB,IAIR;AAClB,MAAI,CAACC,GAAD,IAAQ,CAACA,GAAG,CAACE,SAAjB,EAA4B;AAC1B,WAAO,CAACC,SAAD,CAAP;AACD;;AACD,QAAM;AAAED,IAAAA;AAAF,MAAgBF,GAAtB;AAEA,SAAOH,aAAa,CAACO,MAAd,CACL,CAACC,gBAAD,EAAmB;AAAEV,IAAAA,QAAF;AAAYW,IAAAA,EAAE,EAAEC;AAAhB,GAAnB,KAAoD;AAClD,QAAI,CAACb,kBAAkB,CAACC,QAAD,CAAvB,EAAmC;AACjC;AACA,aAAOU,gBAAP;AACD;;AAED,QAAI,CAACH,SAAS,CAACK,UAAD,CAAd,EAA4B;AAC1B;AACA,aAAO,CAAC,GAAGF,gBAAJ,EAAsBF,SAAtB,CAAP;AACD;;AAED,QAAIF,mBAAJ,EAAyB;AACvB;AACA,YAAMO,gBAAgB,GAAGN,SAAS,CAACK,UAAD,CAAT,CAAsBE,KAAtB,CAA4B,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgBA,MAAM,KAAKjB,WAAW,CAACkB,KAAnE,CAAzB;AACA,aAAO,CAAC,GAAGN,gBAAJ,EAAsBG,gBAAgB,GAAG,IAAH,GAAUL,SAAhD,CAAP;AACD;;AAED,WAAO,CAAC,GAAGE,gBAAJ,EAAsBH,SAAS,CAACK,UAAD,CAA/B,CAAP;AACD,GAnBI,EAoBL,EApBK,CAAP;AAsBD,CAhCD;AAkCA;;;;;;;;;;;;;AAWA,OAAO,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAab,EAAAA,GAAb;AAAkBc,EAAAA;AAAlB,CAAD,KAAuC;AACjE,QAAMT,gBAAgB,GAAGT,mBAAmB,CAACiB,SAAD,EAAYb,GAAZ,EAAiBc,aAAjB,CAA5C;AACA,SAAO;AACLC,IAAAA,OAAO,EAAEvB,UAAU,CAACa,gBAAD,CADd;AAELW,IAAAA,KAAK,EAAEX,gBAAgB,CAACY;AAFnB,GAAP;AAID,CANM;;AAQP,MAAMC,cAAc,GAAG,CAAClB,GAAD,EAAMM,EAAN,KACrBN,GAAG,IAAIA,GAAG,CAACE,SAAX,IAAwBF,GAAG,CAACE,SAAJ,CAAcI,EAAd,CAAxB,IAA6CN,GAAG,CAACE,SAAJ,CAAcI,EAAd,EAAkBW,MAAlB,GAA2B,CAD1E;;AAGA,OAAO,MAAME,qBAAqB,GAAG,CAAC;AAAEN,EAAAA,SAAF;AAAab,EAAAA;AAAb,CAAD,KAAwB;AAC3D,QAAMoB,GAAG,GAAGP,SAAS,CAClBQ,MADS,CACF,CAAC;AAAE1B,IAAAA,QAAF;AAAYW,IAAAA;AAAZ,GAAD,KACNZ,kBAAkB,CAACC,QAAD,CAAlB,IAAgC,CAACuB,cAAc,CAAClB,GAAD,EAAMM,EAAN,CAFvC,EAGTgB,GAHS,CAGL,CAAC;AAAEhB,IAAAA;AAAF,GAAD,KAAYA,EAHP,CAAZ;AAIA,SAAOc,GAAP;AACD,CANM","sourcesContent":["// @flow\nimport { getPercent } from '../../utils/general';\nimport { FILE_STATUS } from './fileConstants';\n\nconst documentIsRequired = required => required !== false;\n\nconst getDocumentsToCount = (\n  documentArray: Array<Object>,\n  doc: Object,\n  checkDocumentStatus?: boolean,\n): Array<Object> => {\n  if (!doc || !doc.documents) {\n    return [undefined];\n  }\n  const { documents } = doc;\n\n  return documentArray.reduce(\n    (documentsToCount, { required, id: documentId }) => {\n      if (!documentIsRequired(required)) {\n        // Don't count this document\n        return documentsToCount;\n      }\n\n      if (!documents[documentId]) {\n        // No document has been added yet, count this one, and as todo\n        return [...documentsToCount, undefined];\n      }\n\n      if (checkDocumentStatus) {\n        // Make sure all documents have a valid status\n        const allFilesAreValid = documents[documentId].every(({ status }) => status === FILE_STATUS.VALID);\n        return [...documentsToCount, allFilesAreValid ? true : undefined];\n      }\n\n      return [...documentsToCount, documents[documentId]];\n    },\n    [],\n  );\n};\n\n/**\n * filesPercent - Determines the completion rate of file upload for a given\n * step, doc and array of files\n *\n * @param {object} doc           The mongoDB document where files are saved\n * @param {function} fileArray   Array of files\n\n *\n * @return {number} a value between 0 and 1 indicating the percentage of\n * completion, 1 is complete, 0 is not started\n */\nexport const filesPercent = ({ fileArray, doc, checkValidity }) => {\n  const documentsToCount = getDocumentsToCount(fileArray, doc, checkValidity);\n  return {\n    percent: getPercent(documentsToCount),\n    count: documentsToCount.length,\n  };\n};\n\nconst documentExists = (doc, id) =>\n  doc && doc.documents && doc.documents[id] && doc.documents[id].length > 0;\n\nexport const getMissingDocumentIds = ({ fileArray, doc }) => {\n  const ids = fileArray\n    .filter(({ required, id }) =>\n      documentIsRequired(required) && !documentExists(doc, id))\n    .map(({ id }) => id);\n  return ids;\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/fileHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/files/fileHelpers.js"}},"code":"module.export({\n  filesPercent: () => filesPercent,\n  getMissingDocumentIds: () => getMissingDocumentIds\n});\nlet getPercent;\nmodule.link(\"../../utils/general\", {\n  getPercent(v) {\n    getPercent = v;\n  }\n\n}, 0);\nlet FILE_STATUS;\nmodule.link(\"./fileConstants\", {\n  FILE_STATUS(v) {\n    FILE_STATUS = v;\n  }\n\n}, 1);\n\nconst documentIsRequired = required => required !== false;\n\nconst getDocumentsToCount = (documentArray, doc, checkDocumentStatus) => {\n  if (!doc || !doc.documents) {\n    return [undefined];\n  }\n\n  const {\n    documents\n  } = doc;\n  return documentArray.reduce((documentsToCount, {\n    required,\n    id: documentId\n  }) => {\n    if (!documentIsRequired(required)) {\n      // Don't count this document\n      return documentsToCount;\n    }\n\n    if (!documents[documentId]) {\n      // No document has been added yet, count this one, and as todo\n      return [...documentsToCount, undefined];\n    }\n\n    if (checkDocumentStatus) {\n      // Make sure all documents have a valid status\n      const allFilesAreValid = documents[documentId].every(({\n        status\n      }) => status === FILE_STATUS.VALID);\n      return [...documentsToCount, allFilesAreValid ? true : undefined];\n    }\n\n    return [...documentsToCount, documents[documentId]];\n  }, []);\n};\n/**\n * filesPercent - Determines the completion rate of file upload for a given\n * step, doc and array of files\n *\n * @param {object} doc           The mongoDB document where files are saved\n * @param {function} fileArray   Array of files\n\n *\n * @return {number} a value between 0 and 1 indicating the percentage of\n * completion, 1 is complete, 0 is not started\n */\n\n\nconst filesPercent = ({\n  fileArray,\n  doc,\n  checkValidity\n}) => {\n  const documentsToCount = getDocumentsToCount(fileArray, doc, checkValidity);\n  return {\n    percent: getPercent(documentsToCount),\n    count: documentsToCount.length\n  };\n};\n\nconst documentExists = (doc, id) => doc && doc.documents && doc.documents[id] && doc.documents[id].length > 0;\n\nconst getMissingDocumentIds = ({\n  fileArray,\n  doc\n}) => {\n  const ids = fileArray.filter(({\n    required,\n    id\n  }) => documentIsRequired(required) && !documentExists(doc, id)).map(({\n    id\n  }) => id);\n  return ids;\n};","map":{"version":3,"sources":["imports/core/api/files/fileHelpers.js"],"names":["documentIsRequired","required","getDocumentsToCount","doc","documents","id","documentId","allFilesAreValid","status","FILE_STATUS","filesPercent","checkValidity","documentsToCount","percent","getPercent","count","length","documentExists","getMissingDocumentIds","ids"],"mappings":"AAAA,MAAA,CAAA,MAAA,CAAA;AAAA,EAAA,YAAA,EAAA,MAAA,YAAA;AAAA,EAAA,qBAAA,EAAA,MAAA;AAAA,CAAA;AAAA,IAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,qBAAA,EAAA;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,WAAA;AAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,EAAA;AAAA,EAAA,WAAA,CAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;;AAIA,MAAMA,kBAAkB,GAAGC,QAAQ,IAAIA,QAAQ,KAA/C,KAAA;;AAEA,MAAMC,mBAAmB,GAAG,CAAA,aAAA,EAAA,GAAA,EAAA,mBAAA,KAIR;AAClB,MAAI,CAAA,GAAA,IAAQ,CAACC,GAAG,CAAhB,SAAA,EAA4B;AAC1B,WAAO,CAAP,SAAO,CAAP;AACD;;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAN,GAAA;AAEA,SAAO,aAAa,CAAb,MAAA,CACL,CAAA,gBAAA,EAAmB;AAAA,IAAA,QAAA;AAAYC,IAAAA,EAAE,EAAEC;AAAhB,GAAnB,KAAoD;AAClD,QAAI,CAACN,kBAAkB,CAAvB,QAAuB,CAAvB,EAAmC;AACjC;AACA,aAAA,gBAAA;AACD;;AAED,QAAI,CAACI,SAAS,CAAd,UAAc,CAAd,EAA4B;AAC1B;AACA,aAAO,CAAC,GAAD,gBAAA,EAAP,SAAO,CAAP;AACD;;AAED,QAAA,mBAAA,EAAyB;AACvB;AACA,YAAMG,gBAAgB,GAAGH,SAAS,CAATA,UAAS,CAATA,CAAAA,KAAAA,CAA4B,CAAC;AAAEI,QAAAA;AAAF,OAAD,KAAgBA,MAAM,KAAKC,WAAW,CAA3F,KAAyBL,CAAzB;AACA,aAAO,CAAC,GAAD,gBAAA,EAAsBG,gBAAgB,GAAA,IAAA,GAA7C,SAAO,CAAP;AACD;;AAED,WAAO,CAAC,GAAD,gBAAA,EAAsBH,SAAS,CAAtC,UAAsC,CAA/B,CAAP;AAlBG,GAAA,EAAP,EAAO,CAAP;AAVF,CAAA;AAkCA;;;;;;;;;;;;;AAWO,MAAMM,YAAY,GAAG,CAAC;AAAA,EAAA,SAAA;AAAA,EAAA,GAAA;AAAkBC,EAAAA;AAAlB,CAAD,KAAuC;AACjE,QAAMC,gBAAgB,GAAGV,mBAAmB,CAAA,SAAA,EAAA,GAAA,EAA5C,aAA4C,CAA5C;AACA,SAAO;AACLW,IAAAA,OAAO,EAAEC,UAAU,CADd,gBACc,CADd;AAELC,IAAAA,KAAK,EAAEH,gBAAgB,CAACI;AAFnB,GAAP;AAFK,CAAA;;AAQP,MAAMC,cAAc,GAAG,CAAA,GAAA,EAAA,EAAA,KACrBd,GAAG,IAAIA,GAAG,CAAVA,SAAAA,IAAwBA,GAAG,CAAHA,SAAAA,CAAxBA,EAAwBA,CAAxBA,IAA6CA,GAAG,CAAHA,SAAAA,CAAAA,EAAAA,EAAAA,MAAAA,GAD/C,CAAA;;AAGO,MAAMe,qBAAqB,GAAG,CAAC;AAAA,EAAA,SAAA;AAAaf,EAAAA;AAAb,CAAD,KAAwB;AAC3D,QAAMgB,GAAG,GAAG,SAAS,CAAT,MAAA,CACF,CAAC;AAAA,IAAA,QAAA;AAAYd,IAAAA;AAAZ,GAAD,KACNL,kBAAkB,CAAlBA,QAAkB,CAAlBA,IAAgC,CAACiB,cAAc,CAAA,GAAA,EAFvC,EAEuC,CAFvC,EAAA,GAAA,CAGL,CAAC;AAAEZ,IAAAA;AAAF,GAAD,KAHP,EAAY,CAAZ;AAIA,SAAA,GAAA;AALK,CAAA","sourcesContent":["// @flow\nimport { getPercent } from '../../utils/general';\nimport { FILE_STATUS } from './fileConstants';\n\nconst documentIsRequired = required => required !== false;\n\nconst getDocumentsToCount = (\n  documentArray: Array<Object>,\n  doc: Object,\n  checkDocumentStatus?: boolean,\n): Array<Object> => {\n  if (!doc || !doc.documents) {\n    return [undefined];\n  }\n  const { documents } = doc;\n\n  return documentArray.reduce(\n    (documentsToCount, { required, id: documentId }) => {\n      if (!documentIsRequired(required)) {\n        // Don't count this document\n        return documentsToCount;\n      }\n\n      if (!documents[documentId]) {\n        // No document has been added yet, count this one, and as todo\n        return [...documentsToCount, undefined];\n      }\n\n      if (checkDocumentStatus) {\n        // Make sure all documents have a valid status\n        const allFilesAreValid = documents[documentId].every(({ status }) => status === FILE_STATUS.VALID);\n        return [...documentsToCount, allFilesAreValid ? true : undefined];\n      }\n\n      return [...documentsToCount, documents[documentId]];\n    },\n    [],\n  );\n};\n\n/**\n * filesPercent - Determines the completion rate of file upload for a given\n * step, doc and array of files\n *\n * @param {object} doc           The mongoDB document where files are saved\n * @param {function} fileArray   Array of files\n\n *\n * @return {number} a value between 0 and 1 indicating the percentage of\n * completion, 1 is complete, 0 is not started\n */\nexport const filesPercent = ({ fileArray, doc, checkValidity }) => {\n  const documentsToCount = getDocumentsToCount(fileArray, doc, checkValidity);\n  return {\n    percent: getPercent(documentsToCount),\n    count: documentsToCount.length,\n  };\n};\n\nconst documentExists = (doc, id) =>\n  doc && doc.documents && doc.documents[id] && doc.documents[id].length > 0;\n\nexport const getMissingDocumentIds = ({ fileArray, doc }) => {\n  const ids = fileArray\n    .filter(({ required, id }) =>\n      documentIsRequired(required) && !documentExists(doc, id))\n    .map(({ id }) => id);\n  return ids;\n};\n"]},"sourceType":"script","hash":"8c5ea91b6bda0fcc91a435517d8e802c5c60351d"}

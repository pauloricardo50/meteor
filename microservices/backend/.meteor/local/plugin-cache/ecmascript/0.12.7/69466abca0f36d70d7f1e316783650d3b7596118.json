{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/borrowers/server/BorrowerService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/borrowers/server/BorrowerService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/borrowers/server/BorrowerService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/borrowers/server/BorrowerService.js"],"names":["Borrowers","LoanService","CollectionService","loanBorrower","BorrowerService","constructor","borrowerId","object","update","$set","borrower","userId","insert","loanId","cleanupRemovedBorrower","get","loans","length","loansLink","getLink","remove","$push","$pop","$pull","fetchOne","$filters","_id","getReusableBorrowers","borrowers","isLastLoan","userBorrowers","fetch","name","loan","borrowersNotOnLoan","filter","borrowerIds","includes","cleanUpMortgageNotes","mortgageNotes","structures","borrowerMortgageNoteIds","map","forEach","id","structureId","mortgageNoteIds","updateStructure","structure"],"mappings":";;AAAA,OAAOA,SAAP;AACA,OAAOC,WAAP;AACA,OAAOC,iBAAP;AACA,SAASC,YAAT;AAEA,OAAO,MAAMC,eAAN,SAA8BF,iBAA9B,CAAgD;AACrDG,EAAAA,WAAW,GAAG;AACZ,UAAML,SAAN;;AADY,oCAQL,CAAC;AAAEM,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAD,KACPP,SAAS,CAACQ,MAAV,CAAiBF,UAAjB,EAA6B;AAAEG,MAAAA,IAAI,EAAEF;AAAR,KAA7B,CATY;;AAAA,oCAWL,CAAC;AAAEG,MAAAA,QAAQ,GAAG,EAAb;AAAiBC,MAAAA;AAAjB,KAAD,KACPX,SAAS,CAACY,MAAV,CAAiB,EAAE,GAAGF,QAAL;AAAeC,MAAAA;AAAf,KAAjB,CAZY;;AAAA,oCAcL,CAAC;AAAEL,MAAAA,UAAF;AAAcO,MAAAA;AAAd,KAAD,KAA4B;AACnCZ,MAAAA,WAAW,CAACa,sBAAZ,CAAmC;AAAER,QAAAA;AAAF,OAAnC;AACA,YAAMI,QAAQ,GAAG,KAAKK,GAAL,CAAST,UAAT,CAAjB;;AACA,UAAII,QAAQ,CAACM,KAAT,IAAkBN,QAAQ,CAACM,KAAT,CAAeC,MAAf,GAAwB,CAA9C,EAAiD;AAC/C,cAAMC,SAAS,GAAG,KAAKC,OAAL,CAAab,UAAb,EAAyB,OAAzB,CAAlB;;AACA,YAAIO,MAAJ,EAAY;AACV;AACA;AACAK,UAAAA,SAAS,CAACE,MAAV,CAAiBP,MAAjB;AACD,SAJD,MAIO;AACL;AACA,iBAAOb,SAAS,CAACoB,MAAV,CAAiBd,UAAjB,CAAP;AACD;AACF,OAVD,MAUO;AACL,eAAON,SAAS,CAACoB,MAAV,CAAiBd,UAAjB,CAAP;AACD;AACF,KA9Ba;;AAAA,uCAgCF,CAAC;AAAEA,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAD,KACVP,SAAS,CAACQ,MAAV,CAAiBF,UAAjB,EAA6B;AAAEe,MAAAA,KAAK,EAAEd;AAAT,KAA7B,CAjCY;;AAAA,sCAmCH,CAAC;AAAED,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAD,KACTP,SAAS,CAACQ,MAAV,CAAiBF,UAAjB,EAA6B;AAAEgB,MAAAA,IAAI,EAAEf;AAAR,KAA7B,CApCY;;AAAA,uCAsCF,CAAC;AAAED,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAD,KACVP,SAAS,CAACQ,MAAV,CAAiBF,UAAjB,EAA6B;AAAEiB,MAAAA,KAAK,EAAEhB;AAAT,KAA7B,CAvCY;AAEb;;AAEDQ,EAAAA,GAAG,CAACT,UAAD,EAAa;AACd,WAAO,KAAKkB,QAAL,CAAc;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEpB;AAAP,OAAZ;AAAiC,SAAGH,YAAY;AAAhD,KAAd,CAAP;AACD;;AAmCDwB,EAAAA,oBAAoB,CAAC;AAAEd,IAAAA,MAAF;AAAUP,IAAAA;AAAV,GAAD,EAAyB;AAC3C;AACA;AACA,UAAM;AAAEK,MAAAA,MAAF;AAAUK,MAAAA;AAAV,QAAoB,KAAKD,GAAL,CAAST,UAAT,KAAwB,EAAlD;;AACA,QAAI,CAACK,MAAL,EAAa;AACX,aAAO;AAAEiB,QAAAA,SAAS,EAAE,EAAb;AAAiBC,QAAAA,UAAU,EAAE;AAA7B,OAAP;AACD;;AAED,UAAMC,aAAa,GAAG,KAAKC,KAAL,CAAW;AAC/BN,MAAAA,QAAQ,EAAE;AAAEd,QAAAA;AAAF,OADqB;AAE/BqB,MAAAA,IAAI,EAAE,CAFyB;AAG/BhB,MAAAA,KAAK,EAAE;AAAEgB,QAAAA,IAAI,EAAE;AAAR;AAHwB,KAAX,CAAtB;AAKA,UAAMC,IAAI,GAAGhC,WAAW,CAACc,GAAZ,CAAgBF,MAAhB,CAAb;AACA,UAAMgB,UAAU,GAAGb,KAAK,IAAIA,KAAK,CAACC,MAAN,KAAiB,CAA1B,IAA+BD,KAAK,CAAC,CAAD,CAAL,CAASU,GAAT,KAAiBb,MAAnE;AAEA,UAAMqB,kBAAkB,GAAGJ,aAAa,CAACK,MAAd,CAAqB,CAAC;AAAET,MAAAA;AAAF,KAAD,KAAa,CAACO,IAAI,CAACG,WAAL,CAAiBC,QAAjB,CAA0BX,GAA1B,CAAnC,CAA3B;AAEA,WAAO;AAAEE,MAAAA,SAAS,EAAEM,kBAAb;AAAiCL,MAAAA;AAAjC,KAAP;AACD;;AAEDS,EAAAA,oBAAoB,CAAC;AAAEhC,IAAAA;AAAF,GAAD,EAAiB;AACnC,UAAM;AAAEiC,MAAAA,aAAa,GAAG,EAAlB;AAAsBvB,MAAAA,KAAK,GAAG;AAA9B,QAAqC,KAAKQ,QAAL,CAAc;AACvDC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEpB;AAAP,OAD6C;AAEvDiC,MAAAA,aAAa,EAAE;AAAEb,QAAAA,GAAG,EAAE;AAAP,OAFwC;AAGvDV,MAAAA,KAAK,EAAE;AAAEwB,QAAAA,UAAU,EAAE;AAAd;AAHgD,KAAd,CAA3C;AAKA,UAAMC,uBAAuB,GAAGF,aAAa,CAACG,GAAd,CAAkB,CAAC;AAAEhB,MAAAA;AAAF,KAAD,KAAaA,GAA/B,CAAhC;AAEAV,IAAAA,KAAK,CAAC2B,OAAN,CAAc,CAAC;AAAEjB,MAAAA,GAAG,EAAEb,MAAP;AAAe2B,MAAAA,UAAU,GAAG;AAA5B,KAAD,KAAsC;AAClDA,MAAAA,UAAU,CAACG,OAAX,CAAmB,CAAC;AAAEC,QAAAA,EAAE,EAAEC,WAAN;AAAmBC,QAAAA,eAAe,GAAG;AAArC,OAAD,KAA+C;AAChE7C,QAAAA,WAAW,CAAC8C,eAAZ,CAA4B;AAC1BlC,UAAAA,MAD0B;AAE1BgC,UAAAA,WAF0B;AAG1BG,UAAAA,SAAS,EAAE;AACTF,YAAAA,eAAe,EAAEA,eAAe,CAACX,MAAhB,CAAuBS,EAAE,IAAI,CAACH,uBAAuB,CAACJ,QAAxB,CAAiCO,EAAjC,CAA9B;AADR;AAHe,SAA5B;AAOD,OARD;AASD,KAVD;AAWD;;AAlFoD;AAqFvD,eAAe,IAAIxC,eAAJ,EAAf","sourcesContent":["import Borrowers from '../borrowers';\nimport LoanService from '../../loans/server/LoanService';\nimport CollectionService from '../../helpers/CollectionService';\nimport { loanBorrower } from '../../fragments';\n\nexport class BorrowerService extends CollectionService {\n  constructor() {\n    super(Borrowers);\n  }\n\n  get(borrowerId) {\n    return this.fetchOne({ $filters: { _id: borrowerId }, ...loanBorrower() });\n  }\n\n  update = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $set: object });\n\n  insert = ({ borrower = {}, userId }) =>\n    Borrowers.insert({ ...borrower, userId });\n\n  remove = ({ borrowerId, loanId }) => {\n    LoanService.cleanupRemovedBorrower({ borrowerId });\n    const borrower = this.get(borrowerId);\n    if (borrower.loans && borrower.loans.length > 1) {\n      const loansLink = this.getLink(borrowerId, 'loans');\n      if (loanId) {\n        // Fix this conditional when the issue has been dealt with\n        // https://github.com/cult-of-coders/grapher/issues/332\n        loansLink.remove(loanId);\n      } else {\n        // Only admins can remove a borrower that has multiple loans\n        return Borrowers.remove(borrowerId);\n      }\n    } else {\n      return Borrowers.remove(borrowerId);\n    }\n  };\n\n  pushValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $push: object });\n\n  popValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $pop: object });\n\n  pullValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $pull: object });\n\n  getReusableBorrowers({ loanId, borrowerId }) {\n    // borrowerId can be the previous removed borrower, and therefore\n    // this line will fail if we don't provide a default empty object\n    const { userId, loans } = this.get(borrowerId) || {};\n    if (!userId) {\n      return { borrowers: [], isLastLoan: true };\n    }\n\n    const userBorrowers = this.fetch({\n      $filters: { userId },\n      name: 1,\n      loans: { name: 1 },\n    });\n    const loan = LoanService.get(loanId);\n    const isLastLoan = loans && loans.length === 1 && loans[0]._id === loanId;\n\n    const borrowersNotOnLoan = userBorrowers.filter(({ _id }) => !loan.borrowerIds.includes(_id));\n\n    return { borrowers: borrowersNotOnLoan, isLastLoan };\n  }\n\n  cleanUpMortgageNotes({ borrowerId }) {\n    const { mortgageNotes = [], loans = [] } = this.fetchOne({\n      $filters: { _id: borrowerId },\n      mortgageNotes: { _id: 1 },\n      loans: { structures: 1 },\n    });\n    const borrowerMortgageNoteIds = mortgageNotes.map(({ _id }) => _id);\n\n    loans.forEach(({ _id: loanId, structures = [] }) => {\n      structures.forEach(({ id: structureId, mortgageNoteIds = [] }) => {\n        LoanService.updateStructure({\n          loanId,\n          structureId,\n          structure: {\n            mortgageNoteIds: mortgageNoteIds.filter(id => !borrowerMortgageNoteIds.includes(id)),\n          },\n        });\n      });\n    });\n  }\n}\n\nexport default new BorrowerService();\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/borrowers/server/BorrowerService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/borrowers/server/BorrowerService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  BorrowerService: () => BorrowerService\n});\nlet Borrowers;\nmodule.link(\"../borrowers\", {\n  default(v) {\n    Borrowers = v;\n  }\n\n}, 0);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 1);\nlet CollectionService;\nmodule.link(\"../../helpers/CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 2);\nlet loanBorrower;\nmodule.link(\"../../fragments\", {\n  loanBorrower(v) {\n    loanBorrower = v;\n  }\n\n}, 3);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass BorrowerService extends CollectionService {\n  constructor() {\n    super(Borrowers);\n\n    _defineProperty(this, \"update\", ({\n      borrowerId,\n      object\n    }) => Borrowers.update(borrowerId, {\n      $set: object\n    }));\n\n    _defineProperty(this, \"insert\", ({\n      borrower = {},\n      userId\n    }) => Borrowers.insert((0, _objectSpread2.default)({}, borrower, {\n      userId\n    })));\n\n    _defineProperty(this, \"remove\", ({\n      borrowerId,\n      loanId\n    }) => {\n      LoanService.cleanupRemovedBorrower({\n        borrowerId\n      });\n      const borrower = this.get(borrowerId);\n\n      if (borrower.loans && borrower.loans.length > 1) {\n        const loansLink = this.getLink(borrowerId, 'loans');\n\n        if (loanId) {\n          // Fix this conditional when the issue has been dealt with\n          // https://github.com/cult-of-coders/grapher/issues/332\n          loansLink.remove(loanId);\n        } else {\n          // Only admins can remove a borrower that has multiple loans\n          return Borrowers.remove(borrowerId);\n        }\n      } else {\n        return Borrowers.remove(borrowerId);\n      }\n    });\n\n    _defineProperty(this, \"pushValue\", ({\n      borrowerId,\n      object\n    }) => Borrowers.update(borrowerId, {\n      $push: object\n    }));\n\n    _defineProperty(this, \"popValue\", ({\n      borrowerId,\n      object\n    }) => Borrowers.update(borrowerId, {\n      $pop: object\n    }));\n\n    _defineProperty(this, \"pullValue\", ({\n      borrowerId,\n      object\n    }) => Borrowers.update(borrowerId, {\n      $pull: object\n    }));\n  }\n\n  get(borrowerId) {\n    return this.fetchOne((0, _objectSpread2.default)({\n      $filters: {\n        _id: borrowerId\n      }\n    }, loanBorrower()));\n  }\n\n  getReusableBorrowers({\n    loanId,\n    borrowerId\n  }) {\n    // borrowerId can be the previous removed borrower, and therefore\n    // this line will fail if we don't provide a default empty object\n    const {\n      userId,\n      loans\n    } = this.get(borrowerId) || {};\n\n    if (!userId) {\n      return {\n        borrowers: [],\n        isLastLoan: true\n      };\n    }\n\n    const userBorrowers = this.fetch({\n      $filters: {\n        userId\n      },\n      name: 1,\n      loans: {\n        name: 1\n      }\n    });\n    const loan = LoanService.get(loanId);\n    const isLastLoan = loans && loans.length === 1 && loans[0]._id === loanId;\n    const borrowersNotOnLoan = userBorrowers.filter(({\n      _id\n    }) => !loan.borrowerIds.includes(_id));\n    return {\n      borrowers: borrowersNotOnLoan,\n      isLastLoan\n    };\n  }\n\n  cleanUpMortgageNotes({\n    borrowerId\n  }) {\n    const {\n      mortgageNotes = [],\n      loans = []\n    } = this.fetchOne({\n      $filters: {\n        _id: borrowerId\n      },\n      mortgageNotes: {\n        _id: 1\n      },\n      loans: {\n        structures: 1\n      }\n    });\n    const borrowerMortgageNoteIds = mortgageNotes.map(({\n      _id\n    }) => _id);\n    loans.forEach(({\n      _id: loanId,\n      structures = []\n    }) => {\n      structures.forEach(({\n        id: structureId,\n        mortgageNoteIds = []\n      }) => {\n        LoanService.updateStructure({\n          loanId,\n          structureId,\n          structure: {\n            mortgageNoteIds: mortgageNoteIds.filter(id => !borrowerMortgageNoteIds.includes(id))\n          }\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exportDefault(new BorrowerService());","map":{"version":3,"sources":["imports/core/api/borrowers/server/BorrowerService.js"],"names":["constructor","get","$filters","_id","borrowerId","loanBorrower","object","$set","borrower","userId","loanId","LoanService","loansLink","Borrowers","$push","$pop","$pull","getReusableBorrowers","loans","borrowers","isLastLoan","userBorrowers","name","loan","borrowersNotOnLoan","cleanUpMortgageNotes","mortgageNotes","structures","borrowerMortgageNoteIds","id","mortgageNoteIds","structure"],"mappings":"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","sourcesContent":["import Borrowers from '../borrowers';\nimport LoanService from '../../loans/server/LoanService';\nimport CollectionService from '../../helpers/CollectionService';\nimport { loanBorrower } from '../../fragments';\n\nexport class BorrowerService extends CollectionService {\n  constructor() {\n    super(Borrowers);\n  }\n\n  get(borrowerId) {\n    return this.fetchOne({ $filters: { _id: borrowerId }, ...loanBorrower() });\n  }\n\n  update = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $set: object });\n\n  insert = ({ borrower = {}, userId }) =>\n    Borrowers.insert({ ...borrower, userId });\n\n  remove = ({ borrowerId, loanId }) => {\n    LoanService.cleanupRemovedBorrower({ borrowerId });\n    const borrower = this.get(borrowerId);\n    if (borrower.loans && borrower.loans.length > 1) {\n      const loansLink = this.getLink(borrowerId, 'loans');\n      if (loanId) {\n        // Fix this conditional when the issue has been dealt with\n        // https://github.com/cult-of-coders/grapher/issues/332\n        loansLink.remove(loanId);\n      } else {\n        // Only admins can remove a borrower that has multiple loans\n        return Borrowers.remove(borrowerId);\n      }\n    } else {\n      return Borrowers.remove(borrowerId);\n    }\n  };\n\n  pushValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $push: object });\n\n  popValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $pop: object });\n\n  pullValue = ({ borrowerId, object }) =>\n    Borrowers.update(borrowerId, { $pull: object });\n\n  getReusableBorrowers({ loanId, borrowerId }) {\n    // borrowerId can be the previous removed borrower, and therefore\n    // this line will fail if we don't provide a default empty object\n    const { userId, loans } = this.get(borrowerId) || {};\n    if (!userId) {\n      return { borrowers: [], isLastLoan: true };\n    }\n\n    const userBorrowers = this.fetch({\n      $filters: { userId },\n      name: 1,\n      loans: { name: 1 },\n    });\n    const loan = LoanService.get(loanId);\n    const isLastLoan = loans && loans.length === 1 && loans[0]._id === loanId;\n\n    const borrowersNotOnLoan = userBorrowers.filter(({ _id }) => !loan.borrowerIds.includes(_id));\n\n    return { borrowers: borrowersNotOnLoan, isLastLoan };\n  }\n\n  cleanUpMortgageNotes({ borrowerId }) {\n    const { mortgageNotes = [], loans = [] } = this.fetchOne({\n      $filters: { _id: borrowerId },\n      mortgageNotes: { _id: 1 },\n      loans: { structures: 1 },\n    });\n    const borrowerMortgageNoteIds = mortgageNotes.map(({ _id }) => _id);\n\n    loans.forEach(({ _id: loanId, structures = [] }) => {\n      structures.forEach(({ id: structureId, mortgageNoteIds = [] }) => {\n        LoanService.updateStructure({\n          loanId,\n          structureId,\n          structure: {\n            mortgageNoteIds: mortgageNoteIds.filter(id => !borrowerMortgageNoteIds.includes(id)),\n          },\n        });\n      });\n    });\n  }\n}\n\nexport default new BorrowerService();\n"]},"sourceType":"script","hash":"69466abca0f36d70d7f1e316783650d3b7596118"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/PdfTable/PdfTableRow.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/pdf/server/pdfComponents/PdfTable/PdfTableRow.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/PdfTable/PdfTableRow.jsx","inputSourceMap":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/PdfTable/PdfTableRow.jsx"],"names":["React","cx","classes","ROW_TYPES","PdfTableRowProps","rowData","Object","index","Number","columnOptions","Array","multiColumn","data","style","map","x","className","columnStyle","singleColumn","PdfTableRow","label","labelStyle","tooltip","colspan","type","REGULAR","columnClassName","symbol","isArray","slice"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport cx from 'classnames';\nimport { classes, ROW_TYPES } from './PdfTable';\n\ntype PdfTableRowProps = {\n  rowData: Object,\n  index: Number,\n  columnOptions: Array,\n};\n\nconst multiColumn = (data, style, columnOptions = []) =>\n  data.map((x, index) => {\n    const { className = '', style: columnStyle = {} } = columnOptions[index] || {};\n    return (\n      <td\n        className={className}\n        style={{ ...columnStyle, ...style }}\n        key={index}\n      >\n        {x}\n      </td>\n    );\n  });\n\nconst singleColumn = (\n  data,\n  style,\n  { className = '', style: columnStyle = {} } = {},\n) => (\n  <td style={{ ...columnStyle, ...style }} className={className}>\n    {data}\n  </td>\n);\n\nconst PdfTableRow = ({\n  rowData: {\n    label,\n    labelStyle = {},\n    tooltip,\n    data,\n    style,\n    colspan = 1,\n    type = ROW_TYPES.REGULAR,\n    className,\n  },\n  index,\n  columnOptions = [],\n}: PdfTableRowProps) => {\n  if (colspan > 1) {\n    const { className: columnClassName = '', style: columnStyle = {} } = columnOptions[0] || {};\n    return (\n      <tr key={index} className={cx(classes[type], className)}>\n        {label && (\n          <td\n            className={columnClassName}\n            colSpan={colspan}\n            style={{ ...columnStyle, ...labelStyle }}\n          >\n            {label}\n          </td>\n        )}\n      </tr>\n    );\n  }\n\n  const { className: columnClassName = '', style: columnStyle = {} } = columnOptions[0] || {};\n\n  return (\n    <tr key={index} className={cx(classes[type], className)}>\n      {label && (\n        <td style={columnStyle} className={columnClassName}>\n          {label}\n          {tooltip && <sup> {tooltip.symbol}</sup>}\n        </td>\n      )}\n      {Array.isArray(data)\n        ? multiColumn(data, style, columnOptions.slice(1))\n        : singleColumn(data, style, columnOptions[1])}\n    </tr>\n  );\n};\n\nexport default PdfTableRow;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/PdfTable/PdfTableRow.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/pdf/server/pdfComponents/PdfTable/PdfTableRow.jsx"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet cx;\nmodule.link(\"classnames\", {\n  default(v) {\n    cx = v;\n  }\n\n}, 1);\nlet classes, ROW_TYPES;\nmodule.link(\"./PdfTable\", {\n  classes(v) {\n    classes = v;\n  },\n\n  ROW_TYPES(v) {\n    ROW_TYPES = v;\n  }\n\n}, 2);\n\nconst multiColumn = (data, style, columnOptions = []) => data.map((x, index) => {\n  const {\n    className = '',\n    style: columnStyle = {}\n  } = columnOptions[index] || {};\n  return React.createElement(\"td\", {\n    className: className,\n    style: (0, _objectSpread2.default)({}, columnStyle, style),\n    key: index\n  }, x);\n});\n\nconst singleColumn = (data, style, {\n  className = '',\n  style: columnStyle = {}\n} = {}) => React.createElement(\"td\", {\n  style: (0, _objectSpread2.default)({}, columnStyle, style),\n  className: className\n}, data);\n\nconst PdfTableRow = ({\n  rowData: {\n    label,\n    labelStyle = {},\n    tooltip,\n    data,\n    style,\n    colspan = 1,\n    type = ROW_TYPES.REGULAR,\n    className\n  },\n  index,\n  columnOptions = []\n}) => {\n  if (colspan > 1) {\n    const {\n      className: columnClassName = '',\n      style: columnStyle = {}\n    } = columnOptions[0] || {};\n    return React.createElement(\"tr\", {\n      key: index,\n      className: cx(classes[type], className)\n    }, label && React.createElement(\"td\", {\n      className: columnClassName,\n      colSpan: colspan,\n      style: (0, _objectSpread2.default)({}, columnStyle, labelStyle)\n    }, label));\n  }\n\n  const {\n    className: columnClassName = '',\n    style: columnStyle = {}\n  } = columnOptions[0] || {};\n  return React.createElement(\"tr\", {\n    key: index,\n    className: cx(classes[type], className)\n  }, label && React.createElement(\"td\", {\n    style: columnStyle,\n    className: columnClassName\n  }, label, tooltip && React.createElement(\"sup\", null, \" \", tooltip.symbol)), Array.isArray(data) ? multiColumn(data, style, columnOptions.slice(1)) : singleColumn(data, style, columnOptions[1]));\n};\n\nmodule.exportDefault(PdfTableRow);","map":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/PdfTable/PdfTableRow.jsx"],"names":["multiColumn","columnOptions","className","style","columnStyle","singleColumn","PdfTableRow","rowData","labelStyle","colspan","type","ROW_TYPES","columnClassName","cx","classes","label","tooltip","Array"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport cx from 'classnames';\nimport { classes, ROW_TYPES } from './PdfTable';\n\ntype PdfTableRowProps = {\n  rowData: Object,\n  index: Number,\n  columnOptions: Array,\n};\n\nconst multiColumn = (data, style, columnOptions = []) =>\n  data.map((x, index) => {\n    const { className = '', style: columnStyle = {} } = columnOptions[index] || {};\n    return (\n      <td\n        className={className}\n        style={{ ...columnStyle, ...style }}\n        key={index}\n      >\n        {x}\n      </td>\n    );\n  });\n\nconst singleColumn = (\n  data,\n  style,\n  { className = '', style: columnStyle = {} } = {},\n) => (\n  <td style={{ ...columnStyle, ...style }} className={className}>\n    {data}\n  </td>\n);\n\nconst PdfTableRow = ({\n  rowData: {\n    label,\n    labelStyle = {},\n    tooltip,\n    data,\n    style,\n    colspan = 1,\n    type = ROW_TYPES.REGULAR,\n    className,\n  },\n  index,\n  columnOptions = [],\n}: PdfTableRowProps) => {\n  if (colspan > 1) {\n    const { className: columnClassName = '', style: columnStyle = {} } = columnOptions[0] || {};\n    return (\n      <tr key={index} className={cx(classes[type], className)}>\n        {label && (\n          <td\n            className={columnClassName}\n            colSpan={colspan}\n            style={{ ...columnStyle, ...labelStyle }}\n          >\n            {label}\n          </td>\n        )}\n      </tr>\n    );\n  }\n\n  const { className: columnClassName = '', style: columnStyle = {} } = columnOptions[0] || {};\n\n  return (\n    <tr key={index} className={cx(classes[type], className)}>\n      {label && (\n        <td style={columnStyle} className={columnClassName}>\n          {label}\n          {tooltip && <sup> {tooltip.symbol}</sup>}\n        </td>\n      )}\n      {Array.isArray(data)\n        ? multiColumn(data, style, columnOptions.slice(1))\n        : singleColumn(data, style, columnOptions[1])}\n    </tr>\n  );\n};\n\nexport default PdfTableRow;\n"]},"sourceType":"script","hash":"84d698e904f055aa88a395edfe21b4f44a2d5d19"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/UserService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"imports/core/api/users/server/UserService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/UserService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/users/server/UserService.js"],"names":["Meteor","Roles","Accounts","NodeRSA","omit","EMAIL_IDS","sendEmail","fullUser","CollectionService","LoanService","PropertyService","PromotionService","OrganisationService","SecurityService","getUserNameAndOrganisation","ROLES","roundRobinAdvisors","Users","UserServiceClass","constructor","employees","options","role","password","newUserId","createUser","setUserRoles","email","sendEnrollmentEmail","additionalData","USER","adminId","phoneNumber","length","phoneNumbers","update","userId","object","assignedEmployeeId","assignAdminToUser","setAssigneeForNewUser","user","loanId","referralId","adminCreateUser","assignLoanToUser","setReferredBy","proId","getByEmail","sendVerificationEmail","error","message","remove","Object","keys","allowUpdate","$set","find","roles","$in","fetch","findOne","token","fields","firstName","lastName","emails","services","reset","insert","promotionId","loans","$filters","promotionLinks","some","_id","propertyId","propertyIds","id","newEmail","addEmail","removeEmail","address","newOrganisations","organisations","oldOrganisations","get","forEach","organisationId","removeLink","linkName","linkId","metadata","linkOrganisation","doesUserExist","key","generateKeyPair","publicKey","exportKey","replace","privateKey","createdAt","Date","_update","apiPublicKey","proUserId","shareSolvency","Error","pro","admin","proCreateUser","sendInvitation","fullLoanInsert","run","emailId","REFER_USER","params","proName","ctaUrl","getEnrollmentUrl","fetchOne","name","proAssignedEmployeeId","isNewUser","isProduction","existingUserId","existingAssignedEmployeeId","promotionIds","properties","referOnly","proReferUser","invitedBy","promises","inviteUser","map","promotionLotIds","showAllLots","internalPropertyIds","property","existingProperty","externalId","insertExternalProperty","Promise","all","setupRoundRobin","findUserByEmail","domain","settings","public","subdomains","app","hasRole","PRO","generateResetToken","mainOrg","getUserMainOrganisation","referredByUserLink","referredByOrganisationLink","setReferredByOrganisation","proInviteUserToOrganisation","title","assigneeId","isDevelopment","userOrganisations","isMain","addLink","shareCustomers","userLinks","$elemMatch","mainOrganisation","userLink","proSetShareCustomers","updateLinkMetadata","employee","filter","x","newAssignee","includes","lastCreatedUser","$options","sort","index","indexOf"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Accounts } from 'meteor/accounts-base';\nimport NodeRSA from 'node-rsa';\nimport omit from 'lodash/omit';\n\nimport { EMAIL_IDS } from '../../email/emailConstants';\nimport { sendEmail } from '../../methods';\nimport { fullUser } from '../../fragments';\nimport CollectionService from '../../helpers/CollectionService';\nimport LoanService from '../../loans/server/LoanService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport SecurityService from '../../security';\nimport { getUserNameAndOrganisation } from '../../helpers';\nimport { ROLES } from '../userConstants';\nimport { roundRobinAdvisors } from './userServerContants';\nimport Users from '../users';\n\nexport class UserServiceClass extends CollectionService {\n  constructor({ employees }) {\n    super(Users);\n    this.setupRoundRobin(employees);\n  }\n\n  get(userId) {\n    return this.fetchOne({ $filters: { _id: userId }, ...fullUser() });\n  }\n\n  getByEmail(email) {\n    return Accounts.findUserByEmail(email);\n  }\n\n  createUser = ({ options, role }) => {\n    if (!options.password) {\n      // password is not even allowed to be undefined,\n      // it has to be stripped from the options object\n      options = omit(options, ['password']);\n    }\n\n    const newUserId = Accounts.createUser(options);\n\n    if (role) {\n      Roles.setUserRoles(newUserId, role);\n    }\n\n    return newUserId;\n  };\n\n  adminCreateUser = ({\n    options: { email, password, sendEnrollmentEmail, ...additionalData },\n    role = ROLES.USER,\n    adminId,\n  }) => {\n    const newUserId = this.createUser({ options: { email, password }, role });\n\n    if (additionalData.phoneNumber && additionalData.phoneNumber.length) {\n      additionalData.phoneNumbers = [additionalData.phoneNumber];\n    }\n\n    this.update({ userId: newUserId, object: additionalData });\n\n    if (role === ROLES.USER && adminId && !additionalData.assignedEmployeeId) {\n      this.assignAdminToUser({ userId: newUserId, adminId });\n    } else if (!additionalData.assignedEmployeeId) {\n      this.setAssigneeForNewUser(newUserId);\n    }\n\n    if (sendEnrollmentEmail) {\n      this.sendEnrollmentEmail({ userId: newUserId });\n    }\n\n    return newUserId;\n  };\n\n  anonymousCreateUser = ({ user, loanId, referralId }) => {\n    const userId = this.adminCreateUser({\n      options: { ...user, sendEnrollmentEmail: true },\n    });\n\n    if (loanId) {\n      LoanService.assignLoanToUser({ userId, loanId });\n    }\n\n    if (referralId) {\n      this.setReferredBy({ userId, proId: referralId });\n    }\n\n    return userId;\n  };\n\n  // This should remain a simple inequality check\n  doesUserExist = ({ email }) => this.getByEmail(email) != null;\n\n  sendVerificationEmail = ({ userId }) =>\n    Accounts.sendVerificationEmail(userId);\n\n  sendEnrollmentEmail = ({ userId }) => {\n    try {\n      Accounts.sendEnrollmentEmail(userId);\n    } catch (error) {\n      // FIXME: Temporary fix for meteor toys in dev\n      // https://github.com/MeteorToys/meteor-devtools/issues/111\n      if (error.message !== 'MeteorToys is not defined') {\n        throw error;\n      }\n    }\n  };\n\n  remove = ({ userId }) => Users.remove(userId);\n\n  allowUpdate = ({ object }) => object && Object.keys(object).length !== 0;\n\n  update = ({ userId, object }) =>\n    this.allowUpdate({ object }) && Users.update(userId, { $set: object });\n\n  assignAdminToUser = ({ userId, adminId }) =>\n    adminId && this.update({ userId, object: { assignedEmployeeId: adminId } });\n\n  getUsersByRole = role => Users.find({ roles: { $in: [role] } }).fetch();\n\n  setRole = ({ userId, role }) => Roles.setUserRoles(userId, role);\n\n  getUserById = ({ userId }) => Users.findOne(userId);\n\n  getUserByPasswordResetToken = ({ token }) =>\n    Users.findOne(\n      { 'services.password.reset.token': token },\n      { fields: { firstName: 1, lastName: 1, emails: 1 } },\n    );\n\n  getLoginToken = ({ userId }) => {\n    const user = Users.findOne(userId, { fields: { services: 1 } });\n\n    return (\n      user.services.password\n      && user.services.password.reset\n      && user.services.password.reset.token\n    );\n  };\n\n  testCreateUser = ({ user }) => Users.insert(user);\n\n  hasPromotion = ({ userId, promotionId }) => {\n    const loans = LoanService.fetch({\n      $filters: { userId },\n      promotionLinks: 1,\n    });\n\n    if (!promotionId) {\n      // Return true if any promotion exists\n      return (\n        loans\n        && loans.some(({ promotionLinks }) => promotionLinks && promotionLinks.length > 0)\n      );\n    }\n\n    return (\n      loans\n      && loans.some(({ promotionLinks = [] }) =>\n        promotionLinks.some(({ _id }) => _id === promotionId))\n    );\n  };\n\n  hasProperty = ({ userId, propertyId }) => {\n    if (!propertyId) {\n      return false;\n    }\n\n    const loans = LoanService.fetch({\n      $filters: { userId },\n      propertyIds: 1,\n    });\n\n    return (\n      loans\n      && loans.some(({ propertyIds = [] }) =>\n        propertyIds.some(id => id === propertyId))\n    );\n  };\n\n  changeEmail = ({ userId, newEmail }) => {\n    const { emails } = Users.findOne(userId);\n    Accounts.addEmail(userId, newEmail);\n    Accounts.removeEmail(userId, emails[0].address);\n    Accounts.sendVerificationEmail(userId);\n  };\n\n  updateOrganisations = ({ userId, newOrganisations = [] }) => {\n    const { organisations: oldOrganisations = [] } = this.get(userId);\n\n    oldOrganisations.forEach(({ _id: organisationId }) =>\n      this.removeLink({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId,\n      }));\n\n    newOrganisations.forEach(({ _id: organisationId, metadata }) =>\n      this.linkOrganisation({ userId, organisationId, metadata }));\n  };\n\n  testUserAccount = ({ email, password, role }) => {\n    if (this.doesUserExist({ email })) {\n      // Sometimes this methods is called twice from a test.....???????\n      // Apparently due to a duplicate websocket connection\n      return this.getByEmail(email);\n    }\n    const userId = Accounts.createUser({ email, password });\n    Roles.setUserRoles(userId, role);\n    return this.get(userId);\n  };\n\n  generateKeyPair = ({ userId }) => {\n    const key = new NodeRSA();\n    key.generateKeyPair(512);\n    const publicKey = key\n      .exportKey('pkcs1-public-pem')\n      .replace(/\\r?\\n|\\r/g, '');\n    const privateKey = key\n      .exportKey('pkcs1-private-pem')\n      .replace(/\\r?\\n|\\r/g, '');\n    const createdAt = new Date();\n    this._update({\n      id: userId,\n      object: { apiPublicKey: { publicKey, createdAt } },\n    });\n    return { publicKey, privateKey, createdAt };\n  };\n\n  proReferUser = ({ user, proUserId, shareSolvency }) => {\n    const { email } = user;\n    if (this.doesUserExist({ email })) {\n      throw new Meteor.Error(\"Ce client existe déjà. Vous ne pouvez pas le référer, mais vous pouvez l'inviter sur un de vos biens immobiliers.\");\n    }\n\n    const { userId, pro, admin } = this.proCreateUser({\n      user,\n      proUserId,\n      sendInvitation: false,\n    });\n\n    const loanId = LoanService.fullLoanInsert({ userId });\n    LoanService.update({ loanId, object: { shareSolvency } });\n\n    return sendEmail.run({\n      emailId: EMAIL_IDS.REFER_USER,\n      userId,\n      params: {\n        proUserId,\n        proName: getUserNameAndOrganisation({ user: pro }),\n        ctaUrl: this.getEnrollmentUrl({ userId }),\n      },\n    });\n  };\n\n  proCreateUser = ({\n    user: { email, firstName, lastName, phoneNumber },\n    proUserId,\n    sendInvitation = true,\n    adminId,\n  }) => {\n    let pro;\n    let assignedEmployeeId;\n\n    if (proUserId) {\n      pro = this.fetchOne({\n        $filters: { _id: proUserId },\n        name: 1,\n        assignedEmployeeId: 1,\n        organisations: { name: 1 },\n      });\n\n      const { assignedEmployeeId: proAssignedEmployeeId } = pro;\n\n      assignedEmployeeId = proAssignedEmployeeId;\n    } else if (adminId) {\n      assignedEmployeeId = adminId;\n    }\n\n    const isNewUser = !this.doesUserExist({ email });\n    let userId;\n    let admin;\n\n    if (isNewUser) {\n      admin = this.get(assignedEmployeeId);\n      userId = this.adminCreateUser({\n        options: {\n          email,\n          sendEnrollmentEmail: sendInvitation && !pro && Meteor.isProduction,\n          firstName,\n          lastName,\n          phoneNumbers: [phoneNumber],\n        },\n        adminId: admin && admin._id,\n      });\n\n      if (pro) {\n        this.setReferredBy({ userId, proId: proUserId });\n      }\n    } else {\n      const {\n        _id: existingUserId,\n        assignedEmployeeId: existingAssignedEmployeeId,\n      } = this.getByEmail(email);\n\n      admin = this.get(existingAssignedEmployeeId);\n      userId = existingUserId;\n    }\n\n    return { userId, admin, pro, isNewUser };\n  };\n\n  proInviteUser = ({\n    user,\n    propertyIds = [],\n    promotionIds = [],\n    properties = [],\n    proUserId,\n    adminId,\n    shareSolvency,\n  }) => {\n    const referOnly = propertyIds.length === 0\n      && promotionIds.length === 0\n      && properties.length === 0;\n\n    if (referOnly) {\n      return this.proReferUser({ user, proUserId, shareSolvency });\n    }\n\n    const { invitedBy } = user;\n    const { userId, admin, pro, isNewUser } = this.proCreateUser({\n      user,\n      proUserId: proUserId || invitedBy,\n      adminId,\n      // Invitation will be sent by the propertyInvitationEmail or\n      // promotionInvitationEmail\n      sendInvitation: false,\n    });\n\n    let promises = [];\n\n    if (propertyIds && propertyIds.length) {\n      promises = [\n        ...promises,\n        PropertyService.inviteUser({\n          propertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency,\n        }),\n      ];\n    }\n    if (promotionIds && promotionIds.length) {\n      promises = [\n        ...promises,\n        ...promotionIds.map(promotionId =>\n          PromotionService.inviteUser({\n            promotionId,\n            userId,\n            pro,\n            isNewUser,\n            promotionLotIds: user.promotionLotIds,\n            showAllLots: user.showAllLots,\n            shareSolvency,\n          })),\n      ];\n    }\n    if (properties && properties.length) {\n      const internalPropertyIds = properties.map((property) => {\n        let propertyId;\n\n        const existingProperty = PropertyService.fetchOne({\n          $filters: { externalId: property.externalId },\n        });\n\n        if (!existingProperty) {\n          propertyId = PropertyService.insertExternalProperty({\n            userId: pro._id,\n            property,\n          });\n        } else {\n          propertyId = existingProperty._id;\n        }\n\n        if (!propertyId) {\n          throw new Meteor.Error('No property found');\n        }\n\n        return propertyId;\n      });\n\n      promises = [\n        ...promises,\n        PropertyService.inviteUser({\n          propertyIds: internalPropertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency,\n        }),\n      ];\n    }\n\n    return Promise.all(promises);\n  };\n\n  getEnrollmentUrl({ userId }) {\n    let domain = Meteor.settings.public.subdomains.app;\n\n    if (SecurityService.hasRole(userId, ROLES.PRO)) {\n      domain = Meteor.settings.public.subdomains.pro;\n    }\n\n    const { token } = Accounts.generateResetToken(\n      userId,\n      null,\n      'enrollAccount',\n    );\n    return `${domain}/enroll-account/${token}`;\n  }\n\n  setReferredBy({ userId, proId, organisationId }) {\n    if (!organisationId) {\n      const mainOrg = this.getUserMainOrganisation(proId);\n      organisationId = mainOrg && mainOrg._id;\n    }\n\n    return this.update({\n      userId,\n      object: {\n        referredByUserLink: proId,\n        referredByOrganisationLink: organisationId,\n      },\n    });\n  }\n\n  setReferredByOrganisation({ userId, organisationId }) {\n    return this.update({\n      userId,\n      object: { referredByOrganisationLink: organisationId },\n    });\n  }\n\n  proInviteUserToOrganisation({ user, organisationId, title, proId, adminId }) {\n    const { email, phoneNumber } = user;\n    let assigneeId;\n\n    if (this.doesUserExist({ email })) {\n      throw new Meteor.Error('Cet utilisateur existe déjà');\n    }\n\n    if (proId) {\n      const { assignedEmployeeId } = this.fetchOne({\n        $filters: { _id: proId },\n        assignedEmployeeId: 1,\n      });\n      assigneeId = assignedEmployeeId;\n    } else {\n      assigneeId = adminId;\n    }\n\n    const userId = this.adminCreateUser({\n      options: {\n        ...user,\n        phoneNumbers: [phoneNumber],\n        sendEnrollmentEmail: !Meteor.isDevelopment, // Meteor toys is not defined\n      },\n      role: ROLES.PRO,\n      adminId: assigneeId,\n    });\n\n    this.linkOrganisation({ userId, organisationId, metadata: { title } });\n\n    return userId;\n  }\n\n  linkOrganisation({ userId, organisationId, metadata }) {\n    const { organisations: userOrganisations = [] } = this.fetchOne({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n    const isMain = userOrganisations.length === 0;\n\n    this.addLink({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: { ...metadata, isMain, shareCustomers: true },\n    });\n  }\n\n  getUserMainOrganisation(userId) {\n    const organisations = OrganisationService.fetch({\n      $filters: { userLinks: { $elemMatch: { _id: userId } } },\n      userLinks: 1,\n      name: 1,\n    });\n\n    let mainOrganisation = null;\n    if (organisations.length === 1) {\n      mainOrganisation = organisations[0];\n    } else if (organisations.length > 1) {\n      mainOrganisation = organisations.find(({ userLinks }) => {\n        const userLink = userLinks.find(({ _id }) => _id === userId);\n        return userLink.isMain;\n      }) || organisations[0];\n    }\n\n    return mainOrganisation;\n  }\n\n  proSetShareCustomers({ userId, organisationId, shareCustomers }) {\n    this.updateLinkMetadata({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: { shareCustomers },\n    });\n  }\n\n  setupRoundRobin(employees = []) {\n    this.employees = employees\n      .map((email) => {\n        const employee = this.getByEmail(email);\n        if (employee) {\n          return employee._id;\n        }\n      })\n      .filter(x => x);\n  }\n\n  setAssigneeForNewUser(userId) {\n    const { roles, assignedEmployeeId } = this.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployeeId: 1,\n      roles: 1,\n    });\n\n    if (assignedEmployeeId) {\n      return;\n    }\n    let newAssignee;\n\n    if (roles.includes(ROLES.USER)) {\n      const lastCreatedUser = this.fetchOne({\n        $filters: {\n          roles: ROLES.USER,\n          assignedEmployeeId: { $in: this.employees },\n        },\n        $options: { sort: { createdAt: -1 } },\n        assignedEmployeeId: 1,\n        createdAt: 1,\n      });\n\n      if (lastCreatedUser && lastCreatedUser.assignedEmployeeId) {\n        const index = this.employees.indexOf(lastCreatedUser.assignedEmployeeId);\n        if (index >= this.employees.length - 1) {\n          newAssignee = this.employees[0];\n        } else {\n          newAssignee = this.employees[index + 1];\n        }\n      } else {\n        // Assign the very first user\n        newAssignee = this.employees[0];\n      }\n    }\n\n    return this.update({ userId, object: { assignedEmployeeId: newAssignee } });\n  }\n}\n\nexport default new UserServiceClass({ employees: roundRobinAdvisors });\n"]},"passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/users/server/UserService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/users/server/UserService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  UserServiceClass: () => UserServiceClass\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Roles;\nmodule.link(\"meteor/alanning:roles\", {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 1);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 2);\nlet NodeRSA;\nmodule.link(\"node-rsa\", {\n  default(v) {\n    NodeRSA = v;\n  }\n\n}, 3);\nlet omit;\nmodule.link(\"lodash/omit\", {\n  default(v) {\n    omit = v;\n  }\n\n}, 4);\nlet EMAIL_IDS;\nmodule.link(\"../../email/emailConstants\", {\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  }\n\n}, 5);\nlet sendEmail;\nmodule.link(\"../../methods\", {\n  sendEmail(v) {\n    sendEmail = v;\n  }\n\n}, 6);\nlet fullUser;\nmodule.link(\"../../fragments\", {\n  fullUser(v) {\n    fullUser = v;\n  }\n\n}, 7);\nlet CollectionService;\nmodule.link(\"../../helpers/CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 8);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 9);\nlet PropertyService;\nmodule.link(\"../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 10);\nlet PromotionService;\nmodule.link(\"../../promotions/server/PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 11);\nlet OrganisationService;\nmodule.link(\"../../organisations/server/OrganisationService\", {\n  default(v) {\n    OrganisationService = v;\n  }\n\n}, 12);\nlet SecurityService;\nmodule.link(\"../../security\", {\n  default(v) {\n    SecurityService = v;\n  }\n\n}, 13);\nlet getUserNameAndOrganisation;\nmodule.link(\"../../helpers\", {\n  getUserNameAndOrganisation(v) {\n    getUserNameAndOrganisation = v;\n  }\n\n}, 14);\nlet ROLES;\nmodule.link(\"../userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 15);\nlet roundRobinAdvisors;\nmodule.link(\"./userServerContants\", {\n  roundRobinAdvisors(v) {\n    roundRobinAdvisors = v;\n  }\n\n}, 16);\nlet Users;\nmodule.link(\"../users\", {\n  default(v) {\n    Users = v;\n  }\n\n}, 17);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass UserServiceClass extends CollectionService {\n  constructor({\n    employees\n  }) {\n    super(Users);\n\n    _defineProperty(this, \"createUser\", ({\n      options,\n      role\n    }) => {\n      if (!options.password) {\n        // password is not even allowed to be undefined,\n        // it has to be stripped from the options object\n        options = omit(options, ['password']);\n      }\n\n      const newUserId = Accounts.createUser(options);\n\n      if (role) {\n        Roles.setUserRoles(newUserId, role);\n      }\n\n      return newUserId;\n    });\n\n    _defineProperty(this, \"adminCreateUser\", (_ref) => {\n      let {\n        options: {\n          email,\n          password,\n          sendEnrollmentEmail\n        },\n        role = ROLES.USER,\n        adminId\n      } = _ref,\n          additionalData = (0, _objectWithoutProperties2.default)(_ref.options, [\"email\", \"password\", \"sendEnrollmentEmail\"]);\n      const newUserId = this.createUser({\n        options: {\n          email,\n          password\n        },\n        role\n      });\n\n      if (additionalData.phoneNumber && additionalData.phoneNumber.length) {\n        additionalData.phoneNumbers = [additionalData.phoneNumber];\n      }\n\n      this.update({\n        userId: newUserId,\n        object: additionalData\n      });\n\n      if (role === ROLES.USER && adminId && !additionalData.assignedEmployeeId) {\n        this.assignAdminToUser({\n          userId: newUserId,\n          adminId\n        });\n      } else if (!additionalData.assignedEmployeeId) {\n        this.setAssigneeForNewUser(newUserId);\n      }\n\n      if (sendEnrollmentEmail) {\n        this.sendEnrollmentEmail({\n          userId: newUserId\n        });\n      }\n\n      return newUserId;\n    });\n\n    _defineProperty(this, \"anonymousCreateUser\", ({\n      user,\n      loanId,\n      referralId\n    }) => {\n      const userId = this.adminCreateUser({\n        options: (0, _objectSpread2.default)({}, user, {\n          sendEnrollmentEmail: true\n        })\n      });\n\n      if (loanId) {\n        LoanService.assignLoanToUser({\n          userId,\n          loanId\n        });\n      }\n\n      if (referralId) {\n        this.setReferredBy({\n          userId,\n          proId: referralId\n        });\n      }\n\n      return userId;\n    });\n\n    _defineProperty(this, \"doesUserExist\", ({\n      email\n    }) => this.getByEmail(email) != null);\n\n    _defineProperty(this, \"sendVerificationEmail\", ({\n      userId\n    }) => Accounts.sendVerificationEmail(userId));\n\n    _defineProperty(this, \"sendEnrollmentEmail\", ({\n      userId\n    }) => {\n      try {\n        Accounts.sendEnrollmentEmail(userId);\n      } catch (error) {\n        // FIXME: Temporary fix for meteor toys in dev\n        // https://github.com/MeteorToys/meteor-devtools/issues/111\n        if (error.message !== 'MeteorToys is not defined') {\n          throw error;\n        }\n      }\n    });\n\n    _defineProperty(this, \"remove\", ({\n      userId\n    }) => Users.remove(userId));\n\n    _defineProperty(this, \"allowUpdate\", ({\n      object\n    }) => object && Object.keys(object).length !== 0);\n\n    _defineProperty(this, \"update\", ({\n      userId,\n      object\n    }) => this.allowUpdate({\n      object\n    }) && Users.update(userId, {\n      $set: object\n    }));\n\n    _defineProperty(this, \"assignAdminToUser\", ({\n      userId,\n      adminId\n    }) => adminId && this.update({\n      userId,\n      object: {\n        assignedEmployeeId: adminId\n      }\n    }));\n\n    _defineProperty(this, \"getUsersByRole\", role => Users.find({\n      roles: {\n        $in: [role]\n      }\n    }).fetch());\n\n    _defineProperty(this, \"setRole\", ({\n      userId,\n      role\n    }) => Roles.setUserRoles(userId, role));\n\n    _defineProperty(this, \"getUserById\", ({\n      userId\n    }) => Users.findOne(userId));\n\n    _defineProperty(this, \"getUserByPasswordResetToken\", ({\n      token\n    }) => Users.findOne({\n      'services.password.reset.token': token\n    }, {\n      fields: {\n        firstName: 1,\n        lastName: 1,\n        emails: 1\n      }\n    }));\n\n    _defineProperty(this, \"getLoginToken\", ({\n      userId\n    }) => {\n      const user = Users.findOne(userId, {\n        fields: {\n          services: 1\n        }\n      });\n      return user.services.password && user.services.password.reset && user.services.password.reset.token;\n    });\n\n    _defineProperty(this, \"testCreateUser\", ({\n      user\n    }) => Users.insert(user));\n\n    _defineProperty(this, \"hasPromotion\", ({\n      userId,\n      promotionId\n    }) => {\n      const loans = LoanService.fetch({\n        $filters: {\n          userId\n        },\n        promotionLinks: 1\n      });\n\n      if (!promotionId) {\n        // Return true if any promotion exists\n        return loans && loans.some(({\n          promotionLinks\n        }) => promotionLinks && promotionLinks.length > 0);\n      }\n\n      return loans && loans.some(({\n        promotionLinks = []\n      }) => promotionLinks.some(({\n        _id\n      }) => _id === promotionId));\n    });\n\n    _defineProperty(this, \"hasProperty\", ({\n      userId,\n      propertyId\n    }) => {\n      if (!propertyId) {\n        return false;\n      }\n\n      const loans = LoanService.fetch({\n        $filters: {\n          userId\n        },\n        propertyIds: 1\n      });\n      return loans && loans.some(({\n        propertyIds = []\n      }) => propertyIds.some(id => id === propertyId));\n    });\n\n    _defineProperty(this, \"changeEmail\", ({\n      userId,\n      newEmail\n    }) => {\n      const {\n        emails\n      } = Users.findOne(userId);\n      Accounts.addEmail(userId, newEmail);\n      Accounts.removeEmail(userId, emails[0].address);\n      Accounts.sendVerificationEmail(userId);\n    });\n\n    _defineProperty(this, \"updateOrganisations\", ({\n      userId,\n      newOrganisations = []\n    }) => {\n      const {\n        organisations: oldOrganisations = []\n      } = this.get(userId);\n      oldOrganisations.forEach(({\n        _id: organisationId\n      }) => this.removeLink({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId\n      }));\n      newOrganisations.forEach(({\n        _id: organisationId,\n        metadata\n      }) => this.linkOrganisation({\n        userId,\n        organisationId,\n        metadata\n      }));\n    });\n\n    _defineProperty(this, \"testUserAccount\", ({\n      email,\n      password,\n      role\n    }) => {\n      if (this.doesUserExist({\n        email\n      })) {\n        // Sometimes this methods is called twice from a test.....???????\n        // Apparently due to a duplicate websocket connection\n        return this.getByEmail(email);\n      }\n\n      const userId = Accounts.createUser({\n        email,\n        password\n      });\n      Roles.setUserRoles(userId, role);\n      return this.get(userId);\n    });\n\n    _defineProperty(this, \"generateKeyPair\", ({\n      userId\n    }) => {\n      const key = new NodeRSA();\n      key.generateKeyPair(512);\n      const publicKey = key.exportKey('pkcs1-public-pem').replace(/\\r?\\n|\\r/g, '');\n      const privateKey = key.exportKey('pkcs1-private-pem').replace(/\\r?\\n|\\r/g, '');\n      const createdAt = new Date();\n\n      this._update({\n        id: userId,\n        object: {\n          apiPublicKey: {\n            publicKey,\n            createdAt\n          }\n        }\n      });\n\n      return {\n        publicKey,\n        privateKey,\n        createdAt\n      };\n    });\n\n    _defineProperty(this, \"proReferUser\", ({\n      user,\n      proUserId,\n      shareSolvency\n    }) => {\n      const {\n        email\n      } = user;\n\n      if (this.doesUserExist({\n        email\n      })) {\n        throw new Meteor.Error(\"Ce client existe déjà. Vous ne pouvez pas le référer, mais vous pouvez l'inviter sur un de vos biens immobiliers.\");\n      }\n\n      const {\n        userId,\n        pro,\n        admin\n      } = this.proCreateUser({\n        user,\n        proUserId,\n        sendInvitation: false\n      });\n      const loanId = LoanService.fullLoanInsert({\n        userId\n      });\n      LoanService.update({\n        loanId,\n        object: {\n          shareSolvency\n        }\n      });\n      return sendEmail.run({\n        emailId: EMAIL_IDS.REFER_USER,\n        userId,\n        params: {\n          proUserId,\n          proName: getUserNameAndOrganisation({\n            user: pro\n          }),\n          ctaUrl: this.getEnrollmentUrl({\n            userId\n          })\n        }\n      });\n    });\n\n    _defineProperty(this, \"proCreateUser\", ({\n      user: {\n        email,\n        firstName,\n        lastName,\n        phoneNumber\n      },\n      proUserId,\n      sendInvitation = true,\n      adminId\n    }) => {\n      let pro;\n      let assignedEmployeeId;\n\n      if (proUserId) {\n        pro = this.fetchOne({\n          $filters: {\n            _id: proUserId\n          },\n          name: 1,\n          assignedEmployeeId: 1,\n          organisations: {\n            name: 1\n          }\n        });\n        const {\n          assignedEmployeeId: proAssignedEmployeeId\n        } = pro;\n        assignedEmployeeId = proAssignedEmployeeId;\n      } else if (adminId) {\n        assignedEmployeeId = adminId;\n      }\n\n      const isNewUser = !this.doesUserExist({\n        email\n      });\n      let userId;\n      let admin;\n\n      if (isNewUser) {\n        admin = this.get(assignedEmployeeId);\n        userId = this.adminCreateUser({\n          options: {\n            email,\n            sendEnrollmentEmail: sendInvitation && !pro && Meteor.isProduction,\n            firstName,\n            lastName,\n            phoneNumbers: [phoneNumber]\n          },\n          adminId: admin && admin._id\n        });\n\n        if (pro) {\n          this.setReferredBy({\n            userId,\n            proId: proUserId\n          });\n        }\n      } else {\n        const {\n          _id: existingUserId,\n          assignedEmployeeId: existingAssignedEmployeeId\n        } = this.getByEmail(email);\n        admin = this.get(existingAssignedEmployeeId);\n        userId = existingUserId;\n      }\n\n      return {\n        userId,\n        admin,\n        pro,\n        isNewUser\n      };\n    });\n\n    _defineProperty(this, \"proInviteUser\", ({\n      user,\n      propertyIds = [],\n      promotionIds = [],\n      properties = [],\n      proUserId,\n      adminId,\n      shareSolvency\n    }) => {\n      const referOnly = propertyIds.length === 0 && promotionIds.length === 0 && properties.length === 0;\n\n      if (referOnly) {\n        return this.proReferUser({\n          user,\n          proUserId,\n          shareSolvency\n        });\n      }\n\n      const {\n        invitedBy\n      } = user;\n      const {\n        userId,\n        admin,\n        pro,\n        isNewUser\n      } = this.proCreateUser({\n        user,\n        proUserId: proUserId || invitedBy,\n        adminId,\n        // Invitation will be sent by the propertyInvitationEmail or\n        // promotionInvitationEmail\n        sendInvitation: false\n      });\n      let promises = [];\n\n      if (propertyIds && propertyIds.length) {\n        promises = [...promises, PropertyService.inviteUser({\n          propertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency\n        })];\n      }\n\n      if (promotionIds && promotionIds.length) {\n        promises = [...promises, ...promotionIds.map(promotionId => PromotionService.inviteUser({\n          promotionId,\n          userId,\n          pro,\n          isNewUser,\n          promotionLotIds: user.promotionLotIds,\n          showAllLots: user.showAllLots,\n          shareSolvency\n        }))];\n      }\n\n      if (properties && properties.length) {\n        const internalPropertyIds = properties.map(property => {\n          let propertyId;\n          const existingProperty = PropertyService.fetchOne({\n            $filters: {\n              externalId: property.externalId\n            }\n          });\n\n          if (!existingProperty) {\n            propertyId = PropertyService.insertExternalProperty({\n              userId: pro._id,\n              property\n            });\n          } else {\n            propertyId = existingProperty._id;\n          }\n\n          if (!propertyId) {\n            throw new Meteor.Error('No property found');\n          }\n\n          return propertyId;\n        });\n        promises = [...promises, PropertyService.inviteUser({\n          propertyIds: internalPropertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency\n        })];\n      }\n\n      return Promise.all(promises);\n    });\n\n    this.setupRoundRobin(employees);\n  }\n\n  get(userId) {\n    return this.fetchOne((0, _objectSpread2.default)({\n      $filters: {\n        _id: userId\n      }\n    }, fullUser()));\n  }\n\n  getByEmail(email) {\n    return Accounts.findUserByEmail(email);\n  }\n\n  getEnrollmentUrl({\n    userId\n  }) {\n    let domain = Meteor.settings.public.subdomains.app;\n\n    if (SecurityService.hasRole(userId, ROLES.PRO)) {\n      domain = Meteor.settings.public.subdomains.pro;\n    }\n\n    const {\n      token\n    } = Accounts.generateResetToken(userId, null, 'enrollAccount');\n    return `${domain}/enroll-account/${token}`;\n  }\n\n  setReferredBy({\n    userId,\n    proId,\n    organisationId\n  }) {\n    if (!organisationId) {\n      const mainOrg = this.getUserMainOrganisation(proId);\n      organisationId = mainOrg && mainOrg._id;\n    }\n\n    return this.update({\n      userId,\n      object: {\n        referredByUserLink: proId,\n        referredByOrganisationLink: organisationId\n      }\n    });\n  }\n\n  setReferredByOrganisation({\n    userId,\n    organisationId\n  }) {\n    return this.update({\n      userId,\n      object: {\n        referredByOrganisationLink: organisationId\n      }\n    });\n  }\n\n  proInviteUserToOrganisation({\n    user,\n    organisationId,\n    title,\n    proId,\n    adminId\n  }) {\n    const {\n      email,\n      phoneNumber\n    } = user;\n    let assigneeId;\n\n    if (this.doesUserExist({\n      email\n    })) {\n      throw new Meteor.Error('Cet utilisateur existe déjà');\n    }\n\n    if (proId) {\n      const {\n        assignedEmployeeId\n      } = this.fetchOne({\n        $filters: {\n          _id: proId\n        },\n        assignedEmployeeId: 1\n      });\n      assigneeId = assignedEmployeeId;\n    } else {\n      assigneeId = adminId;\n    }\n\n    const userId = this.adminCreateUser({\n      options: (0, _objectSpread2.default)({}, user, {\n        phoneNumbers: [phoneNumber],\n        sendEnrollmentEmail: !Meteor.isDevelopment // Meteor toys is not defined\n\n      }),\n      role: ROLES.PRO,\n      adminId: assigneeId\n    });\n    this.linkOrganisation({\n      userId,\n      organisationId,\n      metadata: {\n        title\n      }\n    });\n    return userId;\n  }\n\n  linkOrganisation({\n    userId,\n    organisationId,\n    metadata\n  }) {\n    const {\n      organisations: userOrganisations = []\n    } = this.fetchOne({\n      $filters: {\n        _id: userId\n      },\n      organisations: {\n        _id: 1\n      }\n    });\n    const isMain = userOrganisations.length === 0;\n    this.addLink({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: (0, _objectSpread2.default)({}, metadata, {\n        isMain,\n        shareCustomers: true\n      })\n    });\n  }\n\n  getUserMainOrganisation(userId) {\n    const organisations = OrganisationService.fetch({\n      $filters: {\n        userLinks: {\n          $elemMatch: {\n            _id: userId\n          }\n        }\n      },\n      userLinks: 1,\n      name: 1\n    });\n    let mainOrganisation = null;\n\n    if (organisations.length === 1) {\n      mainOrganisation = organisations[0];\n    } else if (organisations.length > 1) {\n      mainOrganisation = organisations.find(({\n        userLinks\n      }) => {\n        const userLink = userLinks.find(({\n          _id\n        }) => _id === userId);\n        return userLink.isMain;\n      }) || organisations[0];\n    }\n\n    return mainOrganisation;\n  }\n\n  proSetShareCustomers({\n    userId,\n    organisationId,\n    shareCustomers\n  }) {\n    this.updateLinkMetadata({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: {\n        shareCustomers\n      }\n    });\n  }\n\n  setupRoundRobin(employees = []) {\n    this.employees = employees.map(email => {\n      const employee = this.getByEmail(email);\n\n      if (employee) {\n        return employee._id;\n      }\n    }).filter(x => x);\n  }\n\n  setAssigneeForNewUser(userId) {\n    const {\n      roles,\n      assignedEmployeeId\n    } = this.fetchOne({\n      $filters: {\n        _id: userId\n      },\n      assignedEmployeeId: 1,\n      roles: 1\n    });\n\n    if (assignedEmployeeId) {\n      return;\n    }\n\n    let newAssignee;\n\n    if (roles.includes(ROLES.USER)) {\n      const lastCreatedUser = this.fetchOne({\n        $filters: {\n          roles: ROLES.USER,\n          assignedEmployeeId: {\n            $in: this.employees\n          }\n        },\n        $options: {\n          sort: {\n            createdAt: -1\n          }\n        },\n        assignedEmployeeId: 1,\n        createdAt: 1\n      });\n\n      if (lastCreatedUser && lastCreatedUser.assignedEmployeeId) {\n        const index = this.employees.indexOf(lastCreatedUser.assignedEmployeeId);\n\n        if (index >= this.employees.length - 1) {\n          newAssignee = this.employees[0];\n        } else {\n          newAssignee = this.employees[index + 1];\n        }\n      } else {\n        // Assign the very first user\n        newAssignee = this.employees[0];\n      }\n    }\n\n    return this.update({\n      userId,\n      object: {\n        assignedEmployeeId: newAssignee\n      }\n    });\n  }\n\n}\n\nmodule.exportDefault(new UserServiceClass({\n  employees: roundRobinAdvisors\n}));","map":{"version":3,"sources":["imports/core/api/users/server/UserService.js"],"names":["constructor","employees","get","$filters","_id","userId","fullUser","getByEmail","Accounts","role","options","omit","newUserId","Roles","additionalData","ROLES","adminId","password","object","referralId","sendEnrollmentEmail","LoanService","loanId","proId","email","error","Users","Object","$set","assignedEmployeeId","roles","$in","token","fields","firstName","lastName","emails","user","services","promotionId","loans","promotionLinks","propertyId","propertyIds","id","newEmail","newOrganisations","organisations","oldOrganisations","organisationId","linkName","linkId","metadata","key","publicKey","privateKey","createdAt","apiPublicKey","shareSolvency","Meteor","admin","sendInvitation","emailId","EMAIL_IDS","params","proName","getUserNameAndOrganisation","pro","ctaUrl","phoneNumber","proUserId","name","proAssignedEmployeeId","isNewUser","phoneNumbers","existingAssignedEmployeeId","promotionIds","properties","referOnly","invitedBy","promises","promotionLotIds","showAllLots","internalPropertyIds","property","existingProperty","externalId","Promise","getEnrollmentUrl","domain","SecurityService","setReferredBy","mainOrg","referredByUserLink","referredByOrganisationLink","setReferredByOrganisation","proInviteUserToOrganisation","assigneeId","title","linkOrganisation","userOrganisations","isMain","shareCustomers","getUserMainOrganisation","userLinks","$elemMatch","mainOrganisation","userLink","proSetShareCustomers","setupRoundRobin","employee","x","setAssigneeForNewUser","lastCreatedUser","$options","sort","index","newAssignee","roundRobinAdvisors"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBO,MAAA,gBAAA,SAAA,iBAAA,CAAiD;AACtDA,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgB;AACzB,UAAA,KAAA;;AADyB,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAad,CAAC;AAAA,MAAA,OAAA;AAAWQ,MAAAA;AAAX,KAAD,KAAuB;AAClC,UAAI,CAACC,OAAO,CAAZ,QAAA,EAAuB;AACrB;AACA;AACAA,QAAAA,OAAO,GAAGC,IAAI,CAAA,OAAA,EAAU,CAAxBD,UAAwB,CAAV,CAAdA;AACD;;AAED,YAAME,SAAS,GAAGJ,QAAQ,CAARA,UAAAA,CAAlB,OAAkBA,CAAlB;;AAEA,UAAA,IAAA,EAAU;AACRK,QAAAA,KAAK,CAALA,YAAAA,CAAAA,SAAAA,EAAAA,IAAAA;AACD;;AAED,aAAA,SAAA;AA1ByB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EA6BT,UAIZ;AAAA,UAJa;AACjBH,QAAAA,OAAO,EAAE;AAAA,UAAA,KAAA;AAAA,UAAA,QAAA;AAAA,UAAA;AAAA,SADQ;AAEjBD,QAAAA,IAAI,GAAGM,KAAK,CAFK,IAAA;AAGjBC,QAAAA;AAHiB,OAIb;AAAA,UAHgDF,cAGhD;AACJ,YAAMF,SAAS,GAAG,KAAA,UAAA,CAAgB;AAAEF,QAAAA,OAAO,EAAE;AAAA,UAAA,KAAA;AAASO,UAAAA;AAAT,SAAX;AAAgCR,QAAAA;AAAhC,OAAhB,CAAlB;;AAEA,UAAIK,cAAc,CAAdA,WAAAA,IAA8BA,cAAc,CAAdA,WAAAA,CAAlC,MAAA,EAAqE;AACnEA,QAAAA,cAAc,CAAdA,YAAAA,GAA8B,CAACA,cAAc,CAA7CA,WAA8B,CAA9BA;AACD;;AAED,WAAA,MAAA,CAAY;AAAET,QAAAA,MAAM,EAAR,SAAA;AAAqBa,QAAAA,MAAM,EAAEJ;AAA7B,OAAZ;;AAEA,UAAIL,IAAI,KAAKM,KAAK,CAAdN,IAAAA,IAAAA,OAAAA,IAAkC,CAACK,cAAc,CAArD,kBAAA,EAA0E;AACxE,aAAA,iBAAA,CAAuB;AAAET,UAAAA,MAAM,EAAR,SAAA;AAAqBW,UAAAA;AAArB,SAAvB;AADF,OAAA,MAEO,IAAI,CAACF,cAAc,CAAnB,kBAAA,EAAwC;AAC7C,aAAA,qBAAA,CAAA,SAAA;AACD;;AAED,UAAA,mBAAA,EAAyB;AACvB,aAAA,mBAAA,CAAyB;AAAET,UAAAA,MAAM,EAAEO;AAAV,SAAzB;AACD;;AAED,aAAA,SAAA;AApDyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAuDL,CAAC;AAAA,MAAA,IAAA;AAAA,MAAA,MAAA;AAAgBO,MAAAA;AAAhB,KAAD,KAAkC;AACtD,YAAMd,MAAM,GAAG,KAAA,eAAA,CAAqB;AAClCK,QAAAA,OAAO,kCAAE,IAAF;AAAaU,UAAAA,mBAAmB,EAAE;AAAlC;AAD2B,OAArB,CAAf;;AAIA,UAAA,MAAA,EAAY;AACVC,QAAAA,WAAW,CAAXA,gBAAAA,CAA6B;AAAA,UAAA,MAAA;AAAUC,UAAAA;AAAV,SAA7BD;AACD;;AAED,UAAA,UAAA,EAAgB;AACd,aAAA,aAAA,CAAmB;AAAA,UAAA,MAAA;AAAUE,UAAAA,KAAK,EAAEJ;AAAjB,SAAnB;AACD;;AAED,aAAA,MAAA;AApEyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAwEX,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAe,KAAA,UAAA,CAAA,KAAA,KAxEJ,IAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,uBAAA,EA0EH,CAAC;AAAEnB,MAAAA;AAAF,KAAD,KACtBG,QAAQ,CAARA,qBAAAA,CA3EyB,MA2EzBA,CA3EyB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EA6EL,CAAC;AAAEH,MAAAA;AAAF,KAAD,KAAgB;AACpC,UAAI;AACFG,QAAAA,QAAQ,CAARA,mBAAAA,CAAAA,MAAAA;AADF,OAAA,CAEE,OAAA,KAAA,EAAc;AACd;AACA;AACA,YAAIiB,KAAK,CAALA,OAAAA,KAAJ,2BAAA,EAAmD;AACjD,gBAAA,KAAA;AACD;AACF;AAtFwB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAyFlB,CAAC;AAAEpB,MAAAA;AAAF,KAAD,KAAgBqB,KAAK,CAALA,MAAAA,CAzFE,MAyFFA,CAzFE,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EA2Fb,CAAC;AAAER,MAAAA;AAAF,KAAD,KAAgBA,MAAM,IAAIS,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,KA3Fb,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EA6FlB,CAAC;AAAA,MAAA,MAAA;AAAUT,MAAAA;AAAV,KAAD,KACP,KAAA,WAAA,CAAiB;AAAEA,MAAAA;AAAF,KAAjB,KAAgC,KAAK,CAAL,MAAA,CAAA,MAAA,EAAqB;AAAEU,MAAAA,IAAI,EAAEV;AAAR,KAArB,CA9FP,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAgGP,CAAC;AAAA,MAAA,MAAA;AAAUF,MAAAA;AAAV,KAAD,KAClBA,OAAO,IAAI,KAAA,MAAA,CAAY;AAAA,MAAA,MAAA;AAAUE,MAAAA,MAAM,EAAE;AAAEW,QAAAA,kBAAkB,EAAEb;AAAtB;AAAlB,KAAZ,CAjGc,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAmGVP,IAAI,IAAI,KAAK,CAAL,IAAA,CAAW;AAAEqB,MAAAA,KAAK,EAAE;AAAEC,QAAAA,GAAG,EAAE,CAAA,IAAA;AAAP;AAAT,KAAX,EAnGE,KAmGF,EAnGE,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAqGjB,CAAC;AAAA,MAAA,MAAA;AAAUtB,MAAAA;AAAV,KAAD,KAAsBI,KAAK,CAALA,YAAAA,CAAAA,MAAAA,EArGL,IAqGKA,CArGL,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAuGb,CAAC;AAAER,MAAAA;AAAF,KAAD,KAAgBqB,KAAK,CAALA,OAAAA,CAvGH,MAuGGA,CAvGH,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,6BAAA,EAyGG,CAAC;AAAEM,MAAAA;AAAF,KAAD,KAC5B,KAAK,CAAL,OAAA,CACE;AAAE,uCAAiCA;AAAnC,KADF,EAEE;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,SAAS,EAAX,CAAA;AAAgBC,QAAAA,QAAQ,EAAxB,CAAA;AAA6BC,QAAAA,MAAM,EAAE;AAArC;AAAV,KAFF,CA1GyB,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EA+GX,CAAC;AAAE/B,MAAAA;AAAF,KAAD,KAAgB;AAC9B,YAAMgC,IAAI,GAAG,KAAK,CAAL,OAAA,CAAA,MAAA,EAAsB;AAAEJ,QAAAA,MAAM,EAAE;AAAEK,UAAAA,QAAQ,EAAE;AAAZ;AAAV,OAAtB,CAAb;AAEA,aACED,IAAI,CAAJA,QAAAA,CAAAA,QAAAA,IACGA,IAAI,CAAJA,QAAAA,CAAAA,QAAAA,CADHA,KAAAA,IAEGA,IAAI,CAAJA,QAAAA,CAAAA,QAAAA,CAAAA,KAAAA,CAHL,KAAA;AAlHyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAyHV,CAAC;AAAEA,MAAAA;AAAF,KAAD,KAAcX,KAAK,CAALA,MAAAA,CAzHJ,IAyHIA,CAzHJ,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EA2HZ,CAAC;AAAA,MAAA,MAAA;AAAUa,MAAAA;AAAV,KAAD,KAA6B;AAC1C,YAAMC,KAAK,GAAG,WAAW,CAAX,KAAA,CAAkB;AAC9BrC,QAAAA,QAAQ,EAAE;AAAEE,UAAAA;AAAF,SADoB;AAE9BoC,QAAAA,cAAc,EAAE;AAFc,OAAlB,CAAd;;AAKA,UAAI,CAAJ,WAAA,EAAkB;AAChB;AACA,eACED,KAAK,IACFA,KAAK,CAALA,IAAAA,CAAW,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAwBA,cAAc,IAAIA,cAAc,CAAdA,MAAAA,GAF1D,CAEKD,CAFL;AAID;;AAED,aACEA,KAAK,IACFA,KAAK,CAALA,IAAAA,CAAW,CAAC;AAAEC,QAAAA,cAAc,GAAG;AAAnB,OAAD,KACZA,cAAc,CAAdA,IAAAA,CAAoB,CAAC;AAAErC,QAAAA;AAAF,OAAD,KAAaA,GAAG,KAHxC,WAGIqC,CADCD,CAFL;AAzIyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAgJb,CAAC;AAAA,MAAA,MAAA;AAAUE,MAAAA;AAAV,KAAD,KAA4B;AACxC,UAAI,CAAJ,UAAA,EAAiB;AACf,eAAA,KAAA;AACD;;AAED,YAAMF,KAAK,GAAG,WAAW,CAAX,KAAA,CAAkB;AAC9BrC,QAAAA,QAAQ,EAAE;AAAEE,UAAAA;AAAF,SADoB;AAE9BsC,QAAAA,WAAW,EAAE;AAFiB,OAAlB,CAAd;AAKA,aACEH,KAAK,IACFA,KAAK,CAALA,IAAAA,CAAW,CAAC;AAAEG,QAAAA,WAAW,GAAG;AAAhB,OAAD,KACZA,WAAW,CAAXA,IAAAA,CAAiBC,EAAE,IAAIA,EAAE,KAH7B,UAGID,CADCH,CAFL;AA1JyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAiKb,CAAC;AAAA,MAAA,MAAA;AAAUK,MAAAA;AAAV,KAAD,KAA0B;AACtC,YAAM;AAAET,QAAAA;AAAF,UAAaV,KAAK,CAALA,OAAAA,CAAnB,MAAmBA,CAAnB;AACAlB,MAAAA,QAAQ,CAARA,QAAAA,CAAAA,MAAAA,EAAAA,QAAAA;AACAA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,MAAAA,EAA6B4B,MAAM,CAANA,CAAM,CAANA,CAA7B5B,OAAAA;AACAA,MAAAA,QAAQ,CAARA,qBAAAA,CAAAA,MAAAA;AArKyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAwKL,CAAC;AAAA,MAAA,MAAA;AAAUsC,MAAAA,gBAAgB,GAAG;AAA7B,KAAD,KAAuC;AAC3D,YAAM;AAAEC,QAAAA,aAAa,EAAEC,gBAAgB,GAAG;AAApC,UAA2C,KAAA,GAAA,CAAjD,MAAiD,CAAjD;AAEAA,MAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAC;AAAE5C,QAAAA,GAAG,EAAE6C;AAAP,OAAD,KACvB,KAAA,UAAA,CAAgB;AACdL,QAAAA,EAAE,EADY,MAAA;AAEdM,QAAAA,QAAQ,EAFM,eAAA;AAGdC,QAAAA,MAAM,EAAEF;AAHM,OAAhB,CADFD;AAOAF,MAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAC;AAAE1C,QAAAA,GAAG,EAAL,cAAA;AAAuBgD,QAAAA;AAAvB,OAAD,KACvB,KAAA,gBAAA,CAAsB;AAAA,QAAA,MAAA;AAAA,QAAA,cAAA;AAA0BA,QAAAA;AAA1B,OAAtB,CADFN;AAlLyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAsLT,CAAC;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAmBrC,MAAAA;AAAnB,KAAD,KAA+B;AAC/C,UAAI,KAAA,aAAA,CAAmB;AAAEe,QAAAA;AAAF,OAAnB,CAAJ,EAAmC;AACjC;AACA;AACA,eAAO,KAAA,UAAA,CAAP,KAAO,CAAP;AACD;;AACD,YAAMnB,MAAM,GAAG,QAAQ,CAAR,UAAA,CAAoB;AAAA,QAAA,KAAA;AAASY,QAAAA;AAAT,OAApB,CAAf;AACAJ,MAAAA,KAAK,CAALA,YAAAA,CAAAA,MAAAA,EAAAA,IAAAA;AACA,aAAO,KAAA,GAAA,CAAP,MAAO,CAAP;AA9LyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAiMT,CAAC;AAAER,MAAAA;AAAF,KAAD,KAAgB;AAChC,YAAMgD,GAAG,GAAG,IAAZ,OAAY,EAAZ;AACAA,MAAAA,GAAG,CAAHA,eAAAA,CAAAA,GAAAA;AACA,YAAMC,SAAS,GAAGD,GAAG,CAAHA,SAAAA,CAAAA,kBAAAA,EAAAA,OAAAA,CAAAA,WAAAA,EAAlB,EAAkBA,CAAlB;AAGA,YAAME,UAAU,GAAGF,GAAG,CAAHA,SAAAA,CAAAA,mBAAAA,EAAAA,OAAAA,CAAAA,WAAAA,EAAnB,EAAmBA,CAAnB;AAGA,YAAMG,SAAS,GAAG,IAAlB,IAAkB,EAAlB;;AACA,WAAA,OAAA,CAAa;AACXZ,QAAAA,EAAE,EADS,MAAA;AAEX1B,QAAAA,MAAM,EAAE;AAAEuC,UAAAA,YAAY,EAAE;AAAA,YAAA,SAAA;AAAaD,YAAAA;AAAb;AAAhB;AAFG,OAAb;;AAIA,aAAO;AAAA,QAAA,SAAA;AAAA,QAAA,UAAA;AAAyBA,QAAAA;AAAzB,OAAP;AA/MyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,EAkNZ,CAAC;AAAA,MAAA,IAAA;AAAA,MAAA,SAAA;AAAmBE,MAAAA;AAAnB,KAAD,KAAwC;AACrD,YAAM;AAAElC,QAAAA;AAAF,UAAN,IAAA;;AACA,UAAI,KAAA,aAAA,CAAmB;AAAEA,QAAAA;AAAF,OAAnB,CAAJ,EAAmC;AACjC,cAAM,IAAImC,MAAM,CAAV,KAAA,CAAN,mHAAM,CAAN;AACD;;AAED,YAAM;AAAA,QAAA,MAAA;AAAA,QAAA,GAAA;AAAeC,QAAAA;AAAf,UAAyB,KAAA,aAAA,CAAmB;AAAA,QAAA,IAAA;AAAA,QAAA,SAAA;AAGhDC,QAAAA,cAAc,EAAE;AAHgC,OAAnB,CAA/B;AAMA,YAAMvC,MAAM,GAAG,WAAW,CAAX,cAAA,CAA2B;AAAEjB,QAAAA;AAAF,OAA3B,CAAf;AACAgB,MAAAA,WAAW,CAAXA,MAAAA,CAAmB;AAAA,QAAA,MAAA;AAAUH,QAAAA,MAAM,EAAE;AAAEwC,UAAAA;AAAF;AAAlB,OAAnBrC;AAEA,aAAO,SAAS,CAAT,GAAA,CAAc;AACnByC,QAAAA,OAAO,EAAEC,SAAS,CADC,UAAA;AAAA,QAAA,MAAA;AAGnBC,QAAAA,MAAM,EAAE;AAAA,UAAA,SAAA;AAENC,UAAAA,OAAO,EAAEC,0BAA0B,CAAC;AAAE7B,YAAAA,IAAI,EAAE8B;AAAR,WAAD,CAF7B;AAGNC,UAAAA,MAAM,EAAE,KAAA,gBAAA,CAAsB;AAAE/D,YAAAA;AAAF,WAAtB;AAHF;AAHW,OAAd,CAAP;AAjOyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EA4OX,CAAC;AACfgC,MAAAA,IAAI,EAAE;AAAA,QAAA,KAAA;AAAA,QAAA,SAAA;AAAA,QAAA,QAAA;AAA8BgC,QAAAA;AAA9B,OADS;AAAA,MAAA,SAAA;AAGfR,MAAAA,cAAc,GAHC,IAAA;AAIf7C,MAAAA;AAJe,KAAD,KAKV;AACJ,UAAA,GAAA;AACA,UAAA,kBAAA;;AAEA,UAAA,SAAA,EAAe;AACbmD,QAAAA,GAAG,GAAG,KAAA,QAAA,CAAc;AAClBhE,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,GAAG,EAAEkE;AAAP,WADQ;AAElBC,UAAAA,IAAI,EAFc,CAAA;AAGlB1C,UAAAA,kBAAkB,EAHA,CAAA;AAIlBkB,UAAAA,aAAa,EAAE;AAAEwB,YAAAA,IAAI,EAAE;AAAR;AAJG,SAAd,CAANJ;AAOA,cAAM;AAAEtC,UAAAA,kBAAkB,EAAE2C;AAAtB,YAAN,GAAA;AAEA3C,QAAAA,kBAAkB,GAAlBA,qBAAAA;AAVF,OAAA,MAWO,IAAA,OAAA,EAAa;AAClBA,QAAAA,kBAAkB,GAAlBA,OAAAA;AACD;;AAED,YAAM4C,SAAS,GAAG,CAAC,KAAA,aAAA,CAAmB;AAAEjD,QAAAA;AAAF,OAAnB,CAAnB;AACA,UAAA,MAAA;AACA,UAAA,KAAA;;AAEA,UAAA,SAAA,EAAe;AACboC,QAAAA,KAAK,GAAG,KAAA,GAAA,CAARA,kBAAQ,CAARA;AACAvD,QAAAA,MAAM,GAAG,KAAA,eAAA,CAAqB;AAC5BK,UAAAA,OAAO,EAAE;AAAA,YAAA,KAAA;AAEPU,YAAAA,mBAAmB,EAAEyC,cAAc,IAAI,CAAlBA,GAAAA,IAA0BF,MAAM,CAF9C,YAAA;AAAA,YAAA,SAAA;AAAA,YAAA,QAAA;AAKPe,YAAAA,YAAY,EAAE,CAAA,WAAA;AALP,WADmB;AAQ5B1D,UAAAA,OAAO,EAAE4C,KAAK,IAAIA,KAAK,CAACxD;AARI,SAArB,CAATC;;AAWA,YAAA,GAAA,EAAS;AACP,eAAA,aAAA,CAAmB;AAAA,YAAA,MAAA;AAAUkB,YAAAA,KAAK,EAAE+C;AAAjB,WAAnB;AACD;AAfH,OAAA,MAgBO;AACL,cAAM;AACJlE,UAAAA,GAAG,EADC,cAAA;AAEJyB,UAAAA,kBAAkB,EAAE8C;AAFhB,YAGF,KAAA,UAAA,CAHJ,KAGI,CAHJ;AAKAf,QAAAA,KAAK,GAAG,KAAA,GAAA,CAARA,0BAAQ,CAARA;AACAvD,QAAAA,MAAM,GAANA,cAAAA;AACD;;AAED,aAAO;AAAA,QAAA,MAAA;AAAA,QAAA,KAAA;AAAA,QAAA,GAAA;AAAsBoE,QAAAA;AAAtB,OAAP;AAlSyB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAqSX,CAAC;AAAA,MAAA,IAAA;AAEf9B,MAAAA,WAAW,GAFI,EAAA;AAGfiC,MAAAA,YAAY,GAHG,EAAA;AAIfC,MAAAA,UAAU,GAJK,EAAA;AAAA,MAAA,SAAA;AAAA,MAAA,OAAA;AAOfnB,MAAAA;AAPe,KAAD,KAQV;AACJ,YAAMoB,SAAS,GAAGnC,WAAW,CAAXA,MAAAA,KAAAA,CAAAA,IACbiC,YAAY,CAAZA,MAAAA,KADajC,CAAAA,IAEbkC,UAAU,CAAVA,MAAAA,KAFL,CAAA;;AAIA,UAAA,SAAA,EAAe;AACb,eAAO,KAAA,YAAA,CAAkB;AAAA,UAAA,IAAA;AAAA,UAAA,SAAA;AAAmBnB,UAAAA;AAAnB,SAAlB,CAAP;AACD;;AAED,YAAM;AAAEqB,QAAAA;AAAF,UAAN,IAAA;AACA,YAAM;AAAA,QAAA,MAAA;AAAA,QAAA,KAAA;AAAA,QAAA,GAAA;AAAsBN,QAAAA;AAAtB,UAAoC,KAAA,aAAA,CAAmB;AAAA,QAAA,IAAA;AAE3DH,QAAAA,SAAS,EAAEA,SAAS,IAFuC,SAAA;AAAA,QAAA,OAAA;AAI3D;AACA;AACAT,QAAAA,cAAc,EAAE;AAN2C,OAAnB,CAA1C;AASA,UAAImB,QAAQ,GAAZ,EAAA;;AAEA,UAAIrC,WAAW,IAAIA,WAAW,CAA9B,MAAA,EAAuC;AACrCqC,QAAAA,QAAQ,GAAG,CACT,GADS,QAAA,EAET,eAAe,CAAf,UAAA,CAA2B;AAAA,UAAA,WAAA;AAAA,UAAA,KAAA;AAAA,UAAA,GAAA;AAAA,UAAA,MAAA;AAAA,UAAA,SAAA;AAMzBtB,UAAAA;AANyB,SAA3B,CAFS,CAAXsB;AAWD;;AACD,UAAIJ,YAAY,IAAIA,YAAY,CAAhC,MAAA,EAAyC;AACvCI,QAAAA,QAAQ,GAAG,CACT,GADS,QAAA,EAET,GAAG,YAAY,CAAZ,GAAA,CAAiBzC,WAAW,IAC7B,gBAAgB,CAAhB,UAAA,CAA4B;AAAA,UAAA,WAAA;AAAA,UAAA,MAAA;AAAA,UAAA,GAAA;AAAA,UAAA,SAAA;AAK1B0C,UAAAA,eAAe,EAAE5C,IAAI,CALK,eAAA;AAM1B6C,UAAAA,WAAW,EAAE7C,IAAI,CANS,WAAA;AAO1BqB,UAAAA;AAP0B,SAA5B,CADC,CAFM,CAAXsB;AAaD;;AACD,UAAIH,UAAU,IAAIA,UAAU,CAA5B,MAAA,EAAqC;AACnC,cAAMM,mBAAmB,GAAG,UAAU,CAAV,GAAA,CAAgBC,QAAD,IAAc;AACvD,cAAA,UAAA;AAEA,gBAAMC,gBAAgB,GAAG,eAAe,CAAf,QAAA,CAAyB;AAChDlF,YAAAA,QAAQ,EAAE;AAAEmF,cAAAA,UAAU,EAAEF,QAAQ,CAACE;AAAvB;AADsC,WAAzB,CAAzB;;AAIA,cAAI,CAAJ,gBAAA,EAAuB;AACrB5C,YAAAA,UAAU,GAAG,eAAe,CAAf,sBAAA,CAAuC;AAClDrC,cAAAA,MAAM,EAAE8D,GAAG,CADuC,GAAA;AAElDiB,cAAAA;AAFkD,aAAvC,CAAb1C;AADF,WAAA,MAKO;AACLA,YAAAA,UAAU,GAAG2C,gBAAgB,CAA7B3C,GAAAA;AACD;;AAED,cAAI,CAAJ,UAAA,EAAiB;AACf,kBAAM,IAAIiB,MAAM,CAAV,KAAA,CAAN,mBAAM,CAAN;AACD;;AAED,iBAAA,UAAA;AApBF,SAA4B,CAA5B;AAuBAqB,QAAAA,QAAQ,GAAG,CACT,GADS,QAAA,EAET,eAAe,CAAf,UAAA,CAA2B;AACzBrC,UAAAA,WAAW,EADc,mBAAA;AAAA,UAAA,KAAA;AAAA,UAAA,GAAA;AAAA,UAAA,MAAA;AAAA,UAAA,SAAA;AAMzBe,UAAAA;AANyB,SAA3B,CAFS,CAAXsB;AAWD;;AAED,aAAOO,OAAO,CAAPA,GAAAA,CAAP,QAAOA,CAAP;AAnYyB,KAAA,CAAA;;AAEzB,SAAA,eAAA,CAAA,SAAA;AACD;;AAEDrF,EAAAA,GAAG,CAAA,MAAA,EAAS;AACV,WAAO,KAAA,QAAA;AAAgBC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEC;AAAP;AAA1B,OAA8CC,QAAQ,EAAtD,EAAP;AACD;;AAEDC,EAAAA,UAAU,CAAA,KAAA,EAAQ;AAChB,WAAOC,QAAQ,CAARA,eAAAA,CAAP,KAAOA,CAAP;AACD;;AA2XDgF,EAAAA,gBAAgB,CAAC;AAAEnF,IAAAA;AAAF,GAAD,EAAa;AAC3B,QAAIoF,MAAM,GAAG9B,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAAA,UAAAA,CAAb,GAAA;;AAEA,QAAI+B,eAAe,CAAfA,OAAAA,CAAAA,MAAAA,EAAgC3E,KAAK,CAAzC,GAAI2E,CAAJ,EAAgD;AAC9CD,MAAAA,MAAM,GAAG9B,MAAM,CAANA,QAAAA,CAAAA,MAAAA,CAAAA,UAAAA,CAAT8B,GAAAA;AACD;;AAED,UAAM;AAAEzD,MAAAA;AAAF,QAAYxB,QAAQ,CAARA,kBAAAA,CAAAA,MAAAA,EAAAA,IAAAA,EAAlB,eAAkBA,CAAlB;AAKA,WAAQ,GAAEiF,MAAO,mBAAkBzD,KAAnC,EAAA;AACD;;AAED2D,EAAAA,aAAa,CAAC;AAAA,IAAA,MAAA;AAAA,IAAA,KAAA;AAAiB1C,IAAAA;AAAjB,GAAD,EAAoC;AAC/C,QAAI,CAAJ,cAAA,EAAqB;AACnB,YAAM2C,OAAO,GAAG,KAAA,uBAAA,CAAhB,KAAgB,CAAhB;AACA3C,MAAAA,cAAc,GAAG2C,OAAO,IAAIA,OAAO,CAAnC3C,GAAAA;AACD;;AAED,WAAO,KAAA,MAAA,CAAY;AAAA,MAAA,MAAA;AAEjB/B,MAAAA,MAAM,EAAE;AACN2E,QAAAA,kBAAkB,EADZ,KAAA;AAENC,QAAAA,0BAA0B,EAAE7C;AAFtB;AAFS,KAAZ,CAAP;AAOD;;AAED8C,EAAAA,yBAAyB,CAAC;AAAA,IAAA,MAAA;AAAU9C,IAAAA;AAAV,GAAD,EAA6B;AACpD,WAAO,KAAA,MAAA,CAAY;AAAA,MAAA,MAAA;AAEjB/B,MAAAA,MAAM,EAAE;AAAE4E,QAAAA,0BAA0B,EAAE7C;AAA9B;AAFS,KAAZ,CAAP;AAID;;AAED+C,EAAAA,2BAA2B,CAAC;AAAA,IAAA,IAAA;AAAA,IAAA,cAAA;AAAA,IAAA,KAAA;AAAA,IAAA,KAAA;AAAsChF,IAAAA;AAAtC,GAAD,EAAkD;AAC3E,UAAM;AAAA,MAAA,KAAA;AAASqD,MAAAA;AAAT,QAAN,IAAA;AACA,QAAA,UAAA;;AAEA,QAAI,KAAA,aAAA,CAAmB;AAAE7C,MAAAA;AAAF,KAAnB,CAAJ,EAAmC;AACjC,YAAM,IAAImC,MAAM,CAAV,KAAA,CAAN,6BAAM,CAAN;AACD;;AAED,QAAA,KAAA,EAAW;AACT,YAAM;AAAE9B,QAAAA;AAAF,UAAyB,KAAA,QAAA,CAAc;AAC3C1B,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,GAAG,EAAEmB;AAAP,SADiC;AAE3CM,QAAAA,kBAAkB,EAAE;AAFuB,OAAd,CAA/B;AAIAoE,MAAAA,UAAU,GAAVA,kBAAAA;AALF,KAAA,MAMO;AACLA,MAAAA,UAAU,GAAVA,OAAAA;AACD;;AAED,UAAM5F,MAAM,GAAG,KAAA,eAAA,CAAqB;AAClCK,MAAAA,OAAO,kCAAE,IAAF;AAELgE,QAAAA,YAAY,EAAE,CAFP,WAEO,CAFT;AAGLtD,QAAAA,mBAAmB,EAAE,CAACuC,MAAM,CAHrB,aAAF,CAGuC;;AAHvC,QAD2B;AAMlClD,MAAAA,IAAI,EAAEM,KAAK,CANuB,GAAA;AAOlCC,MAAAA,OAAO,EAAEiF;AAPyB,KAArB,CAAf;AAUA,SAAA,gBAAA,CAAsB;AAAA,MAAA,MAAA;AAAA,MAAA,cAAA;AAA0B7C,MAAAA,QAAQ,EAAE;AAAE8C,QAAAA;AAAF;AAApC,KAAtB;AAEA,WAAA,MAAA;AACD;;AAEDC,EAAAA,gBAAgB,CAAC;AAAA,IAAA,MAAA;AAAA,IAAA,cAAA;AAA0B/C,IAAAA;AAA1B,GAAD,EAAuC;AACrD,UAAM;AAAEL,MAAAA,aAAa,EAAEqD,iBAAiB,GAAG;AAArC,QAA4C,KAAA,QAAA,CAAc;AAC9DjG,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEC;AAAP,OADoD;AAE9D0C,MAAAA,aAAa,EAAE;AAAE3C,QAAAA,GAAG,EAAE;AAAP;AAF+C,KAAd,CAAlD;AAIA,UAAMiG,MAAM,GAAGD,iBAAiB,CAAjBA,MAAAA,KAAf,CAAA;AAEA,SAAA,OAAA,CAAa;AACXxD,MAAAA,EAAE,EADS,MAAA;AAEXM,MAAAA,QAAQ,EAFG,eAAA;AAGXC,MAAAA,MAAM,EAHK,cAAA;AAIXC,MAAAA,QAAQ,kCAAE,QAAF;AAAE,QAAA,MAAF;AAAyBkD,QAAAA,cAAc,EAAE;AAAzC;AAJG,KAAb;AAMD;;AAEDC,EAAAA,uBAAuB,CAAA,MAAA,EAAS;AAC9B,UAAMxD,aAAa,GAAG,mBAAmB,CAAnB,KAAA,CAA0B;AAC9C5C,MAAAA,QAAQ,EAAE;AAAEqG,QAAAA,SAAS,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAErG,YAAAA,GAAG,EAAEC;AAAP;AAAd;AAAb,OADoC;AAE9CmG,MAAAA,SAAS,EAFqC,CAAA;AAG9CjC,MAAAA,IAAI,EAAE;AAHwC,KAA1B,CAAtB;AAMA,QAAImC,gBAAgB,GAApB,IAAA;;AACA,QAAI3D,aAAa,CAAbA,MAAAA,KAAJ,CAAA,EAAgC;AAC9B2D,MAAAA,gBAAgB,GAAG3D,aAAa,CAAhC2D,CAAgC,CAAhCA;AADF,KAAA,MAEO,IAAI3D,aAAa,CAAbA,MAAAA,GAAJ,CAAA,EAA8B;AACnC2D,MAAAA,gBAAgB,GAAG,aAAa,CAAb,IAAA,CAAmB,CAAC;AAAEF,QAAAA;AAAF,OAAD,KAAmB;AACvD,cAAMG,QAAQ,GAAGH,SAAS,CAATA,IAAAA,CAAe,CAAC;AAAEpG,UAAAA;AAAF,SAAD,KAAaA,GAAG,KAAhD,MAAiBoG,CAAjB;AACA,eAAOG,QAAQ,CAAf,MAAA;AAFiB,OAAA,KAGb5D,aAAa,CAHnB2D,CAGmB,CAHnBA;AAID;;AAED,WAAA,gBAAA;AACD;;AAEDE,EAAAA,oBAAoB,CAAC;AAAA,IAAA,MAAA;AAAA,IAAA,cAAA;AAA0BN,IAAAA;AAA1B,GAAD,EAA6C;AAC/D,SAAA,kBAAA,CAAwB;AACtB1D,MAAAA,EAAE,EADoB,MAAA;AAEtBM,MAAAA,QAAQ,EAFc,eAAA;AAGtBC,MAAAA,MAAM,EAHgB,cAAA;AAItBC,MAAAA,QAAQ,EAAE;AAAEkD,QAAAA;AAAF;AAJY,KAAxB;AAMD;;AAEDO,EAAAA,eAAe,CAAC5G,SAAS,GAAV,EAAA,EAAiB;AAC9B,SAAA,SAAA,GAAiB,SAAS,CAAT,GAAA,CACTuB,KAAD,IAAW;AACd,YAAMsF,QAAQ,GAAG,KAAA,UAAA,CAAjB,KAAiB,CAAjB;;AACA,UAAA,QAAA,EAAc;AACZ,eAAOA,QAAQ,CAAf,GAAA;AACD;AALY,KAAA,EAAA,MAAA,CAOPC,CAAC,IAPX,CAAiB,CAAjB;AAQD;;AAEDC,EAAAA,qBAAqB,CAAA,MAAA,EAAS;AAC5B,UAAM;AAAA,MAAA,KAAA;AAASnF,MAAAA;AAAT,QAAgC,KAAA,QAAA,CAAc;AAClD1B,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAEC;AAAP,OADwC;AAElDwB,MAAAA,kBAAkB,EAFgC,CAAA;AAGlDC,MAAAA,KAAK,EAAE;AAH2C,KAAd,CAAtC;;AAMA,QAAA,kBAAA,EAAwB;AACtB;AACD;;AACD,QAAA,WAAA;;AAEA,QAAIA,KAAK,CAALA,QAAAA,CAAef,KAAK,CAAxB,IAAIe,CAAJ,EAAgC;AAC9B,YAAMmF,eAAe,GAAG,KAAA,QAAA,CAAc;AACpC9G,QAAAA,QAAQ,EAAE;AACR2B,UAAAA,KAAK,EAAEf,KAAK,CADJ,IAAA;AAERc,UAAAA,kBAAkB,EAAE;AAAEE,YAAAA,GAAG,EAAE,KAAK9B;AAAZ;AAFZ,SAD0B;AAKpCiH,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAE3D,YAAAA,SAAS,EAAE,CAAC;AAAd;AAAR,SAL0B;AAMpC3B,QAAAA,kBAAkB,EANkB,CAAA;AAOpC2B,QAAAA,SAAS,EAAE;AAPyB,OAAd,CAAxB;;AAUA,UAAIyD,eAAe,IAAIA,eAAe,CAAtC,kBAAA,EAA2D;AACzD,cAAMG,KAAK,GAAG,KAAA,SAAA,CAAA,OAAA,CAAuBH,eAAe,CAApD,kBAAc,CAAd;;AACA,YAAIG,KAAK,IAAI,KAAA,SAAA,CAAA,MAAA,GAAb,CAAA,EAAwC;AACtCC,UAAAA,WAAW,GAAG,KAAA,SAAA,CAAdA,CAAc,CAAdA;AADF,SAAA,MAEO;AACLA,UAAAA,WAAW,GAAG,KAAA,SAAA,CAAeD,KAAK,GAAlCC,CAAc,CAAdA;AACD;AANH,OAAA,MAOO;AACL;AACAA,QAAAA,WAAW,GAAG,KAAA,SAAA,CAAdA,CAAc,CAAdA;AACD;AACF;;AAED,WAAO,KAAA,MAAA,CAAY;AAAA,MAAA,MAAA;AAAUnG,MAAAA,MAAM,EAAE;AAAEW,QAAAA,kBAAkB,EAAEwF;AAAtB;AAAlB,KAAZ,CAAP;AACD;;AAziBqD;;qBA4iBzC,IAAA,gBAAA,CAAqB;AAAEpH,EAAAA,SAAS,EAAEqH;AAAb,CAArB,C","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Roles } from 'meteor/alanning:roles';\nimport { Accounts } from 'meteor/accounts-base';\nimport NodeRSA from 'node-rsa';\nimport omit from 'lodash/omit';\n\nimport { EMAIL_IDS } from '../../email/emailConstants';\nimport { sendEmail } from '../../methods';\nimport { fullUser } from '../../fragments';\nimport CollectionService from '../../helpers/CollectionService';\nimport LoanService from '../../loans/server/LoanService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport SecurityService from '../../security';\nimport { getUserNameAndOrganisation } from '../../helpers';\nimport { ROLES } from '../userConstants';\nimport { roundRobinAdvisors } from './userServerContants';\nimport Users from '../users';\n\nexport class UserServiceClass extends CollectionService {\n  constructor({ employees }) {\n    super(Users);\n    this.setupRoundRobin(employees);\n  }\n\n  get(userId) {\n    return this.fetchOne({ $filters: { _id: userId }, ...fullUser() });\n  }\n\n  getByEmail(email) {\n    return Accounts.findUserByEmail(email);\n  }\n\n  createUser = ({ options, role }) => {\n    if (!options.password) {\n      // password is not even allowed to be undefined,\n      // it has to be stripped from the options object\n      options = omit(options, ['password']);\n    }\n\n    const newUserId = Accounts.createUser(options);\n\n    if (role) {\n      Roles.setUserRoles(newUserId, role);\n    }\n\n    return newUserId;\n  };\n\n  adminCreateUser = ({\n    options: { email, password, sendEnrollmentEmail, ...additionalData },\n    role = ROLES.USER,\n    adminId,\n  }) => {\n    const newUserId = this.createUser({ options: { email, password }, role });\n\n    if (additionalData.phoneNumber && additionalData.phoneNumber.length) {\n      additionalData.phoneNumbers = [additionalData.phoneNumber];\n    }\n\n    this.update({ userId: newUserId, object: additionalData });\n\n    if (role === ROLES.USER && adminId && !additionalData.assignedEmployeeId) {\n      this.assignAdminToUser({ userId: newUserId, adminId });\n    } else if (!additionalData.assignedEmployeeId) {\n      this.setAssigneeForNewUser(newUserId);\n    }\n\n    if (sendEnrollmentEmail) {\n      this.sendEnrollmentEmail({ userId: newUserId });\n    }\n\n    return newUserId;\n  };\n\n  anonymousCreateUser = ({ user, loanId, referralId }) => {\n    const userId = this.adminCreateUser({\n      options: { ...user, sendEnrollmentEmail: true },\n    });\n\n    if (loanId) {\n      LoanService.assignLoanToUser({ userId, loanId });\n    }\n\n    if (referralId) {\n      this.setReferredBy({ userId, proId: referralId });\n    }\n\n    return userId;\n  };\n\n  // This should remain a simple inequality check\n  doesUserExist = ({ email }) => this.getByEmail(email) != null;\n\n  sendVerificationEmail = ({ userId }) =>\n    Accounts.sendVerificationEmail(userId);\n\n  sendEnrollmentEmail = ({ userId }) => {\n    try {\n      Accounts.sendEnrollmentEmail(userId);\n    } catch (error) {\n      // FIXME: Temporary fix for meteor toys in dev\n      // https://github.com/MeteorToys/meteor-devtools/issues/111\n      if (error.message !== 'MeteorToys is not defined') {\n        throw error;\n      }\n    }\n  };\n\n  remove = ({ userId }) => Users.remove(userId);\n\n  allowUpdate = ({ object }) => object && Object.keys(object).length !== 0;\n\n  update = ({ userId, object }) =>\n    this.allowUpdate({ object }) && Users.update(userId, { $set: object });\n\n  assignAdminToUser = ({ userId, adminId }) =>\n    adminId && this.update({ userId, object: { assignedEmployeeId: adminId } });\n\n  getUsersByRole = role => Users.find({ roles: { $in: [role] } }).fetch();\n\n  setRole = ({ userId, role }) => Roles.setUserRoles(userId, role);\n\n  getUserById = ({ userId }) => Users.findOne(userId);\n\n  getUserByPasswordResetToken = ({ token }) =>\n    Users.findOne(\n      { 'services.password.reset.token': token },\n      { fields: { firstName: 1, lastName: 1, emails: 1 } },\n    );\n\n  getLoginToken = ({ userId }) => {\n    const user = Users.findOne(userId, { fields: { services: 1 } });\n\n    return (\n      user.services.password\n      && user.services.password.reset\n      && user.services.password.reset.token\n    );\n  };\n\n  testCreateUser = ({ user }) => Users.insert(user);\n\n  hasPromotion = ({ userId, promotionId }) => {\n    const loans = LoanService.fetch({\n      $filters: { userId },\n      promotionLinks: 1,\n    });\n\n    if (!promotionId) {\n      // Return true if any promotion exists\n      return (\n        loans\n        && loans.some(({ promotionLinks }) => promotionLinks && promotionLinks.length > 0)\n      );\n    }\n\n    return (\n      loans\n      && loans.some(({ promotionLinks = [] }) =>\n        promotionLinks.some(({ _id }) => _id === promotionId))\n    );\n  };\n\n  hasProperty = ({ userId, propertyId }) => {\n    if (!propertyId) {\n      return false;\n    }\n\n    const loans = LoanService.fetch({\n      $filters: { userId },\n      propertyIds: 1,\n    });\n\n    return (\n      loans\n      && loans.some(({ propertyIds = [] }) =>\n        propertyIds.some(id => id === propertyId))\n    );\n  };\n\n  changeEmail = ({ userId, newEmail }) => {\n    const { emails } = Users.findOne(userId);\n    Accounts.addEmail(userId, newEmail);\n    Accounts.removeEmail(userId, emails[0].address);\n    Accounts.sendVerificationEmail(userId);\n  };\n\n  updateOrganisations = ({ userId, newOrganisations = [] }) => {\n    const { organisations: oldOrganisations = [] } = this.get(userId);\n\n    oldOrganisations.forEach(({ _id: organisationId }) =>\n      this.removeLink({\n        id: userId,\n        linkName: 'organisations',\n        linkId: organisationId,\n      }));\n\n    newOrganisations.forEach(({ _id: organisationId, metadata }) =>\n      this.linkOrganisation({ userId, organisationId, metadata }));\n  };\n\n  testUserAccount = ({ email, password, role }) => {\n    if (this.doesUserExist({ email })) {\n      // Sometimes this methods is called twice from a test.....???????\n      // Apparently due to a duplicate websocket connection\n      return this.getByEmail(email);\n    }\n    const userId = Accounts.createUser({ email, password });\n    Roles.setUserRoles(userId, role);\n    return this.get(userId);\n  };\n\n  generateKeyPair = ({ userId }) => {\n    const key = new NodeRSA();\n    key.generateKeyPair(512);\n    const publicKey = key\n      .exportKey('pkcs1-public-pem')\n      .replace(/\\r?\\n|\\r/g, '');\n    const privateKey = key\n      .exportKey('pkcs1-private-pem')\n      .replace(/\\r?\\n|\\r/g, '');\n    const createdAt = new Date();\n    this._update({\n      id: userId,\n      object: { apiPublicKey: { publicKey, createdAt } },\n    });\n    return { publicKey, privateKey, createdAt };\n  };\n\n  proReferUser = ({ user, proUserId, shareSolvency }) => {\n    const { email } = user;\n    if (this.doesUserExist({ email })) {\n      throw new Meteor.Error(\"Ce client existe déjà. Vous ne pouvez pas le référer, mais vous pouvez l'inviter sur un de vos biens immobiliers.\");\n    }\n\n    const { userId, pro, admin } = this.proCreateUser({\n      user,\n      proUserId,\n      sendInvitation: false,\n    });\n\n    const loanId = LoanService.fullLoanInsert({ userId });\n    LoanService.update({ loanId, object: { shareSolvency } });\n\n    return sendEmail.run({\n      emailId: EMAIL_IDS.REFER_USER,\n      userId,\n      params: {\n        proUserId,\n        proName: getUserNameAndOrganisation({ user: pro }),\n        ctaUrl: this.getEnrollmentUrl({ userId }),\n      },\n    });\n  };\n\n  proCreateUser = ({\n    user: { email, firstName, lastName, phoneNumber },\n    proUserId,\n    sendInvitation = true,\n    adminId,\n  }) => {\n    let pro;\n    let assignedEmployeeId;\n\n    if (proUserId) {\n      pro = this.fetchOne({\n        $filters: { _id: proUserId },\n        name: 1,\n        assignedEmployeeId: 1,\n        organisations: { name: 1 },\n      });\n\n      const { assignedEmployeeId: proAssignedEmployeeId } = pro;\n\n      assignedEmployeeId = proAssignedEmployeeId;\n    } else if (adminId) {\n      assignedEmployeeId = adminId;\n    }\n\n    const isNewUser = !this.doesUserExist({ email });\n    let userId;\n    let admin;\n\n    if (isNewUser) {\n      admin = this.get(assignedEmployeeId);\n      userId = this.adminCreateUser({\n        options: {\n          email,\n          sendEnrollmentEmail: sendInvitation && !pro && Meteor.isProduction,\n          firstName,\n          lastName,\n          phoneNumbers: [phoneNumber],\n        },\n        adminId: admin && admin._id,\n      });\n\n      if (pro) {\n        this.setReferredBy({ userId, proId: proUserId });\n      }\n    } else {\n      const {\n        _id: existingUserId,\n        assignedEmployeeId: existingAssignedEmployeeId,\n      } = this.getByEmail(email);\n\n      admin = this.get(existingAssignedEmployeeId);\n      userId = existingUserId;\n    }\n\n    return { userId, admin, pro, isNewUser };\n  };\n\n  proInviteUser = ({\n    user,\n    propertyIds = [],\n    promotionIds = [],\n    properties = [],\n    proUserId,\n    adminId,\n    shareSolvency,\n  }) => {\n    const referOnly = propertyIds.length === 0\n      && promotionIds.length === 0\n      && properties.length === 0;\n\n    if (referOnly) {\n      return this.proReferUser({ user, proUserId, shareSolvency });\n    }\n\n    const { invitedBy } = user;\n    const { userId, admin, pro, isNewUser } = this.proCreateUser({\n      user,\n      proUserId: proUserId || invitedBy,\n      adminId,\n      // Invitation will be sent by the propertyInvitationEmail or\n      // promotionInvitationEmail\n      sendInvitation: false,\n    });\n\n    let promises = [];\n\n    if (propertyIds && propertyIds.length) {\n      promises = [\n        ...promises,\n        PropertyService.inviteUser({\n          propertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency,\n        }),\n      ];\n    }\n    if (promotionIds && promotionIds.length) {\n      promises = [\n        ...promises,\n        ...promotionIds.map(promotionId =>\n          PromotionService.inviteUser({\n            promotionId,\n            userId,\n            pro,\n            isNewUser,\n            promotionLotIds: user.promotionLotIds,\n            showAllLots: user.showAllLots,\n            shareSolvency,\n          })),\n      ];\n    }\n    if (properties && properties.length) {\n      const internalPropertyIds = properties.map((property) => {\n        let propertyId;\n\n        const existingProperty = PropertyService.fetchOne({\n          $filters: { externalId: property.externalId },\n        });\n\n        if (!existingProperty) {\n          propertyId = PropertyService.insertExternalProperty({\n            userId: pro._id,\n            property,\n          });\n        } else {\n          propertyId = existingProperty._id;\n        }\n\n        if (!propertyId) {\n          throw new Meteor.Error('No property found');\n        }\n\n        return propertyId;\n      });\n\n      promises = [\n        ...promises,\n        PropertyService.inviteUser({\n          propertyIds: internalPropertyIds,\n          admin,\n          pro,\n          userId,\n          isNewUser,\n          shareSolvency,\n        }),\n      ];\n    }\n\n    return Promise.all(promises);\n  };\n\n  getEnrollmentUrl({ userId }) {\n    let domain = Meteor.settings.public.subdomains.app;\n\n    if (SecurityService.hasRole(userId, ROLES.PRO)) {\n      domain = Meteor.settings.public.subdomains.pro;\n    }\n\n    const { token } = Accounts.generateResetToken(\n      userId,\n      null,\n      'enrollAccount',\n    );\n    return `${domain}/enroll-account/${token}`;\n  }\n\n  setReferredBy({ userId, proId, organisationId }) {\n    if (!organisationId) {\n      const mainOrg = this.getUserMainOrganisation(proId);\n      organisationId = mainOrg && mainOrg._id;\n    }\n\n    return this.update({\n      userId,\n      object: {\n        referredByUserLink: proId,\n        referredByOrganisationLink: organisationId,\n      },\n    });\n  }\n\n  setReferredByOrganisation({ userId, organisationId }) {\n    return this.update({\n      userId,\n      object: { referredByOrganisationLink: organisationId },\n    });\n  }\n\n  proInviteUserToOrganisation({ user, organisationId, title, proId, adminId }) {\n    const { email, phoneNumber } = user;\n    let assigneeId;\n\n    if (this.doesUserExist({ email })) {\n      throw new Meteor.Error('Cet utilisateur existe déjà');\n    }\n\n    if (proId) {\n      const { assignedEmployeeId } = this.fetchOne({\n        $filters: { _id: proId },\n        assignedEmployeeId: 1,\n      });\n      assigneeId = assignedEmployeeId;\n    } else {\n      assigneeId = adminId;\n    }\n\n    const userId = this.adminCreateUser({\n      options: {\n        ...user,\n        phoneNumbers: [phoneNumber],\n        sendEnrollmentEmail: !Meteor.isDevelopment, // Meteor toys is not defined\n      },\n      role: ROLES.PRO,\n      adminId: assigneeId,\n    });\n\n    this.linkOrganisation({ userId, organisationId, metadata: { title } });\n\n    return userId;\n  }\n\n  linkOrganisation({ userId, organisationId, metadata }) {\n    const { organisations: userOrganisations = [] } = this.fetchOne({\n      $filters: { _id: userId },\n      organisations: { _id: 1 },\n    });\n    const isMain = userOrganisations.length === 0;\n\n    this.addLink({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: { ...metadata, isMain, shareCustomers: true },\n    });\n  }\n\n  getUserMainOrganisation(userId) {\n    const organisations = OrganisationService.fetch({\n      $filters: { userLinks: { $elemMatch: { _id: userId } } },\n      userLinks: 1,\n      name: 1,\n    });\n\n    let mainOrganisation = null;\n    if (organisations.length === 1) {\n      mainOrganisation = organisations[0];\n    } else if (organisations.length > 1) {\n      mainOrganisation = organisations.find(({ userLinks }) => {\n        const userLink = userLinks.find(({ _id }) => _id === userId);\n        return userLink.isMain;\n      }) || organisations[0];\n    }\n\n    return mainOrganisation;\n  }\n\n  proSetShareCustomers({ userId, organisationId, shareCustomers }) {\n    this.updateLinkMetadata({\n      id: userId,\n      linkName: 'organisations',\n      linkId: organisationId,\n      metadata: { shareCustomers },\n    });\n  }\n\n  setupRoundRobin(employees = []) {\n    this.employees = employees\n      .map((email) => {\n        const employee = this.getByEmail(email);\n        if (employee) {\n          return employee._id;\n        }\n      })\n      .filter(x => x);\n  }\n\n  setAssigneeForNewUser(userId) {\n    const { roles, assignedEmployeeId } = this.fetchOne({\n      $filters: { _id: userId },\n      assignedEmployeeId: 1,\n      roles: 1,\n    });\n\n    if (assignedEmployeeId) {\n      return;\n    }\n    let newAssignee;\n\n    if (roles.includes(ROLES.USER)) {\n      const lastCreatedUser = this.fetchOne({\n        $filters: {\n          roles: ROLES.USER,\n          assignedEmployeeId: { $in: this.employees },\n        },\n        $options: { sort: { createdAt: -1 } },\n        assignedEmployeeId: 1,\n        createdAt: 1,\n      });\n\n      if (lastCreatedUser && lastCreatedUser.assignedEmployeeId) {\n        const index = this.employees.indexOf(lastCreatedUser.assignedEmployeeId);\n        if (index >= this.employees.length - 1) {\n          newAssignee = this.employees[0];\n        } else {\n          newAssignee = this.employees[index + 1];\n        }\n      } else {\n        // Assign the very first user\n        newAssignee = this.employees[0];\n      }\n    }\n\n    return this.update({ userId, object: { assignedEmployeeId: newAssignee } });\n  }\n}\n\nexport default new UserServiceClass({ employees: roundRobinAdvisors });\n"]},"sourceType":"script","hash":"8ceb675086e11874032c1d9149df3034972f630f"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/propertyServerHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/properties/server/propertyServerHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/propertyServerHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/properties/server/propertyServerHelpers.js"],"names":["UserService","shouldAnonymize","clientShouldAnonymize","getProPropertyCustomerOwnerType","getCustomerOwnerType","PropertyService","LoanService","ANONYMIZED_STRING","ANONYMIZED_USER","name","phoneNumbers","email","anonymizeUser","user","getUserProPropertyPermissions","userId","propertyId","fetchOne","$filters","_id","proProperties","properties","$metadata","permissions","find","getCustomerReferredBy","customerId","referredByUser","referredByOrganisation","getProPropertyStatus","status","organisations","users","currentUser","customerOwnerType","propertyStatus","makeProPropertyLoanAnonymizer","propertyIds","anonymize","propertiesPermissionsAndStatus","undefined","map","loan","rest","shouldAnonymizeUser","every","anonymizeForProperty","solvent","property","isAnonymized","removePropertyFromLoan","update","loanId","object","structures","structure"],"mappings":"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","sourcesContent":["import UserService from '../../users/server/UserService';\nimport {\n  shouldAnonymize as clientShouldAnonymize,\n  getProPropertyCustomerOwnerType as getCustomerOwnerType,\n} from '../propertyClientHelper';\nimport PropertyService from './PropertyService';\nimport LoanService from '../../loans/server/LoanService';\n\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING,\n};\nconst anonymizeUser = ({ user }) => ({ ...user, ...ANONYMIZED_USER });\n\nconst getUserProPropertyPermissions = ({ userId, propertyId }) => {\n  const user = UserService.fetchOne({\n    $filters: { _id: userId },\n    proProperties: { _id: 1 },\n  });\n\n  if (!user) {\n    return {};\n  }\n\n  const { proProperties: properties = [] } = user;\n\n  const { $metadata: { permissions = {} } = {} } = properties.find(({ _id }) => _id === propertyId) || {};\n\n  return permissions;\n};\n\nconst getCustomerReferredBy = ({ customerId }) => {\n  const { referredByUser, referredByOrganisation } = UserService.fetchOne({\n    $filters: { _id: customerId },\n    referredByUser: { _id: 1 },\n    referredByOrganisation: { _id: 1 },\n  }) || {};\n\n  return { referredByUser, referredByOrganisation };\n};\n\nconst getProPropertyStatus = ({ propertyId }) => {\n  const { status } = PropertyService.fetchOne({\n    $filters: { _id: propertyId },\n    status: 1,\n  }) || {};\n\n  return status;\n};\n\nexport const getProPropertyCustomerOwnerType = ({ customerId, userId }) => {\n  const { referredByUser, referredByOrganisation } = getCustomerReferredBy({\n    customerId,\n  });\n  const user = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const { organisations = [] } = user;\n\n  return getCustomerOwnerType({\n    referredByUser,\n    referredByOrganisation,\n    currentUser: { _id: userId, organisations },\n  });\n};\n\nconst shouldAnonymize = ({ customerId, userId, propertyId }) => {\n  const customerOwnerType = getProPropertyCustomerOwnerType({\n    customerId,\n    userId,\n  });\n  const permissions = getUserProPropertyPermissions({ userId, propertyId });\n\n  const propertyStatus = getProPropertyStatus({ propertyId });\n\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    propertyStatus,\n  });\n};\n\nexport const makeProPropertyLoanAnonymizer = ({\n  userId,\n  propertyIds = [],\n  anonymize,\n}) => {\n  let propertiesPermissionsAndStatus;\n\n  if (anonymize === undefined) {\n    propertiesPermissionsAndStatus = propertyIds.map(propertyId => ({\n      propertyId,\n      permissions: getUserProPropertyPermissions({ userId, propertyId }),\n      status: getProPropertyStatus({ propertyId }),\n    }));\n  }\n\n  return (loan) => {\n    const { user = {}, properties = [], ...rest } = loan;\n    const { _id: customerId } = user;\n\n    const shouldAnonymizeUser = anonymize === undefined\n      ? propertiesPermissionsAndStatus\n        .map(({ propertyId, permissions, status: propertyStatus }) => {\n          const customerOwnerType = getProPropertyCustomerOwnerType({\n            customerId,\n            propertyId,\n            userId,\n          });\n          return clientShouldAnonymize({\n            customerOwnerType,\n            permissions,\n            propertyStatus,\n          });\n        })\n        .every(anonymizeForProperty => anonymizeForProperty)\n      : anonymize;\n\n    return {\n      user: shouldAnonymizeUser ? anonymizeUser({ user }) : user,\n      properties: shouldAnonymizeUser\n        ? properties.map(({ solvent, ...property }) => property)\n        : properties,\n      isAnonymized: !!shouldAnonymizeUser,\n      ...rest,\n    };\n  };\n};\n\nexport const removePropertyFromLoan = ({ loan, propertyId }) =>\n  LoanService.update({\n    loanId: loan._id,\n    object: {\n      structures: loan.structures.map(structure => ({\n        ...structure,\n        propertyId:\n          structure.propertyId === propertyId ? null : structure.propertyId,\n      })),\n    },\n  });\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/properties/server/propertyServerHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/properties/server/propertyServerHelpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  getProPropertyCustomerOwnerType: () => getProPropertyCustomerOwnerType,\n  makeProPropertyLoanAnonymizer: () => makeProPropertyLoanAnonymizer,\n  removePropertyFromLoan: () => removePropertyFromLoan\n});\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 0);\nlet clientShouldAnonymize, getCustomerOwnerType;\nmodule.link(\"../propertyClientHelper\", {\n  shouldAnonymize(v) {\n    clientShouldAnonymize = v;\n  },\n\n  getProPropertyCustomerOwnerType(v) {\n    getCustomerOwnerType = v;\n  }\n\n}, 1);\nlet PropertyService;\nmodule.link(\"./PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 2);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 3);\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING\n};\n\nconst anonymizeUser = ({\n  user\n}) => (0, _objectSpread2.default)({}, user, ANONYMIZED_USER);\n\nconst getUserProPropertyPermissions = ({\n  userId,\n  propertyId\n}) => {\n  const user = UserService.fetchOne({\n    $filters: {\n      _id: userId\n    },\n    proProperties: {\n      _id: 1\n    }\n  });\n\n  if (!user) {\n    return {};\n  }\n\n  const {\n    proProperties: properties = []\n  } = user;\n  const {\n    $metadata: {\n      permissions = {}\n    } = {}\n  } = properties.find(({\n    _id\n  }) => _id === propertyId) || {};\n  return permissions;\n};\n\nconst getCustomerReferredBy = ({\n  customerId\n}) => {\n  const {\n    referredByUser,\n    referredByOrganisation\n  } = UserService.fetchOne({\n    $filters: {\n      _id: customerId\n    },\n    referredByUser: {\n      _id: 1\n    },\n    referredByOrganisation: {\n      _id: 1\n    }\n  }) || {};\n  return {\n    referredByUser,\n    referredByOrganisation\n  };\n};\n\nconst getProPropertyStatus = ({\n  propertyId\n}) => {\n  const {\n    status\n  } = PropertyService.fetchOne({\n    $filters: {\n      _id: propertyId\n    },\n    status: 1\n  }) || {};\n  return status;\n};\n\nconst getProPropertyCustomerOwnerType = ({\n  customerId,\n  userId\n}) => {\n  const {\n    referredByUser,\n    referredByOrganisation\n  } = getCustomerReferredBy({\n    customerId\n  });\n  const user = UserService.fetchOne({\n    $filters: {\n      _id: userId\n    },\n    organisations: {\n      users: {\n        _id: 1\n      }\n    }\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const {\n    organisations = []\n  } = user;\n  return getCustomerOwnerType({\n    referredByUser,\n    referredByOrganisation,\n    currentUser: {\n      _id: userId,\n      organisations\n    }\n  });\n};\n\nconst shouldAnonymize = ({\n  customerId,\n  userId,\n  propertyId\n}) => {\n  const customerOwnerType = getProPropertyCustomerOwnerType({\n    customerId,\n    userId\n  });\n  const permissions = getUserProPropertyPermissions({\n    userId,\n    propertyId\n  });\n  const propertyStatus = getProPropertyStatus({\n    propertyId\n  });\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    propertyStatus\n  });\n};\n\nconst makeProPropertyLoanAnonymizer = ({\n  userId,\n  propertyIds = [],\n  anonymize\n}) => {\n  let propertiesPermissionsAndStatus;\n\n  if (anonymize === undefined) {\n    propertiesPermissionsAndStatus = propertyIds.map(propertyId => ({\n      propertyId,\n      permissions: getUserProPropertyPermissions({\n        userId,\n        propertyId\n      }),\n      status: getProPropertyStatus({\n        propertyId\n      })\n    }));\n  }\n\n  return loan => {\n    const {\n      user = {},\n      properties = []\n    } = loan,\n          rest = (0, _objectWithoutProperties2.default)(loan, [\"user\", \"properties\"]);\n    const {\n      _id: customerId\n    } = user;\n    const shouldAnonymizeUser = anonymize === undefined ? propertiesPermissionsAndStatus.map(({\n      propertyId,\n      permissions,\n      status: propertyStatus\n    }) => {\n      const customerOwnerType = getProPropertyCustomerOwnerType({\n        customerId,\n        propertyId,\n        userId\n      });\n      return clientShouldAnonymize({\n        customerOwnerType,\n        permissions,\n        propertyStatus\n      });\n    }).every(anonymizeForProperty => anonymizeForProperty) : anonymize;\n    return (0, _objectSpread2.default)({\n      user: shouldAnonymizeUser ? anonymizeUser({\n        user\n      }) : user,\n      properties: shouldAnonymizeUser ? properties.map((_ref) => {\n        let {\n          solvent\n        } = _ref,\n            property = (0, _objectWithoutProperties2.default)(_ref, [\"solvent\"]);\n        return property;\n      }) : properties,\n      isAnonymized: !!shouldAnonymizeUser\n    }, rest);\n  };\n};\n\nconst removePropertyFromLoan = ({\n  loan,\n  propertyId\n}) => LoanService.update({\n  loanId: loan._id,\n  object: {\n    structures: loan.structures.map(structure => (0, _objectSpread2.default)({}, structure, {\n      propertyId: structure.propertyId === propertyId ? null : structure.propertyId\n    }))\n  }\n});","map":{"version":3,"sources":["imports/core/api/properties/server/propertyServerHelpers.js"],"names":["UserService","ANONYMIZED_STRING","ANONYMIZED_USER","name","phoneNumbers","email","anonymizeUser","user","getUserProPropertyPermissions","propertyId","$filters","_id","userId","proProperties","properties","$metadata","permissions","getCustomerReferredBy","customerId","referredByOrganisation","referredByUser","getProPropertyStatus","status","getProPropertyCustomerOwnerType","organisations","users","getCustomerOwnerType","currentUser","shouldAnonymize","customerOwnerType","propertyStatus","clientShouldAnonymize","makeProPropertyLoanAnonymizer","propertyIds","anonymize","propertiesPermissionsAndStatus","loan","rest","shouldAnonymizeUser","anonymizeForProperty","property","isAnonymized","removePropertyFromLoan","loanId","object","structures","structure"],"mappings":"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","sourcesContent":["import UserService from '../../users/server/UserService';\nimport {\n  shouldAnonymize as clientShouldAnonymize,\n  getProPropertyCustomerOwnerType as getCustomerOwnerType,\n} from '../propertyClientHelper';\nimport PropertyService from './PropertyService';\nimport LoanService from '../../loans/server/LoanService';\n\nconst ANONYMIZED_STRING = 'XXX';\nconst ANONYMIZED_USER = {\n  name: ANONYMIZED_STRING,\n  phoneNumbers: [ANONYMIZED_STRING],\n  email: ANONYMIZED_STRING,\n};\nconst anonymizeUser = ({ user }) => ({ ...user, ...ANONYMIZED_USER });\n\nconst getUserProPropertyPermissions = ({ userId, propertyId }) => {\n  const user = UserService.fetchOne({\n    $filters: { _id: userId },\n    proProperties: { _id: 1 },\n  });\n\n  if (!user) {\n    return {};\n  }\n\n  const { proProperties: properties = [] } = user;\n\n  const { $metadata: { permissions = {} } = {} } = properties.find(({ _id }) => _id === propertyId) || {};\n\n  return permissions;\n};\n\nconst getCustomerReferredBy = ({ customerId }) => {\n  const { referredByUser, referredByOrganisation } = UserService.fetchOne({\n    $filters: { _id: customerId },\n    referredByUser: { _id: 1 },\n    referredByOrganisation: { _id: 1 },\n  }) || {};\n\n  return { referredByUser, referredByOrganisation };\n};\n\nconst getProPropertyStatus = ({ propertyId }) => {\n  const { status } = PropertyService.fetchOne({\n    $filters: { _id: propertyId },\n    status: 1,\n  }) || {};\n\n  return status;\n};\n\nexport const getProPropertyCustomerOwnerType = ({ customerId, userId }) => {\n  const { referredByUser, referredByOrganisation } = getCustomerReferredBy({\n    customerId,\n  });\n  const user = UserService.fetchOne({\n    $filters: { _id: userId },\n    organisations: { users: { _id: 1 } },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const { organisations = [] } = user;\n\n  return getCustomerOwnerType({\n    referredByUser,\n    referredByOrganisation,\n    currentUser: { _id: userId, organisations },\n  });\n};\n\nconst shouldAnonymize = ({ customerId, userId, propertyId }) => {\n  const customerOwnerType = getProPropertyCustomerOwnerType({\n    customerId,\n    userId,\n  });\n  const permissions = getUserProPropertyPermissions({ userId, propertyId });\n\n  const propertyStatus = getProPropertyStatus({ propertyId });\n\n  return clientShouldAnonymize({\n    customerOwnerType,\n    permissions,\n    propertyStatus,\n  });\n};\n\nexport const makeProPropertyLoanAnonymizer = ({\n  userId,\n  propertyIds = [],\n  anonymize,\n}) => {\n  let propertiesPermissionsAndStatus;\n\n  if (anonymize === undefined) {\n    propertiesPermissionsAndStatus = propertyIds.map(propertyId => ({\n      propertyId,\n      permissions: getUserProPropertyPermissions({ userId, propertyId }),\n      status: getProPropertyStatus({ propertyId }),\n    }));\n  }\n\n  return (loan) => {\n    const { user = {}, properties = [], ...rest } = loan;\n    const { _id: customerId } = user;\n\n    const shouldAnonymizeUser = anonymize === undefined\n      ? propertiesPermissionsAndStatus\n        .map(({ propertyId, permissions, status: propertyStatus }) => {\n          const customerOwnerType = getProPropertyCustomerOwnerType({\n            customerId,\n            propertyId,\n            userId,\n          });\n          return clientShouldAnonymize({\n            customerOwnerType,\n            permissions,\n            propertyStatus,\n          });\n        })\n        .every(anonymizeForProperty => anonymizeForProperty)\n      : anonymize;\n\n    return {\n      user: shouldAnonymizeUser ? anonymizeUser({ user }) : user,\n      properties: shouldAnonymizeUser\n        ? properties.map(({ solvent, ...property }) => property)\n        : properties,\n      isAnonymized: !!shouldAnonymizeUser,\n      ...rest,\n    };\n  };\n};\n\nexport const removePropertyFromLoan = ({ loan, propertyId }) =>\n  LoanService.update({\n    loanId: loan._id,\n    object: {\n      structures: loan.structures.map(structure => ({\n        ...structure,\n        propertyId:\n          structure.propertyId === propertyId ? null : structure.propertyId,\n      })),\n    },\n  });\n"]},"sourceType":"script","hash":"942b6193851ad85dfd20ede88905662f768f280e"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/referCustomer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/referCustomer.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/referCustomer.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/referCustomer.js"],"names":["SimpleSchema","proInviteUser","withMeteorUserId","updateCustomerReferral","checkQuery","querySchema","type","String","optional","referCustomerAPI","user","_id","userId","body","query","shareSolvency","impersonateUser","schema","run","invitedBy","then","customer","message","email"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,cAAzB;AAEA,SAASC,aAAT;AACA,SAASC,gBAAT,EAA2BC,sBAA3B;AACA,SAASC,UAAT;AAEA,MAAMC,WAAW,GAAG,IAAIL,YAAJ,CAAiB;AACnC,sBAAoB;AAAEM,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B;AADe,CAAjB,CAApB;;AAIA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAEC;AAAP,GAAR;AAAyBC,EAAAA,IAAzB;AAA+BC,EAAAA;AAA/B,CAAD,KAA4C;AACnE,QAAM;AAAEJ,IAAAA,IAAF;AAAQK,IAAAA;AAAR,MAA0BF,IAAhC;AACA,QAAM;AAAE,wBAAoBG;AAAtB,MAA0CZ,UAAU,CAAC;AACzDU,IAAAA,KADyD;AAEzDG,IAAAA,MAAM,EAAEZ;AAFiD,GAAD,CAA1D;AAKA,SAAOH,gBAAgB,CAAC;AAAEU,IAAAA,MAAF;AAAUI,IAAAA;AAAV,GAAD,EAA8B,MACnDf,aAAa,CAACiB,GAAd,CAAkB;AAChBR,IAAAA,IAAI,EAAE,EAAE,GAAGA,IAAL;AAAWS,MAAAA,SAAS,EAAEP;AAAtB,KADU;AAEhBG,IAAAA;AAFgB,GAAlB,CADqB,CAAhB,CAKJK,IALI,CAKC,MACJjB,sBAAsB,CAAC;AAAEkB,IAAAA,QAAQ,EAAEX,IAAZ;AAAkBE,IAAAA,MAAlB;AAA0BI,IAAAA;AAA1B,GAAD,CANnB,EAOJI,IAPI,CAOC,OAAO;AACXE,IAAAA,OAAO,EAAG,+BAA8BZ,IAAI,CAACa,KAAM;AADxC,GAAP,CAPD,CAAP;AAUD,CAjBD;;AAmBA,eAAed,gBAAf","sourcesContent":["import SimpleSchema from 'simpl-schema';\n\nimport { proInviteUser } from '../../../methods';\nimport { withMeteorUserId, updateCustomerReferral } from '../helpers';\nimport { checkQuery } from './helpers';\n\nconst querySchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst referCustomerAPI = ({ user: { _id: userId }, body, query }) => {\n  const { user, shareSolvency } = body;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  return withMeteorUserId({ userId, impersonateUser }, () =>\n    proInviteUser.run({\n      user: { ...user, invitedBy: userId },\n      shareSolvency,\n    }))\n    .then(() =>\n      updateCustomerReferral({ customer: user, userId, impersonateUser }))\n    .then(() => ({\n      message: `Successfully referred user \"${user.email}\"`,\n    }));\n};\n\nexport default referCustomerAPI;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/referCustomer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/referCustomer.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet proInviteUser;\nmodule.link(\"../../../methods\", {\n  proInviteUser(v) {\n    proInviteUser = v;\n  }\n\n}, 1);\nlet withMeteorUserId, updateCustomerReferral;\nmodule.link(\"../helpers\", {\n  withMeteorUserId(v) {\n    withMeteorUserId = v;\n  },\n\n  updateCustomerReferral(v) {\n    updateCustomerReferral = v;\n  }\n\n}, 2);\nlet checkQuery;\nmodule.link(\"./helpers\", {\n  checkQuery(v) {\n    checkQuery = v;\n  }\n\n}, 3);\nconst querySchema = new SimpleSchema({\n  'impersonate-user': {\n    type: String,\n    optional: true\n  }\n});\n\nconst referCustomerAPI = ({\n  user: {\n    _id: userId\n  },\n  body,\n  query\n}) => {\n  const {\n    user,\n    shareSolvency\n  } = body;\n  const {\n    'impersonate-user': impersonateUser\n  } = checkQuery({\n    query,\n    schema: querySchema\n  });\n  return withMeteorUserId({\n    userId,\n    impersonateUser\n  }, () => proInviteUser.run({\n    user: (0, _objectSpread2.default)({}, user, {\n      invitedBy: userId\n    }),\n    shareSolvency\n  })).then(() => updateCustomerReferral({\n    customer: user,\n    userId,\n    impersonateUser\n  })).then(() => ({\n    message: `Successfully referred user \"${user.email}\"`\n  }));\n};\n\nmodule.exportDefault(referCustomerAPI);","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/referCustomer.js"],"names":["SimpleSchema","querySchema","type","optional","referCustomerAPI","user","_id","userId","query","shareSolvency","impersonateUser","checkQuery","schema","invitedBy","updateCustomerReferral","customer","message","email"],"mappings":";;;;AAAA,IAAA,YAAA;AAAA,MAAA,CAAA,IAAA,CAAA,cAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,aAAA;AAAA,MAAA,CAAA,IAAA,CAAA,kBAAA,EAAA;AAAA,EAAA,aAAA,CAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,gBAAA,EAAA,sBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,YAAA,EAAA;AAAA,EAAA,gBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,sBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,sBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,UAAA;AAAA,MAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AAAA,EAAA,UAAA,CAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAMA,MAAMC,WAAW,GAAG,IAAA,YAAA,CAAiB;AACnC,sBAAoB;AAAEC,IAAAA,IAAI,EAAN,MAAA;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B;AADe,CAAjB,CAApB;;AAIA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAG,EAAEC;AAAP,GAAR;AAAA,EAAA,IAAA;AAA+BC,EAAAA;AAA/B,CAAD,KAA4C;AACnE,QAAM;AAAA,IAAA,IAAA;AAAQC,IAAAA;AAAR,MAAN,IAAA;AACA,QAAM;AAAE,wBAAoBC;AAAtB,MAA0CC,UAAU,CAAC;AAAA,IAAA,KAAA;AAEzDC,IAAAA,MAAM,EAAEX;AAFiD,GAAD,CAA1D;AAKA,SAAO,gBAAgB,CAAC;AAAA,IAAA,MAAA;AAAUS,IAAAA;AAAV,GAAD,EAA8B,MACnD,aAAa,CAAb,GAAA,CAAkB;AAChBL,IAAAA,IAAI,kCAAE,IAAF;AAAaQ,MAAAA,SAAS,EAAEN;AAAxB,MADY;AAEhBE,IAAAA;AAFgB,GAAlB,CADqB,CAAhB,CAAA,IAAA,CAKC,MACJK,sBAAsB,CAAC;AAAEC,IAAAA,QAAQ,EAAV,IAAA;AAAA,IAAA,MAAA;AAA0BL,IAAAA;AAA1B,GAAD,CANnB,EAAA,IAAA,CAOC,OAAO;AACXM,IAAAA,OAAO,EAAG,+BAA8BX,IAAI,CAACY,KAAM;AADxC,GAAP,CAPD,CAAP;AAPF,CAAA;;AAVA,MAAA,CAAOjB,aAAP,CA6BA,gBA7BA","sourcesContent":["import SimpleSchema from 'simpl-schema';\n\nimport { proInviteUser } from '../../../methods';\nimport { withMeteorUserId, updateCustomerReferral } from '../helpers';\nimport { checkQuery } from './helpers';\n\nconst querySchema = new SimpleSchema({\n  'impersonate-user': { type: String, optional: true },\n});\n\nconst referCustomerAPI = ({ user: { _id: userId }, body, query }) => {\n  const { user, shareSolvency } = body;\n  const { 'impersonate-user': impersonateUser } = checkQuery({\n    query,\n    schema: querySchema,\n  });\n\n  return withMeteorUserId({ userId, impersonateUser }, () =>\n    proInviteUser.run({\n      user: { ...user, invitedBy: userId },\n      shareSolvency,\n    }))\n    .then(() =>\n      updateCustomerReferral({ customer: user, userId, impersonateUser }))\n    .then(() => ({\n      message: `Successfully referred user \"${user.email}\"`,\n    }));\n};\n\nexport default referCustomerAPI;\n"]},"sourceType":"script","hash":"54fc8fc6abe83e08e771dd6813631c2399281536"}

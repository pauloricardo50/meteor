{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/getUser.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/getUser.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/getUser.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/getUser.test.js"],"names":["Meteor","resetDatabase","expect","generator","RESTAPI","getUserAPI","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","api","addEndpoint","getUser","email","userId","impersonateUser","timestamp","nonce","query","url","data","method","headers","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","users","_factory","_id","organisations","$metadata","isMain","emails","address","verified","firstName","lastName","phoneNumbers","referredByUserLink","referredByOrganisationLink","it","then","user","to","equal","response","status","message","include"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport generator from '../../../../factories/index';\nimport RESTAPI from '../../RESTAPI';\nimport { getUserAPI } from '..';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nconst api = new RESTAPI();\napi.addEndpoint('/users', 'GET', getUserAPI);\n\nconst getUser = ({ email, userId, impersonateUser }) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = {\n    email,\n    ...(impersonateUser ? { 'impersonate-user': impersonateUser } : {}),\n  };\n  return fetchAndCheckResponse({\n    url: '/users',\n    query,\n    data: {\n      method: 'GET',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        query,\n      }),\n    },\n  });\n};\n\ndescribe('REST: getUser', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          organisations: [\n            { _id: 'org', $metadata: { isMain: true } },\n            { _id: 'org2' },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          organisations: [{ _id: 'org2' }],\n          emails: [{ address: 'pro2@org2.com', verified: true }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro3',\n          organisations: [{ _id: 'org3' }],\n        },\n        {\n          _id: 'user1',\n          firstName: 'firstName1',\n          lastName: 'lastName1',\n          phoneNumbers: ['+41 22 566 01 10'],\n          emails: [{ address: 'user1@test.com', verified: true }],\n          referredByUserLink: 'pro',\n          referredByOrganisationLink: 'org',\n        },\n        {\n          _id: 'user2',\n          firstName: 'firstName2',\n          lastName: 'lastName2',\n          phoneNumbers: ['+41 22 566 01 10'],\n          emails: [{ address: 'user2@test.com', verified: true }],\n          referredByUserLink: 'pro2',\n          referredByOrganisationLink: 'org',\n        },\n      ],\n    });\n  });\n\n  it('returns user referred by org and pro', () =>\n    getUser({\n      email: 'user1@test.com',\n      userId: 'pro',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName1');\n      expect(user.lastName).to.equal('lastName1');\n      expect(user.emails[0].address).to.equal('user1@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns user referred by org with impersonate', () =>\n    getUser({\n      email: 'user2@test.com',\n      impersonateUser: 'pro2@org2.com',\n      userId: 'pro',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName2');\n      expect(user.lastName).to.equal('lastName2');\n      expect(user.emails[0].address).to.equal('user2@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns user referred by org without impersonate', () =>\n    getUser({\n      email: 'user2@test.com',\n      userId: 'pro',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName2');\n      expect(user.lastName).to.equal('lastName2');\n      expect(user.emails[0].address).to.equal('user2@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns user referred by pro', () =>\n    getUser({\n      email: 'user2@test.com',\n      userId: 'pro2',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName2');\n      expect(user.lastName).to.equal('lastName2');\n      expect(user.emails[0].address).to.equal('user2@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns an error when user is not referred by org neither by user', () =>\n    getUser({\n      email: 'user1@test.com',\n      userId: 'pro3',\n    }).then((response) => {\n      expect(response.status).to.equal(400);\n      expect(response.message).to.include('\"user1@test.com\"');\n    }));\n\n  it('returns an error when user does not exist', () =>\n    getUser({\n      email: 'user3@test.com',\n      userId: 'pro',\n    }).then((response) => {\n      expect(response.status).to.equal(400);\n      expect(response.message).to.include('\"user3@test.com\"');\n    }));\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/getUser.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/getUser.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet generator;\nmodule.link(\"../../../../factories/index\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 3);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 4);\nlet getUserAPI;\nmodule.link(\"..\", {\n  getUserAPI(v) {\n    getUserAPI = v;\n  }\n\n}, 5);\nlet fetchAndCheckResponse, makeHeaders, getTimestampAndNonce;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  }\n\n}, 6);\nconst api = new RESTAPI();\napi.addEndpoint('/users', 'GET', getUserAPI);\n\nconst getUser = ({\n  email,\n  userId,\n  impersonateUser\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const query = (0, _objectSpread2.default)({\n    email\n  }, impersonateUser ? {\n    'impersonate-user': impersonateUser\n  } : {});\n  return fetchAndCheckResponse({\n    url: '/users',\n    query,\n    data: {\n      method: 'GET',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        query\n      })\n    }\n  });\n};\n\ndescribe('REST: getUser', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [{\n        _factory: 'pro',\n        _id: 'pro',\n        organisations: [{\n          _id: 'org',\n          $metadata: {\n            isMain: true\n          }\n        }, {\n          _id: 'org2'\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro2',\n        organisations: [{\n          _id: 'org2'\n        }],\n        emails: [{\n          address: 'pro2@org2.com',\n          verified: true\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro3',\n        organisations: [{\n          _id: 'org3'\n        }]\n      }, {\n        _id: 'user1',\n        firstName: 'firstName1',\n        lastName: 'lastName1',\n        phoneNumbers: ['+41 22 566 01 10'],\n        emails: [{\n          address: 'user1@test.com',\n          verified: true\n        }],\n        referredByUserLink: 'pro',\n        referredByOrganisationLink: 'org'\n      }, {\n        _id: 'user2',\n        firstName: 'firstName2',\n        lastName: 'lastName2',\n        phoneNumbers: ['+41 22 566 01 10'],\n        emails: [{\n          address: 'user2@test.com',\n          verified: true\n        }],\n        referredByUserLink: 'pro2',\n        referredByOrganisationLink: 'org'\n      }]\n    });\n  });\n  it('returns user referred by org and pro', () => getUser({\n    email: 'user1@test.com',\n    userId: 'pro'\n  }).then(user => {\n    expect(user.firstName).to.equal('firstName1');\n    expect(user.lastName).to.equal('lastName1');\n    expect(user.emails[0].address).to.equal('user1@test.com');\n    expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n  }));\n  it('returns user referred by org with impersonate', () => getUser({\n    email: 'user2@test.com',\n    impersonateUser: 'pro2@org2.com',\n    userId: 'pro'\n  }).then(user => {\n    expect(user.firstName).to.equal('firstName2');\n    expect(user.lastName).to.equal('lastName2');\n    expect(user.emails[0].address).to.equal('user2@test.com');\n    expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n  }));\n  it('returns user referred by org without impersonate', () => getUser({\n    email: 'user2@test.com',\n    userId: 'pro'\n  }).then(user => {\n    expect(user.firstName).to.equal('firstName2');\n    expect(user.lastName).to.equal('lastName2');\n    expect(user.emails[0].address).to.equal('user2@test.com');\n    expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n  }));\n  it('returns user referred by pro', () => getUser({\n    email: 'user2@test.com',\n    userId: 'pro2'\n  }).then(user => {\n    expect(user.firstName).to.equal('firstName2');\n    expect(user.lastName).to.equal('lastName2');\n    expect(user.emails[0].address).to.equal('user2@test.com');\n    expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n  }));\n  it('returns an error when user is not referred by org neither by user', () => getUser({\n    email: 'user1@test.com',\n    userId: 'pro3'\n  }).then(response => {\n    expect(response.status).to.equal(400);\n    expect(response.message).to.include('\"user1@test.com\"');\n  }));\n  it('returns an error when user does not exist', () => getUser({\n    email: 'user3@test.com',\n    userId: 'pro'\n  }).then(response => {\n    expect(response.status).to.equal(400);\n    expect(response.message).to.include('\"user3@test.com\"');\n  }));\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/getUser.test.js"],"names":["api","getUser","impersonateUser","nonce","getTimestampAndNonce","query","fetchAndCheckResponse","url","data","method","headers","makeHeaders","describe","before","Meteor","after","beforeEach","resetDatabase","generator","users","_factory","_id","organisations","$metadata","isMain","emails","address","verified","firstName","lastName","phoneNumbers","referredByUserLink","referredByOrganisationLink","it","email","userId","user","expect","response"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport generator from '../../../../factories/index';\nimport RESTAPI from '../../RESTAPI';\nimport { getUserAPI } from '..';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\n\nconst api = new RESTAPI();\napi.addEndpoint('/users', 'GET', getUserAPI);\n\nconst getUser = ({ email, userId, impersonateUser }) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = {\n    email,\n    ...(impersonateUser ? { 'impersonate-user': impersonateUser } : {}),\n  };\n  return fetchAndCheckResponse({\n    url: '/users',\n    query,\n    data: {\n      method: 'GET',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        query,\n      }),\n    },\n  });\n};\n\ndescribe('REST: getUser', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          organisations: [\n            { _id: 'org', $metadata: { isMain: true } },\n            { _id: 'org2' },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          organisations: [{ _id: 'org2' }],\n          emails: [{ address: 'pro2@org2.com', verified: true }],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro3',\n          organisations: [{ _id: 'org3' }],\n        },\n        {\n          _id: 'user1',\n          firstName: 'firstName1',\n          lastName: 'lastName1',\n          phoneNumbers: ['+41 22 566 01 10'],\n          emails: [{ address: 'user1@test.com', verified: true }],\n          referredByUserLink: 'pro',\n          referredByOrganisationLink: 'org',\n        },\n        {\n          _id: 'user2',\n          firstName: 'firstName2',\n          lastName: 'lastName2',\n          phoneNumbers: ['+41 22 566 01 10'],\n          emails: [{ address: 'user2@test.com', verified: true }],\n          referredByUserLink: 'pro2',\n          referredByOrganisationLink: 'org',\n        },\n      ],\n    });\n  });\n\n  it('returns user referred by org and pro', () =>\n    getUser({\n      email: 'user1@test.com',\n      userId: 'pro',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName1');\n      expect(user.lastName).to.equal('lastName1');\n      expect(user.emails[0].address).to.equal('user1@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns user referred by org with impersonate', () =>\n    getUser({\n      email: 'user2@test.com',\n      impersonateUser: 'pro2@org2.com',\n      userId: 'pro',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName2');\n      expect(user.lastName).to.equal('lastName2');\n      expect(user.emails[0].address).to.equal('user2@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns user referred by org without impersonate', () =>\n    getUser({\n      email: 'user2@test.com',\n      userId: 'pro',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName2');\n      expect(user.lastName).to.equal('lastName2');\n      expect(user.emails[0].address).to.equal('user2@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns user referred by pro', () =>\n    getUser({\n      email: 'user2@test.com',\n      userId: 'pro2',\n    }).then((user) => {\n      expect(user.firstName).to.equal('firstName2');\n      expect(user.lastName).to.equal('lastName2');\n      expect(user.emails[0].address).to.equal('user2@test.com');\n      expect(user.phoneNumbers[0]).to.equal('+41 22 566 01 10');\n    }));\n\n  it('returns an error when user is not referred by org neither by user', () =>\n    getUser({\n      email: 'user1@test.com',\n      userId: 'pro3',\n    }).then((response) => {\n      expect(response.status).to.equal(400);\n      expect(response.message).to.include('\"user1@test.com\"');\n    }));\n\n  it('returns an error when user does not exist', () =>\n    getUser({\n      email: 'user3@test.com',\n      userId: 'pro',\n    }).then((response) => {\n      expect(response.status).to.equal(400);\n      expect(response.message).to.include('\"user3@test.com\"');\n    }));\n});\n"]},"sourceType":"script","hash":"85bbb78a7e82b96dd70228d008e21fbb1d822625"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/conversionFunctions.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/test/conversionFunctions.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/conversionFunctions.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/test/conversionFunctions.spec.js"],"names":["expect","toMoney","toNumber","toDecimalNumber","toDistanceString","roundTo","describe","it","to","equal","undefined","rounded","deep","NaN"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SACEC,OADF,EAEEC,QAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,OALF;AAQAC,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACrCA,EAAAA,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBC,IAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACzCP,MAAAA,MAAM,CAACC,OAAO,CAAC,IAAD,CAAR,CAAN,CAAsBO,EAAtB,CAAyBC,KAAzB,CAA+B,OAA/B;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAChCP,MAAAA,MAAM,CAACC,OAAO,CAAC,CAAD,CAAR,CAAN,CAAmBO,EAAnB,CAAsBC,KAAtB,CAA4B,CAA5B;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,oCAAD,EAAuC,MAAM;AAC7CP,MAAAA,MAAM,CAACC,OAAO,CAAC,MAAD,CAAR,CAAN,CAAwBO,EAAxB,CAA2BC,KAA3B,CAAiC,SAAjC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC/CP,MAAAA,MAAM,CAACC,OAAO,CAAC,CAAC,MAAF,CAAR,CAAN,CAAyBO,EAAzB,CAA4BC,KAA5B,CAAkC,UAAlC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjCP,MAAAA,MAAM,CAACC,OAAO,CAAC,MAAD,CAAR,CAAN,CAAwBO,EAAxB,CAA2BC,KAA3B,CAAiC,OAAjC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjCP,MAAAA,MAAM,CAACC,OAAO,CAAC,MAAD,CAAR,CAAN,CAAwBO,EAAxB,CAA2BC,KAA3B,CAAiC,OAAjC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CP,MAAAA,MAAM,CAACC,OAAO,CAACS,SAAD,CAAR,CAAN,CAA2BF,EAA3B,CAA8BC,KAA9B,CAAoCC,SAApC;AACD,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,6CAAD,EAAgD,MAAM;AACtDP,MAAAA,MAAM,CAACC,OAAO,CAAC,EAAD,CAAR,CAAN,CAAoBO,EAApB,CAAuBC,KAAvB,CAA6B,EAA7B;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,yDAAD,EAA4D,MAAM;AAClEP,MAAAA,MAAM,CAACC,OAAO,CAAC,CAAC,GAAF,CAAR,CAAN,CAAsBO,EAAtB,CAAyBC,KAAzB,CAA+B,GAA/B;AACD,KAFC,CAAF;AAIAH,IAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,MAAAA,EAAE,CAAC,uBAAD,EAA0B,MAAM;AAChCP,QAAAA,MAAM,CAACC,OAAO,CAAC,SAAD,EAAY;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAZ,CAAR,CAAN,CAA+CH,EAA/C,CAAkDC,KAAlD,CAAwD,YAAxD;AACD,OAFC,CAAF;AAIAF,MAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACxBP,QAAAA,MAAM,CAACC,OAAO,CAAC,IAAD,EAAO;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAP,CAAR,CAAN,CAA0CH,EAA1C,CAA6CC,KAA7C,CAAmD,MAAnD;AACD,OAFC,CAAF;AAIAF,MAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC/CP,QAAAA,MAAM,CAACC,OAAO,CAAC,KAAD,EAAQ;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAR,CAAR,CAAN,CAA2CH,EAA3C,CAA8CC,KAA9C,CAAoD,MAApD;AAEAT,QAAAA,MAAM,CAACC,OAAO,CAAC,MAAD,EAAS;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAT,CAAR,CAAN,CAA4CH,EAA5C,CAA+CC,KAA/C,CAAqD,MAArD;AAEAT,QAAAA,MAAM,CAACC,OAAO,CAAC,OAAD,EAAU;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAV,CAAR,CAAN,CAA6CH,EAA7C,CAAgDC,KAAhD,CAAsD,MAAtD;AACD,OANC,CAAF;AAQAF,MAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACrCP,QAAAA,MAAM,CAACC,OAAO,CAAC,SAAD,EAAY;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAZ,CAAR,CAAN,CAA+CH,EAA/C,CAAkDC,KAAlD,CAAwD,MAAxD;AACD,OAFC,CAAF;AAIAF,MAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxCP,QAAAA,MAAM,CAACC,OAAO,CAAC,CAAC,SAAF,EAAa;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAb,CAAR,CAAN,CAAgDH,EAAhD,CAAmDC,KAAnD,CAAyD,OAAzD;AACAT,QAAAA,MAAM,CAACC,OAAO,CAAC,CAAC,UAAF,EAAc;AAAEU,UAAAA,OAAO,EAAE;AAAX,SAAd,CAAR,CAAN,CAAiDH,EAAjD,CAAoDC,KAApD,CAA0D,aAA1D;AACD,OAHC,CAAF;AAID,KAzBO,CAAR;AA0BD,GA/DO,CAAR;AAiEAH,EAAAA,QAAQ,CAAC,WAAD,EAAc,MAAM;AAC1BC,IAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClCP,MAAAA,MAAM,CAACE,QAAQ,CAAC,GAAD,CAAT,CAAN,CAAsBM,EAAtB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCP,MAAAA,MAAM,CAACE,QAAQ,CAAC,GAAD,CAAT,CAAN,CAAsBM,EAAtB,CAAyBC,KAAzB,CAA+B,GAA/B;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtCP,MAAAA,MAAM,CAACE,QAAQ,CAAC,KAAD,CAAT,CAAN,CAAwBM,EAAxB,CAA2BC,KAA3B,CAAiC,GAAjC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxCP,MAAAA,MAAM,CAACE,QAAQ,CAAC,KAAD,CAAT,CAAN,CAAwBM,EAAxB,CAA2BC,KAA3B,CAAiC,KAAjC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACzCP,MAAAA,MAAM,CAACE,QAAQ,CAAC,OAAD,CAAT,CAAN,CAA0BM,EAA1B,CAA6BC,KAA7B,CAAmC,IAAnC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AACnEP,MAAAA,MAAM,CAACE,QAAQ,CAAC,EAAD,CAAT,CAAN,CAAqBM,EAArB,CAAwBC,KAAxB,CAA8B,EAA9B;AACAT,MAAAA,MAAM,CAACE,QAAQ,CAACQ,SAAD,CAAT,CAAN,CAA4BF,EAA5B,CAA+BC,KAA/B,CAAqCC,SAArC;AACAV,MAAAA,MAAM,CAACE,QAAQ,CAAC,IAAD,CAAT,CAAN,CAAuBM,EAAvB,CAA0BC,KAA1B,CAAgC,IAAhC;AACAT,MAAAA,MAAM,CAACE,QAAQ,CAAC,KAAD,CAAT,CAAN,CAAwBM,EAAxB,CAA2BC,KAA3B,CAAiC,KAAjC;AACD,KALC,CAAF;AAOAF,IAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxCP,MAAAA,MAAM,CAACE,QAAQ,CAAC,IAAD,CAAT,CAAN,CAAuBM,EAAvB,CAA0BC,KAA1B,CAAgC,CAAhC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACrCP,MAAAA,MAAM,CAACE,QAAQ,CAAC,WAAD,CAAT,CAAN,CAA8BM,EAA9B,CAAiCC,KAAjC,CAAuC,OAAvC;AACAT,MAAAA,MAAM,CAAC,OAAOE,QAAQ,CAAC,WAAD,CAAhB,CAAN,CAAqCM,EAArC,CAAwCC,KAAxC,CAA8C,QAA9C;AACD,KAHC,CAAF;AAKAF,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CP,MAAAA,MAAM,CAACE,QAAQ,CAACQ,SAAD,CAAT,CAAN,CAA4BF,EAA5B,CAA+BC,KAA/B,CAAqCC,SAArC;AACD,KAFC,CAAF;AAIAH,IAAAA,EAAE,CAAC,6CAAD,EAAgD,MAAM;AACtDP,MAAAA,MAAM,CAACE,QAAQ,CAAC,EAAD,CAAT,CAAN,CAAqBM,EAArB,CAAwBC,KAAxB,CAA8B,EAA9B;AACD,KAFC,CAAF;AAGD,GA5CO,CAAR;AA8CAH,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCC,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtCP,MAAAA,MAAM,CAACG,eAAe,CAAC,KAAD,CAAhB,CAAN,CAA+BK,EAA/B,CAAkCC,KAAlC,CAAwC,GAAxC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtCP,MAAAA,MAAM,CAACG,eAAe,CAAC,KAAD,CAAhB,CAAN,CAA+BK,EAA/B,CAAkCC,KAAlC,CAAwC,GAAxC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClCP,MAAAA,MAAM,CAACG,eAAe,CAAC,GAAD,CAAhB,CAAN,CAA6BK,EAA7B,CAAgCC,KAAhC,CAAsC,CAAtC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCP,MAAAA,MAAM,CAACG,eAAe,CAAC,KAAD,CAAhB,CAAN,CAA+BK,EAA/B,CAAkCC,KAAlC,CAAwC,CAAxC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClCP,MAAAA,MAAM,CAACG,eAAe,CAAC,CAAC,CAAF,CAAhB,CAAN,CAA4BK,EAA5B,CAA+BC,KAA/B,CAAqC,CAAC,CAAtC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AACnEP,MAAAA,MAAM,CAACG,eAAe,CAAC,EAAD,CAAhB,CAAN,CAA4BK,EAA5B,CAA+BC,KAA/B,CAAqC,EAArC;AACAT,MAAAA,MAAM,CAACG,eAAe,CAACO,SAAD,CAAhB,CAAN,CAAmCF,EAAnC,CAAsCC,KAAtC,CAA4CC,SAA5C;AACAV,MAAAA,MAAM,CAACG,eAAe,CAAC,IAAD,CAAhB,CAAN,CAA8BK,EAA9B,CAAiCC,KAAjC,CAAuC,IAAvC;AACAT,MAAAA,MAAM,CAACG,eAAe,CAAC,KAAD,CAAhB,CAAN,CAA+BK,EAA/B,CAAkCC,KAAlC,CAAwC,KAAxC;AACD,KALC,CAAF;AAMD,GA3BO,CAAR;AA6BAH,EAAAA,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnCC,IAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5CP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,CAAC,CAAF,CAAjB,CAAN,CAA6BI,EAA7B,CAAgCC,KAAhC,CAAsC,KAAtC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,iBAAD,EAAoB,MAAM;AAC1BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,CAAD,CAAjB,CAAN,CAA4BI,EAA5B,CAA+BC,KAA/B,CAAqC,KAArC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC5BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,EAAD,CAAjB,CAAN,CAA6BI,EAA7B,CAAgCC,KAAhC,CAAsC,MAAtC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,kBAAD,EAAqB,MAAM;AAC3BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,CAAD,CAAjB,CAAN,CAA4BI,EAA5B,CAA+BC,KAA/B,CAAqC,MAArC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,qBAAD,EAAwB,MAAM;AAC9BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,GAAD,CAAjB,CAAN,CAA8BI,EAA9B,CAAiCC,KAAjC,CAAuC,OAAvC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,IAAD,CAAjB,CAAN,CAA+BI,EAA/B,CAAkCC,KAAlC,CAAwC,QAAxC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,IAAD,CAAjB,CAAN,CAA+BI,EAA/B,CAAkCC,KAAlC,CAAwC,QAAxC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,KAAD,CAAjB,CAAN,CAAgCI,EAAhC,CAAmCC,KAAnC,CAAyC,OAAzC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/BP,MAAAA,MAAM,CAACI,gBAAgB,CAAC,KAAD,CAAjB,CAAN,CAAgCI,EAAhC,CAAmCC,KAAnC,CAAyC,OAAzC;AACD,KAFC,CAAF;AAGD,GApCO,CAAR;AAsCAH,EAAAA,QAAQ,CAAC,SAAD,EAAY,MAAM;AACxBC,IAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClCP,MAAAA,MAAM,CAACK,OAAO,CAAC,KAAD,EAAQ,CAAR,CAAR,CAAN,CAA0BG,EAA1B,CAA6BC,KAA7B,CAAmC,KAAnC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,sBAAD,EAAyB,MAAM;AAC/BP,MAAAA,MAAM,CAACK,OAAO,CAAC,EAAD,EAAK,CAAL,CAAR,CAAN,CAAuBG,EAAvB,CAA0BC,KAA1B,CAAgC,EAAhC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCP,MAAAA,MAAM,CAACK,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAN,CAAsBG,EAAtB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClDP,MAAAA,MAAM,CAACK,OAAO,CAAC,MAAD,EAAS,CAAC,CAAV,CAAR,CAAN,CAA4BG,EAA5B,CAA+BC,KAA/B,CAAqC,IAArC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpCP,MAAAA,MAAM,CAACK,OAAO,CAAC,UAAD,EAAa,CAAb,CAAR,CAAN,CAA+BG,EAA/B,CAAkCC,KAAlC,CAAwC,UAAxC;AACD,KAFC,CAAF;AAIAF,IAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC5BP,MAAAA,MAAM,CAACK,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAN,CAAsBG,EAAtB,CAAyBC,KAAzB,CAA+B,CAA/B;AACAT,MAAAA,MAAM,CAACK,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAN,CAAsBG,EAAtB,CAAyBC,KAAzB,CAA+B,CAA/B;AACAT,MAAAA,MAAM,CAACK,OAAO,CAAC,CAAD,EAAI,CAAC,CAAL,CAAR,CAAN,CAAuBG,EAAvB,CAA0BC,KAA1B,CAAgC,CAAhC;AACD,KAJC,CAAF;AAMAF,IAAAA,EAAE,CAAC,uDAAD,EAA0D,MAAM;AAChEP,MAAAA,MAAM,CAACK,OAAO,CAAC,KAAD,EAAQ,CAAR,CAAR,CAAN,CAA0BG,EAA1B,CAA6BC,KAA7B,CAAmC,GAAnC;AACAT,MAAAA,MAAM,CAACK,OAAO,CAAC,SAAD,EAAY,CAAC,CAAb,CAAR,CAAN,CAA+BG,EAA/B,CAAkCC,KAAlC,CAAwC,MAAxC;AACD,KAHC,CAAF;AAKAF,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtCP,MAAAA,MAAM,CAACK,OAAO,CAAC,OAAD,EAAU,CAAV,CAAR,CAAN,CAA4BG,EAA5B,CAA+BI,IAA/B,CAAoCH,KAApC,CAA0CI,GAA1C;AACD,KAFC,CAAF;AAGD,GAnCO,CAAR;AAoCD,CAvNO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  toMoney,\n  toNumber,\n  toDecimalNumber,\n  toDistanceString,\n  roundTo,\n} from '../conversionFunctions';\n\ndescribe('Conversion functions', () => {\n  describe('To money', () => {\n    it(\"Should return '1 000' for 1000\", () => {\n      expect(toMoney(1000)).to.equal('1 000');\n    });\n\n    it('Should return 0 for 0', () => {\n      expect(toMoney(0)).to.equal(0);\n    });\n\n    it(\"Should return '100 000' for 100000\", () => {\n      expect(toMoney(100000)).to.equal('100 000');\n    });\n\n    it(\"Should return '-100 000' for -100000\", () => {\n      expect(toMoney(-100000)).to.equal('-100 000');\n    });\n\n    it('rounds decimal numbers', () => {\n      expect(toMoney(1000.2)).to.equal('1 000');\n    });\n\n    it('rounds decimal numbers', () => {\n      expect(toMoney(1000.8)).to.equal('1 001');\n    });\n\n    it('returns undefined for undefined', () => {\n      expect(toMoney(undefined)).to.equal(undefined);\n    });\n\n    it('returns an empty string for an empty string', () => {\n      expect(toMoney('')).to.equal('');\n    });\n\n    it('shouldnt add a negative sign if the value is close to 0', () => {\n      expect(toMoney(-0.1)).to.equal('0');\n    });\n\n    describe('rounded = false', () => {\n      it('should allow decimals', () => {\n        expect(toMoney(123456.78, { rounded: false })).to.equal('123 456.78');\n      });\n\n      it('works below 1', () => {\n        expect(toMoney(0.45, { rounded: false })).to.equal('0.45');\n      });\n\n      it('should only show the last 2 decimals', () => {\n        expect(toMoney(0.129, { rounded: false })).to.equal('0.13');\n\n        expect(toMoney(0.1234, { rounded: false })).to.equal('0.12');\n\n        expect(toMoney(0.12345, { rounded: false })).to.equal('0.12');\n      });\n\n      it('should round to 2 decimals', () => {\n        expect(toMoney(0.9999999, { rounded: false })).to.equal('1.00');\n      });\n\n      it('should handle negative values', () => {\n        expect(toMoney(-0.9999999, { rounded: false })).to.equal('-1.00');\n        expect(toMoney(-123456.789, { rounded: false })).to.equal('-123 456.79');\n      });\n    });\n  });\n\n  describe('To number', () => {\n    it(\"Should return 0 for 'a'\", () => {\n      expect(toNumber('a')).to.equal(0);\n    });\n\n    it('Should return 100 for 100', () => {\n      expect(toNumber(100)).to.equal(100);\n    });\n\n    it(\"Should return 100 for '100'\", () => {\n      expect(toNumber('100')).to.equal(100);\n    });\n\n    it('Should return 100.9 for 100.9', () => {\n      expect(toNumber(100.9)).to.equal(100.9);\n    });\n\n    it(\"Should return 1009 for '100.9'\", () => {\n      expect(toNumber('100.9')).to.equal(1009);\n    });\n\n    it('should return the same value if given a falsy non-number', () => {\n      expect(toNumber('')).to.equal('');\n      expect(toNumber(undefined)).to.equal(undefined);\n      expect(toNumber(null)).to.equal(null);\n      expect(toNumber(false)).to.equal(false);\n    });\n\n    it('should return 0 if given true', () => {\n      expect(toNumber(true)).to.equal(0);\n    });\n\n    it('should return number types', () => {\n      expect(toNumber('1 000 000')).to.equal(1000000);\n      expect(typeof toNumber('1 000 000')).to.equal('number');\n    });\n\n    it('returns undefined for undefined', () => {\n      expect(toNumber(undefined)).to.equal(undefined);\n    });\n\n    it('returns an empty string for an empty string', () => {\n      expect(toNumber('')).to.equal('');\n    });\n  });\n\n  describe('To decimal number', () => {\n    it(\"Should return 0.1 for '0.1'\", () => {\n      expect(toDecimalNumber('0.1')).to.equal(0.1);\n    });\n\n    it(\"Should return 0.1 for '0,1'\", () => {\n      expect(toDecimalNumber('0,1')).to.equal(0.1);\n    });\n\n    it(\"Should return 1 for '1'\", () => {\n      expect(toDecimalNumber('1')).to.equal(1);\n    });\n\n    it(\"Should return 1 for '001'\", () => {\n      expect(toDecimalNumber('001')).to.equal(1);\n    });\n\n    it('Should return -1 for -1', () => {\n      expect(toDecimalNumber(-1)).to.equal(-1);\n    });\n\n    it('should return the same value if given a falsy non-number', () => {\n      expect(toDecimalNumber('')).to.equal('');\n      expect(toDecimalNumber(undefined)).to.equal(undefined);\n      expect(toDecimalNumber(null)).to.equal(null);\n      expect(toDecimalNumber(false)).to.equal(false);\n    });\n  });\n\n  describe('To Distance String', () => {\n    it('returns 0 for a negative distance', () => {\n      expect(toDistanceString(-1)).to.equal('0 m');\n    });\n\n    it('returns 0 for 0', () => {\n      expect(toDistanceString(0)).to.equal('0 m');\n    });\n\n    it('returns 80 for 81', () => {\n      expect(toDistanceString(81)).to.equal('80 m');\n    });\n\n    it('returns 10 for 9', () => {\n      expect(toDistanceString(9)).to.equal('10 m');\n    });\n\n    it('returns 420 for 425', () => {\n      expect(toDistanceString(425)).to.equal('430 m');\n    });\n\n    it('returns 1.0 for 1000', () => {\n      expect(toDistanceString(1000)).to.equal('1.0 km');\n    });\n\n    it('returns 5.4 for 5432', () => {\n      expect(toDistanceString(5432)).to.equal('5.4 km');\n    });\n\n    it('returns 10 for 10000', () => {\n      expect(toDistanceString(10000)).to.equal('10 km');\n    });\n\n    it('returns 55 for 54987', () => {\n      expect(toDistanceString(54987)).to.equal('55 km');\n    });\n  });\n\n  describe('roundTo', () => {\n    it('rounds to nearest 10000', () => {\n      expect(roundTo(12345, 4)).to.equal(10000);\n    });\n\n    it('rounds to nearest 10', () => {\n      expect(roundTo(12, 1)).to.equal(10);\n    });\n\n    it('rounds 1 to nearest 10000', () => {\n      expect(roundTo(1, 4)).to.equal(0);\n    });\n\n    it('rounds decimal values to decimal places', () => {\n      expect(roundTo(0.5689, -2)).to.equal(0.57);\n    });\n\n    it('does nothing if 0 is used', () => {\n      expect(roundTo(123.456789, 0)).to.equal(123.456789);\n    });\n\n    it('rounds 0 properly', () => {\n      expect(roundTo(0, 4)).to.equal(0);\n      expect(roundTo(0, 0)).to.equal(0);\n      expect(roundTo(0, -4)).to.equal(0);\n    });\n\n    it('parses strings with numbers to get a number out of it', () => {\n      expect(roundTo('123', 2)).to.equal(100);\n      expect(roundTo('123.321', -2)).to.equal(123.32);\n    });\n\n    it('parses weird strings as NaN', () => {\n      expect(roundTo('hello', 3)).to.deep.equal(NaN);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/conversionFunctions.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/test/conversionFunctions.spec.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar toMoney, toNumber, toDecimalNumber, toDistanceString, roundTo;\nmodule.link(\"../conversionFunctions\", {\n  toMoney: function (v) {\n    toMoney = v;\n  },\n  toNumber: function (v) {\n    toNumber = v;\n  },\n  toDecimalNumber: function (v) {\n    toDecimalNumber = v;\n  },\n  toDistanceString: function (v) {\n    toDistanceString = v;\n  },\n  roundTo: function (v) {\n    roundTo = v;\n  }\n}, 1);\ndescribe('Conversion functions', function () {\n  describe('To money', function () {\n    it(\"Should return '1 000' for 1000\", function () {\n      expect(toMoney(1000)).to.equal('1 000');\n    });\n    it('Should return 0 for 0', function () {\n      expect(toMoney(0)).to.equal(0);\n    });\n    it(\"Should return '100 000' for 100000\", function () {\n      expect(toMoney(100000)).to.equal('100 000');\n    });\n    it(\"Should return '-100 000' for -100000\", function () {\n      expect(toMoney(-100000)).to.equal('-100 000');\n    });\n    it('rounds decimal numbers', function () {\n      expect(toMoney(1000.2)).to.equal('1 000');\n    });\n    it('rounds decimal numbers', function () {\n      expect(toMoney(1000.8)).to.equal('1 001');\n    });\n    it('returns undefined for undefined', function () {\n      expect(toMoney(undefined)).to.equal(undefined);\n    });\n    it('returns an empty string for an empty string', function () {\n      expect(toMoney('')).to.equal('');\n    });\n    it('shouldnt add a negative sign if the value is close to 0', function () {\n      expect(toMoney(-0.1)).to.equal('0');\n    });\n    describe('rounded = false', function () {\n      it('should allow decimals', function () {\n        expect(toMoney(123456.78, {\n          rounded: false\n        })).to.equal('123 456.78');\n      });\n      it('works below 1', function () {\n        expect(toMoney(0.45, {\n          rounded: false\n        })).to.equal('0.45');\n      });\n      it('should only show the last 2 decimals', function () {\n        expect(toMoney(0.129, {\n          rounded: false\n        })).to.equal('0.13');\n        expect(toMoney(0.1234, {\n          rounded: false\n        })).to.equal('0.12');\n        expect(toMoney(0.12345, {\n          rounded: false\n        })).to.equal('0.12');\n      });\n      it('should round to 2 decimals', function () {\n        expect(toMoney(0.9999999, {\n          rounded: false\n        })).to.equal('1.00');\n      });\n      it('should handle negative values', function () {\n        expect(toMoney(-0.9999999, {\n          rounded: false\n        })).to.equal('-1.00');\n        expect(toMoney(-123456.789, {\n          rounded: false\n        })).to.equal('-123 456.79');\n      });\n    });\n  });\n  describe('To number', function () {\n    it(\"Should return 0 for 'a'\", function () {\n      expect(toNumber('a')).to.equal(0);\n    });\n    it('Should return 100 for 100', function () {\n      expect(toNumber(100)).to.equal(100);\n    });\n    it(\"Should return 100 for '100'\", function () {\n      expect(toNumber('100')).to.equal(100);\n    });\n    it('Should return 100.9 for 100.9', function () {\n      expect(toNumber(100.9)).to.equal(100.9);\n    });\n    it(\"Should return 1009 for '100.9'\", function () {\n      expect(toNumber('100.9')).to.equal(1009);\n    });\n    it('should return the same value if given a falsy non-number', function () {\n      expect(toNumber('')).to.equal('');\n      expect(toNumber(undefined)).to.equal(undefined);\n      expect(toNumber(null)).to.equal(null);\n      expect(toNumber(false)).to.equal(false);\n    });\n    it('should return 0 if given true', function () {\n      expect(toNumber(true)).to.equal(0);\n    });\n    it('should return number types', function () {\n      expect(toNumber('1 000 000')).to.equal(1000000);\n      expect((0, _typeof2.default)(toNumber('1 000 000'))).to.equal('number');\n    });\n    it('returns undefined for undefined', function () {\n      expect(toNumber(undefined)).to.equal(undefined);\n    });\n    it('returns an empty string for an empty string', function () {\n      expect(toNumber('')).to.equal('');\n    });\n  });\n  describe('To decimal number', function () {\n    it(\"Should return 0.1 for '0.1'\", function () {\n      expect(toDecimalNumber('0.1')).to.equal(0.1);\n    });\n    it(\"Should return 0.1 for '0,1'\", function () {\n      expect(toDecimalNumber('0,1')).to.equal(0.1);\n    });\n    it(\"Should return 1 for '1'\", function () {\n      expect(toDecimalNumber('1')).to.equal(1);\n    });\n    it(\"Should return 1 for '001'\", function () {\n      expect(toDecimalNumber('001')).to.equal(1);\n    });\n    it('Should return -1 for -1', function () {\n      expect(toDecimalNumber(-1)).to.equal(-1);\n    });\n    it('should return the same value if given a falsy non-number', function () {\n      expect(toDecimalNumber('')).to.equal('');\n      expect(toDecimalNumber(undefined)).to.equal(undefined);\n      expect(toDecimalNumber(null)).to.equal(null);\n      expect(toDecimalNumber(false)).to.equal(false);\n    });\n  });\n  describe('To Distance String', function () {\n    it('returns 0 for a negative distance', function () {\n      expect(toDistanceString(-1)).to.equal('0 m');\n    });\n    it('returns 0 for 0', function () {\n      expect(toDistanceString(0)).to.equal('0 m');\n    });\n    it('returns 80 for 81', function () {\n      expect(toDistanceString(81)).to.equal('80 m');\n    });\n    it('returns 10 for 9', function () {\n      expect(toDistanceString(9)).to.equal('10 m');\n    });\n    it('returns 420 for 425', function () {\n      expect(toDistanceString(425)).to.equal('430 m');\n    });\n    it('returns 1.0 for 1000', function () {\n      expect(toDistanceString(1000)).to.equal('1.0 km');\n    });\n    it('returns 5.4 for 5432', function () {\n      expect(toDistanceString(5432)).to.equal('5.4 km');\n    });\n    it('returns 10 for 10000', function () {\n      expect(toDistanceString(10000)).to.equal('10 km');\n    });\n    it('returns 55 for 54987', function () {\n      expect(toDistanceString(54987)).to.equal('55 km');\n    });\n  });\n  describe('roundTo', function () {\n    it('rounds to nearest 10000', function () {\n      expect(roundTo(12345, 4)).to.equal(10000);\n    });\n    it('rounds to nearest 10', function () {\n      expect(roundTo(12, 1)).to.equal(10);\n    });\n    it('rounds 1 to nearest 10000', function () {\n      expect(roundTo(1, 4)).to.equal(0);\n    });\n    it('rounds decimal values to decimal places', function () {\n      expect(roundTo(0.5689, -2)).to.equal(0.57);\n    });\n    it('does nothing if 0 is used', function () {\n      expect(roundTo(123.456789, 0)).to.equal(123.456789);\n    });\n    it('rounds 0 properly', function () {\n      expect(roundTo(0, 4)).to.equal(0);\n      expect(roundTo(0, 0)).to.equal(0);\n      expect(roundTo(0, -4)).to.equal(0);\n    });\n    it('parses strings with numbers to get a number out of it', function () {\n      expect(roundTo('123', 2)).to.equal(100);\n      expect(roundTo('123.321', -2)).to.equal(123.32);\n    });\n    it('parses weird strings as NaN', function () {\n      expect(roundTo('hello', 3)).to.deep.equal(NaN);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/test/conversionFunctions.spec.js"],"names":["describe","it","expect","toMoney","rounded","toNumber","toDecimalNumber","toDistanceString","roundTo"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport {\n  toMoney,\n  toNumber,\n  toDecimalNumber,\n  toDistanceString,\n  roundTo,\n} from '../conversionFunctions';\n\ndescribe('Conversion functions', () => {\n  describe('To money', () => {\n    it(\"Should return '1 000' for 1000\", () => {\n      expect(toMoney(1000)).to.equal('1 000');\n    });\n\n    it('Should return 0 for 0', () => {\n      expect(toMoney(0)).to.equal(0);\n    });\n\n    it(\"Should return '100 000' for 100000\", () => {\n      expect(toMoney(100000)).to.equal('100 000');\n    });\n\n    it(\"Should return '-100 000' for -100000\", () => {\n      expect(toMoney(-100000)).to.equal('-100 000');\n    });\n\n    it('rounds decimal numbers', () => {\n      expect(toMoney(1000.2)).to.equal('1 000');\n    });\n\n    it('rounds decimal numbers', () => {\n      expect(toMoney(1000.8)).to.equal('1 001');\n    });\n\n    it('returns undefined for undefined', () => {\n      expect(toMoney(undefined)).to.equal(undefined);\n    });\n\n    it('returns an empty string for an empty string', () => {\n      expect(toMoney('')).to.equal('');\n    });\n\n    it('shouldnt add a negative sign if the value is close to 0', () => {\n      expect(toMoney(-0.1)).to.equal('0');\n    });\n\n    describe('rounded = false', () => {\n      it('should allow decimals', () => {\n        expect(toMoney(123456.78, { rounded: false })).to.equal('123 456.78');\n      });\n\n      it('works below 1', () => {\n        expect(toMoney(0.45, { rounded: false })).to.equal('0.45');\n      });\n\n      it('should only show the last 2 decimals', () => {\n        expect(toMoney(0.129, { rounded: false })).to.equal('0.13');\n\n        expect(toMoney(0.1234, { rounded: false })).to.equal('0.12');\n\n        expect(toMoney(0.12345, { rounded: false })).to.equal('0.12');\n      });\n\n      it('should round to 2 decimals', () => {\n        expect(toMoney(0.9999999, { rounded: false })).to.equal('1.00');\n      });\n\n      it('should handle negative values', () => {\n        expect(toMoney(-0.9999999, { rounded: false })).to.equal('-1.00');\n        expect(toMoney(-123456.789, { rounded: false })).to.equal('-123 456.79');\n      });\n    });\n  });\n\n  describe('To number', () => {\n    it(\"Should return 0 for 'a'\", () => {\n      expect(toNumber('a')).to.equal(0);\n    });\n\n    it('Should return 100 for 100', () => {\n      expect(toNumber(100)).to.equal(100);\n    });\n\n    it(\"Should return 100 for '100'\", () => {\n      expect(toNumber('100')).to.equal(100);\n    });\n\n    it('Should return 100.9 for 100.9', () => {\n      expect(toNumber(100.9)).to.equal(100.9);\n    });\n\n    it(\"Should return 1009 for '100.9'\", () => {\n      expect(toNumber('100.9')).to.equal(1009);\n    });\n\n    it('should return the same value if given a falsy non-number', () => {\n      expect(toNumber('')).to.equal('');\n      expect(toNumber(undefined)).to.equal(undefined);\n      expect(toNumber(null)).to.equal(null);\n      expect(toNumber(false)).to.equal(false);\n    });\n\n    it('should return 0 if given true', () => {\n      expect(toNumber(true)).to.equal(0);\n    });\n\n    it('should return number types', () => {\n      expect(toNumber('1 000 000')).to.equal(1000000);\n      expect(typeof toNumber('1 000 000')).to.equal('number');\n    });\n\n    it('returns undefined for undefined', () => {\n      expect(toNumber(undefined)).to.equal(undefined);\n    });\n\n    it('returns an empty string for an empty string', () => {\n      expect(toNumber('')).to.equal('');\n    });\n  });\n\n  describe('To decimal number', () => {\n    it(\"Should return 0.1 for '0.1'\", () => {\n      expect(toDecimalNumber('0.1')).to.equal(0.1);\n    });\n\n    it(\"Should return 0.1 for '0,1'\", () => {\n      expect(toDecimalNumber('0,1')).to.equal(0.1);\n    });\n\n    it(\"Should return 1 for '1'\", () => {\n      expect(toDecimalNumber('1')).to.equal(1);\n    });\n\n    it(\"Should return 1 for '001'\", () => {\n      expect(toDecimalNumber('001')).to.equal(1);\n    });\n\n    it('Should return -1 for -1', () => {\n      expect(toDecimalNumber(-1)).to.equal(-1);\n    });\n\n    it('should return the same value if given a falsy non-number', () => {\n      expect(toDecimalNumber('')).to.equal('');\n      expect(toDecimalNumber(undefined)).to.equal(undefined);\n      expect(toDecimalNumber(null)).to.equal(null);\n      expect(toDecimalNumber(false)).to.equal(false);\n    });\n  });\n\n  describe('To Distance String', () => {\n    it('returns 0 for a negative distance', () => {\n      expect(toDistanceString(-1)).to.equal('0 m');\n    });\n\n    it('returns 0 for 0', () => {\n      expect(toDistanceString(0)).to.equal('0 m');\n    });\n\n    it('returns 80 for 81', () => {\n      expect(toDistanceString(81)).to.equal('80 m');\n    });\n\n    it('returns 10 for 9', () => {\n      expect(toDistanceString(9)).to.equal('10 m');\n    });\n\n    it('returns 420 for 425', () => {\n      expect(toDistanceString(425)).to.equal('430 m');\n    });\n\n    it('returns 1.0 for 1000', () => {\n      expect(toDistanceString(1000)).to.equal('1.0 km');\n    });\n\n    it('returns 5.4 for 5432', () => {\n      expect(toDistanceString(5432)).to.equal('5.4 km');\n    });\n\n    it('returns 10 for 10000', () => {\n      expect(toDistanceString(10000)).to.equal('10 km');\n    });\n\n    it('returns 55 for 54987', () => {\n      expect(toDistanceString(54987)).to.equal('55 km');\n    });\n  });\n\n  describe('roundTo', () => {\n    it('rounds to nearest 10000', () => {\n      expect(roundTo(12345, 4)).to.equal(10000);\n    });\n\n    it('rounds to nearest 10', () => {\n      expect(roundTo(12, 1)).to.equal(10);\n    });\n\n    it('rounds 1 to nearest 10000', () => {\n      expect(roundTo(1, 4)).to.equal(0);\n    });\n\n    it('rounds decimal values to decimal places', () => {\n      expect(roundTo(0.5689, -2)).to.equal(0.57);\n    });\n\n    it('does nothing if 0 is used', () => {\n      expect(roundTo(123.456789, 0)).to.equal(123.456789);\n    });\n\n    it('rounds 0 properly', () => {\n      expect(roundTo(0, 4)).to.equal(0);\n      expect(roundTo(0, 0)).to.equal(0);\n      expect(roundTo(0, -4)).to.equal(0);\n    });\n\n    it('parses strings with numbers to get a number out of it', () => {\n      expect(roundTo('123', 2)).to.equal(100);\n      expect(roundTo('123.321', -2)).to.equal(123.32);\n    });\n\n    it('parses weird strings as NaN', () => {\n      expect(roundTo('hello', 3)).to.deep.equal(NaN);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"8738734ea528f8ca50082dbc0b56ee693615a456"}

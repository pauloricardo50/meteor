{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/general.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/test/general.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/general.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/test/general.spec.js"],"names":["expect","times","getAggregatePercent","arrayify","getPercent","normalize","describe","it","to","deep","equal","undefined","array","throw","percent","count","id","_id"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport times from 'lodash/times';\n\nimport { getAggregatePercent } from 'core/utils/general';\nimport { arrayify, getPercent, normalize } from '../general';\n\ndescribe('general helpers', () => {\n  describe('arrayify', () => {\n    it('returns an array if given an array', () => {\n      expect(arrayify([])).to.deep.equal([]);\n    });\n\n    it('returns an array if given nothing', () => {\n      expect(arrayify()).to.deep.equal([]);\n    });\n\n    it('returns an array with a given value if value is not an array', () => {\n      expect(arrayify({})).to.deep.equal([{}]);\n      expect(arrayify('hello')).to.deep.equal(['hello']);\n      expect(arrayify(1)).to.deep.equal([1]);\n    });\n  });\n\n  describe('getPercent', () => {\n    it('returns 1 for an empty array', () => {\n      expect(getPercent([])).to.equal(1);\n    });\n\n    it('returns 1 for a simple array', () => {\n      expect(getPercent(['hello'])).to.equal(1);\n    });\n\n    it('returns 0 for a simple array with undefined', () => {\n      expect(getPercent([undefined])).to.equal(0);\n    });\n\n    it('counts false values', () => {\n      expect(getPercent([false])).to.equal(1);\n    });\n\n    it(\"doesn't count null values\", () => {\n      expect(getPercent([null])).to.equal(0);\n    });\n\n    it('returns 0.2 for an array with 10 values and 8 undefined values', () => {\n      const array = times(10, () => undefined);\n      array[0] = true;\n      array[1] = true;\n\n      expect(getPercent(array)).to.equal(0.2);\n    });\n\n    it(\"throws an error if it isn't given an array\", () => {\n      expect(() => getPercent('hello')).to.throw();\n    });\n\n    it(\"returns 0 if it isn't given any argument\", () => {\n      expect(getPercent()).to.equal(0);\n    });\n\n    it('returns 1 if it is given an empty array', () => {\n      // Empty array means that there was nothing to do, so it should be 100%\n      expect(getPercent([])).to.equal(1);\n    });\n  });\n\n  describe('getAggregatePercent', () => {\n    it('calculates the true progress based on count', () => {\n      expect(getAggregatePercent([\n        { percent: 0.1, count: 10 },\n        { percent: 0.4, count: 20 },\n      ])).to.deep.equal({ count: 30, percent: 0.3 });\n    });\n\n    it('returns 0 for empty arrays', () => {\n      expect(getAggregatePercent([])).to.deep.equal({\n        count: 0,\n        percent: 0,\n      });\n    });\n\n    it('returns the same value for a single object', () => {\n      expect(getAggregatePercent([{ percent: 0.1, count: 10 }])).to.deep.equal({\n        count: 10,\n        percent: 0.1,\n      });\n    });\n  });\n\n  describe('normalize', () => {\n    it('transforms an array of objects into a normalized object', () => {\n      expect(normalize([{ id: 1 }, { id: 2 }])).to.deep.equal({\n        1: { id: 1 },\n        2: { id: 2 },\n      });\n    });\n\n    it('works with _id', () => {\n      expect(normalize([{ _id: 1 }, { _id: 2 }])).to.deep.equal({\n        1: { _id: 1 },\n        2: { _id: 2 },\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/test/general.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/test/general.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet times;\nmodule.link(\"lodash/times\", {\n  default(v) {\n    times = v;\n  }\n\n}, 1);\nlet getAggregatePercent;\nmodule.link(\"../general\", {\n  getAggregatePercent(v) {\n    getAggregatePercent = v;\n  }\n\n}, 2);\nlet arrayify, getPercent, normalize;\nmodule.link(\"../general\", {\n  arrayify(v) {\n    arrayify = v;\n  },\n\n  getPercent(v) {\n    getPercent = v;\n  },\n\n  normalize(v) {\n    normalize = v;\n  }\n\n}, 3);\ndescribe('general helpers', () => {\n  describe('arrayify', () => {\n    it('returns an array if given an array', () => {\n      expect(arrayify([])).to.deep.equal([]);\n    });\n    it('returns an array if given nothing', () => {\n      expect(arrayify()).to.deep.equal([]);\n    });\n    it('returns an array with a given value if value is not an array', () => {\n      expect(arrayify({})).to.deep.equal([{}]);\n      expect(arrayify('hello')).to.deep.equal(['hello']);\n      expect(arrayify(1)).to.deep.equal([1]);\n    });\n  });\n  describe('getPercent', () => {\n    it('returns 1 for an empty array', () => {\n      expect(getPercent([])).to.equal(1);\n    });\n    it('returns 1 for a simple array', () => {\n      expect(getPercent(['hello'])).to.equal(1);\n    });\n    it('returns 0 for a simple array with undefined', () => {\n      expect(getPercent([undefined])).to.equal(0);\n    });\n    it('counts false values', () => {\n      expect(getPercent([false])).to.equal(1);\n    });\n    it(\"doesn't count null values\", () => {\n      expect(getPercent([null])).to.equal(0);\n    });\n    it('returns 0.2 for an array with 10 values and 8 undefined values', () => {\n      const array = times(10, () => undefined);\n      array[0] = true;\n      array[1] = true;\n      expect(getPercent(array)).to.equal(0.2);\n    });\n    it(\"throws an error if it isn't given an array\", () => {\n      expect(() => getPercent('hello')).to.throw();\n    });\n    it(\"returns 0 if it isn't given any argument\", () => {\n      expect(getPercent()).to.equal(0);\n    });\n    it('returns 1 if it is given an empty array', () => {\n      // Empty array means that there was nothing to do, so it should be 100%\n      expect(getPercent([])).to.equal(1);\n    });\n  });\n  describe('getAggregatePercent', () => {\n    it('calculates the true progress based on count', () => {\n      expect(getAggregatePercent([{\n        percent: 0.1,\n        count: 10\n      }, {\n        percent: 0.4,\n        count: 20\n      }])).to.deep.equal({\n        count: 30,\n        percent: 0.3\n      });\n    });\n    it('returns 0 for empty arrays', () => {\n      expect(getAggregatePercent([])).to.deep.equal({\n        count: 0,\n        percent: 0\n      });\n    });\n    it('returns the same value for a single object', () => {\n      expect(getAggregatePercent([{\n        percent: 0.1,\n        count: 10\n      }])).to.deep.equal({\n        count: 10,\n        percent: 0.1\n      });\n    });\n  });\n  describe('normalize', () => {\n    it('transforms an array of objects into a normalized object', () => {\n      expect(normalize([{\n        id: 1\n      }, {\n        id: 2\n      }])).to.deep.equal({\n        1: {\n          id: 1\n        },\n        2: {\n          id: 2\n        }\n      });\n    });\n    it('works with _id', () => {\n      expect(normalize([{\n        _id: 1\n      }, {\n        _id: 2\n      }])).to.deep.equal({\n        1: {\n          _id: 1\n        },\n        2: {\n          _id: 2\n        }\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/test/general.spec.js"],"names":["describe","it","expect","arrayify","getPercent","array","times","getAggregatePercent","percent","count","normalize","id","_id"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport times from 'lodash/times';\n\nimport { getAggregatePercent } from 'core/utils/general';\nimport { arrayify, getPercent, normalize } from '../general';\n\ndescribe('general helpers', () => {\n  describe('arrayify', () => {\n    it('returns an array if given an array', () => {\n      expect(arrayify([])).to.deep.equal([]);\n    });\n\n    it('returns an array if given nothing', () => {\n      expect(arrayify()).to.deep.equal([]);\n    });\n\n    it('returns an array with a given value if value is not an array', () => {\n      expect(arrayify({})).to.deep.equal([{}]);\n      expect(arrayify('hello')).to.deep.equal(['hello']);\n      expect(arrayify(1)).to.deep.equal([1]);\n    });\n  });\n\n  describe('getPercent', () => {\n    it('returns 1 for an empty array', () => {\n      expect(getPercent([])).to.equal(1);\n    });\n\n    it('returns 1 for a simple array', () => {\n      expect(getPercent(['hello'])).to.equal(1);\n    });\n\n    it('returns 0 for a simple array with undefined', () => {\n      expect(getPercent([undefined])).to.equal(0);\n    });\n\n    it('counts false values', () => {\n      expect(getPercent([false])).to.equal(1);\n    });\n\n    it(\"doesn't count null values\", () => {\n      expect(getPercent([null])).to.equal(0);\n    });\n\n    it('returns 0.2 for an array with 10 values and 8 undefined values', () => {\n      const array = times(10, () => undefined);\n      array[0] = true;\n      array[1] = true;\n\n      expect(getPercent(array)).to.equal(0.2);\n    });\n\n    it(\"throws an error if it isn't given an array\", () => {\n      expect(() => getPercent('hello')).to.throw();\n    });\n\n    it(\"returns 0 if it isn't given any argument\", () => {\n      expect(getPercent()).to.equal(0);\n    });\n\n    it('returns 1 if it is given an empty array', () => {\n      // Empty array means that there was nothing to do, so it should be 100%\n      expect(getPercent([])).to.equal(1);\n    });\n  });\n\n  describe('getAggregatePercent', () => {\n    it('calculates the true progress based on count', () => {\n      expect(getAggregatePercent([\n        { percent: 0.1, count: 10 },\n        { percent: 0.4, count: 20 },\n      ])).to.deep.equal({ count: 30, percent: 0.3 });\n    });\n\n    it('returns 0 for empty arrays', () => {\n      expect(getAggregatePercent([])).to.deep.equal({\n        count: 0,\n        percent: 0,\n      });\n    });\n\n    it('returns the same value for a single object', () => {\n      expect(getAggregatePercent([{ percent: 0.1, count: 10 }])).to.deep.equal({\n        count: 10,\n        percent: 0.1,\n      });\n    });\n  });\n\n  describe('normalize', () => {\n    it('transforms an array of objects into a normalized object', () => {\n      expect(normalize([{ id: 1 }, { id: 2 }])).to.deep.equal({\n        1: { id: 1 },\n        2: { id: 2 },\n      });\n    });\n\n    it('works with _id', () => {\n      expect(normalize([{ _id: 1 }, { _id: 2 }])).to.deep.equal({\n        1: { _id: 1 },\n        2: { _id: 2 },\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"5d5a5cdd9b6bc780e8f01214a968f1d65ed4725e"}

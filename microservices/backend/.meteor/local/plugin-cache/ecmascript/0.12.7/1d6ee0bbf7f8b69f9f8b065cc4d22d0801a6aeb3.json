{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/test/server/proLoansServer.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/loans/test/server/proLoansServer.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/test/server/proLoansServer.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/loans/test/server/proLoansServer.test.js"],"names":["expect","resetDatabase","generator","proLoans","LOAN_STATUS","describe","beforeEach","it","users","_id","_factory","referredCustomers","loans","clone","userId","calledByUserId","fetch","length","to","equal","status","UNSUCCESSFUL","LEAD","CLOSING","closingLoans","leadAndClosingLoans","$in","organisations","fetchOrganisationLoans","promotions","promotionId"],"mappings":"AAAA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SAASC,aAAT;AACA,OAAOC,SAAP;AACA,SAASC,QAAT;AACA,SAASC,WAAT;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzBC,EAAAA,UAAU,CAAC,MAAML,aAAa,EAApB,CAAV;AAEAI,EAAAA,QAAQ,CAAC,sBAAD,EAAyB,MAAM;AACrCE,IAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjCL,MAAAA,SAAS,CAAC;AACRM,QAAAA,KAAK,EAAE;AACLC,UAAAA,GAAG,EAAE,SADA;AAELC,UAAAA,QAAQ,EAAE,OAFL;AAGLC,UAAAA,iBAAiB,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAD,EAAgB;AAAEA,YAAAA,KAAK,EAAE;AAAT,WAAhB;AAHd;AADC,OAAD,CAAT;AAOA,YAAMA,KAAK,GAAGT,QAAQ,CACnBU,KADW,CACL;AAAEC,QAAAA,MAAM,EAAE,SAAV;AAAqBC,QAAAA,cAAc,EAAE;AAArC,OADK,EAEXC,KAFW,EAAd;AAIAhB,MAAAA,MAAM,CAACY,KAAK,CAACK,MAAP,CAAN,CAAqBC,EAArB,CAAwBC,KAAxB,CAA8B,CAA9B;AACD,KAbC,CAAF;AAeAZ,IAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClCL,MAAAA,SAAS,CAAC;AACRM,QAAAA,KAAK,EAAE;AACLC,UAAAA,GAAG,EAAE,SADA;AAELC,UAAAA,QAAQ,EAAE,OAFL;AAGLC,UAAAA,iBAAiB,EAAE,CACjB;AACEC,YAAAA,KAAK,EAAE,CACL;AAAEQ,cAAAA,MAAM,EAAEhB,WAAW,CAACiB;AAAtB,aADK,EAEL;AAAED,cAAAA,MAAM,EAAEhB,WAAW,CAACkB;AAAtB,aAFK;AADT,WADiB,EAOjB;AAAEV,YAAAA,KAAK,EAAE;AAAEQ,cAAAA,MAAM,EAAEhB,WAAW,CAACmB;AAAtB;AAAT,WAPiB;AAHd;AADC,OAAD,CAAT;AAgBA,YAAMX,KAAK,GAAGT,QAAQ,CACnBU,KADW,CACL;AACLC,QAAAA,MAAM,EAAE,SADH;AAELC,QAAAA,cAAc,EAAE;AAFX,OADK,EAKXC,KALW,EAAd;AAOAhB,MAAAA,MAAM,CAACY,KAAK,CAACK,MAAP,CAAN,CAAqBC,EAArB,CAAwBC,KAAxB,CAA8B,CAA9B;AAEA,YAAMK,YAAY,GAAGrB,QAAQ,CAC1BU,KADkB,CACZ;AACLC,QAAAA,MAAM,EAAE,SADH;AAELC,QAAAA,cAAc,EAAE,SAFX;AAGLK,QAAAA,MAAM,EAAEhB,WAAW,CAACmB;AAHf,OADY,EAMlBP,KANkB,EAArB;AAQAhB,MAAAA,MAAM,CAACwB,YAAY,CAACP,MAAd,CAAN,CAA4BC,EAA5B,CAA+BC,KAA/B,CAAqC,CAArC;AAEA,YAAMM,mBAAmB,GAAGtB,QAAQ,CACjCU,KADyB,CACnB;AACLC,QAAAA,MAAM,EAAE,SADH;AAELC,QAAAA,cAAc,EAAE,SAFX;AAGLK,QAAAA,MAAM,EAAE;AAAEM,UAAAA,GAAG,EAAE,CAACtB,WAAW,CAACkB,IAAb,EAAmBlB,WAAW,CAACmB,OAA/B;AAAP;AAHH,OADmB,EAMzBP,KANyB,EAA5B;AAQAhB,MAAAA,MAAM,CAACyB,mBAAmB,CAACR,MAArB,CAAN,CAAmCC,EAAnC,CAAsCC,KAAtC,CAA4C,CAA5C;AACD,KA7CC,CAAF;AA8CD,GA9DO,CAAR;AAgEAd,EAAAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClCE,IAAAA,EAAE,CAAC,wCAAD,EAA2C,MAAM;AACjDL,MAAAA,SAAS,CAAC;AACRM,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,GAAG,EAAE,QADP;AAEEC,UAAAA,QAAQ,EAAE,KAFZ;AAGEiB,UAAAA,aAAa,EAAE;AACblB,YAAAA,GAAG,EAAE,MADQ;AAEbE,YAAAA,iBAAiB,EAAE,CAAC;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAAD,EAAgB;AAAEA,cAAAA,KAAK,EAAE;AAAT,aAAhB;AAFN;AAHjB,SADK,EASL;AACEH,UAAAA,GAAG,EAAE,QADP;AAEEC,UAAAA,QAAQ,EAAE,KAFZ;AAGEiB,UAAAA,aAAa,EAAE;AAAElB,YAAAA,GAAG,EAAE;AAAP;AAHjB,SATK;AADC,OAAD,CAAT;AAiBA,YAAMG,KAAK,GAAGT,QAAQ,CACnBU,KADW,CACL;AACLC,QAAAA,MAAM,EAAE,QADH;AAELC,QAAAA,cAAc,EAAE,QAFX;AAGLa,QAAAA,sBAAsB,EAAE;AAHnB,OADK,EAMXZ,KANW,EAAd;AAQAhB,MAAAA,MAAM,CAACY,KAAK,CAACK,MAAP,CAAN,CAAqBC,EAArB,CAAwBC,KAAxB,CAA8B,CAA9B;AACD,KA3BC,CAAF;AA6BAZ,IAAAA,EAAE,CAAC,8CAAD,EAAiD,MAAM;AACvDL,MAAAA,SAAS,CAAC;AACRM,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,GAAG,EAAE,QADP;AAEEC,UAAAA,QAAQ,EAAE,KAFZ;AAGEiB,UAAAA,aAAa,EAAE;AACblB,YAAAA,GAAG,EAAE,MADQ;AAEbE,YAAAA,iBAAiB,EAAE,CACjB;AAAEC,cAAAA,KAAK,EAAE;AAAEQ,gBAAAA,MAAM,EAAEhB,WAAW,CAACkB;AAAtB;AAAT,aADiB,EAEjB;AAAEV,cAAAA,KAAK,EAAE;AAAEQ,gBAAAA,MAAM,EAAEhB,WAAW,CAACmB;AAAtB;AAAT,aAFiB;AAFN;AAHjB,SADK,EAYL;AACEd,UAAAA,GAAG,EAAE,QADP;AAEEC,UAAAA,QAAQ,EAAE,KAFZ;AAGEiB,UAAAA,aAAa,EAAE;AAAElB,YAAAA,GAAG,EAAE;AAAP;AAHjB,SAZK;AADC,OAAD,CAAT;AAoBA,YAAMG,KAAK,GAAGT,QAAQ,CACnBU,KADW,CACL;AACLC,QAAAA,MAAM,EAAE,QADH;AAELC,QAAAA,cAAc,EAAE,QAFX;AAGLa,QAAAA,sBAAsB,EAAE,IAHnB;AAILR,QAAAA,MAAM,EAAE;AAAEM,UAAAA,GAAG,EAAE,CAACtB,WAAW,CAACkB,IAAb;AAAP;AAJH,OADK,EAOXN,KAPW,EAAd;AASAhB,MAAAA,MAAM,CAACY,KAAK,CAACK,MAAP,CAAN,CAAqBC,EAArB,CAAwBC,KAAxB,CAA8B,CAA9B;AACD,KA/BC,CAAF;AAgCD,GA9DO,CAAR;AAgEAd,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BE,IAAAA,EAAE,CAAC,6CAAD,EAAgD,MAAM;AACtDL,MAAAA,SAAS,CAAC;AACRM,QAAAA,KAAK,EAAE;AACLC,UAAAA,GAAG,EAAE,OADA;AAELC,UAAAA,QAAQ,EAAE,KAFL;AAGLC,UAAAA,iBAAiB,EAAE,CAAC;AAAEF,YAAAA,GAAG,EAAE;AAAP,WAAD,EAAmB;AAAEA,YAAAA,GAAG,EAAE;AAAP,WAAnB;AAHd,SADC;AAMRoB,QAAAA,UAAU,EAAE;AACVpB,UAAAA,GAAG,EAAE,SADK;AAEVG,UAAAA,KAAK,EAAE,CACL;AAAEE,YAAAA,MAAM,EAAE;AAAV,WADK,EAEL;AAAEA,YAAAA,MAAM,EAAE;AAAV,WAFK,EAGL;AAAEA,YAAAA,MAAM,EAAE;AAAV,WAHK;AAFG;AANJ,OAAD,CAAT;AAgBA,YAAMF,KAAK,GAAGT,QAAQ,CACnBU,KADW,CACL;AACLC,QAAAA,MAAM,EAAE,OADH;AAELC,QAAAA,cAAc,EAAE,OAFX;AAGLe,QAAAA,WAAW,EAAE;AAHR,OADK,EAMXd,KANW,EAAd;AAQAhB,MAAAA,MAAM,CAACY,KAAK,CAACK,MAAP,CAAN,CAAqBC,EAArB,CAAwBC,KAAxB,CAA8B,CAA9B;AACD,KA1BC,CAAF;AA2BD,GA5BO,CAAR;AA6BD,CAhKO,CAAR","sourcesContent":["import { expect } from 'chai';\n\nimport { resetDatabase } from '../../../../utils/testHelpers/testHelpers';\nimport generator from '../../../factories';\nimport { proLoans } from '../../queries';\nimport { LOAN_STATUS } from '../../loanConstants';\n\ndescribe('proLoans', () => {\n  beforeEach(() => resetDatabase());\n\n  describe('referredByUser loans', () => {\n    it('returns referred loans', () => {\n      generator({\n        users: {\n          _id: 'adminId',\n          _factory: 'admin',\n          referredCustomers: [{ loans: {} }, { loans: {} }],\n        },\n      });\n      const loans = proLoans\n        .clone({ userId: 'adminId', calledByUserId: 'adminId' })\n        .fetch();\n\n      expect(loans.length).to.equal(2);\n    });\n\n    it('filters loans by status', () => {\n      generator({\n        users: {\n          _id: 'adminId',\n          _factory: 'admin',\n          referredCustomers: [\n            {\n              loans: [\n                { status: LOAN_STATUS.UNSUCCESSFUL },\n                { status: LOAN_STATUS.LEAD },\n              ],\n            },\n            { loans: { status: LOAN_STATUS.CLOSING } },\n          ],\n        },\n      });\n\n      const loans = proLoans\n        .clone({\n          userId: 'adminId',\n          calledByUserId: 'adminId',\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(3);\n\n      const closingLoans = proLoans\n        .clone({\n          userId: 'adminId',\n          calledByUserId: 'adminId',\n          status: LOAN_STATUS.CLOSING,\n        })\n        .fetch();\n\n      expect(closingLoans.length).to.equal(1);\n\n      const leadAndClosingLoans = proLoans\n        .clone({\n          userId: 'adminId',\n          calledByUserId: 'adminId',\n          status: { $in: [LOAN_STATUS.LEAD, LOAN_STATUS.CLOSING] },\n        })\n        .fetch();\n\n      expect(leadAndClosingLoans.length).to.equal(2);\n    });\n  });\n\n  describe('organisationLoans', () => {\n    it('fetches all loans from an organisation', () => {\n      generator({\n        users: [\n          {\n            _id: 'proId1',\n            _factory: 'pro',\n            organisations: {\n              _id: 'Org1',\n              referredCustomers: [{ loans: {} }, { loans: {} }],\n            },\n          },\n          {\n            _id: 'proId2',\n            _factory: 'pro',\n            organisations: { _id: 'Org1' },\n          },\n        ],\n      });\n      const loans = proLoans\n        .clone({\n          userId: 'proId2',\n          calledByUserId: 'proId2',\n          fetchOrganisationLoans: true,\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(2);\n    });\n\n    it('filters loans from an organisation by status', () => {\n      generator({\n        users: [\n          {\n            _id: 'proId1',\n            _factory: 'pro',\n            organisations: {\n              _id: 'Org1',\n              referredCustomers: [\n                { loans: { status: LOAN_STATUS.LEAD } },\n                { loans: { status: LOAN_STATUS.CLOSING } },\n              ],\n            },\n          },\n          {\n            _id: 'proId2',\n            _factory: 'pro',\n            organisations: { _id: 'Org1' },\n          },\n        ],\n      });\n      const loans = proLoans\n        .clone({\n          userId: 'proId2',\n          calledByUserId: 'proId2',\n          fetchOrganisationLoans: true,\n          status: { $in: [LOAN_STATUS.LEAD] },\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(1);\n    });\n  });\n\n  describe('promotionLoans', () => {\n    it('returns all loans of a user for a promotion', () => {\n      generator({\n        users: {\n          _id: 'proId',\n          _factory: 'pro',\n          referredCustomers: [{ _id: 'user1' }, { _id: 'user2' }],\n        },\n        promotions: {\n          _id: 'promoId',\n          loans: [\n            { userId: 'user1' },\n            { userId: 'user2' },\n            { userId: 'user3' },\n          ],\n        },\n      });\n\n      const loans = proLoans\n        .clone({\n          userId: 'proId',\n          calledByUserId: 'proId',\n          promotionId: 'promoId',\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(2);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/test/server/proLoansServer.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/loans/test/server/proLoansServer.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"../../../../utils/testHelpers/testHelpers\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 2);\nlet proLoans;\nmodule.link(\"../../queries\", {\n  proLoans(v) {\n    proLoans = v;\n  }\n\n}, 3);\nlet LOAN_STATUS;\nmodule.link(\"../../loanConstants\", {\n  LOAN_STATUS(v) {\n    LOAN_STATUS = v;\n  }\n\n}, 4);\ndescribe('proLoans', () => {\n  beforeEach(() => resetDatabase());\n  describe('referredByUser loans', () => {\n    it('returns referred loans', () => {\n      generator({\n        users: {\n          _id: 'adminId',\n          _factory: 'admin',\n          referredCustomers: [{\n            loans: {}\n          }, {\n            loans: {}\n          }]\n        }\n      });\n      const loans = proLoans.clone({\n        userId: 'adminId',\n        calledByUserId: 'adminId'\n      }).fetch();\n      expect(loans.length).to.equal(2);\n    });\n    it('filters loans by status', () => {\n      generator({\n        users: {\n          _id: 'adminId',\n          _factory: 'admin',\n          referredCustomers: [{\n            loans: [{\n              status: LOAN_STATUS.UNSUCCESSFUL\n            }, {\n              status: LOAN_STATUS.LEAD\n            }]\n          }, {\n            loans: {\n              status: LOAN_STATUS.CLOSING\n            }\n          }]\n        }\n      });\n      const loans = proLoans.clone({\n        userId: 'adminId',\n        calledByUserId: 'adminId'\n      }).fetch();\n      expect(loans.length).to.equal(3);\n      const closingLoans = proLoans.clone({\n        userId: 'adminId',\n        calledByUserId: 'adminId',\n        status: LOAN_STATUS.CLOSING\n      }).fetch();\n      expect(closingLoans.length).to.equal(1);\n      const leadAndClosingLoans = proLoans.clone({\n        userId: 'adminId',\n        calledByUserId: 'adminId',\n        status: {\n          $in: [LOAN_STATUS.LEAD, LOAN_STATUS.CLOSING]\n        }\n      }).fetch();\n      expect(leadAndClosingLoans.length).to.equal(2);\n    });\n  });\n  describe('organisationLoans', () => {\n    it('fetches all loans from an organisation', () => {\n      generator({\n        users: [{\n          _id: 'proId1',\n          _factory: 'pro',\n          organisations: {\n            _id: 'Org1',\n            referredCustomers: [{\n              loans: {}\n            }, {\n              loans: {}\n            }]\n          }\n        }, {\n          _id: 'proId2',\n          _factory: 'pro',\n          organisations: {\n            _id: 'Org1'\n          }\n        }]\n      });\n      const loans = proLoans.clone({\n        userId: 'proId2',\n        calledByUserId: 'proId2',\n        fetchOrganisationLoans: true\n      }).fetch();\n      expect(loans.length).to.equal(2);\n    });\n    it('filters loans from an organisation by status', () => {\n      generator({\n        users: [{\n          _id: 'proId1',\n          _factory: 'pro',\n          organisations: {\n            _id: 'Org1',\n            referredCustomers: [{\n              loans: {\n                status: LOAN_STATUS.LEAD\n              }\n            }, {\n              loans: {\n                status: LOAN_STATUS.CLOSING\n              }\n            }]\n          }\n        }, {\n          _id: 'proId2',\n          _factory: 'pro',\n          organisations: {\n            _id: 'Org1'\n          }\n        }]\n      });\n      const loans = proLoans.clone({\n        userId: 'proId2',\n        calledByUserId: 'proId2',\n        fetchOrganisationLoans: true,\n        status: {\n          $in: [LOAN_STATUS.LEAD]\n        }\n      }).fetch();\n      expect(loans.length).to.equal(1);\n    });\n  });\n  describe('promotionLoans', () => {\n    it('returns all loans of a user for a promotion', () => {\n      generator({\n        users: {\n          _id: 'proId',\n          _factory: 'pro',\n          referredCustomers: [{\n            _id: 'user1'\n          }, {\n            _id: 'user2'\n          }]\n        },\n        promotions: {\n          _id: 'promoId',\n          loans: [{\n            userId: 'user1'\n          }, {\n            userId: 'user2'\n          }, {\n            userId: 'user3'\n          }]\n        }\n      });\n      const loans = proLoans.clone({\n        userId: 'proId',\n        calledByUserId: 'proId',\n        promotionId: 'promoId'\n      }).fetch();\n      expect(loans.length).to.equal(2);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/loans/test/server/proLoansServer.test.js"],"names":["describe","beforeEach","resetDatabase","it","generator","users","_id","_factory","referredCustomers","loans","userId","calledByUserId","expect","status","LOAN_STATUS","UNSUCCESSFUL","LEAD","CLOSING","closingLoans","leadAndClosingLoans","$in","organisations","fetchOrganisationLoans","promotions","promotionId"],"mappings":"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","sourcesContent":["import { expect } from 'chai';\n\nimport { resetDatabase } from '../../../../utils/testHelpers/testHelpers';\nimport generator from '../../../factories';\nimport { proLoans } from '../../queries';\nimport { LOAN_STATUS } from '../../loanConstants';\n\ndescribe('proLoans', () => {\n  beforeEach(() => resetDatabase());\n\n  describe('referredByUser loans', () => {\n    it('returns referred loans', () => {\n      generator({\n        users: {\n          _id: 'adminId',\n          _factory: 'admin',\n          referredCustomers: [{ loans: {} }, { loans: {} }],\n        },\n      });\n      const loans = proLoans\n        .clone({ userId: 'adminId', calledByUserId: 'adminId' })\n        .fetch();\n\n      expect(loans.length).to.equal(2);\n    });\n\n    it('filters loans by status', () => {\n      generator({\n        users: {\n          _id: 'adminId',\n          _factory: 'admin',\n          referredCustomers: [\n            {\n              loans: [\n                { status: LOAN_STATUS.UNSUCCESSFUL },\n                { status: LOAN_STATUS.LEAD },\n              ],\n            },\n            { loans: { status: LOAN_STATUS.CLOSING } },\n          ],\n        },\n      });\n\n      const loans = proLoans\n        .clone({\n          userId: 'adminId',\n          calledByUserId: 'adminId',\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(3);\n\n      const closingLoans = proLoans\n        .clone({\n          userId: 'adminId',\n          calledByUserId: 'adminId',\n          status: LOAN_STATUS.CLOSING,\n        })\n        .fetch();\n\n      expect(closingLoans.length).to.equal(1);\n\n      const leadAndClosingLoans = proLoans\n        .clone({\n          userId: 'adminId',\n          calledByUserId: 'adminId',\n          status: { $in: [LOAN_STATUS.LEAD, LOAN_STATUS.CLOSING] },\n        })\n        .fetch();\n\n      expect(leadAndClosingLoans.length).to.equal(2);\n    });\n  });\n\n  describe('organisationLoans', () => {\n    it('fetches all loans from an organisation', () => {\n      generator({\n        users: [\n          {\n            _id: 'proId1',\n            _factory: 'pro',\n            organisations: {\n              _id: 'Org1',\n              referredCustomers: [{ loans: {} }, { loans: {} }],\n            },\n          },\n          {\n            _id: 'proId2',\n            _factory: 'pro',\n            organisations: { _id: 'Org1' },\n          },\n        ],\n      });\n      const loans = proLoans\n        .clone({\n          userId: 'proId2',\n          calledByUserId: 'proId2',\n          fetchOrganisationLoans: true,\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(2);\n    });\n\n    it('filters loans from an organisation by status', () => {\n      generator({\n        users: [\n          {\n            _id: 'proId1',\n            _factory: 'pro',\n            organisations: {\n              _id: 'Org1',\n              referredCustomers: [\n                { loans: { status: LOAN_STATUS.LEAD } },\n                { loans: { status: LOAN_STATUS.CLOSING } },\n              ],\n            },\n          },\n          {\n            _id: 'proId2',\n            _factory: 'pro',\n            organisations: { _id: 'Org1' },\n          },\n        ],\n      });\n      const loans = proLoans\n        .clone({\n          userId: 'proId2',\n          calledByUserId: 'proId2',\n          fetchOrganisationLoans: true,\n          status: { $in: [LOAN_STATUS.LEAD] },\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(1);\n    });\n  });\n\n  describe('promotionLoans', () => {\n    it('returns all loans of a user for a promotion', () => {\n      generator({\n        users: {\n          _id: 'proId',\n          _factory: 'pro',\n          referredCustomers: [{ _id: 'user1' }, { _id: 'user2' }],\n        },\n        promotions: {\n          _id: 'promoId',\n          loans: [\n            { userId: 'user1' },\n            { userId: 'user2' },\n            { userId: 'user3' },\n          ],\n        },\n      });\n\n      const loans = proLoans\n        .clone({\n          userId: 'proId',\n          calledByUserId: 'proId',\n          promotionId: 'promoId',\n        })\n        .fetch();\n\n      expect(loans.length).to.equal(2);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"1d6ee0bbf7f8b69f9f8b065cc4d22d0801a6aeb3"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/LoanService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/loans/server/LoanService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/LoanService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/loans/server/LoanService.js"],"names":["Meteor","Random","omit","moment","LenderRulesService","PROPERTY_CATEGORY","ACTIVITY_SECONDARY_TYPES","ActivityService","PromotionOptionService","shouldSendStepNotification","Intl","makeFeedback","FEEDBACK_OPTIONS","Calculator","CalculatorClass","getZipcodeForCanton","RESIDENCE_TYPE","ORGANISATION_FEATURES","LOAN_STATUS","LOAN_VERIFICATION_STATUS","CANTONS","EMAIL_IDS","OfferService","adminLoan","lenderRules","lenderRulesFragment","userLoan","CollectionService","BorrowerService","PropertyService","PromotionService","UserService","OrganisationService","Loans","sendEmail","ORGANISATION_NAME_SEPARATOR","STEPS","APPLICATION_TYPES","fullLoan","zeroPadding","num","places","zero","toString","length","Array","join","LoanService","constructor","loan","userId","name","getNewLoanName","insert","proPropertyId","referralId","loanId","insertPropertyLoan","propertyIds","update","object","anonymous","displayWelcomeScreen","now","Date","year","getYear","yearPrefix","lastLoan","findOne","sort","lastPrefix","count","split","map","numb","parseInt","nextCountString","operator","remove","addNewStructure","get","verificationStatus","REQUESTED","OK","Error","userFormsEnabled","promotionId","invitedBy","showAllLots","promotionLotIds","shareSolvency","customName","fetchOne","$filters","_id","promotionLinks","forEach","promotionLotId","address1","status","BILLING","$push","$pop","$pull","structure","atIndex","newStructureId","id","structures","$each","disabled","$position","selectedStructure","isFirstStructure","shouldCopyExistingStructure","find","propertyId","undefined","addStructure","structureId","currentlySelected","updateObj","getAutoValues","currentStructure","$set","structureExists","some","currentStructureIndex","findIndex","addLink","linkName","linkId","structurePropertyId","promotionOptionId","updateStructure","borrowerId","loans","borrowerIds","fetch","ownFunds","filter","bId","setStep","nextStep","step","user","assignedEmployee","run","emailId","FIND_LENDER_NOTIFICATION","params","assigneeName","setStatus","prevStatus","nextStatus","setPromotionPriorityOrder","priorityOrder","getPromotionPriorityOrder","promotionLink","assignLoanToUser","properties","borrowers","category","USER","exists","referredByUserLink","referredByOrganisationLink","setReferredBy","proId","switchBorrower","oldBorrowerId","oldBorrowerLoans","createQuery","includes","sendNegativeFeedbackToAllLenders","offers","property","withSort","$options","createdAt","filteredOffers","reduce","filtered","offer","lender","contact","email","lenderEmail","lenderIsAlreadyInMailingList","promises","feedback","model","option","NEGATIVE_WITHOUT_FOLLOW_UP","formatMessage","bind","sendFeedback","offerId","saveFeedback","Promise","all","updatePromotionInvitedBy","updateLinkMetadata","metadata","reuseProperty","getMaxPropertyValueRange","organisations","residenceType","canton","loanObject","createLoanObject","maxPropertyValues","calculator","borrowRatio","propertyValue","getMaxPropertyValueWithoutBorrowRatio","organisationName","x","sortedValues","propertyValueA","propertyValueB","showMin","showSecondMax","min","max","secondMax","maxOrganisationLabel","toFixed","query","features","$in","LENDER","hasPromotion","promotions","lenderOrganisationLink","lenderOrganisations","setMaxPropertyValueWithoutBorrowRatio","mainMaxPropertyValueRange","MAIN_RESIDENCE","secondMaxPropertyValueRange","SECOND_RESIDENCE","borrowerHash","getBorrowerFormHash","maxPropertyValue","main","second","date","resolve","addNewMaxStructure","newResidenceType","firstOrganisationName","organisation","suggestStructure","loanValue","Math","round","propertyWithCanton","propertyCanton","createNewProperty","zipCode","value","description","wantedLoan","getLoanCalculator","clone","expireAnonymousLoans","lastWeek","subtract","toDate","baseUpdate","$ne","UNSUCCESSFUL","updatedAt","$lte","multi","insertBorrowers","amount","existingBorrowers","borrowerId1","borrowerId2","resetLoan","TEST","SOLVENCY","applicationType","SIMPLE","linkPromotion","promotionName","promotionLoan","unlinkPromotion","removeLink","setCreatedAtActivityDescription","activities","secondaryType","createdAtActivityId","CREATED","_update"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport omit from 'lodash/omit';\nimport moment from 'moment';\n\nimport LenderRulesService from 'core/api/lenderRules/server/LenderRulesService';\nimport { PROPERTY_CATEGORY } from 'core/api/properties/propertyConstants';\nimport { ACTIVITY_SECONDARY_TYPES } from 'core/api/activities/activityConstants';\nimport ActivityService from 'core/api/activities/server/ActivityService';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport { shouldSendStepNotification } from '../../../utils/loanFunctions';\nimport Intl from '../../../utils/server/intl';\nimport {\n  makeFeedback,\n  FEEDBACK_OPTIONS,\n} from '../../../components/OfferList/feedbackHelpers';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from '../../../utils/Calculator';\nimport { getZipcodeForCanton } from '../../../utils/zipcodes';\nimport {\n  RESIDENCE_TYPE,\n  ORGANISATION_FEATURES,\n  LOAN_STATUS,\n  LOAN_VERIFICATION_STATUS,\n  CANTONS,\n  EMAIL_IDS,\n} from '../../constants';\nimport OfferService from '../../offers/server/OfferService';\nimport {\n  adminLoan,\n  lenderRules as lenderRulesFragment,\n  userLoan,\n} from '../../fragments';\nimport CollectionService from '../../helpers/CollectionService';\nimport BorrowerService from '../../borrowers/server/BorrowerService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport UserService from '../../users/server/UserService';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport Loans from '../loans';\nimport { sendEmail } from '../../methods';\nimport {\n  ORGANISATION_NAME_SEPARATOR,\n  STEPS,\n  APPLICATION_TYPES,\n} from '../loanConstants';\nimport { fullLoan } from '../queries';\n\n// Pads a number with zeros: 4 --> 0004\nconst zeroPadding = (num, places) => {\n  const zero = places - num.toString().length + 1;\n  return Array(+(zero > 0 && zero)).join('0') + num;\n};\n\nexport class LoanService extends CollectionService {\n  constructor() {\n    super(Loans);\n  }\n\n  insert = ({ loan = {}, userId }) => {\n    const name = this.getNewLoanName();\n    return Loans.insert({ ...loan, name, userId });\n  };\n\n  insertAnonymousLoan = ({ proPropertyId, referralId }) => {\n    let loanId;\n    if (proPropertyId) {\n      loanId = this.insertPropertyLoan({ propertyIds: [proPropertyId] });\n    } else {\n      loanId = this.insert({ loan: {} });\n    }\n\n    this.update({\n      loanId,\n      object: { anonymous: true, displayWelcomeScreen: false, referralId },\n    });\n\n    return loanId;\n  };\n\n  getNewLoanName = (now = new Date()) => {\n    const year = now.getYear();\n    const yearPrefix = year - 100;\n    const lastLoan = Loans.findOne({}, { sort: { name: -1 } });\n    if (!lastLoan) {\n      return `${yearPrefix}-0001`;\n    }\n    const [lastPrefix, count] = lastLoan.name\n      .split('-')\n      .map(numb => parseInt(numb, 10));\n\n    if (lastPrefix !== yearPrefix) {\n      return `${yearPrefix}-0001`;\n    }\n\n    const nextCountString = zeroPadding(count + 1, 4);\n\n    return `${yearPrefix}-${nextCountString}`;\n  };\n\n  update = ({ loanId, object, operator = '$set' }) =>\n    Loans.update(loanId, { [operator]: object });\n\n  remove = ({ loanId }) => Loans.remove(loanId);\n\n  fullLoanInsert = ({ userId, loan = {} }) => {\n    const loanId = this.insert({\n      loan,\n      userId,\n    });\n    this.addNewStructure({ loanId });\n    return loanId;\n  };\n\n  setStep({ loanId, nextStep }) {\n    const { step, userId, user } = this.fetchOne({\n      $filters: { _id: loanId },\n      step: 1,\n      userId: 1,\n      user: { assignedEmployee: { name: 1 } },\n    });\n\n    this.update({ loanId, object: { step: nextStep } });\n\n    if (shouldSendStepNotification(step, nextStep)) {\n      if (!user || !user.assignedEmployee) {\n        throw new Meteor.Error('Il faut un conseiller sur ce dossier pour envoyer un email');\n      }\n\n      sendEmail.run({\n        emailId: EMAIL_IDS.FIND_LENDER_NOTIFICATION,\n        userId,\n        params: { loanId, assigneeName: user.assignedEmployee.name },\n      });\n    }\n  }\n\n  setStatus({ loanId, status }) {\n    const { status: prevStatus } = this.fetchOne({\n      $filters: { _id: loanId },\n      status: 1,\n    });\n\n    this.update({ loanId, object: { status } });\n    return { prevStatus, nextStatus: status };\n  }\n\n  askVerification = ({ loanId }) => {\n    const loan = this.get(loanId);\n\n    if (\n      loan.verificationStatus === LOAN_VERIFICATION_STATUS.REQUESTED\n      || loan.verificationStatus === LOAN_VERIFICATION_STATUS.OK\n    ) {\n      // Don't do anything if this loan is already in requested mode\n      throw new Meteor.Error('La vérification est déjà en cours, ou effectuée.');\n    }\n\n    return this.update({\n      loanId,\n      object: {\n        verificationStatus: LOAN_VERIFICATION_STATUS.REQUESTED,\n        userFormsEnabled: false,\n      },\n    });\n  };\n\n  insertPromotionLoan = ({\n    userId,\n    promotionId,\n    invitedBy,\n    showAllLots,\n    promotionLotIds = [],\n    shareSolvency,\n  }) => {\n    const customName = PromotionService.fetchOne({\n      $filters: { _id: promotionId },\n      name: 1,\n    }).name;\n    const loanId = this.insert({\n      loan: {\n        promotionLinks: [{ _id: promotionId, invitedBy, showAllLots }],\n        customName,\n        shareSolvency,\n      },\n      userId,\n    });\n\n    promotionLotIds.forEach((promotionLotId) => {\n      PromotionOptionService.insert({ promotionLotId, loanId });\n    });\n\n    this.addNewStructure({ loanId });\n\n    return loanId;\n  };\n\n  insertPropertyLoan = ({ userId, propertyIds, shareSolvency, loan }) => {\n    const customName = PropertyService.fetchOne({\n      $filters: { _id: propertyIds[0] },\n      address1: 1,\n    }).address1;\n    const loanId = this.insert({\n      loan: {\n        propertyIds,\n        customName,\n        shareSolvency,\n        ...loan,\n      },\n      userId,\n    });\n\n    this.addNewStructure({ loanId });\n    return loanId;\n  };\n\n  confirmClosing = ({ loanId, object }) =>\n    this.update({ loanId, object: { status: LOAN_STATUS.BILLING, ...object } });\n\n  pushValue = ({ loanId, object }) => Loans.update(loanId, { $push: object });\n\n  popValue = ({ loanId, object }) => Loans.update(loanId, { $pop: object });\n\n  pullValue = ({ loanId, object }) => Loans.update(loanId, { $pull: object });\n\n  addStructure = ({ loanId, structure, atIndex }) => {\n    const newStructureId = Random.id();\n    Loans.update(loanId, {\n      $push: {\n        structures: {\n          $each: [{ ...structure, id: newStructureId, disabled: false }],\n          $position: atIndex,\n        },\n      },\n    });\n    return newStructureId;\n  };\n\n  addNewStructure = ({ loanId, structure }) => {\n    const { structures, selectedStructure, propertyIds } = this.get(loanId);\n    const isFirstStructure = structures.length === 0;\n    const shouldCopyExistingStructure = !isFirstStructure && !structure && selectedStructure;\n\n    if (shouldCopyExistingStructure) {\n      structure = omit(structures.find(({ id }) => selectedStructure === id), [\n        'name',\n      ]);\n    }\n\n    const propertyId = (structure && structure.propertyId)\n      || (propertyIds.length > 0 ? propertyIds[0] : undefined);\n    const newStructureId = this.addStructure({\n      loanId,\n      structure: {\n        ...structure,\n        propertyId,\n        name:\n          (structure && structure.name)\n          || `Plan financier ${structures.length + 1}`,\n      },\n    });\n    this.update({\n      loanId,\n      object: isFirstStructure ? { selectedStructure: newStructureId } : {},\n    });\n\n    return newStructureId;\n  };\n\n  removeStructure = ({ loanId, structureId }) => {\n    const { selectedStructure: currentlySelected } = this.get(loanId);\n\n    if (currentlySelected === structureId) {\n      throw new Meteor.Error('Vous ne pouvez pas supprimer votre plan financier choisi');\n    }\n\n    const updateObj = {\n      $pull: { structures: { id: structureId } },\n    };\n\n    return Loans.update(loanId, updateObj, {\n      // Edge case fix: https://github.com/meteor/meteor/issues/4342\n      getAutoValues: false,\n    });\n  };\n\n  updateStructure = ({ loanId, structureId, structure }) => {\n    const currentStructure = this.get(loanId).structures.find(({ id }) => id === structureId);\n\n    return Loans.update(\n      { _id: loanId, 'structures.id': structureId },\n      { $set: { 'structures.$': { ...currentStructure, ...structure } } },\n    );\n  };\n\n  selectStructure = ({ loanId, structureId }) => {\n    // Make sure the structure exists\n    const structureExists = this.get(loanId).structures.some(({ id }) => id === structureId);\n\n    if (structureExists) {\n      return this.update({\n        loanId,\n        object: { selectedStructure: structureId },\n      });\n    }\n\n    throw new Meteor.Error(`Structure with id \"${structureId}\" does not exist`);\n  };\n\n  duplicateStructure = ({ loanId, structureId }) => {\n    const { structures } = this.get(loanId);\n    const currentStructure = structures.find(({ id }) => id === structureId);\n    const currentStructureIndex = structures.findIndex(({ id }) => id === structureId);\n\n    return (\n      !!currentStructure\n      && this.addStructure({\n        loanId,\n        structure: {\n          ...currentStructure,\n          name: `${currentStructure.name || 'Plan financier'} - copie`,\n          disabled: false,\n        },\n        atIndex: currentStructureIndex + 1,\n      })\n    );\n  };\n\n  addPropertyToLoan = ({ loanId, propertyId }) => {\n    const loan = this.get(loanId);\n    this.addLink({ id: loanId, linkName: 'properties', linkId: propertyId });\n\n    // Add this property to all structures that don't have a property\n    // for a better user experience\n    loan.structures.forEach(({ id, propertyId: structurePropertyId, promotionOptionId }) => {\n      if (!structurePropertyId && !promotionOptionId) {\n        this.updateStructure({\n          loanId,\n          structureId: id,\n          structure: { propertyId },\n        });\n      }\n    });\n  };\n\n  cleanupRemovedBorrower = ({ borrowerId }) => {\n    // Remove all references to this borrower on the loan\n    const loans = Loans.find({ borrowerIds: borrowerId }).fetch();\n    loans.forEach((loan) => {\n      this.update({\n        loanId: loan._id,\n        object: {\n          structures: loan.structures.map(structure => ({\n            ...structure,\n            ownFunds: structure.ownFunds.filter(({ borrowerId: bId }) => bId !== borrowerId),\n          })),\n        },\n      });\n    });\n  };\n\n  setPromotionPriorityOrder({ loanId, promotionId, priorityOrder }) {\n    return Loans.update(\n      { _id: loanId, 'promotionLinks._id': promotionId },\n      { $set: { 'promotionLinks.$.priorityOrder': priorityOrder } },\n    );\n  }\n\n  getPromotionPriorityOrder({ loanId, promotionId }) {\n    const promotionLink = this.get(loanId).promotionLinks.find(({ _id }) => _id === promotionId);\n    return promotionLink ? promotionLink.priorityOrder : [];\n  }\n\n  assignLoanToUser({ loanId, userId }) {\n    const {\n      properties = [],\n      borrowers = [],\n      referralId,\n      anonymous,\n    } = this.fetchOne({\n      $filters: { _id: loanId },\n      referralId: 1,\n      properties: { loans: { _id: 1 }, address1: 1, category: 1 },\n      borrowers: { loans: { _id: 1 }, name: 1 },\n      anonymous: 1,\n    });\n\n    borrowers.forEach(({ loans = [], name }) => {\n      if (loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, l'emprunteur \"${name}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n    properties.forEach(({ loans = [], address1, category }) => {\n      if (category === PROPERTY_CATEGORY.USER && loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, le bien immobilier \"${address1}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n\n    this.update({\n      loanId,\n      object: {\n        userId,\n        anonymous: false,\n        // If the loan was anonymous before, don't show welcome screen again\n        displayWelcomeScreen: anonymous ? false : undefined,\n      },\n    });\n    this.update({ loanId, object: { referralId: true }, operator: '$unset' });\n\n    borrowers.forEach(({ _id: borrowerId }) => {\n      BorrowerService.update({ borrowerId, object: { userId } });\n    });\n    properties.forEach(({ _id: propertyId, category }) => {\n      if (category === PROPERTY_CATEGORY.USER) {\n        PropertyService.update({ propertyId, object: { userId } });\n      }\n    });\n\n    // Refer this user only if he hasn't already been referred\n    if (referralId && UserService.exists(referralId)) {\n      const {\n        referredByUserLink,\n        referredByOrganisationLink,\n      } = UserService.fetchOne({\n        $filters: { _id: userId },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n      });\n      if (!referredByUserLink && !referredByOrganisationLink) {\n        UserService.setReferredBy({ userId, proId: referralId });\n      }\n    }\n  }\n\n  switchBorrower({ loanId, borrowerId, oldBorrowerId }) {\n    const { borrowerIds } = this.get(loanId);\n    const { loans: oldBorrowerLoans = [] } = BorrowerService.createQuery({\n      $filters: { _id: oldBorrowerId },\n      loans: { name: 1 },\n    }).fetchOne();\n\n    if (borrowerIds.includes(borrowerId)) {\n      throw new Meteor.Error('Cet emprunteur est déjà sur ce prêt hypothécaire');\n    }\n\n    this.update({\n      loanId,\n      object: {\n        borrowerIds: borrowerIds.map(id =>\n          (id === oldBorrowerId ? borrowerId : id)),\n      },\n    });\n\n    if (oldBorrowerLoans.length === 1 && oldBorrowerLoans[0]._id === loanId) {\n      BorrowerService.remove({ borrowerId: oldBorrowerId });\n    }\n  }\n\n  sendNegativeFeedbackToAllLenders({ loanId }) {\n    const {\n      offers = [],\n      structure: { property },\n    } = this.createQuery({\n      $filters: { _id: loanId },\n      ...adminLoan({ withSort: true }),\n      $options: { sort: { createdAt: -1 } },\n    }).fetchOne() || {};\n\n    // Get lenders' last offer\n    const filteredOffers = offers.reduce((filtered, offer) => {\n      const {\n        lender: {\n          contact: { email: lenderEmail },\n        },\n      } = offer;\n\n      const lenderIsAlreadyInMailingList = filtered.find(({\n        lender: {\n          contact: { email },\n        },\n      }) => lenderEmail === email);\n\n      if (lenderIsAlreadyInMailingList) {\n        return filtered;\n      }\n\n      return [...filtered, offer];\n    }, []);\n\n    const promises = filteredOffers.map((offer) => {\n      const feedback = makeFeedback({\n        offer: { ...offer, property },\n        model: { option: FEEDBACK_OPTIONS.NEGATIVE_WITHOUT_FOLLOW_UP },\n        formatMessage: Intl.formatMessage.bind(Intl),\n      });\n      return OfferService.sendFeedback({\n        offerId: offer._id,\n        feedback,\n        saveFeedback: false,\n      });\n    });\n\n    return Promise.all(promises);\n  }\n\n  updatePromotionInvitedBy({ loanId, promotionId, invitedBy }) {\n    this.updateLinkMetadata({\n      id: loanId,\n      linkName: 'promotions',\n      linkId: promotionId,\n      metadata: { invitedBy },\n    });\n  }\n\n  reuseProperty({ loanId, propertyId }) {\n    const loan = this.get(loanId);\n\n    if (loan.propertyIds.includes(propertyId)) {\n      return false;\n    }\n\n    this.addLink({ id: loanId, linkName: 'properties', linkId: propertyId });\n  }\n\n  getMaxPropertyValueRange({ organisations, loan, residenceType, canton }) {\n    const { borrowers = [] } = loan;\n    const loanObject = Calculator.createLoanObject({\n      residenceType,\n      borrowers,\n      canton,\n    });\n    const maxPropertyValues = organisations\n      .map(({ lenderRules, name }) => {\n        const calculator = new CalculatorClass({\n          loan: loanObject,\n          lenderRules,\n        });\n\n        const {\n          borrowRatio,\n          propertyValue,\n        } = calculator.getMaxPropertyValueWithoutBorrowRatio({\n          borrowers,\n          residenceType,\n          canton,\n        });\n        if (propertyValue > 0 && borrowRatio > 0) {\n          return { borrowRatio, propertyValue, organisationName: name };\n        }\n\n        return null;\n      })\n      .filter(x => x);\n\n    const sortedValues = maxPropertyValues.sort(({ propertyValue: propertyValueA }, { propertyValue: propertyValueB }) =>\n      propertyValueA - propertyValueB);\n\n    if (sortedValues.length === 0) {\n      throw new Meteor.Error(\"Nous ne sommes pas parvenus à calculer votre capacité d'achat, contactez votre conseiller pour plus d'informations\");\n    }\n\n    // Only show min if there is more than 1 result\n    const showMin = sortedValues.length >= 2;\n    // Only show second max if there are more than 3 results\n    const showSecondMax = sortedValues.length >= 3;\n\n    const min = showMin ? sortedValues[0] : undefined;\n\n    // Don't take the max value, because that means there is only one single\n    // lender who can make an offer on this loan\n    const max = sortedValues[sortedValues.length - 1];\n    const secondMax = showSecondMax\n      ? sortedValues[sortedValues.length - 2]\n      : max;\n\n    // If there are at least 3 organisations, show a special label\n    // that combines the best and secondBest org\n    const maxOrganisationLabel = showSecondMax\n      ? `${secondMax\n          && secondMax.organisationName}${ORGANISATION_NAME_SEPARATOR}${\n        max.organisationName\n      } (${(max.borrowRatio * 100).toFixed(2)}%)`\n      : max.organisationName;\n\n    return {\n      min,\n      max: { ...secondMax, organisationName: maxOrganisationLabel },\n    };\n  }\n\n  getMaxPropertyValueWithoutBorrowRatio({ loan, canton, residenceType }) {\n    let query = { features: { $in: [ORGANISATION_FEATURES.LENDER] } };\n    if (loan.hasPromotion && loan.promotions[0].lenderOrganisationLink) {\n      query = { _id: loan.promotions[0].lenderOrganisationLink._id };\n    }\n\n    const lenderOrganisations = OrganisationService.fetch({\n      $filters: query,\n      lenderRules: lenderRulesFragment(),\n      name: 1,\n    });\n\n    return this.getMaxPropertyValueRange({\n      organisations: lenderOrganisations.filter(({ lenderRules }) => lenderRules && lenderRules.length > 0),\n      loan,\n      residenceType: residenceType || loan.residenceType,\n      canton,\n    });\n  }\n\n  setMaxPropertyValueWithoutBorrowRatio({ loanId, canton }) {\n    const loan = this.fetchOne({ $filters: { _id: loanId }, ...userLoan() });\n\n    const mainMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      canton,\n    });\n    const secondMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      canton,\n    });\n\n    const borrowerHash = Calculator.getBorrowerFormHash({\n      borrowers: loan.borrowers,\n    });\n\n    this.update({\n      loanId,\n      object: {\n        maxPropertyValue: {\n          main: mainMaxPropertyValueRange,\n          second: secondMaxPropertyValueRange,\n          canton,\n          date: new Date(),\n          borrowerHash,\n        },\n      },\n    });\n\n    return Promise.resolve();\n  }\n\n  addNewMaxStructure({ loanId, residenceType: newResidenceType, canton }) {\n    if (newResidenceType) {\n      // Set residence type if it is given\n      this.update({ loanId, object: { residenceType: newResidenceType } });\n    }\n\n    const loan = this.fetchOne({\n      $filters: { _id: loanId },\n      ...userLoan(),\n    });\n    const { properties = [], userId, borrowers, residenceType } = loan;\n\n    // Get the highest property value\n    const {\n      max: { borrowRatio, propertyValue, organisationName },\n    } = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      canton,\n    });\n    const firstOrganisationName = organisationName.split(ORGANISATION_NAME_SEPARATOR)[0];\n\n    const organisation = OrganisationService.fetchOne({\n      $filters: { name: firstOrganisationName },\n      lenderRules: lenderRulesFragment(),\n    });\n\n    const calculator = new CalculatorClass({\n      loan,\n      lenderRules: organisation.lenderRules,\n    });\n\n    // Recalculate the best structure for this propertyvalue\n    const ownFunds = calculator.suggestStructure({\n      borrowers,\n      propertyValue,\n      loanValue: Math.round(propertyValue * borrowRatio),\n      canton,\n      residenceType,\n    });\n\n    let propertyWithCanton = properties.find(({ canton: propertyCanton }) => propertyCanton === canton);\n    const createNewProperty = !propertyWithCanton;\n\n    // If there is no property from this canton, insert a new one\n    // with the right canton\n    if (createNewProperty) {\n      const propertyId = PropertyService.insert({\n        property: {\n          address1: `Bien immo ${CANTONS[canton]}`,\n          zipCode: getZipcodeForCanton(canton),\n          value: propertyValue,\n        },\n        loanId,\n        userId,\n      });\n\n      propertyWithCanton = { _id: propertyId };\n    }\n\n    this.addNewStructure({\n      loanId,\n      structure: {\n        name: \"Capacité d'achat max.\",\n        description: CANTONS[canton],\n        propertyId: propertyWithCanton._id,\n        ownFunds,\n        propertyValue: createNewProperty ? undefined : propertyValue,\n        wantedLoan: Math.round(propertyValue * borrowRatio),\n      },\n    });\n  }\n\n  getLoanCalculator({ loanId, structureId }) {\n    const loan = fullLoan.clone({ _id: loanId }).fetchOne();\n    let lenderRules;\n\n    if (loan && loan.structure && loan.structure.offerId) {\n      lenderRules = loan.structure.offer.lender.organisation.lenderRules;\n    } else if (loan.hasPromotion) {\n      const { lenderOrganisationLink } = loan.promotions[0];\n      if (lenderOrganisationLink) {\n        lenderRules = LenderRulesService.fetch({\n          $filters: { 'organisationLink._id': lenderOrganisationLink._id },\n          ...lenderRulesFragment(),\n        });\n      }\n    }\n\n    if (!lenderRules || lenderRules.length === 0) {\n      return Calculator;\n    }\n\n    return new CalculatorClass({\n      loan,\n      structureId,\n      lenderRules,\n    });\n  }\n\n  expireAnonymousLoans() {\n    const lastWeek = moment()\n      .subtract(5, 'days')\n      .toDate();\n\n    return this.baseUpdate(\n      {\n        anonymous: true,\n        status: { $ne: LOAN_STATUS.UNSUCCESSFUL },\n        updatedAt: { $lte: lastWeek },\n      },\n      { $set: { status: LOAN_STATUS.UNSUCCESSFUL } },\n      { multi: true },\n    );\n  }\n\n  insertBorrowers({ loanId, amount }) {\n    const { borrowerIds: existingBorrowers = [], userId } = this.get(loanId);\n\n    if (existingBorrowers.length === 2) {\n      throw new Meteor.Error('Cannot insert more borrowers');\n    }\n\n    if (existingBorrowers.length === 1 && amount === 2) {\n      throw new Meteor.Error('Can insert only one more borrower');\n    }\n\n    if (amount === 1) {\n      const borrowerId = BorrowerService.insert({ userId });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId,\n      });\n    } else if (amount === 2) {\n      const borrowerId1 = BorrowerService.insert({ userId });\n      const borrowerId2 = BorrowerService.insert({ userId });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId1,\n      });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId2,\n      });\n    } else {\n      throw new Meteor.Error('Invalid borrowers number');\n    }\n  }\n\n  // Useful for demos\n  resetLoan({ loanId }) {\n    const loan = this.findOne({ _id: loanId });\n    const { structures = [], borrowerIds = [], status } = loan;\n\n    if (status !== LOAN_STATUS.TEST) {\n      throw new Meteor.Error('Seuls les dossiers avec le statut TEST peuvent être réinitialisés !');\n    }\n\n    // Set step to solvency\n    this.setStep({ loanId, nextStep: STEPS.SOLVENCY });\n\n    // Set application type to simple\n    this.update({\n      loanId,\n      object: { applicationType: APPLICATION_TYPES.SIMPLE },\n    });\n\n    // Remove structures and an empty one\n    // structures.forEach(({ _id: structureId }) => {\n    //   this.removeStructure({ loanId, structureId });\n    // });\n    // this.addNewStructure({ loanId });\n\n    // Remove MaxPropertyValue\n    this.update({\n      loanId,\n      object: { maxPropertyValue: true },\n      operator: '$unset',\n    });\n\n    // Reset borrowers financing info\n    // borrowerIds.forEach((borrowerId) => {\n    //   BorrowerService.update({\n    //     borrowerId,\n    //     object: {\n    //       netSalary: null,\n    //       salary: null,\n    //       bankFortune: null,\n    //       insurance2: [],\n    //       insurance3A: [],\n    //       bank3A: [],\n    //       insurance3B: [],\n    //       otherIncome: [],\n    //       otherFortune: [],\n    //       expenses: [],\n    //       realEstate: [],\n    //       bonusExists: false,\n    //       bonus2015: null,\n    //       bonus2016: null,\n    //       bonus2017: null,\n    //       bonus2018: null,\n    //       bonus2019: null,\n    //     },\n    //   });\n    // });\n  }\n\n  linkPromotion({ promotionId, loanId }) {\n    const { name: promotionName, promotionLoan } = PromotionService.fetchOne({\n      $filters: { _id: promotionId },\n      name: 1,\n      promotionLoan: { _id: 1 },\n    });\n\n    if (promotionLoan && promotionLoan._id) {\n      this.unlinkPromotion({ promotionId, loanId: promotionLoan._id });\n    }\n\n    this.addLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId,\n    });\n\n    this.update({\n      loanId,\n      object: { customName: `Financement de ${promotionName}` },\n    });\n\n    return loanId;\n  }\n\n  unlinkPromotion({ promotionId, loanId }) {\n    this.removeLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId,\n    });\n\n    return this.update({\n      loanId,\n      object: { customName: true },\n      operator: '$unset',\n    });\n  }\n\n  setCreatedAtActivityDescription({ loanId, description }) {\n    const { activities = [] } = this.fetchOne({\n      $filters: { _id: loanId },\n      activities: { secondaryType: 1 },\n    });\n    const { _id: createdAtActivityId } = activities.find(({ secondaryType }) =>\n      secondaryType === ACTIVITY_SECONDARY_TYPES.CREATED) || {};\n\n    if (createdAtActivityId) {\n      ActivityService._update({\n        id: createdAtActivityId,\n        object: { description },\n      });\n    }\n\n    return loanId;\n  }\n}\n\nexport default new LoanService({});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/LoanService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/loans/server/LoanService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nmodule.export({\n  LoanService: () => LoanService\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Random;\nmodule.link(\"meteor/random\", {\n  Random(v) {\n    Random = v;\n  }\n\n}, 1);\nlet omit;\nmodule.link(\"lodash/omit\", {\n  default(v) {\n    omit = v;\n  }\n\n}, 2);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 3);\nlet LenderRulesService;\nmodule.link(\"../../lenderRules/server/LenderRulesService\", {\n  default(v) {\n    LenderRulesService = v;\n  }\n\n}, 4);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 5);\nlet ACTIVITY_SECONDARY_TYPES;\nmodule.link(\"../../activities/activityConstants\", {\n  ACTIVITY_SECONDARY_TYPES(v) {\n    ACTIVITY_SECONDARY_TYPES = v;\n  }\n\n}, 6);\nlet ActivityService;\nmodule.link(\"../../activities/server/ActivityService\", {\n  default(v) {\n    ActivityService = v;\n  }\n\n}, 7);\nlet PromotionOptionService;\nmodule.link(\"../../promotionOptions/server/PromotionOptionService\", {\n  default(v) {\n    PromotionOptionService = v;\n  }\n\n}, 8);\nlet shouldSendStepNotification;\nmodule.link(\"../../../utils/loanFunctions\", {\n  shouldSendStepNotification(v) {\n    shouldSendStepNotification = v;\n  }\n\n}, 9);\nlet Intl;\nmodule.link(\"../../../utils/server/intl\", {\n  default(v) {\n    Intl = v;\n  }\n\n}, 10);\nlet makeFeedback, FEEDBACK_OPTIONS;\nmodule.link(\"../../../components/OfferList/feedbackHelpers\", {\n  makeFeedback(v) {\n    makeFeedback = v;\n  },\n\n  FEEDBACK_OPTIONS(v) {\n    FEEDBACK_OPTIONS = v;\n  }\n\n}, 11);\nlet Calculator, CalculatorClass;\nmodule.link(\"../../../utils/Calculator\", {\n  default(v) {\n    Calculator = v;\n  },\n\n  Calculator(v) {\n    CalculatorClass = v;\n  }\n\n}, 12);\nlet getZipcodeForCanton;\nmodule.link(\"../../../utils/zipcodes\", {\n  getZipcodeForCanton(v) {\n    getZipcodeForCanton = v;\n  }\n\n}, 13);\nlet RESIDENCE_TYPE, ORGANISATION_FEATURES, LOAN_STATUS, LOAN_VERIFICATION_STATUS, CANTONS, EMAIL_IDS;\nmodule.link(\"../../constants\", {\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  },\n\n  ORGANISATION_FEATURES(v) {\n    ORGANISATION_FEATURES = v;\n  },\n\n  LOAN_STATUS(v) {\n    LOAN_STATUS = v;\n  },\n\n  LOAN_VERIFICATION_STATUS(v) {\n    LOAN_VERIFICATION_STATUS = v;\n  },\n\n  CANTONS(v) {\n    CANTONS = v;\n  },\n\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  }\n\n}, 14);\nlet OfferService;\nmodule.link(\"../../offers/server/OfferService\", {\n  default(v) {\n    OfferService = v;\n  }\n\n}, 15);\nlet adminLoan, lenderRulesFragment, userLoan;\nmodule.link(\"../../fragments\", {\n  adminLoan(v) {\n    adminLoan = v;\n  },\n\n  lenderRules(v) {\n    lenderRulesFragment = v;\n  },\n\n  userLoan(v) {\n    userLoan = v;\n  }\n\n}, 16);\nlet CollectionService;\nmodule.link(\"../../helpers/CollectionService\", {\n  default(v) {\n    CollectionService = v;\n  }\n\n}, 17);\nlet BorrowerService;\nmodule.link(\"../../borrowers/server/BorrowerService\", {\n  default(v) {\n    BorrowerService = v;\n  }\n\n}, 18);\nlet PropertyService;\nmodule.link(\"../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 19);\nlet PromotionService;\nmodule.link(\"../../promotions/server/PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 20);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 21);\nlet OrganisationService;\nmodule.link(\"../../organisations/server/OrganisationService\", {\n  default(v) {\n    OrganisationService = v;\n  }\n\n}, 22);\nlet Loans;\nmodule.link(\"../loans\", {\n  default(v) {\n    Loans = v;\n  }\n\n}, 23);\nlet sendEmail;\nmodule.link(\"../../methods\", {\n  sendEmail(v) {\n    sendEmail = v;\n  }\n\n}, 24);\nlet ORGANISATION_NAME_SEPARATOR, STEPS, APPLICATION_TYPES;\nmodule.link(\"../loanConstants\", {\n  ORGANISATION_NAME_SEPARATOR(v) {\n    ORGANISATION_NAME_SEPARATOR = v;\n  },\n\n  STEPS(v) {\n    STEPS = v;\n  },\n\n  APPLICATION_TYPES(v) {\n    APPLICATION_TYPES = v;\n  }\n\n}, 25);\nlet fullLoan;\nmodule.link(\"../queries\", {\n  fullLoan(v) {\n    fullLoan = v;\n  }\n\n}, 26);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n// Pads a number with zeros: 4 --> 0004\nconst zeroPadding = (num, places) => {\n  const zero = places - num.toString().length + 1;\n  return Array(+(zero > 0 && zero)).join('0') + num;\n};\n\nclass LoanService extends CollectionService {\n  constructor() {\n    super(Loans);\n\n    _defineProperty(this, \"insert\", ({\n      loan = {},\n      userId\n    }) => {\n      const name = this.getNewLoanName();\n      return Loans.insert((0, _objectSpread2.default)({}, loan, {\n        name,\n        userId\n      }));\n    });\n\n    _defineProperty(this, \"insertAnonymousLoan\", ({\n      proPropertyId,\n      referralId\n    }) => {\n      let loanId;\n\n      if (proPropertyId) {\n        loanId = this.insertPropertyLoan({\n          propertyIds: [proPropertyId]\n        });\n      } else {\n        loanId = this.insert({\n          loan: {}\n        });\n      }\n\n      this.update({\n        loanId,\n        object: {\n          anonymous: true,\n          displayWelcomeScreen: false,\n          referralId\n        }\n      });\n      return loanId;\n    });\n\n    _defineProperty(this, \"getNewLoanName\", (now = new Date()) => {\n      const year = now.getYear();\n      const yearPrefix = year - 100;\n      const lastLoan = Loans.findOne({}, {\n        sort: {\n          name: -1\n        }\n      });\n\n      if (!lastLoan) {\n        return `${yearPrefix}-0001`;\n      }\n\n      const [lastPrefix, count] = lastLoan.name.split('-').map(numb => parseInt(numb, 10));\n\n      if (lastPrefix !== yearPrefix) {\n        return `${yearPrefix}-0001`;\n      }\n\n      const nextCountString = zeroPadding(count + 1, 4);\n      return `${yearPrefix}-${nextCountString}`;\n    });\n\n    _defineProperty(this, \"update\", ({\n      loanId,\n      object,\n      operator = '$set'\n    }) => Loans.update(loanId, {\n      [operator]: object\n    }));\n\n    _defineProperty(this, \"remove\", ({\n      loanId\n    }) => Loans.remove(loanId));\n\n    _defineProperty(this, \"fullLoanInsert\", ({\n      userId,\n      loan = {}\n    }) => {\n      const loanId = this.insert({\n        loan,\n        userId\n      });\n      this.addNewStructure({\n        loanId\n      });\n      return loanId;\n    });\n\n    _defineProperty(this, \"askVerification\", ({\n      loanId\n    }) => {\n      const loan = this.get(loanId);\n\n      if (loan.verificationStatus === LOAN_VERIFICATION_STATUS.REQUESTED || loan.verificationStatus === LOAN_VERIFICATION_STATUS.OK) {\n        // Don't do anything if this loan is already in requested mode\n        throw new Meteor.Error('La vérification est déjà en cours, ou effectuée.');\n      }\n\n      return this.update({\n        loanId,\n        object: {\n          verificationStatus: LOAN_VERIFICATION_STATUS.REQUESTED,\n          userFormsEnabled: false\n        }\n      });\n    });\n\n    _defineProperty(this, \"insertPromotionLoan\", ({\n      userId,\n      promotionId,\n      invitedBy,\n      showAllLots,\n      promotionLotIds = [],\n      shareSolvency\n    }) => {\n      const customName = PromotionService.fetchOne({\n        $filters: {\n          _id: promotionId\n        },\n        name: 1\n      }).name;\n      const loanId = this.insert({\n        loan: {\n          promotionLinks: [{\n            _id: promotionId,\n            invitedBy,\n            showAllLots\n          }],\n          customName,\n          shareSolvency\n        },\n        userId\n      });\n      promotionLotIds.forEach(promotionLotId => {\n        PromotionOptionService.insert({\n          promotionLotId,\n          loanId\n        });\n      });\n      this.addNewStructure({\n        loanId\n      });\n      return loanId;\n    });\n\n    _defineProperty(this, \"insertPropertyLoan\", ({\n      userId,\n      propertyIds,\n      shareSolvency,\n      loan\n    }) => {\n      const customName = PropertyService.fetchOne({\n        $filters: {\n          _id: propertyIds[0]\n        },\n        address1: 1\n      }).address1;\n      const loanId = this.insert({\n        loan: (0, _objectSpread2.default)({\n          propertyIds,\n          customName,\n          shareSolvency\n        }, loan),\n        userId\n      });\n      this.addNewStructure({\n        loanId\n      });\n      return loanId;\n    });\n\n    _defineProperty(this, \"confirmClosing\", ({\n      loanId,\n      object\n    }) => this.update({\n      loanId,\n      object: (0, _objectSpread2.default)({\n        status: LOAN_STATUS.BILLING\n      }, object)\n    }));\n\n    _defineProperty(this, \"pushValue\", ({\n      loanId,\n      object\n    }) => Loans.update(loanId, {\n      $push: object\n    }));\n\n    _defineProperty(this, \"popValue\", ({\n      loanId,\n      object\n    }) => Loans.update(loanId, {\n      $pop: object\n    }));\n\n    _defineProperty(this, \"pullValue\", ({\n      loanId,\n      object\n    }) => Loans.update(loanId, {\n      $pull: object\n    }));\n\n    _defineProperty(this, \"addStructure\", ({\n      loanId,\n      structure,\n      atIndex\n    }) => {\n      const newStructureId = Random.id();\n      Loans.update(loanId, {\n        $push: {\n          structures: {\n            $each: [(0, _objectSpread2.default)({}, structure, {\n              id: newStructureId,\n              disabled: false\n            })],\n            $position: atIndex\n          }\n        }\n      });\n      return newStructureId;\n    });\n\n    _defineProperty(this, \"addNewStructure\", ({\n      loanId,\n      structure\n    }) => {\n      const {\n        structures,\n        selectedStructure,\n        propertyIds\n      } = this.get(loanId);\n      const isFirstStructure = structures.length === 0;\n      const shouldCopyExistingStructure = !isFirstStructure && !structure && selectedStructure;\n\n      if (shouldCopyExistingStructure) {\n        structure = omit(structures.find(({\n          id\n        }) => selectedStructure === id), ['name']);\n      }\n\n      const propertyId = structure && structure.propertyId || (propertyIds.length > 0 ? propertyIds[0] : undefined);\n      const newStructureId = this.addStructure({\n        loanId,\n        structure: (0, _objectSpread2.default)({}, structure, {\n          propertyId,\n          name: structure && structure.name || `Plan financier ${structures.length + 1}`\n        })\n      });\n      this.update({\n        loanId,\n        object: isFirstStructure ? {\n          selectedStructure: newStructureId\n        } : {}\n      });\n      return newStructureId;\n    });\n\n    _defineProperty(this, \"removeStructure\", ({\n      loanId,\n      structureId\n    }) => {\n      const {\n        selectedStructure: currentlySelected\n      } = this.get(loanId);\n\n      if (currentlySelected === structureId) {\n        throw new Meteor.Error('Vous ne pouvez pas supprimer votre plan financier choisi');\n      }\n\n      const updateObj = {\n        $pull: {\n          structures: {\n            id: structureId\n          }\n        }\n      };\n      return Loans.update(loanId, updateObj, {\n        // Edge case fix: https://github.com/meteor/meteor/issues/4342\n        getAutoValues: false\n      });\n    });\n\n    _defineProperty(this, \"updateStructure\", ({\n      loanId,\n      structureId,\n      structure\n    }) => {\n      const currentStructure = this.get(loanId).structures.find(({\n        id\n      }) => id === structureId);\n      return Loans.update({\n        _id: loanId,\n        'structures.id': structureId\n      }, {\n        $set: {\n          'structures.$': (0, _objectSpread2.default)({}, currentStructure, structure)\n        }\n      });\n    });\n\n    _defineProperty(this, \"selectStructure\", ({\n      loanId,\n      structureId\n    }) => {\n      // Make sure the structure exists\n      const structureExists = this.get(loanId).structures.some(({\n        id\n      }) => id === structureId);\n\n      if (structureExists) {\n        return this.update({\n          loanId,\n          object: {\n            selectedStructure: structureId\n          }\n        });\n      }\n\n      throw new Meteor.Error(`Structure with id \"${structureId}\" does not exist`);\n    });\n\n    _defineProperty(this, \"duplicateStructure\", ({\n      loanId,\n      structureId\n    }) => {\n      const {\n        structures\n      } = this.get(loanId);\n      const currentStructure = structures.find(({\n        id\n      }) => id === structureId);\n      const currentStructureIndex = structures.findIndex(({\n        id\n      }) => id === structureId);\n      return !!currentStructure && this.addStructure({\n        loanId,\n        structure: (0, _objectSpread2.default)({}, currentStructure, {\n          name: `${currentStructure.name || 'Plan financier'} - copie`,\n          disabled: false\n        }),\n        atIndex: currentStructureIndex + 1\n      });\n    });\n\n    _defineProperty(this, \"addPropertyToLoan\", ({\n      loanId,\n      propertyId\n    }) => {\n      const loan = this.get(loanId);\n      this.addLink({\n        id: loanId,\n        linkName: 'properties',\n        linkId: propertyId\n      }); // Add this property to all structures that don't have a property\n      // for a better user experience\n\n      loan.structures.forEach(({\n        id,\n        propertyId: structurePropertyId,\n        promotionOptionId\n      }) => {\n        if (!structurePropertyId && !promotionOptionId) {\n          this.updateStructure({\n            loanId,\n            structureId: id,\n            structure: {\n              propertyId\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"cleanupRemovedBorrower\", ({\n      borrowerId\n    }) => {\n      // Remove all references to this borrower on the loan\n      const loans = Loans.find({\n        borrowerIds: borrowerId\n      }).fetch();\n      loans.forEach(loan => {\n        this.update({\n          loanId: loan._id,\n          object: {\n            structures: loan.structures.map(structure => (0, _objectSpread2.default)({}, structure, {\n              ownFunds: structure.ownFunds.filter(({\n                borrowerId: bId\n              }) => bId !== borrowerId)\n            }))\n          }\n        });\n      });\n    });\n  }\n\n  setStep({\n    loanId,\n    nextStep\n  }) {\n    const {\n      step,\n      userId,\n      user\n    } = this.fetchOne({\n      $filters: {\n        _id: loanId\n      },\n      step: 1,\n      userId: 1,\n      user: {\n        assignedEmployee: {\n          name: 1\n        }\n      }\n    });\n    this.update({\n      loanId,\n      object: {\n        step: nextStep\n      }\n    });\n\n    if (shouldSendStepNotification(step, nextStep)) {\n      if (!user || !user.assignedEmployee) {\n        throw new Meteor.Error('Il faut un conseiller sur ce dossier pour envoyer un email');\n      }\n\n      sendEmail.run({\n        emailId: EMAIL_IDS.FIND_LENDER_NOTIFICATION,\n        userId,\n        params: {\n          loanId,\n          assigneeName: user.assignedEmployee.name\n        }\n      });\n    }\n  }\n\n  setStatus({\n    loanId,\n    status\n  }) {\n    const {\n      status: prevStatus\n    } = this.fetchOne({\n      $filters: {\n        _id: loanId\n      },\n      status: 1\n    });\n    this.update({\n      loanId,\n      object: {\n        status\n      }\n    });\n    return {\n      prevStatus,\n      nextStatus: status\n    };\n  }\n\n  setPromotionPriorityOrder({\n    loanId,\n    promotionId,\n    priorityOrder\n  }) {\n    return Loans.update({\n      _id: loanId,\n      'promotionLinks._id': promotionId\n    }, {\n      $set: {\n        'promotionLinks.$.priorityOrder': priorityOrder\n      }\n    });\n  }\n\n  getPromotionPriorityOrder({\n    loanId,\n    promotionId\n  }) {\n    const promotionLink = this.get(loanId).promotionLinks.find(({\n      _id\n    }) => _id === promotionId);\n    return promotionLink ? promotionLink.priorityOrder : [];\n  }\n\n  assignLoanToUser({\n    loanId,\n    userId\n  }) {\n    const {\n      properties = [],\n      borrowers = [],\n      referralId,\n      anonymous\n    } = this.fetchOne({\n      $filters: {\n        _id: loanId\n      },\n      referralId: 1,\n      properties: {\n        loans: {\n          _id: 1\n        },\n        address1: 1,\n        category: 1\n      },\n      borrowers: {\n        loans: {\n          _id: 1\n        },\n        name: 1\n      },\n      anonymous: 1\n    });\n    borrowers.forEach(({\n      loans = [],\n      name\n    }) => {\n      if (loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, l'emprunteur \"${name}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n    properties.forEach(({\n      loans = [],\n      address1,\n      category\n    }) => {\n      if (category === PROPERTY_CATEGORY.USER && loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, le bien immobilier \"${address1}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n    this.update({\n      loanId,\n      object: {\n        userId,\n        anonymous: false,\n        // If the loan was anonymous before, don't show welcome screen again\n        displayWelcomeScreen: anonymous ? false : undefined\n      }\n    });\n    this.update({\n      loanId,\n      object: {\n        referralId: true\n      },\n      operator: '$unset'\n    });\n    borrowers.forEach(({\n      _id: borrowerId\n    }) => {\n      BorrowerService.update({\n        borrowerId,\n        object: {\n          userId\n        }\n      });\n    });\n    properties.forEach(({\n      _id: propertyId,\n      category\n    }) => {\n      if (category === PROPERTY_CATEGORY.USER) {\n        PropertyService.update({\n          propertyId,\n          object: {\n            userId\n          }\n        });\n      }\n    }); // Refer this user only if he hasn't already been referred\n\n    if (referralId && UserService.exists(referralId)) {\n      const {\n        referredByUserLink,\n        referredByOrganisationLink\n      } = UserService.fetchOne({\n        $filters: {\n          _id: userId\n        },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1\n      });\n\n      if (!referredByUserLink && !referredByOrganisationLink) {\n        UserService.setReferredBy({\n          userId,\n          proId: referralId\n        });\n      }\n    }\n  }\n\n  switchBorrower({\n    loanId,\n    borrowerId,\n    oldBorrowerId\n  }) {\n    const {\n      borrowerIds\n    } = this.get(loanId);\n    const {\n      loans: oldBorrowerLoans = []\n    } = BorrowerService.createQuery({\n      $filters: {\n        _id: oldBorrowerId\n      },\n      loans: {\n        name: 1\n      }\n    }).fetchOne();\n\n    if (borrowerIds.includes(borrowerId)) {\n      throw new Meteor.Error('Cet emprunteur est déjà sur ce prêt hypothécaire');\n    }\n\n    this.update({\n      loanId,\n      object: {\n        borrowerIds: borrowerIds.map(id => id === oldBorrowerId ? borrowerId : id)\n      }\n    });\n\n    if (oldBorrowerLoans.length === 1 && oldBorrowerLoans[0]._id === loanId) {\n      BorrowerService.remove({\n        borrowerId: oldBorrowerId\n      });\n    }\n  }\n\n  sendNegativeFeedbackToAllLenders({\n    loanId\n  }) {\n    const {\n      offers = [],\n      structure: {\n        property\n      }\n    } = this.createQuery((0, _objectSpread2.default)({\n      $filters: {\n        _id: loanId\n      }\n    }, adminLoan({\n      withSort: true\n    }), {\n      $options: {\n        sort: {\n          createdAt: -1\n        }\n      }\n    })).fetchOne() || {}; // Get lenders' last offer\n\n    const filteredOffers = offers.reduce((filtered, offer) => {\n      const {\n        lender: {\n          contact: {\n            email: lenderEmail\n          }\n        }\n      } = offer;\n      const lenderIsAlreadyInMailingList = filtered.find(({\n        lender: {\n          contact: {\n            email\n          }\n        }\n      }) => lenderEmail === email);\n\n      if (lenderIsAlreadyInMailingList) {\n        return filtered;\n      }\n\n      return [...filtered, offer];\n    }, []);\n    const promises = filteredOffers.map(offer => {\n      const feedback = makeFeedback({\n        offer: (0, _objectSpread2.default)({}, offer, {\n          property\n        }),\n        model: {\n          option: FEEDBACK_OPTIONS.NEGATIVE_WITHOUT_FOLLOW_UP\n        },\n        formatMessage: Intl.formatMessage.bind(Intl)\n      });\n      return OfferService.sendFeedback({\n        offerId: offer._id,\n        feedback,\n        saveFeedback: false\n      });\n    });\n    return Promise.all(promises);\n  }\n\n  updatePromotionInvitedBy({\n    loanId,\n    promotionId,\n    invitedBy\n  }) {\n    this.updateLinkMetadata({\n      id: loanId,\n      linkName: 'promotions',\n      linkId: promotionId,\n      metadata: {\n        invitedBy\n      }\n    });\n  }\n\n  reuseProperty({\n    loanId,\n    propertyId\n  }) {\n    const loan = this.get(loanId);\n\n    if (loan.propertyIds.includes(propertyId)) {\n      return false;\n    }\n\n    this.addLink({\n      id: loanId,\n      linkName: 'properties',\n      linkId: propertyId\n    });\n  }\n\n  getMaxPropertyValueRange({\n    organisations,\n    loan,\n    residenceType,\n    canton\n  }) {\n    const {\n      borrowers = []\n    } = loan;\n    const loanObject = Calculator.createLoanObject({\n      residenceType,\n      borrowers,\n      canton\n    });\n    const maxPropertyValues = organisations.map(({\n      lenderRules,\n      name\n    }) => {\n      const calculator = new CalculatorClass({\n        loan: loanObject,\n        lenderRules\n      });\n      const {\n        borrowRatio,\n        propertyValue\n      } = calculator.getMaxPropertyValueWithoutBorrowRatio({\n        borrowers,\n        residenceType,\n        canton\n      });\n\n      if (propertyValue > 0 && borrowRatio > 0) {\n        return {\n          borrowRatio,\n          propertyValue,\n          organisationName: name\n        };\n      }\n\n      return null;\n    }).filter(x => x);\n    const sortedValues = maxPropertyValues.sort(({\n      propertyValue: propertyValueA\n    }, {\n      propertyValue: propertyValueB\n    }) => propertyValueA - propertyValueB);\n\n    if (sortedValues.length === 0) {\n      throw new Meteor.Error(\"Nous ne sommes pas parvenus à calculer votre capacité d'achat, contactez votre conseiller pour plus d'informations\");\n    } // Only show min if there is more than 1 result\n\n\n    const showMin = sortedValues.length >= 2; // Only show second max if there are more than 3 results\n\n    const showSecondMax = sortedValues.length >= 3;\n    const min = showMin ? sortedValues[0] : undefined; // Don't take the max value, because that means there is only one single\n    // lender who can make an offer on this loan\n\n    const max = sortedValues[sortedValues.length - 1];\n    const secondMax = showSecondMax ? sortedValues[sortedValues.length - 2] : max; // If there are at least 3 organisations, show a special label\n    // that combines the best and secondBest org\n\n    const maxOrganisationLabel = showSecondMax ? `${secondMax && secondMax.organisationName}${ORGANISATION_NAME_SEPARATOR}${max.organisationName} (${(max.borrowRatio * 100).toFixed(2)}%)` : max.organisationName;\n    return {\n      min,\n      max: (0, _objectSpread2.default)({}, secondMax, {\n        organisationName: maxOrganisationLabel\n      })\n    };\n  }\n\n  getMaxPropertyValueWithoutBorrowRatio({\n    loan,\n    canton,\n    residenceType\n  }) {\n    let query = {\n      features: {\n        $in: [ORGANISATION_FEATURES.LENDER]\n      }\n    };\n\n    if (loan.hasPromotion && loan.promotions[0].lenderOrganisationLink) {\n      query = {\n        _id: loan.promotions[0].lenderOrganisationLink._id\n      };\n    }\n\n    const lenderOrganisations = OrganisationService.fetch({\n      $filters: query,\n      lenderRules: lenderRulesFragment(),\n      name: 1\n    });\n    return this.getMaxPropertyValueRange({\n      organisations: lenderOrganisations.filter(({\n        lenderRules\n      }) => lenderRules && lenderRules.length > 0),\n      loan,\n      residenceType: residenceType || loan.residenceType,\n      canton\n    });\n  }\n\n  setMaxPropertyValueWithoutBorrowRatio({\n    loanId,\n    canton\n  }) {\n    const loan = this.fetchOne((0, _objectSpread2.default)({\n      $filters: {\n        _id: loanId\n      }\n    }, userLoan()));\n    const mainMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      canton\n    });\n    const secondMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      canton\n    });\n    const borrowerHash = Calculator.getBorrowerFormHash({\n      borrowers: loan.borrowers\n    });\n    this.update({\n      loanId,\n      object: {\n        maxPropertyValue: {\n          main: mainMaxPropertyValueRange,\n          second: secondMaxPropertyValueRange,\n          canton,\n          date: new Date(),\n          borrowerHash\n        }\n      }\n    });\n    return Promise.resolve();\n  }\n\n  addNewMaxStructure({\n    loanId,\n    residenceType: newResidenceType,\n    canton\n  }) {\n    if (newResidenceType) {\n      // Set residence type if it is given\n      this.update({\n        loanId,\n        object: {\n          residenceType: newResidenceType\n        }\n      });\n    }\n\n    const loan = this.fetchOne((0, _objectSpread2.default)({\n      $filters: {\n        _id: loanId\n      }\n    }, userLoan()));\n    const {\n      properties = [],\n      userId,\n      borrowers,\n      residenceType\n    } = loan; // Get the highest property value\n\n    const {\n      max: {\n        borrowRatio,\n        propertyValue,\n        organisationName\n      }\n    } = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      canton\n    });\n    const firstOrganisationName = organisationName.split(ORGANISATION_NAME_SEPARATOR)[0];\n    const organisation = OrganisationService.fetchOne({\n      $filters: {\n        name: firstOrganisationName\n      },\n      lenderRules: lenderRulesFragment()\n    });\n    const calculator = new CalculatorClass({\n      loan,\n      lenderRules: organisation.lenderRules\n    }); // Recalculate the best structure for this propertyvalue\n\n    const ownFunds = calculator.suggestStructure({\n      borrowers,\n      propertyValue,\n      loanValue: Math.round(propertyValue * borrowRatio),\n      canton,\n      residenceType\n    });\n    let propertyWithCanton = properties.find(({\n      canton: propertyCanton\n    }) => propertyCanton === canton);\n    const createNewProperty = !propertyWithCanton; // If there is no property from this canton, insert a new one\n    // with the right canton\n\n    if (createNewProperty) {\n      const propertyId = PropertyService.insert({\n        property: {\n          address1: `Bien immo ${CANTONS[canton]}`,\n          zipCode: getZipcodeForCanton(canton),\n          value: propertyValue\n        },\n        loanId,\n        userId\n      });\n      propertyWithCanton = {\n        _id: propertyId\n      };\n    }\n\n    this.addNewStructure({\n      loanId,\n      structure: {\n        name: \"Capacité d'achat max.\",\n        description: CANTONS[canton],\n        propertyId: propertyWithCanton._id,\n        ownFunds,\n        propertyValue: createNewProperty ? undefined : propertyValue,\n        wantedLoan: Math.round(propertyValue * borrowRatio)\n      }\n    });\n  }\n\n  getLoanCalculator({\n    loanId,\n    structureId\n  }) {\n    const loan = fullLoan.clone({\n      _id: loanId\n    }).fetchOne();\n    let lenderRules;\n\n    if (loan && loan.structure && loan.structure.offerId) {\n      lenderRules = loan.structure.offer.lender.organisation.lenderRules;\n    } else if (loan.hasPromotion) {\n      const {\n        lenderOrganisationLink\n      } = loan.promotions[0];\n\n      if (lenderOrganisationLink) {\n        lenderRules = LenderRulesService.fetch((0, _objectSpread2.default)({\n          $filters: {\n            'organisationLink._id': lenderOrganisationLink._id\n          }\n        }, lenderRulesFragment()));\n      }\n    }\n\n    if (!lenderRules || lenderRules.length === 0) {\n      return Calculator;\n    }\n\n    return new CalculatorClass({\n      loan,\n      structureId,\n      lenderRules\n    });\n  }\n\n  expireAnonymousLoans() {\n    const lastWeek = moment().subtract(5, 'days').toDate();\n    return this.baseUpdate({\n      anonymous: true,\n      status: {\n        $ne: LOAN_STATUS.UNSUCCESSFUL\n      },\n      updatedAt: {\n        $lte: lastWeek\n      }\n    }, {\n      $set: {\n        status: LOAN_STATUS.UNSUCCESSFUL\n      }\n    }, {\n      multi: true\n    });\n  }\n\n  insertBorrowers({\n    loanId,\n    amount\n  }) {\n    const {\n      borrowerIds: existingBorrowers = [],\n      userId\n    } = this.get(loanId);\n\n    if (existingBorrowers.length === 2) {\n      throw new Meteor.Error('Cannot insert more borrowers');\n    }\n\n    if (existingBorrowers.length === 1 && amount === 2) {\n      throw new Meteor.Error('Can insert only one more borrower');\n    }\n\n    if (amount === 1) {\n      const borrowerId = BorrowerService.insert({\n        userId\n      });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId\n      });\n    } else if (amount === 2) {\n      const borrowerId1 = BorrowerService.insert({\n        userId\n      });\n      const borrowerId2 = BorrowerService.insert({\n        userId\n      });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId1\n      });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId2\n      });\n    } else {\n      throw new Meteor.Error('Invalid borrowers number');\n    }\n  } // Useful for demos\n\n\n  resetLoan({\n    loanId\n  }) {\n    const loan = this.findOne({\n      _id: loanId\n    });\n    const {\n      structures = [],\n      borrowerIds = [],\n      status\n    } = loan;\n\n    if (status !== LOAN_STATUS.TEST) {\n      throw new Meteor.Error('Seuls les dossiers avec le statut TEST peuvent être réinitialisés !');\n    } // Set step to solvency\n\n\n    this.setStep({\n      loanId,\n      nextStep: STEPS.SOLVENCY\n    }); // Set application type to simple\n\n    this.update({\n      loanId,\n      object: {\n        applicationType: APPLICATION_TYPES.SIMPLE\n      }\n    }); // Remove structures and an empty one\n    // structures.forEach(({ _id: structureId }) => {\n    //   this.removeStructure({ loanId, structureId });\n    // });\n    // this.addNewStructure({ loanId });\n    // Remove MaxPropertyValue\n\n    this.update({\n      loanId,\n      object: {\n        maxPropertyValue: true\n      },\n      operator: '$unset'\n    }); // Reset borrowers financing info\n    // borrowerIds.forEach((borrowerId) => {\n    //   BorrowerService.update({\n    //     borrowerId,\n    //     object: {\n    //       netSalary: null,\n    //       salary: null,\n    //       bankFortune: null,\n    //       insurance2: [],\n    //       insurance3A: [],\n    //       bank3A: [],\n    //       insurance3B: [],\n    //       otherIncome: [],\n    //       otherFortune: [],\n    //       expenses: [],\n    //       realEstate: [],\n    //       bonusExists: false,\n    //       bonus2015: null,\n    //       bonus2016: null,\n    //       bonus2017: null,\n    //       bonus2018: null,\n    //       bonus2019: null,\n    //     },\n    //   });\n    // });\n  }\n\n  linkPromotion({\n    promotionId,\n    loanId\n  }) {\n    const {\n      name: promotionName,\n      promotionLoan\n    } = PromotionService.fetchOne({\n      $filters: {\n        _id: promotionId\n      },\n      name: 1,\n      promotionLoan: {\n        _id: 1\n      }\n    });\n\n    if (promotionLoan && promotionLoan._id) {\n      this.unlinkPromotion({\n        promotionId,\n        loanId: promotionLoan._id\n      });\n    }\n\n    this.addLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId\n    });\n    this.update({\n      loanId,\n      object: {\n        customName: `Financement de ${promotionName}`\n      }\n    });\n    return loanId;\n  }\n\n  unlinkPromotion({\n    promotionId,\n    loanId\n  }) {\n    this.removeLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId\n    });\n    return this.update({\n      loanId,\n      object: {\n        customName: true\n      },\n      operator: '$unset'\n    });\n  }\n\n  setCreatedAtActivityDescription({\n    loanId,\n    description\n  }) {\n    const {\n      activities = []\n    } = this.fetchOne({\n      $filters: {\n        _id: loanId\n      },\n      activities: {\n        secondaryType: 1\n      }\n    });\n    const {\n      _id: createdAtActivityId\n    } = activities.find(({\n      secondaryType\n    }) => secondaryType === ACTIVITY_SECONDARY_TYPES.CREATED) || {};\n\n    if (createdAtActivityId) {\n      ActivityService._update({\n        id: createdAtActivityId,\n        object: {\n          description\n        }\n      });\n    }\n\n    return loanId;\n  }\n\n}\n\nmodule.exportDefault(new LoanService({}));","map":{"version":3,"sources":["imports/core/api/loans/server/LoanService.js"],"names":["zeroPadding","zero","places","num","Array","constructor","loan","userId","name","referralId","loanId","propertyIds","object","anonymous","displayWelcomeScreen","now","year","yearPrefix","lastLoan","sort","numb","parseInt","lastPrefix","nextCountString","count","operator","Loans","setStep","nextStep","user","$filters","_id","step","assignedEmployee","shouldSendStepNotification","Meteor","sendEmail","emailId","EMAIL_IDS","params","assigneeName","setStatus","status","prevStatus","nextStatus","LOAN_VERIFICATION_STATUS","verificationStatus","userFormsEnabled","promotionLotIds","shareSolvency","customName","promotionId","promotionLinks","showAllLots","promotionLotId","PromotionOptionService","address1","LOAN_STATUS","$push","$pop","$pull","atIndex","newStructureId","Random","structures","$each","id","disabled","$position","structure","isFirstStructure","shouldCopyExistingStructure","omit","selectedStructure","propertyId","structureId","currentlySelected","updateObj","getAutoValues","currentStructure","$set","structureExists","currentStructureIndex","linkName","linkId","promotionOptionId","borrowerId","loans","borrowerIds","ownFunds","bId","setPromotionPriorityOrder","priorityOrder","getPromotionPriorityOrder","promotionLink","assignLoanToUser","properties","borrowers","category","PROPERTY_CATEGORY","undefined","BorrowerService","PropertyService","UserService","referredByOrganisationLink","referredByUserLink","proId","switchBorrower","oldBorrowerId","oldBorrowerLoans","sendNegativeFeedbackToAllLenders","offers","property","adminLoan","withSort","$options","createdAt","filteredOffers","lender","contact","email","lenderEmail","lenderIsAlreadyInMailingList","promises","offer","feedback","makeFeedback","model","option","FEEDBACK_OPTIONS","NEGATIVE_WITHOUT_FOLLOW_UP","formatMessage","Intl","offerId","saveFeedback","Promise","updatePromotionInvitedBy","invitedBy","metadata","reuseProperty","getMaxPropertyValueRange","canton","loanObject","maxPropertyValues","calculator","lenderRules","propertyValue","borrowRatio","organisationName","x","sortedValues","propertyValueA","propertyValueB","showMin","showSecondMax","min","max","secondMax","maxOrganisationLabel","ORGANISATION_NAME_SEPARATOR","getMaxPropertyValueWithoutBorrowRatio","residenceType","query","features","$in","ORGANISATION_FEATURES","lenderOrganisations","lenderRulesFragment","organisations","setMaxPropertyValueWithoutBorrowRatio","userLoan","mainMaxPropertyValueRange","RESIDENCE_TYPE","secondMaxPropertyValueRange","borrowerHash","maxPropertyValue","main","second","date","addNewMaxStructure","newResidenceType","firstOrganisationName","organisation","loanValue","Math","propertyWithCanton","propertyCanton","createNewProperty","CANTONS","zipCode","getZipcodeForCanton","value","description","wantedLoan","getLoanCalculator","lenderOrganisationLink","expireAnonymousLoans","lastWeek","moment","$ne","UNSUCCESSFUL","updatedAt","$lte","multi","insertBorrowers","amount","existingBorrowers","borrowerId1","borrowerId2","resetLoan","STEPS","SOLVENCY","applicationType","APPLICATION_TYPES","SIMPLE","linkPromotion","promotionLoan","promotionName","unlinkPromotion","setCreatedAtActivityDescription","activities","secondaryType","createdAtActivityId","ACTIVITY_SECONDARY_TYPES","ActivityService"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\nimport omit from 'lodash/omit';\nimport moment from 'moment';\n\nimport LenderRulesService from 'core/api/lenderRules/server/LenderRulesService';\nimport { PROPERTY_CATEGORY } from 'core/api/properties/propertyConstants';\nimport { ACTIVITY_SECONDARY_TYPES } from 'core/api/activities/activityConstants';\nimport ActivityService from 'core/api/activities/server/ActivityService';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport { shouldSendStepNotification } from '../../../utils/loanFunctions';\nimport Intl from '../../../utils/server/intl';\nimport {\n  makeFeedback,\n  FEEDBACK_OPTIONS,\n} from '../../../components/OfferList/feedbackHelpers';\nimport Calculator, {\n  Calculator as CalculatorClass,\n} from '../../../utils/Calculator';\nimport { getZipcodeForCanton } from '../../../utils/zipcodes';\nimport {\n  RESIDENCE_TYPE,\n  ORGANISATION_FEATURES,\n  LOAN_STATUS,\n  LOAN_VERIFICATION_STATUS,\n  CANTONS,\n  EMAIL_IDS,\n} from '../../constants';\nimport OfferService from '../../offers/server/OfferService';\nimport {\n  adminLoan,\n  lenderRules as lenderRulesFragment,\n  userLoan,\n} from '../../fragments';\nimport CollectionService from '../../helpers/CollectionService';\nimport BorrowerService from '../../borrowers/server/BorrowerService';\nimport PropertyService from '../../properties/server/PropertyService';\nimport PromotionService from '../../promotions/server/PromotionService';\nimport UserService from '../../users/server/UserService';\nimport OrganisationService from '../../organisations/server/OrganisationService';\nimport Loans from '../loans';\nimport { sendEmail } from '../../methods';\nimport {\n  ORGANISATION_NAME_SEPARATOR,\n  STEPS,\n  APPLICATION_TYPES,\n} from '../loanConstants';\nimport { fullLoan } from '../queries';\n\n// Pads a number with zeros: 4 --> 0004\nconst zeroPadding = (num, places) => {\n  const zero = places - num.toString().length + 1;\n  return Array(+(zero > 0 && zero)).join('0') + num;\n};\n\nexport class LoanService extends CollectionService {\n  constructor() {\n    super(Loans);\n  }\n\n  insert = ({ loan = {}, userId }) => {\n    const name = this.getNewLoanName();\n    return Loans.insert({ ...loan, name, userId });\n  };\n\n  insertAnonymousLoan = ({ proPropertyId, referralId }) => {\n    let loanId;\n    if (proPropertyId) {\n      loanId = this.insertPropertyLoan({ propertyIds: [proPropertyId] });\n    } else {\n      loanId = this.insert({ loan: {} });\n    }\n\n    this.update({\n      loanId,\n      object: { anonymous: true, displayWelcomeScreen: false, referralId },\n    });\n\n    return loanId;\n  };\n\n  getNewLoanName = (now = new Date()) => {\n    const year = now.getYear();\n    const yearPrefix = year - 100;\n    const lastLoan = Loans.findOne({}, { sort: { name: -1 } });\n    if (!lastLoan) {\n      return `${yearPrefix}-0001`;\n    }\n    const [lastPrefix, count] = lastLoan.name\n      .split('-')\n      .map(numb => parseInt(numb, 10));\n\n    if (lastPrefix !== yearPrefix) {\n      return `${yearPrefix}-0001`;\n    }\n\n    const nextCountString = zeroPadding(count + 1, 4);\n\n    return `${yearPrefix}-${nextCountString}`;\n  };\n\n  update = ({ loanId, object, operator = '$set' }) =>\n    Loans.update(loanId, { [operator]: object });\n\n  remove = ({ loanId }) => Loans.remove(loanId);\n\n  fullLoanInsert = ({ userId, loan = {} }) => {\n    const loanId = this.insert({\n      loan,\n      userId,\n    });\n    this.addNewStructure({ loanId });\n    return loanId;\n  };\n\n  setStep({ loanId, nextStep }) {\n    const { step, userId, user } = this.fetchOne({\n      $filters: { _id: loanId },\n      step: 1,\n      userId: 1,\n      user: { assignedEmployee: { name: 1 } },\n    });\n\n    this.update({ loanId, object: { step: nextStep } });\n\n    if (shouldSendStepNotification(step, nextStep)) {\n      if (!user || !user.assignedEmployee) {\n        throw new Meteor.Error('Il faut un conseiller sur ce dossier pour envoyer un email');\n      }\n\n      sendEmail.run({\n        emailId: EMAIL_IDS.FIND_LENDER_NOTIFICATION,\n        userId,\n        params: { loanId, assigneeName: user.assignedEmployee.name },\n      });\n    }\n  }\n\n  setStatus({ loanId, status }) {\n    const { status: prevStatus } = this.fetchOne({\n      $filters: { _id: loanId },\n      status: 1,\n    });\n\n    this.update({ loanId, object: { status } });\n    return { prevStatus, nextStatus: status };\n  }\n\n  askVerification = ({ loanId }) => {\n    const loan = this.get(loanId);\n\n    if (\n      loan.verificationStatus === LOAN_VERIFICATION_STATUS.REQUESTED\n      || loan.verificationStatus === LOAN_VERIFICATION_STATUS.OK\n    ) {\n      // Don't do anything if this loan is already in requested mode\n      throw new Meteor.Error('La vérification est déjà en cours, ou effectuée.');\n    }\n\n    return this.update({\n      loanId,\n      object: {\n        verificationStatus: LOAN_VERIFICATION_STATUS.REQUESTED,\n        userFormsEnabled: false,\n      },\n    });\n  };\n\n  insertPromotionLoan = ({\n    userId,\n    promotionId,\n    invitedBy,\n    showAllLots,\n    promotionLotIds = [],\n    shareSolvency,\n  }) => {\n    const customName = PromotionService.fetchOne({\n      $filters: { _id: promotionId },\n      name: 1,\n    }).name;\n    const loanId = this.insert({\n      loan: {\n        promotionLinks: [{ _id: promotionId, invitedBy, showAllLots }],\n        customName,\n        shareSolvency,\n      },\n      userId,\n    });\n\n    promotionLotIds.forEach((promotionLotId) => {\n      PromotionOptionService.insert({ promotionLotId, loanId });\n    });\n\n    this.addNewStructure({ loanId });\n\n    return loanId;\n  };\n\n  insertPropertyLoan = ({ userId, propertyIds, shareSolvency, loan }) => {\n    const customName = PropertyService.fetchOne({\n      $filters: { _id: propertyIds[0] },\n      address1: 1,\n    }).address1;\n    const loanId = this.insert({\n      loan: {\n        propertyIds,\n        customName,\n        shareSolvency,\n        ...loan,\n      },\n      userId,\n    });\n\n    this.addNewStructure({ loanId });\n    return loanId;\n  };\n\n  confirmClosing = ({ loanId, object }) =>\n    this.update({ loanId, object: { status: LOAN_STATUS.BILLING, ...object } });\n\n  pushValue = ({ loanId, object }) => Loans.update(loanId, { $push: object });\n\n  popValue = ({ loanId, object }) => Loans.update(loanId, { $pop: object });\n\n  pullValue = ({ loanId, object }) => Loans.update(loanId, { $pull: object });\n\n  addStructure = ({ loanId, structure, atIndex }) => {\n    const newStructureId = Random.id();\n    Loans.update(loanId, {\n      $push: {\n        structures: {\n          $each: [{ ...structure, id: newStructureId, disabled: false }],\n          $position: atIndex,\n        },\n      },\n    });\n    return newStructureId;\n  };\n\n  addNewStructure = ({ loanId, structure }) => {\n    const { structures, selectedStructure, propertyIds } = this.get(loanId);\n    const isFirstStructure = structures.length === 0;\n    const shouldCopyExistingStructure = !isFirstStructure && !structure && selectedStructure;\n\n    if (shouldCopyExistingStructure) {\n      structure = omit(structures.find(({ id }) => selectedStructure === id), [\n        'name',\n      ]);\n    }\n\n    const propertyId = (structure && structure.propertyId)\n      || (propertyIds.length > 0 ? propertyIds[0] : undefined);\n    const newStructureId = this.addStructure({\n      loanId,\n      structure: {\n        ...structure,\n        propertyId,\n        name:\n          (structure && structure.name)\n          || `Plan financier ${structures.length + 1}`,\n      },\n    });\n    this.update({\n      loanId,\n      object: isFirstStructure ? { selectedStructure: newStructureId } : {},\n    });\n\n    return newStructureId;\n  };\n\n  removeStructure = ({ loanId, structureId }) => {\n    const { selectedStructure: currentlySelected } = this.get(loanId);\n\n    if (currentlySelected === structureId) {\n      throw new Meteor.Error('Vous ne pouvez pas supprimer votre plan financier choisi');\n    }\n\n    const updateObj = {\n      $pull: { structures: { id: structureId } },\n    };\n\n    return Loans.update(loanId, updateObj, {\n      // Edge case fix: https://github.com/meteor/meteor/issues/4342\n      getAutoValues: false,\n    });\n  };\n\n  updateStructure = ({ loanId, structureId, structure }) => {\n    const currentStructure = this.get(loanId).structures.find(({ id }) => id === structureId);\n\n    return Loans.update(\n      { _id: loanId, 'structures.id': structureId },\n      { $set: { 'structures.$': { ...currentStructure, ...structure } } },\n    );\n  };\n\n  selectStructure = ({ loanId, structureId }) => {\n    // Make sure the structure exists\n    const structureExists = this.get(loanId).structures.some(({ id }) => id === structureId);\n\n    if (structureExists) {\n      return this.update({\n        loanId,\n        object: { selectedStructure: structureId },\n      });\n    }\n\n    throw new Meteor.Error(`Structure with id \"${structureId}\" does not exist`);\n  };\n\n  duplicateStructure = ({ loanId, structureId }) => {\n    const { structures } = this.get(loanId);\n    const currentStructure = structures.find(({ id }) => id === structureId);\n    const currentStructureIndex = structures.findIndex(({ id }) => id === structureId);\n\n    return (\n      !!currentStructure\n      && this.addStructure({\n        loanId,\n        structure: {\n          ...currentStructure,\n          name: `${currentStructure.name || 'Plan financier'} - copie`,\n          disabled: false,\n        },\n        atIndex: currentStructureIndex + 1,\n      })\n    );\n  };\n\n  addPropertyToLoan = ({ loanId, propertyId }) => {\n    const loan = this.get(loanId);\n    this.addLink({ id: loanId, linkName: 'properties', linkId: propertyId });\n\n    // Add this property to all structures that don't have a property\n    // for a better user experience\n    loan.structures.forEach(({ id, propertyId: structurePropertyId, promotionOptionId }) => {\n      if (!structurePropertyId && !promotionOptionId) {\n        this.updateStructure({\n          loanId,\n          structureId: id,\n          structure: { propertyId },\n        });\n      }\n    });\n  };\n\n  cleanupRemovedBorrower = ({ borrowerId }) => {\n    // Remove all references to this borrower on the loan\n    const loans = Loans.find({ borrowerIds: borrowerId }).fetch();\n    loans.forEach((loan) => {\n      this.update({\n        loanId: loan._id,\n        object: {\n          structures: loan.structures.map(structure => ({\n            ...structure,\n            ownFunds: structure.ownFunds.filter(({ borrowerId: bId }) => bId !== borrowerId),\n          })),\n        },\n      });\n    });\n  };\n\n  setPromotionPriorityOrder({ loanId, promotionId, priorityOrder }) {\n    return Loans.update(\n      { _id: loanId, 'promotionLinks._id': promotionId },\n      { $set: { 'promotionLinks.$.priorityOrder': priorityOrder } },\n    );\n  }\n\n  getPromotionPriorityOrder({ loanId, promotionId }) {\n    const promotionLink = this.get(loanId).promotionLinks.find(({ _id }) => _id === promotionId);\n    return promotionLink ? promotionLink.priorityOrder : [];\n  }\n\n  assignLoanToUser({ loanId, userId }) {\n    const {\n      properties = [],\n      borrowers = [],\n      referralId,\n      anonymous,\n    } = this.fetchOne({\n      $filters: { _id: loanId },\n      referralId: 1,\n      properties: { loans: { _id: 1 }, address1: 1, category: 1 },\n      borrowers: { loans: { _id: 1 }, name: 1 },\n      anonymous: 1,\n    });\n\n    borrowers.forEach(({ loans = [], name }) => {\n      if (loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, l'emprunteur \"${name}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n    properties.forEach(({ loans = [], address1, category }) => {\n      if (category === PROPERTY_CATEGORY.USER && loans.length > 1) {\n        throw new Meteor.Error(`Peut pas réassigner l'hypothèque, le bien immobilier \"${address1}\" est assigné à plus d'une hypothèque`);\n      }\n    });\n\n    this.update({\n      loanId,\n      object: {\n        userId,\n        anonymous: false,\n        // If the loan was anonymous before, don't show welcome screen again\n        displayWelcomeScreen: anonymous ? false : undefined,\n      },\n    });\n    this.update({ loanId, object: { referralId: true }, operator: '$unset' });\n\n    borrowers.forEach(({ _id: borrowerId }) => {\n      BorrowerService.update({ borrowerId, object: { userId } });\n    });\n    properties.forEach(({ _id: propertyId, category }) => {\n      if (category === PROPERTY_CATEGORY.USER) {\n        PropertyService.update({ propertyId, object: { userId } });\n      }\n    });\n\n    // Refer this user only if he hasn't already been referred\n    if (referralId && UserService.exists(referralId)) {\n      const {\n        referredByUserLink,\n        referredByOrganisationLink,\n      } = UserService.fetchOne({\n        $filters: { _id: userId },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n      });\n      if (!referredByUserLink && !referredByOrganisationLink) {\n        UserService.setReferredBy({ userId, proId: referralId });\n      }\n    }\n  }\n\n  switchBorrower({ loanId, borrowerId, oldBorrowerId }) {\n    const { borrowerIds } = this.get(loanId);\n    const { loans: oldBorrowerLoans = [] } = BorrowerService.createQuery({\n      $filters: { _id: oldBorrowerId },\n      loans: { name: 1 },\n    }).fetchOne();\n\n    if (borrowerIds.includes(borrowerId)) {\n      throw new Meteor.Error('Cet emprunteur est déjà sur ce prêt hypothécaire');\n    }\n\n    this.update({\n      loanId,\n      object: {\n        borrowerIds: borrowerIds.map(id =>\n          (id === oldBorrowerId ? borrowerId : id)),\n      },\n    });\n\n    if (oldBorrowerLoans.length === 1 && oldBorrowerLoans[0]._id === loanId) {\n      BorrowerService.remove({ borrowerId: oldBorrowerId });\n    }\n  }\n\n  sendNegativeFeedbackToAllLenders({ loanId }) {\n    const {\n      offers = [],\n      structure: { property },\n    } = this.createQuery({\n      $filters: { _id: loanId },\n      ...adminLoan({ withSort: true }),\n      $options: { sort: { createdAt: -1 } },\n    }).fetchOne() || {};\n\n    // Get lenders' last offer\n    const filteredOffers = offers.reduce((filtered, offer) => {\n      const {\n        lender: {\n          contact: { email: lenderEmail },\n        },\n      } = offer;\n\n      const lenderIsAlreadyInMailingList = filtered.find(({\n        lender: {\n          contact: { email },\n        },\n      }) => lenderEmail === email);\n\n      if (lenderIsAlreadyInMailingList) {\n        return filtered;\n      }\n\n      return [...filtered, offer];\n    }, []);\n\n    const promises = filteredOffers.map((offer) => {\n      const feedback = makeFeedback({\n        offer: { ...offer, property },\n        model: { option: FEEDBACK_OPTIONS.NEGATIVE_WITHOUT_FOLLOW_UP },\n        formatMessage: Intl.formatMessage.bind(Intl),\n      });\n      return OfferService.sendFeedback({\n        offerId: offer._id,\n        feedback,\n        saveFeedback: false,\n      });\n    });\n\n    return Promise.all(promises);\n  }\n\n  updatePromotionInvitedBy({ loanId, promotionId, invitedBy }) {\n    this.updateLinkMetadata({\n      id: loanId,\n      linkName: 'promotions',\n      linkId: promotionId,\n      metadata: { invitedBy },\n    });\n  }\n\n  reuseProperty({ loanId, propertyId }) {\n    const loan = this.get(loanId);\n\n    if (loan.propertyIds.includes(propertyId)) {\n      return false;\n    }\n\n    this.addLink({ id: loanId, linkName: 'properties', linkId: propertyId });\n  }\n\n  getMaxPropertyValueRange({ organisations, loan, residenceType, canton }) {\n    const { borrowers = [] } = loan;\n    const loanObject = Calculator.createLoanObject({\n      residenceType,\n      borrowers,\n      canton,\n    });\n    const maxPropertyValues = organisations\n      .map(({ lenderRules, name }) => {\n        const calculator = new CalculatorClass({\n          loan: loanObject,\n          lenderRules,\n        });\n\n        const {\n          borrowRatio,\n          propertyValue,\n        } = calculator.getMaxPropertyValueWithoutBorrowRatio({\n          borrowers,\n          residenceType,\n          canton,\n        });\n        if (propertyValue > 0 && borrowRatio > 0) {\n          return { borrowRatio, propertyValue, organisationName: name };\n        }\n\n        return null;\n      })\n      .filter(x => x);\n\n    const sortedValues = maxPropertyValues.sort(({ propertyValue: propertyValueA }, { propertyValue: propertyValueB }) =>\n      propertyValueA - propertyValueB);\n\n    if (sortedValues.length === 0) {\n      throw new Meteor.Error(\"Nous ne sommes pas parvenus à calculer votre capacité d'achat, contactez votre conseiller pour plus d'informations\");\n    }\n\n    // Only show min if there is more than 1 result\n    const showMin = sortedValues.length >= 2;\n    // Only show second max if there are more than 3 results\n    const showSecondMax = sortedValues.length >= 3;\n\n    const min = showMin ? sortedValues[0] : undefined;\n\n    // Don't take the max value, because that means there is only one single\n    // lender who can make an offer on this loan\n    const max = sortedValues[sortedValues.length - 1];\n    const secondMax = showSecondMax\n      ? sortedValues[sortedValues.length - 2]\n      : max;\n\n    // If there are at least 3 organisations, show a special label\n    // that combines the best and secondBest org\n    const maxOrganisationLabel = showSecondMax\n      ? `${secondMax\n          && secondMax.organisationName}${ORGANISATION_NAME_SEPARATOR}${\n        max.organisationName\n      } (${(max.borrowRatio * 100).toFixed(2)}%)`\n      : max.organisationName;\n\n    return {\n      min,\n      max: { ...secondMax, organisationName: maxOrganisationLabel },\n    };\n  }\n\n  getMaxPropertyValueWithoutBorrowRatio({ loan, canton, residenceType }) {\n    let query = { features: { $in: [ORGANISATION_FEATURES.LENDER] } };\n    if (loan.hasPromotion && loan.promotions[0].lenderOrganisationLink) {\n      query = { _id: loan.promotions[0].lenderOrganisationLink._id };\n    }\n\n    const lenderOrganisations = OrganisationService.fetch({\n      $filters: query,\n      lenderRules: lenderRulesFragment(),\n      name: 1,\n    });\n\n    return this.getMaxPropertyValueRange({\n      organisations: lenderOrganisations.filter(({ lenderRules }) => lenderRules && lenderRules.length > 0),\n      loan,\n      residenceType: residenceType || loan.residenceType,\n      canton,\n    });\n  }\n\n  setMaxPropertyValueWithoutBorrowRatio({ loanId, canton }) {\n    const loan = this.fetchOne({ $filters: { _id: loanId }, ...userLoan() });\n\n    const mainMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      canton,\n    });\n    const secondMaxPropertyValueRange = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      residenceType: RESIDENCE_TYPE.SECOND_RESIDENCE,\n      canton,\n    });\n\n    const borrowerHash = Calculator.getBorrowerFormHash({\n      borrowers: loan.borrowers,\n    });\n\n    this.update({\n      loanId,\n      object: {\n        maxPropertyValue: {\n          main: mainMaxPropertyValueRange,\n          second: secondMaxPropertyValueRange,\n          canton,\n          date: new Date(),\n          borrowerHash,\n        },\n      },\n    });\n\n    return Promise.resolve();\n  }\n\n  addNewMaxStructure({ loanId, residenceType: newResidenceType, canton }) {\n    if (newResidenceType) {\n      // Set residence type if it is given\n      this.update({ loanId, object: { residenceType: newResidenceType } });\n    }\n\n    const loan = this.fetchOne({\n      $filters: { _id: loanId },\n      ...userLoan(),\n    });\n    const { properties = [], userId, borrowers, residenceType } = loan;\n\n    // Get the highest property value\n    const {\n      max: { borrowRatio, propertyValue, organisationName },\n    } = this.getMaxPropertyValueWithoutBorrowRatio({\n      loan,\n      canton,\n    });\n    const firstOrganisationName = organisationName.split(ORGANISATION_NAME_SEPARATOR)[0];\n\n    const organisation = OrganisationService.fetchOne({\n      $filters: { name: firstOrganisationName },\n      lenderRules: lenderRulesFragment(),\n    });\n\n    const calculator = new CalculatorClass({\n      loan,\n      lenderRules: organisation.lenderRules,\n    });\n\n    // Recalculate the best structure for this propertyvalue\n    const ownFunds = calculator.suggestStructure({\n      borrowers,\n      propertyValue,\n      loanValue: Math.round(propertyValue * borrowRatio),\n      canton,\n      residenceType,\n    });\n\n    let propertyWithCanton = properties.find(({ canton: propertyCanton }) => propertyCanton === canton);\n    const createNewProperty = !propertyWithCanton;\n\n    // If there is no property from this canton, insert a new one\n    // with the right canton\n    if (createNewProperty) {\n      const propertyId = PropertyService.insert({\n        property: {\n          address1: `Bien immo ${CANTONS[canton]}`,\n          zipCode: getZipcodeForCanton(canton),\n          value: propertyValue,\n        },\n        loanId,\n        userId,\n      });\n\n      propertyWithCanton = { _id: propertyId };\n    }\n\n    this.addNewStructure({\n      loanId,\n      structure: {\n        name: \"Capacité d'achat max.\",\n        description: CANTONS[canton],\n        propertyId: propertyWithCanton._id,\n        ownFunds,\n        propertyValue: createNewProperty ? undefined : propertyValue,\n        wantedLoan: Math.round(propertyValue * borrowRatio),\n      },\n    });\n  }\n\n  getLoanCalculator({ loanId, structureId }) {\n    const loan = fullLoan.clone({ _id: loanId }).fetchOne();\n    let lenderRules;\n\n    if (loan && loan.structure && loan.structure.offerId) {\n      lenderRules = loan.structure.offer.lender.organisation.lenderRules;\n    } else if (loan.hasPromotion) {\n      const { lenderOrganisationLink } = loan.promotions[0];\n      if (lenderOrganisationLink) {\n        lenderRules = LenderRulesService.fetch({\n          $filters: { 'organisationLink._id': lenderOrganisationLink._id },\n          ...lenderRulesFragment(),\n        });\n      }\n    }\n\n    if (!lenderRules || lenderRules.length === 0) {\n      return Calculator;\n    }\n\n    return new CalculatorClass({\n      loan,\n      structureId,\n      lenderRules,\n    });\n  }\n\n  expireAnonymousLoans() {\n    const lastWeek = moment()\n      .subtract(5, 'days')\n      .toDate();\n\n    return this.baseUpdate(\n      {\n        anonymous: true,\n        status: { $ne: LOAN_STATUS.UNSUCCESSFUL },\n        updatedAt: { $lte: lastWeek },\n      },\n      { $set: { status: LOAN_STATUS.UNSUCCESSFUL } },\n      { multi: true },\n    );\n  }\n\n  insertBorrowers({ loanId, amount }) {\n    const { borrowerIds: existingBorrowers = [], userId } = this.get(loanId);\n\n    if (existingBorrowers.length === 2) {\n      throw new Meteor.Error('Cannot insert more borrowers');\n    }\n\n    if (existingBorrowers.length === 1 && amount === 2) {\n      throw new Meteor.Error('Can insert only one more borrower');\n    }\n\n    if (amount === 1) {\n      const borrowerId = BorrowerService.insert({ userId });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId,\n      });\n    } else if (amount === 2) {\n      const borrowerId1 = BorrowerService.insert({ userId });\n      const borrowerId2 = BorrowerService.insert({ userId });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId1,\n      });\n      this.addLink({\n        id: loanId,\n        linkName: 'borrowers',\n        linkId: borrowerId2,\n      });\n    } else {\n      throw new Meteor.Error('Invalid borrowers number');\n    }\n  }\n\n  // Useful for demos\n  resetLoan({ loanId }) {\n    const loan = this.findOne({ _id: loanId });\n    const { structures = [], borrowerIds = [], status } = loan;\n\n    if (status !== LOAN_STATUS.TEST) {\n      throw new Meteor.Error('Seuls les dossiers avec le statut TEST peuvent être réinitialisés !');\n    }\n\n    // Set step to solvency\n    this.setStep({ loanId, nextStep: STEPS.SOLVENCY });\n\n    // Set application type to simple\n    this.update({\n      loanId,\n      object: { applicationType: APPLICATION_TYPES.SIMPLE },\n    });\n\n    // Remove structures and an empty one\n    // structures.forEach(({ _id: structureId }) => {\n    //   this.removeStructure({ loanId, structureId });\n    // });\n    // this.addNewStructure({ loanId });\n\n    // Remove MaxPropertyValue\n    this.update({\n      loanId,\n      object: { maxPropertyValue: true },\n      operator: '$unset',\n    });\n\n    // Reset borrowers financing info\n    // borrowerIds.forEach((borrowerId) => {\n    //   BorrowerService.update({\n    //     borrowerId,\n    //     object: {\n    //       netSalary: null,\n    //       salary: null,\n    //       bankFortune: null,\n    //       insurance2: [],\n    //       insurance3A: [],\n    //       bank3A: [],\n    //       insurance3B: [],\n    //       otherIncome: [],\n    //       otherFortune: [],\n    //       expenses: [],\n    //       realEstate: [],\n    //       bonusExists: false,\n    //       bonus2015: null,\n    //       bonus2016: null,\n    //       bonus2017: null,\n    //       bonus2018: null,\n    //       bonus2019: null,\n    //     },\n    //   });\n    // });\n  }\n\n  linkPromotion({ promotionId, loanId }) {\n    const { name: promotionName, promotionLoan } = PromotionService.fetchOne({\n      $filters: { _id: promotionId },\n      name: 1,\n      promotionLoan: { _id: 1 },\n    });\n\n    if (promotionLoan && promotionLoan._id) {\n      this.unlinkPromotion({ promotionId, loanId: promotionLoan._id });\n    }\n\n    this.addLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId,\n    });\n\n    this.update({\n      loanId,\n      object: { customName: `Financement de ${promotionName}` },\n    });\n\n    return loanId;\n  }\n\n  unlinkPromotion({ promotionId, loanId }) {\n    this.removeLink({\n      id: loanId,\n      linkName: 'financedPromotion',\n      linkId: promotionId,\n    });\n\n    return this.update({\n      loanId,\n      object: { customName: true },\n      operator: '$unset',\n    });\n  }\n\n  setCreatedAtActivityDescription({ loanId, description }) {\n    const { activities = [] } = this.fetchOne({\n      $filters: { _id: loanId },\n      activities: { secondaryType: 1 },\n    });\n    const { _id: createdAtActivityId } = activities.find(({ secondaryType }) =>\n      secondaryType === ACTIVITY_SECONDARY_TYPES.CREATED) || {};\n\n    if (createdAtActivityId) {\n      ActivityService._update({\n        id: createdAtActivityId,\n        object: { description },\n      });\n    }\n\n    return loanId;\n  }\n}\n\nexport default new LoanService({});\n"]},"sourceType":"script","hash":"cdc1c434d6e6df0ccb0fe462c9cd5ecd61a2be97"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/fileHelpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/files/fileHelpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/fileHelpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/files/fileHelpers.js"],"names":["getPercent","FILE_STATUS","documentIsRequired","required","getDocumentsToCount","documentArray","Array","Object","doc","checkDocumentStatus","documents","undefined","reduce","documentsToCount","id","documentId","allFilesAreValid","every","status","VALID","filesPercent","fileArray","checkValidity","percent","count","length","documentExists","getMissingDocumentIds","ids","filter","map"],"mappings":"AAAA;AACA,SAASA,UAAT;AACA,SAASC,WAAT;;AAEA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAIA,QAAQ,KAAK,KAApD;;AAEA,MAAMC,mBAAmB,GAAG,CAC1BC,aAAa,EAAEC,KAAK,CAACC,MAAD,CADM,EAE1BC,GAAG,EAAED,MAFqB,EAG1BE,mBAH0B,CAGN,EAAE,OAHI,CAI3B,EAAEH,KAAK,CAACC,MAAD,CAJoB,IAIR;AAClB,MAAI,CAACC,GAAD,IAAQ,CAACA,GAAG,CAACE,SAAjB,EAA4B;AAC1B,WAAO,CAACC,SAAD,CAAP;AACD;;AACD,QAAM;AAAED,IAAAA;AAAF,MAAgBF,GAAtB;AAEA,SAAOH,aAAa,CAACO,MAAd,CACL,CAACC,gBAAD,EAAmB;AAAEV,IAAAA,QAAF;AAAYW,IAAAA,EAAE,EAAEC;AAAhB,GAAnB,KAAoD;AAClD,QAAI,CAACb,kBAAkB,CAACC,QAAD,CAAvB,EAAmC;AACjC;AACA,aAAOU,gBAAP;AACD;;AAED,QAAI,CAACH,SAAS,CAACK,UAAD,CAAd,EAA4B;AAC1B;AACA,aAAO,CAAC,GAAGF,gBAAJ,EAAsBF,SAAtB,CAAP;AACD;;AAED,QAAIF,mBAAJ,EAAyB;AACvB;AACA,YAAMO,gBAAgB,GAAGN,SAAS,CAACK,UAAD,CAAT,CAAsBE,KAAtB,CAA4B,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgBA,MAAM,KAAKjB,WAAW,CAACkB,KAAnE,CAAzB;AACA,aAAO,CAAC,GAAGN,gBAAJ,EAAsBG,gBAAgB,GAAG,IAAH,GAAUL,SAAhD,CAAP;AACD;;AAED,WAAO,CAAC,GAAGE,gBAAJ,EAAsBH,SAAS,CAACK,UAAD,CAA/B,CAAP;AACD,GAnBI,EAoBL,EApBK,CAAP;AAsBD,CAhCD;AAkCA;;;;;;;;;;;;;AAWA,OAAO,MAAMK,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAab,EAAAA,GAAb;AAAkBc,EAAAA;AAAlB,CAAD,KAAuC;AACjE,QAAMT,gBAAgB,GAAGT,mBAAmB,CAACiB,SAAD,EAAYb,GAAZ,EAAiBc,aAAjB,CAA5C;AACA,SAAO;AACLC,IAAAA,OAAO,EAAEvB,UAAU,CAACa,gBAAD,CADd;AAELW,IAAAA,KAAK,EAAEX,gBAAgB,CAACY;AAFnB,GAAP;AAID,CANM;;AAQP,MAAMC,cAAc,GAAG,CAAClB,GAAD,EAAMM,EAAN,KACrBN,GAAG,IAAIA,GAAG,CAACE,SAAX,IAAwBF,GAAG,CAACE,SAAJ,CAAcI,EAAd,CAAxB,IAA6CN,GAAG,CAACE,SAAJ,CAAcI,EAAd,EAAkBW,MAAlB,GAA2B,CAD1E;;AAGA,OAAO,MAAME,qBAAqB,GAAG,CAAC;AAAEN,EAAAA,SAAF;AAAab,EAAAA;AAAb,CAAD,KAAwB;AAC3D,QAAMoB,GAAG,GAAGP,SAAS,CAClBQ,MADS,CACF,CAAC;AAAE1B,IAAAA,QAAF;AAAYW,IAAAA;AAAZ,GAAD,KACNZ,kBAAkB,CAACC,QAAD,CAAlB,IAAgC,CAACuB,cAAc,CAAClB,GAAD,EAAMM,EAAN,CAFvC,EAGTgB,GAHS,CAGL,CAAC;AAAEhB,IAAAA;AAAF,GAAD,KAAYA,EAHP,CAAZ;AAIA,SAAOc,GAAP;AACD,CANM","sourcesContent":["// @flow\nimport { getPercent } from '../../utils/general';\nimport { FILE_STATUS } from './fileConstants';\n\nconst documentIsRequired = required => required !== false;\n\nconst getDocumentsToCount = (\n  documentArray: Array<Object>,\n  doc: Object,\n  checkDocumentStatus?: boolean,\n): Array<Object> => {\n  if (!doc || !doc.documents) {\n    return [undefined];\n  }\n  const { documents } = doc;\n\n  return documentArray.reduce(\n    (documentsToCount, { required, id: documentId }) => {\n      if (!documentIsRequired(required)) {\n        // Don't count this document\n        return documentsToCount;\n      }\n\n      if (!documents[documentId]) {\n        // No document has been added yet, count this one, and as todo\n        return [...documentsToCount, undefined];\n      }\n\n      if (checkDocumentStatus) {\n        // Make sure all documents have a valid status\n        const allFilesAreValid = documents[documentId].every(({ status }) => status === FILE_STATUS.VALID);\n        return [...documentsToCount, allFilesAreValid ? true : undefined];\n      }\n\n      return [...documentsToCount, documents[documentId]];\n    },\n    [],\n  );\n};\n\n/**\n * filesPercent - Determines the completion rate of file upload for a given\n * step, doc and array of files\n *\n * @param {object} doc           The mongoDB document where files are saved\n * @param {function} fileArray   Array of files\n\n *\n * @return {number} a value between 0 and 1 indicating the percentage of\n * completion, 1 is complete, 0 is not started\n */\nexport const filesPercent = ({ fileArray, doc, checkValidity }) => {\n  const documentsToCount = getDocumentsToCount(fileArray, doc, checkValidity);\n  return {\n    percent: getPercent(documentsToCount),\n    count: documentsToCount.length,\n  };\n};\n\nconst documentExists = (doc, id) =>\n  doc && doc.documents && doc.documents[id] && doc.documents[id].length > 0;\n\nexport const getMissingDocumentIds = ({ fileArray, doc }) => {\n  const ids = fileArray\n    .filter(({ required, id }) =>\n      documentIsRequired(required) && !documentExists(doc, id))\n    .map(({ id }) => id);\n  return ids;\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/fileHelpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/files/fileHelpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nmodule.export({\n  filesPercent: function () {\n    return filesPercent;\n  },\n  getMissingDocumentIds: function () {\n    return getMissingDocumentIds;\n  }\n});\nvar getPercent;\nmodule.link(\"../../utils/general\", {\n  getPercent: function (v) {\n    getPercent = v;\n  }\n}, 0);\nvar FILE_STATUS;\nmodule.link(\"./fileConstants\", {\n  FILE_STATUS: function (v) {\n    FILE_STATUS = v;\n  }\n}, 1);\n\nvar documentIsRequired = function (required) {\n  return required !== false;\n};\n\nvar getDocumentsToCount = function (documentArray, doc, checkDocumentStatus) {\n  if (!doc || !doc.documents) {\n    return [undefined];\n  }\n\n  var documents = doc.documents;\n  return documentArray.reduce(function (documentsToCount, _ref) {\n    var required = _ref.required,\n        documentId = _ref.id;\n\n    if (!documentIsRequired(required)) {\n      // Don't count this document\n      return documentsToCount;\n    }\n\n    if (!documents[documentId]) {\n      // No document has been added yet, count this one, and as todo\n      return [].concat((0, _toConsumableArray2.default)(documentsToCount), [undefined]);\n    }\n\n    if (checkDocumentStatus) {\n      // Make sure all documents have a valid status\n      var allFilesAreValid = documents[documentId].every(function (_ref2) {\n        var status = _ref2.status;\n        return status === FILE_STATUS.VALID;\n      });\n      return [].concat((0, _toConsumableArray2.default)(documentsToCount), [allFilesAreValid ? true : undefined]);\n    }\n\n    return [].concat((0, _toConsumableArray2.default)(documentsToCount), [documents[documentId]]);\n  }, []);\n};\n/**\n * filesPercent - Determines the completion rate of file upload for a given\n * step, doc and array of files\n *\n * @param {object} doc           The mongoDB document where files are saved\n * @param {function} fileArray   Array of files\n\n *\n * @return {number} a value between 0 and 1 indicating the percentage of\n * completion, 1 is complete, 0 is not started\n */\n\n\nvar filesPercent = function (_ref3) {\n  var fileArray = _ref3.fileArray,\n      doc = _ref3.doc,\n      checkValidity = _ref3.checkValidity;\n  var documentsToCount = getDocumentsToCount(fileArray, doc, checkValidity);\n  return {\n    percent: getPercent(documentsToCount),\n    count: documentsToCount.length\n  };\n};\n\nvar documentExists = function (doc, id) {\n  return doc && doc.documents && doc.documents[id] && doc.documents[id].length > 0;\n};\n\nvar getMissingDocumentIds = function (_ref4) {\n  var fileArray = _ref4.fileArray,\n      doc = _ref4.doc;\n  var ids = fileArray.filter(function (_ref5) {\n    var required = _ref5.required,\n        id = _ref5.id;\n    return documentIsRequired(required) && !documentExists(doc, id);\n  }).map(function (_ref6) {\n    var id = _ref6.id;\n    return id;\n  });\n  return ids;\n};","map":{"version":3,"sources":["imports/core/api/files/fileHelpers.js"],"names":["documentIsRequired","required","getDocumentsToCount","doc","documents","id","documentId","allFilesAreValid","status","FILE_STATUS","filesPercent","checkValidity","documentsToCount","percent","getPercent","count","length","documentExists","getMissingDocumentIds","ids"],"mappings":"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","sourcesContent":["// @flow\nimport { getPercent } from '../../utils/general';\nimport { FILE_STATUS } from './fileConstants';\n\nconst documentIsRequired = required => required !== false;\n\nconst getDocumentsToCount = (\n  documentArray: Array<Object>,\n  doc: Object,\n  checkDocumentStatus?: boolean,\n): Array<Object> => {\n  if (!doc || !doc.documents) {\n    return [undefined];\n  }\n  const { documents } = doc;\n\n  return documentArray.reduce(\n    (documentsToCount, { required, id: documentId }) => {\n      if (!documentIsRequired(required)) {\n        // Don't count this document\n        return documentsToCount;\n      }\n\n      if (!documents[documentId]) {\n        // No document has been added yet, count this one, and as todo\n        return [...documentsToCount, undefined];\n      }\n\n      if (checkDocumentStatus) {\n        // Make sure all documents have a valid status\n        const allFilesAreValid = documents[documentId].every(({ status }) => status === FILE_STATUS.VALID);\n        return [...documentsToCount, allFilesAreValid ? true : undefined];\n      }\n\n      return [...documentsToCount, documents[documentId]];\n    },\n    [],\n  );\n};\n\n/**\n * filesPercent - Determines the completion rate of file upload for a given\n * step, doc and array of files\n *\n * @param {object} doc           The mongoDB document where files are saved\n * @param {function} fileArray   Array of files\n\n *\n * @return {number} a value between 0 and 1 indicating the percentage of\n * completion, 1 is complete, 0 is not started\n */\nexport const filesPercent = ({ fileArray, doc, checkValidity }) => {\n  const documentsToCount = getDocumentsToCount(fileArray, doc, checkValidity);\n  return {\n    percent: getPercent(documentsToCount),\n    count: documentsToCount.length,\n  };\n};\n\nconst documentExists = (doc, id) =>\n  doc && doc.documents && doc.documents[id] && doc.documents[id].length > 0;\n\nexport const getMissingDocumentIds = ({ fileArray, doc }) => {\n  const ids = fileArray\n    .filter(({ required, id }) =>\n      documentIsRequired(required) && !documentExists(doc, id))\n    .map(({ id }) => id);\n  return ids;\n};\n"]},"sourceType":"script","hash":"72ff708c2c83963619545ebc0199d1da06f8098f"}

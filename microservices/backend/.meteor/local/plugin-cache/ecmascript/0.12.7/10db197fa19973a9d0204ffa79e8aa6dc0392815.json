{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/server/test/helpers.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/lenderRules/server/test/helpers.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/server/test/helpers.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/api/lenderRules/server/test/helpers.spec.js"],"names":["expect","omit","getMatchingRules","RESIDENCE_TYPE","checkRules","result","expected","to","deep","equal","describe","it","variables","residenceType","MAIN_RESIDENCE","lenderRules","filter","and","var","hello","hasPromotion","yo","SECOND_RESIDENCE","a","b","c","in"],"mappings":"AAAA;;AACA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,gBAAT;AACA,SAASC,cAAT;;AAEA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACvC;AACAN,EAAAA,MAAM,CAACC,IAAI,CAACI,MAAD,EAAS,OAAT,CAAL,CAAN,CAA8BE,EAA9B,CAAiCC,IAAjC,CAAsCC,KAAtC,CAA4CH,QAA5C;AACD,CAHD;;AAKAI,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCA,EAAAA,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AACjCC,IAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClD,YAAMC,SAAS,GAAG;AAAEC,QAAAA,aAAa,EAAEV,cAAc,CAACW;AAAhC,OAAlB;AACA,YAAMC,WAAW,GAAG,CAClB;AACEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,CACH;AACE,mBAAO,CACL;AAAEC,cAAAA,GAAG,EAAE;AAAP,aADK,EAELf,cAAc,CAACW,cAFV;AADT,WADG;AADC,SADV;AAWEK,QAAAA,KAAK,EAAE;AAXT,OADkB,CAApB;AAgBAf,MAAAA,UAAU,CAACF,gBAAgB,CAACa,WAAD,EAAcH,SAAd,CAAjB,EAA2C;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAA3C,CAAV;AACD,KAnBC,CAAF;AAqBAR,IAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACnD,YAAMC,SAAS,GAAG;AAChBC,QAAAA,aAAa,EAAEV,cAAc,CAACW,cADd;AAEhBM,QAAAA,YAAY,EAAE;AAFE,OAAlB;AAIA,YAAML,WAAW,GAAG,CAClB;AACEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,CACH;AACE,mBAAO,CACL;AAAEC,cAAAA,GAAG,EAAE;AAAP,aADK,EAELf,cAAc,CAACW,cAFV;AADT,WADG;AADC,SADV;AAWEO,QAAAA,EAAE,EAAE,MAXN;AAYEF,QAAAA,KAAK,EAAE;AAZT,OADkB,EAelB;AACEH,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,CACH;AACE,mBAAO,CAAC;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAAD,EAA0B,IAA1B;AADT,WADG;AADC,SADV;AAQEC,QAAAA,KAAK,EAAE;AART,OAfkB,CAApB;AA2BAf,MAAAA,UAAU,CAACF,gBAAgB,CAACa,WAAD,EAAcH,SAAd,CAAjB,EAA2C;AACnDS,QAAAA,EAAE,EAAE,MAD+C;AAEnDF,QAAAA,KAAK,EAAE;AAF4C,OAA3C,CAAV;AAID,KApCC,CAAF;AAsCAR,IAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxC,YAAMC,SAAS,GAAG;AAChBC,QAAAA,aAAa,EAAEV,cAAc,CAACW,cADd;AAEhBM,QAAAA,YAAY,EAAE;AAFE,OAAlB;AAIA,YAAML,WAAW,GAAG,CAClB;AACEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,CACH;AACE,mBAAO,CACL;AAAEC,cAAAA,GAAG,EAAE;AAAP,aADK,EAELf,cAAc,CAACmB,gBAFV;AADT,WADG;AADC,SADV;AAWED,QAAAA,EAAE,EAAE,MAXN;AAYEF,QAAAA,KAAK,EAAE;AAZT,OADkB,EAelB;AACEH,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,CACH;AACE,mBAAO,CAAC;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAAD,EAA0B,IAA1B;AADT,WADG;AADC,SADV;AAQEC,QAAAA,KAAK,EAAE;AART,OAfkB,CAApB;AA2BAf,MAAAA,UAAU,CAACF,gBAAgB,CAACa,WAAD,EAAcH,SAAd,CAAjB,EAA2C;AACnDO,QAAAA,KAAK,EAAE;AAD4C,OAA3C,CAAV;AAGD,KAnCC,CAAF;AAqCAR,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtC,YAAMC,SAAS,GAAG;AAAEW,QAAAA,CAAC,EAAE;AAAEC,UAAAA,CAAC,EAAE;AAAEC,YAAAA,CAAC,EAAE;AAAL;AAAL;AAAL,OAAlB;AACA,YAAMV,WAAW,GAAG,CAClB;AACEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,GAAG,EAAE,CAAC;AAAE,mBAAO,CAAC;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAAD,EAAmB,IAAnB;AAAT,WAAD;AAAP,SADV;AAEEC,QAAAA,KAAK,EAAE;AAFT,OADkB,CAApB;AAOAf,MAAAA,UAAU,CAACF,gBAAgB,CAACa,WAAD,EAAcH,SAAd,CAAjB,EAA2C;AACnDO,QAAAA,KAAK,EAAE;AAD4C,OAA3C,CAAV;AAGD,KAZC,CAAF;AAcAR,IAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5C,YAAMC,SAAS,GAAG;AAAEC,QAAAA,aAAa,EAAEV,cAAc,CAACW;AAAhC,OAAlB;AACA,YAAMC,WAAW,GAAG,CAClB;AACEC,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAE,CACH;AACES,YAAAA,EAAE,EAAE,CACF;AAAER,cAAAA,GAAG,EAAE;AAAP,aADE,EAEF,CACEf,cAAc,CAACW,cADjB,EAEEX,cAAc,CAACmB,gBAFjB,CAFE;AADN,WADG;AADC,SADV;AAcEH,QAAAA,KAAK,EAAE;AAdT,OADkB,CAApB;AAmBAf,MAAAA,UAAU,CAACF,gBAAgB,CAACa,WAAD,EAAcH,SAAd,CAAjB,EAA2C;AACnDO,QAAAA,KAAK,EAAE;AAD4C,OAA3C,CAAV;AAGD,KAxBC,CAAF;AAyBD,GAxIO,CAAR;AAyID,CA1IO,CAAR","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport omit from 'lodash/omit';\n\nimport { getMatchingRules } from '../../helpers';\nimport { RESIDENCE_TYPE } from '../../../properties/propertyConstants';\n\nconst checkRules = (result, expected) => {\n  // Don't check the names variable\n  expect(omit(result, 'names')).to.deep.equal(expected);\n};\n\ndescribe('lenderRules helpers', () => {\n  describe('getMatchingRules', () => {\n    it('gets all the rules from a single filter', () => {\n      const variables = { residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                '===': [\n                  { var: 'residenceType' },\n                  RESIDENCE_TYPE.MAIN_RESIDENCE,\n                ],\n              },\n            ],\n          },\n          hello: 'dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), { hello: 'dude' });\n    });\n\n    it('merges rules in the order of the filters', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        hasPromotion: true,\n      };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                '===': [\n                  { var: 'residenceType' },\n                  RESIDENCE_TYPE.MAIN_RESIDENCE,\n                ],\n              },\n            ],\n          },\n          yo: 'dawg',\n          hello: 'dude',\n        },\n        {\n          filter: {\n            and: [\n              {\n                '===': [{ var: 'hasPromotion' }, true],\n              },\n            ],\n          },\n          hello: 'ma dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        yo: 'dawg',\n        hello: 'ma dude',\n      });\n    });\n\n    it('skips rules that do not match', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        hasPromotion: true,\n      };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                '===': [\n                  { var: 'residenceType' },\n                  RESIDENCE_TYPE.SECOND_RESIDENCE,\n                ],\n              },\n            ],\n          },\n          yo: 'dawg',\n          hello: 'dude',\n        },\n        {\n          filter: {\n            and: [\n              {\n                '===': [{ var: 'hasPromotion' }, true],\n              },\n            ],\n          },\n          hello: 'ma dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'ma dude',\n      });\n    });\n\n    it('works with nested variables', () => {\n      const variables = { a: { b: { c: true } } };\n      const lenderRules = [\n        {\n          filter: { and: [{ '===': [{ var: 'a.b.c' }, true] }] },\n          hello: 'dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'dude',\n      });\n    });\n\n    it('matches one in an array of values', () => {\n      const variables = { residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                in: [\n                  { var: 'residenceType' },\n                  [\n                    RESIDENCE_TYPE.MAIN_RESIDENCE,\n                    RESIDENCE_TYPE.SECOND_RESIDENCE,\n                  ],\n                ],\n              },\n            ],\n          },\n          hello: 'dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'dude',\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/server/test/helpers.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/lenderRules/server/test/helpers.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet omit;\nmodule.link(\"lodash/omit\", {\n  default(v) {\n    omit = v;\n  }\n\n}, 1);\nlet getMatchingRules;\nmodule.link(\"../../helpers\", {\n  getMatchingRules(v) {\n    getMatchingRules = v;\n  }\n\n}, 2);\nlet RESIDENCE_TYPE;\nmodule.link(\"../../../properties/propertyConstants\", {\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  }\n\n}, 3);\n\nconst checkRules = (result, expected) => {\n  // Don't check the names variable\n  expect(omit(result, 'names')).to.deep.equal(expected);\n};\n\ndescribe('lenderRules helpers', () => {\n  describe('getMatchingRules', () => {\n    it('gets all the rules from a single filter', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n      };\n      const lenderRules = [{\n        filter: {\n          and: [{\n            '===': [{\n              var: 'residenceType'\n            }, RESIDENCE_TYPE.MAIN_RESIDENCE]\n          }]\n        },\n        hello: 'dude'\n      }];\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'dude'\n      });\n    });\n    it('merges rules in the order of the filters', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        hasPromotion: true\n      };\n      const lenderRules = [{\n        filter: {\n          and: [{\n            '===': [{\n              var: 'residenceType'\n            }, RESIDENCE_TYPE.MAIN_RESIDENCE]\n          }]\n        },\n        yo: 'dawg',\n        hello: 'dude'\n      }, {\n        filter: {\n          and: [{\n            '===': [{\n              var: 'hasPromotion'\n            }, true]\n          }]\n        },\n        hello: 'ma dude'\n      }];\n      checkRules(getMatchingRules(lenderRules, variables), {\n        yo: 'dawg',\n        hello: 'ma dude'\n      });\n    });\n    it('skips rules that do not match', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        hasPromotion: true\n      };\n      const lenderRules = [{\n        filter: {\n          and: [{\n            '===': [{\n              var: 'residenceType'\n            }, RESIDENCE_TYPE.SECOND_RESIDENCE]\n          }]\n        },\n        yo: 'dawg',\n        hello: 'dude'\n      }, {\n        filter: {\n          and: [{\n            '===': [{\n              var: 'hasPromotion'\n            }, true]\n          }]\n        },\n        hello: 'ma dude'\n      }];\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'ma dude'\n      });\n    });\n    it('works with nested variables', () => {\n      const variables = {\n        a: {\n          b: {\n            c: true\n          }\n        }\n      };\n      const lenderRules = [{\n        filter: {\n          and: [{\n            '===': [{\n              var: 'a.b.c'\n            }, true]\n          }]\n        },\n        hello: 'dude'\n      }];\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'dude'\n      });\n    });\n    it('matches one in an array of values', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n      };\n      const lenderRules = [{\n        filter: {\n          and: [{\n            in: [{\n              var: 'residenceType'\n            }, [RESIDENCE_TYPE.MAIN_RESIDENCE, RESIDENCE_TYPE.SECOND_RESIDENCE]]\n          }]\n        },\n        hello: 'dude'\n      }];\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'dude'\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/lenderRules/server/test/helpers.spec.js"],"names":["checkRules","expect","omit","describe","it","variables","residenceType","RESIDENCE_TYPE","MAIN_RESIDENCE","lenderRules","filter","and","var","hello","getMatchingRules","hasPromotion","yo","a","b","c","in"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport omit from 'lodash/omit';\n\nimport { getMatchingRules } from '../../helpers';\nimport { RESIDENCE_TYPE } from '../../../properties/propertyConstants';\n\nconst checkRules = (result, expected) => {\n  // Don't check the names variable\n  expect(omit(result, 'names')).to.deep.equal(expected);\n};\n\ndescribe('lenderRules helpers', () => {\n  describe('getMatchingRules', () => {\n    it('gets all the rules from a single filter', () => {\n      const variables = { residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                '===': [\n                  { var: 'residenceType' },\n                  RESIDENCE_TYPE.MAIN_RESIDENCE,\n                ],\n              },\n            ],\n          },\n          hello: 'dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), { hello: 'dude' });\n    });\n\n    it('merges rules in the order of the filters', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        hasPromotion: true,\n      };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                '===': [\n                  { var: 'residenceType' },\n                  RESIDENCE_TYPE.MAIN_RESIDENCE,\n                ],\n              },\n            ],\n          },\n          yo: 'dawg',\n          hello: 'dude',\n        },\n        {\n          filter: {\n            and: [\n              {\n                '===': [{ var: 'hasPromotion' }, true],\n              },\n            ],\n          },\n          hello: 'ma dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        yo: 'dawg',\n        hello: 'ma dude',\n      });\n    });\n\n    it('skips rules that do not match', () => {\n      const variables = {\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n        hasPromotion: true,\n      };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                '===': [\n                  { var: 'residenceType' },\n                  RESIDENCE_TYPE.SECOND_RESIDENCE,\n                ],\n              },\n            ],\n          },\n          yo: 'dawg',\n          hello: 'dude',\n        },\n        {\n          filter: {\n            and: [\n              {\n                '===': [{ var: 'hasPromotion' }, true],\n              },\n            ],\n          },\n          hello: 'ma dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'ma dude',\n      });\n    });\n\n    it('works with nested variables', () => {\n      const variables = { a: { b: { c: true } } };\n      const lenderRules = [\n        {\n          filter: { and: [{ '===': [{ var: 'a.b.c' }, true] }] },\n          hello: 'dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'dude',\n      });\n    });\n\n    it('matches one in an array of values', () => {\n      const variables = { residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE };\n      const lenderRules = [\n        {\n          filter: {\n            and: [\n              {\n                in: [\n                  { var: 'residenceType' },\n                  [\n                    RESIDENCE_TYPE.MAIN_RESIDENCE,\n                    RESIDENCE_TYPE.SECOND_RESIDENCE,\n                  ],\n                ],\n              },\n            ],\n          },\n          hello: 'dude',\n        },\n      ];\n\n      checkRules(getMatchingRules(lenderRules, variables), {\n        hello: 'dude',\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"10db197fa19973a9d0204ffa79e8aa6dc0392815"}

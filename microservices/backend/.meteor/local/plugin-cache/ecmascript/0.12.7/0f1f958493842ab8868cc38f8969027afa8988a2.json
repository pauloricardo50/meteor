{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/collections/PromotionSecurity.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/security/collections/PromotionSecurity.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/collections/PromotionSecurity.js","inputSourceMap":{"version":3,"sources":["imports/core/api/security/collections/PromotionSecurity.js"],"names":["PromotionService","PromotionLotService","PromotionOptionService","UserService","ROLES","Security","LoanSecurity","isAllowedToInviteCustomersToPromotion","isAllowedToRemoveCustomerFromPromotion","isAllowedToModifyPromotion","isAllowedToManagePromotionDocuments","isAllowedToAddLotsToPromotion","isAllowedToModifyPromotionLots","isAllowedToRemovePromotionLots","isAllowedToViewPromotion","isAllowedToBookPromotionLots","isAllowedToBookPromotionLotToCustomer","isAllowedToSellPromotionLots","isAllowedToSellPromotionLotToCustomer","LoanService","getPromotionCustomerOwnerType","makeLoanAnonymizer","LotService","PromotionSecurity","checkPermissions","promotionId","userId","checkingFunction","errorMessage","isUserAdmin","promotion","safeFetchOne","$filters","_id","status","users","userLinks","currentUser","promotions","permissions","organisations","handleUnauthorized","hasAccessToPromotion","isAllowedToView","error","hasPromotion","hasAccessToPromotionLot","promotionLotId","getPromotionIdFromPromotionLot","hasAccessToPromotionOption","promotionOptionId","loan","promotionLots","hasRole","PRO","isAllowedToUpdate","isAllowedToModify","isAllowedToManageDocuments","isAllowedToManagePromotionLotDocuments","propertyId","isAllowedToAddLots","isAllowedToModifyLots","isAllowedToRemoveLots","isAllowedToInviteCustomers","isAllowedToRemoveCustomer","loanId","user","customerOwnerType","customerId","isAllowedToViewPromotionLot","isAllowedToViewPromotionOption","forEach","isAllowedToModifyPromotionLot","isAllowedToRemovePromotionLot","isAllowedToBookLots","isAllowedToBookLotToCustomer","isAllowedToCancelLotBooking","attributedTo","isAllowedToSellLots","isAllowedToSellLotToCustomer","currentUserIsAdmin","isAllowedToModifyAdditionalLot","lotId","isAllowedToRemoveAdditionalLot","isAllowedToSeePromotionCustomer","fetchOne","anonymizer","isAnonymized"],"mappings":"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","sourcesContent":["import PromotionService from '../../promotions/server/PromotionService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../users/userConstants';\nimport Security from '../Security';\nimport LoanSecurity from './LoanSecurity';\nimport {\n  isAllowedToInviteCustomersToPromotion,\n  isAllowedToRemoveCustomerFromPromotion,\n  isAllowedToModifyPromotion,\n  isAllowedToManagePromotionDocuments,\n  isAllowedToAddLotsToPromotion,\n  isAllowedToModifyPromotionLots,\n  isAllowedToRemovePromotionLots,\n  isAllowedToViewPromotion,\n  isAllowedToBookPromotionLots,\n  isAllowedToBookPromotionLotToCustomer,\n  isAllowedToSellPromotionLots,\n  isAllowedToSellPromotionLotToCustomer,\n} from '../clientSecurityHelpers';\nimport LoanService from '../../loans/server/LoanService';\nimport {\n  getPromotionCustomerOwnerType,\n  makeLoanAnonymizer,\n} from '../../promotions/server/promotionServerHelpers';\nimport LotService from '../../lots/server/LotService';\n\nclass PromotionSecurity {\n  static checkPermissions({\n    promotionId,\n    userId,\n    checkingFunction,\n    errorMessage,\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n    const promotion = PromotionService.safeFetchOne({\n      $filters: { _id: promotionId },\n      status: 1,\n      users: { _id: 1 },\n      userLinks: { _id: 1 },\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (!checkingFunction({ promotion, currentUser })) {\n      Security.handleUnauthorized(errorMessage || 'Checking permissions');\n    }\n  }\n\n  static getPromotionIdFromPromotionLot = ({ promotionLotId }) => {\n    const { promotion = {} } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1 },\n    });\n\n    return promotion._id;\n  };\n\n  static hasAccessToPromotion({ promotionId, userId }) {\n    try {\n      this.isAllowedToView({ promotionId, userId });\n      return;\n    } catch (error) {\n      const hasPromotion = UserService.hasPromotion({ promotionId, userId });\n\n      if (!hasPromotion) {\n        Security.handleUnauthorized(\"Vous n'avez pas accès à cette promotion\");\n      }\n    }\n  }\n\n  static hasAccessToPromotionLot({ promotionLotId, userId }) {\n    this.hasAccessToPromotion({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static hasAccessToPromotionOption({ promotionOptionId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { loan, promotionLots } = PromotionOptionService.safeFetchOne({\n      $filters: { _id: promotionOptionId },\n      loan: { _id: 1, userId: 1 },\n      promotionLots: { _id: 1 },\n    });\n\n    if (Security.hasRole(userId, ROLES.PRO)) {\n      this.hasAccessToPromotionLot(promotionLots[0]._id, userId);\n    } else {\n      LoanSecurity.isAllowedToUpdate(loan && loan._id);\n    }\n  }\n\n  static isAllowedToModify({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotion,\n      errorMessage: 'Vous ne pouvez pas modifier cette promotion',\n    });\n  }\n\n  static isAllowedToManageDocuments({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToManagePromotionDocuments,\n      errorMessage: 'Vous ne pouvez pas gérer les documents de cette promotion',\n    });\n  }\n\n  static isAllowedToManagePromotionLotDocuments({ propertyId, userId }) {\n    const { promotion } = PromotionLotService.safeFetchOne({\n      $filters: { 'propertyLinks._id': propertyId },\n      promotion: { _id: 1 },\n    });\n\n    this.isAllowedToManageDocuments({ promotionId: promotion._id, userId });\n  }\n\n  static isAllowedToAddLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToAddLotsToPromotion,\n      errorMessage: 'Vous ne pouvez pas ajouter de lots à cette promotion',\n    });\n  }\n\n  static isAllowedToModifyLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotionLots,\n      errorMessage: 'Vous ne pouvez pas modifier les lots de cette promotion',\n    });\n  }\n\n  static isAllowedToRemoveLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToRemovePromotionLots,\n      errorMessage: 'Vous ne pouvez pas supprimer les lots de cette promotion',\n    });\n  }\n\n  static isAllowedToInviteCustomers({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToInviteCustomersToPromotion,\n      errorMessage: 'Vous ne pouvez pas inviter des clients à cette promotion',\n    });\n  }\n\n  static isAllowedToRemoveCustomer({ promotionId, loanId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const promotion = PromotionService.safeFetchOne({\n      $filters: { _id: promotionId },\n      status: 1,\n      users: { _id: 1 },\n      userLinks: { _id: 1 },\n    });\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: loanId },\n      user: { _id: 1 },\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId,\n    });\n\n    if (\n      !isAllowedToRemoveCustomerFromPromotion({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas supprimer ce client de cette promotion');\n    }\n  }\n\n  static isAllowedToView({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToViewPromotion,\n      errorMessage: \"Vous n'avez pas accès à cette promotion\",\n    });\n  }\n\n  static isAllowedToViewPromotionLot({ promotionLotId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    this.isAllowedToView({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToViewPromotionOption({ promotionOptionId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { promotionLots = [] } = PromotionOptionService.safeFetchOne({\n      $filters: { _id: promotionOptionId },\n      promotionLots: { _id: 1 },\n    });\n\n    promotionLots.forEach(({ _id: promotionLotId }) => {\n      this.isAllowedToViewPromotionLot({ promotionLotId, userId });\n    });\n  }\n\n  static isAllowedToModifyPromotionLot({ promotionLotId, userId }) {\n    this.isAllowedToModifyLots({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToRemovePromotionLot({ promotionLotId, userId }) {\n    this.isAllowedToRemoveLots({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToBookLots({ promotionLotId, userId }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n      checkingFunction: isAllowedToBookPromotionLots,\n      errorMessage: 'Vous ne pouvez pas réserver des lots dans cette promotion',\n    });\n  }\n\n  static isAllowedToBookLotToCustomer({ promotionLotId, loanId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { promotion } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1, users: { _id: 1 } },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: loanId },\n      user: {_id: 1},\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id,\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (\n      !isAllowedToBookPromotionLotToCustomer({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas réserver de lot à ce client');\n    }\n  }\n\n  static isAllowedToCancelLotBooking({ promotionLotId, userId }) {\n    const { attributedTo } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      attributedTo: { _id: 1 },\n    });\n\n    this.isAllowedToBookLotToCustomer({\n      promotionLotId,\n      loanId: attributedTo._id,\n      userId,\n    });\n  }\n\n  static isAllowedToSellLots({ promotionLotId, userId }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n      checkingFunction: isAllowedToSellPromotionLots,\n      errorMessage: 'Vous ne pouvez pas vendre des lots dans cette promotion',\n    });\n  }\n\n  static isAllowedToSellLotToCustomer({ promotionLotId, userId }) {\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const { promotion, attributedTo } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1, users: { _id: 1 } },\n      attributedTo: { _id: 1 },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: attributedTo._id },\n      user: {_id: 1},\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id,\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (\n      !isAllowedToSellPromotionLotToCustomer({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas vendre de lot à ce client');\n    }\n  }\n\n  static isAllowedToModifyAdditionalLot({ lotId, userId }) {\n    const { promotions } = LotService.safeFetchOne({\n      $filters: { _id: lotId },\n      promotions: { _id: 1 },\n    });\n\n    this.isAllowedToModifyLots({ promotionId: promotions._id, userId });\n  }\n\n  static isAllowedToRemoveAdditionalLot({ lotId, userId }) {\n    const { promotions } = LotService.safeFetchOne({\n      $filters: { _id: lotId },\n      promotions: { _id: 1 },\n    });\n\n    this.isAllowedToRemoveLots({ promotionId: promotions._id, userId });\n  }\n\n  static isAllowedToSeePromotionCustomer({ userId, promotionId, loanId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const loan = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      _id: 1,\n      user: { _id: 1 },\n    });\n    const anonymizer = makeLoanAnonymizer({ userId, promotionId });\n    if (anonymizer(loan).isAnonymized) {\n      Security.handleUnauthorized(\"Vous n'avez pas accès à ce client\");\n    }\n  }\n}\n\nexport default PromotionSecurity;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/collections/PromotionSecurity.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/security/collections/PromotionSecurity.js"}},"code":"let PromotionService;\nmodule.link(\"../../promotions/server/PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 0);\nlet PromotionLotService;\nmodule.link(\"../../promotionLots/server/PromotionLotService\", {\n  default(v) {\n    PromotionLotService = v;\n  }\n\n}, 1);\nlet PromotionOptionService;\nmodule.link(\"../../promotionOptions/server/PromotionOptionService\", {\n  default(v) {\n    PromotionOptionService = v;\n  }\n\n}, 2);\nlet UserService;\nmodule.link(\"../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 3);\nlet ROLES;\nmodule.link(\"../../users/userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 4);\nlet Security;\nmodule.link(\"../Security\", {\n  default(v) {\n    Security = v;\n  }\n\n}, 5);\nlet LoanSecurity;\nmodule.link(\"./LoanSecurity\", {\n  default(v) {\n    LoanSecurity = v;\n  }\n\n}, 6);\nlet isAllowedToInviteCustomersToPromotion, isAllowedToRemoveCustomerFromPromotion, isAllowedToModifyPromotion, isAllowedToManagePromotionDocuments, isAllowedToAddLotsToPromotion, isAllowedToModifyPromotionLots, isAllowedToRemovePromotionLots, isAllowedToViewPromotion, isAllowedToBookPromotionLots, isAllowedToBookPromotionLotToCustomer, isAllowedToSellPromotionLots, isAllowedToSellPromotionLotToCustomer;\nmodule.link(\"../clientSecurityHelpers\", {\n  isAllowedToInviteCustomersToPromotion(v) {\n    isAllowedToInviteCustomersToPromotion = v;\n  },\n\n  isAllowedToRemoveCustomerFromPromotion(v) {\n    isAllowedToRemoveCustomerFromPromotion = v;\n  },\n\n  isAllowedToModifyPromotion(v) {\n    isAllowedToModifyPromotion = v;\n  },\n\n  isAllowedToManagePromotionDocuments(v) {\n    isAllowedToManagePromotionDocuments = v;\n  },\n\n  isAllowedToAddLotsToPromotion(v) {\n    isAllowedToAddLotsToPromotion = v;\n  },\n\n  isAllowedToModifyPromotionLots(v) {\n    isAllowedToModifyPromotionLots = v;\n  },\n\n  isAllowedToRemovePromotionLots(v) {\n    isAllowedToRemovePromotionLots = v;\n  },\n\n  isAllowedToViewPromotion(v) {\n    isAllowedToViewPromotion = v;\n  },\n\n  isAllowedToBookPromotionLots(v) {\n    isAllowedToBookPromotionLots = v;\n  },\n\n  isAllowedToBookPromotionLotToCustomer(v) {\n    isAllowedToBookPromotionLotToCustomer = v;\n  },\n\n  isAllowedToSellPromotionLots(v) {\n    isAllowedToSellPromotionLots = v;\n  },\n\n  isAllowedToSellPromotionLotToCustomer(v) {\n    isAllowedToSellPromotionLotToCustomer = v;\n  }\n\n}, 7);\nlet LoanService;\nmodule.link(\"../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 8);\nlet getPromotionCustomerOwnerType, makeLoanAnonymizer;\nmodule.link(\"../../promotions/server/promotionServerHelpers\", {\n  getPromotionCustomerOwnerType(v) {\n    getPromotionCustomerOwnerType = v;\n  },\n\n  makeLoanAnonymizer(v) {\n    makeLoanAnonymizer = v;\n  }\n\n}, 9);\nlet LotService;\nmodule.link(\"../../lots/server/LotService\", {\n  default(v) {\n    LotService = v;\n  }\n\n}, 10);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass PromotionSecurity {\n  static checkPermissions({\n    promotionId,\n    userId,\n    checkingFunction,\n    errorMessage\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const promotion = PromotionService.safeFetchOne({\n      $filters: {\n        _id: promotionId\n      },\n      status: 1,\n      users: {\n        _id: 1\n      },\n      userLinks: {\n        _id: 1\n      }\n    });\n    const currentUser = UserService.safeFetchOne({\n      $filters: {\n        _id: userId\n      },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: {\n          _id: 1\n        }\n      },\n      organisations: {\n        users: {\n          _id: 1\n        }\n      }\n    });\n\n    if (!checkingFunction({\n      promotion,\n      currentUser\n    })) {\n      Security.handleUnauthorized(errorMessage || 'Checking permissions');\n    }\n  }\n\n  static hasAccessToPromotion({\n    promotionId,\n    userId\n  }) {\n    try {\n      this.isAllowedToView({\n        promotionId,\n        userId\n      });\n      return;\n    } catch (error) {\n      const hasPromotion = UserService.hasPromotion({\n        promotionId,\n        userId\n      });\n\n      if (!hasPromotion) {\n        Security.handleUnauthorized(\"Vous n'avez pas accès à cette promotion\");\n      }\n    }\n  }\n\n  static hasAccessToPromotionLot({\n    promotionLotId,\n    userId\n  }) {\n    this.hasAccessToPromotion({\n      promotionId: this.getPromotionIdFromPromotionLot({\n        promotionLotId\n      }),\n      userId\n    });\n  }\n\n  static hasAccessToPromotionOption({\n    promotionOptionId,\n    userId\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const {\n      loan,\n      promotionLots\n    } = PromotionOptionService.safeFetchOne({\n      $filters: {\n        _id: promotionOptionId\n      },\n      loan: {\n        _id: 1,\n        userId: 1\n      },\n      promotionLots: {\n        _id: 1\n      }\n    });\n\n    if (Security.hasRole(userId, ROLES.PRO)) {\n      this.hasAccessToPromotionLot(promotionLots[0]._id, userId);\n    } else {\n      LoanSecurity.isAllowedToUpdate(loan && loan._id);\n    }\n  }\n\n  static isAllowedToModify({\n    promotionId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotion,\n      errorMessage: 'Vous ne pouvez pas modifier cette promotion'\n    });\n  }\n\n  static isAllowedToManageDocuments({\n    promotionId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToManagePromotionDocuments,\n      errorMessage: 'Vous ne pouvez pas gérer les documents de cette promotion'\n    });\n  }\n\n  static isAllowedToManagePromotionLotDocuments({\n    propertyId,\n    userId\n  }) {\n    const {\n      promotion\n    } = PromotionLotService.safeFetchOne({\n      $filters: {\n        'propertyLinks._id': propertyId\n      },\n      promotion: {\n        _id: 1\n      }\n    });\n    this.isAllowedToManageDocuments({\n      promotionId: promotion._id,\n      userId\n    });\n  }\n\n  static isAllowedToAddLots({\n    promotionId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToAddLotsToPromotion,\n      errorMessage: 'Vous ne pouvez pas ajouter de lots à cette promotion'\n    });\n  }\n\n  static isAllowedToModifyLots({\n    promotionId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotionLots,\n      errorMessage: 'Vous ne pouvez pas modifier les lots de cette promotion'\n    });\n  }\n\n  static isAllowedToRemoveLots({\n    promotionId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToRemovePromotionLots,\n      errorMessage: 'Vous ne pouvez pas supprimer les lots de cette promotion'\n    });\n  }\n\n  static isAllowedToInviteCustomers({\n    promotionId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToInviteCustomersToPromotion,\n      errorMessage: 'Vous ne pouvez pas inviter des clients à cette promotion'\n    });\n  }\n\n  static isAllowedToRemoveCustomer({\n    promotionId,\n    loanId,\n    userId\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const promotion = PromotionService.safeFetchOne({\n      $filters: {\n        _id: promotionId\n      },\n      status: 1,\n      users: {\n        _id: 1\n      },\n      userLinks: {\n        _id: 1\n      }\n    });\n    const currentUser = UserService.safeFetchOne({\n      $filters: {\n        _id: userId\n      },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: {\n          _id: 1\n        }\n      },\n      organisations: {\n        users: {\n          _id: 1\n        }\n      }\n    });\n    const loan = LoanService.safeFetchOne({\n      $filters: {\n        _id: loanId\n      },\n      user: {\n        _id: 1\n      }\n    });\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId\n    });\n\n    if (!isAllowedToRemoveCustomerFromPromotion({\n      promotion,\n      currentUser,\n      customerOwnerType\n    })) {\n      Security.handleUnauthorized('Vous ne pouvez pas supprimer ce client de cette promotion');\n    }\n  }\n\n  static isAllowedToView({\n    promotionId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToViewPromotion,\n      errorMessage: \"Vous n'avez pas accès à cette promotion\"\n    });\n  }\n\n  static isAllowedToViewPromotionLot({\n    promotionLotId,\n    userId\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    this.isAllowedToView({\n      promotionId: this.getPromotionIdFromPromotionLot({\n        promotionLotId\n      }),\n      userId\n    });\n  }\n\n  static isAllowedToViewPromotionOption({\n    promotionOptionId,\n    userId\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const {\n      promotionLots = []\n    } = PromotionOptionService.safeFetchOne({\n      $filters: {\n        _id: promotionOptionId\n      },\n      promotionLots: {\n        _id: 1\n      }\n    });\n    promotionLots.forEach(({\n      _id: promotionLotId\n    }) => {\n      this.isAllowedToViewPromotionLot({\n        promotionLotId,\n        userId\n      });\n    });\n  }\n\n  static isAllowedToModifyPromotionLot({\n    promotionLotId,\n    userId\n  }) {\n    this.isAllowedToModifyLots({\n      promotionId: this.getPromotionIdFromPromotionLot({\n        promotionLotId\n      }),\n      userId\n    });\n  }\n\n  static isAllowedToRemovePromotionLot({\n    promotionLotId,\n    userId\n  }) {\n    this.isAllowedToRemoveLots({\n      promotionId: this.getPromotionIdFromPromotionLot({\n        promotionLotId\n      }),\n      userId\n    });\n  }\n\n  static isAllowedToBookLots({\n    promotionLotId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({\n        promotionLotId\n      }),\n      userId,\n      checkingFunction: isAllowedToBookPromotionLots,\n      errorMessage: 'Vous ne pouvez pas réserver des lots dans cette promotion'\n    });\n  }\n\n  static isAllowedToBookLotToCustomer({\n    promotionLotId,\n    loanId,\n    userId\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const {\n      promotion\n    } = PromotionLotService.safeFetchOne({\n      $filters: {\n        _id: promotionLotId\n      },\n      promotion: {\n        _id: 1,\n        users: {\n          _id: 1\n        }\n      }\n    });\n    const loan = LoanService.safeFetchOne({\n      $filters: {\n        _id: loanId\n      },\n      user: {\n        _id: 1\n      }\n    });\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id\n    });\n    const currentUser = UserService.safeFetchOne({\n      $filters: {\n        _id: userId\n      },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: {\n          _id: 1\n        }\n      },\n      organisations: {\n        users: {\n          _id: 1\n        }\n      }\n    });\n\n    if (!isAllowedToBookPromotionLotToCustomer({\n      promotion,\n      currentUser,\n      customerOwnerType\n    })) {\n      Security.handleUnauthorized('Vous ne pouvez pas réserver de lot à ce client');\n    }\n  }\n\n  static isAllowedToCancelLotBooking({\n    promotionLotId,\n    userId\n  }) {\n    const {\n      attributedTo\n    } = PromotionLotService.safeFetchOne({\n      $filters: {\n        _id: promotionLotId\n      },\n      attributedTo: {\n        _id: 1\n      }\n    });\n    this.isAllowedToBookLotToCustomer({\n      promotionLotId,\n      loanId: attributedTo._id,\n      userId\n    });\n  }\n\n  static isAllowedToSellLots({\n    promotionLotId,\n    userId\n  }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({\n        promotionLotId\n      }),\n      userId,\n      checkingFunction: isAllowedToSellPromotionLots,\n      errorMessage: 'Vous ne pouvez pas vendre des lots dans cette promotion'\n    });\n  }\n\n  static isAllowedToSellLotToCustomer({\n    promotionLotId,\n    userId\n  }) {\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const {\n      promotion,\n      attributedTo\n    } = PromotionLotService.safeFetchOne({\n      $filters: {\n        _id: promotionLotId\n      },\n      promotion: {\n        _id: 1,\n        users: {\n          _id: 1\n        }\n      },\n      attributedTo: {\n        _id: 1\n      }\n    });\n    const loan = LoanService.safeFetchOne({\n      $filters: {\n        _id: attributedTo._id\n      },\n      user: {\n        _id: 1\n      }\n    });\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id\n    });\n    const currentUser = UserService.safeFetchOne({\n      $filters: {\n        _id: userId\n      },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: {\n          _id: 1\n        }\n      },\n      organisations: {\n        users: {\n          _id: 1\n        }\n      }\n    });\n\n    if (!isAllowedToSellPromotionLotToCustomer({\n      promotion,\n      currentUser,\n      customerOwnerType\n    })) {\n      Security.handleUnauthorized('Vous ne pouvez pas vendre de lot à ce client');\n    }\n  }\n\n  static isAllowedToModifyAdditionalLot({\n    lotId,\n    userId\n  }) {\n    const {\n      promotions\n    } = LotService.safeFetchOne({\n      $filters: {\n        _id: lotId\n      },\n      promotions: {\n        _id: 1\n      }\n    });\n    this.isAllowedToModifyLots({\n      promotionId: promotions._id,\n      userId\n    });\n  }\n\n  static isAllowedToRemoveAdditionalLot({\n    lotId,\n    userId\n  }) {\n    const {\n      promotions\n    } = LotService.safeFetchOne({\n      $filters: {\n        _id: lotId\n      },\n      promotions: {\n        _id: 1\n      }\n    });\n    this.isAllowedToRemoveLots({\n      promotionId: promotions._id,\n      userId\n    });\n  }\n\n  static isAllowedToSeePromotionCustomer({\n    userId,\n    promotionId,\n    loanId\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const loan = LoanService.fetchOne({\n      $filters: {\n        _id: loanId\n      },\n      _id: 1,\n      user: {\n        _id: 1\n      }\n    });\n    const anonymizer = makeLoanAnonymizer({\n      userId,\n      promotionId\n    });\n\n    if (anonymizer(loan).isAnonymized) {\n      Security.handleUnauthorized(\"Vous n'avez pas accès à ce client\");\n    }\n  }\n\n}\n\n_defineProperty(PromotionSecurity, \"getPromotionIdFromPromotionLot\", ({\n  promotionLotId\n}) => {\n  const {\n    promotion = {}\n  } = PromotionLotService.safeFetchOne({\n    $filters: {\n      _id: promotionLotId\n    },\n    promotion: {\n      _id: 1\n    }\n  });\n  return promotion._id;\n});\n\nmodule.exportDefault(PromotionSecurity);","map":{"version":3,"sources":["imports/core/api/security/collections/PromotionSecurity.js"],"names":["PromotionSecurity","errorMessage","Security","promotion","$filters","_id","promotionId","status","users","userLinks","currentUser","userId","promotions","permissions","organisations","checkingFunction","promotionLotId","hasPromotion","promotionLots","promotionOptionId","loan","ROLES","LoanSecurity","propertyId","loanId","user","customerOwnerType","getPromotionCustomerOwnerType","customerId","isAllowedToRemoveCustomerFromPromotion","isAllowedToBookPromotionLotToCustomer","attributedTo","isAllowedToSellPromotionLotToCustomer","lotId","anonymizer","makeLoanAnonymizer"],"mappings":"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","sourcesContent":["import PromotionService from '../../promotions/server/PromotionService';\nimport PromotionLotService from '../../promotionLots/server/PromotionLotService';\nimport PromotionOptionService from '../../promotionOptions/server/PromotionOptionService';\nimport UserService from '../../users/server/UserService';\nimport { ROLES } from '../../users/userConstants';\nimport Security from '../Security';\nimport LoanSecurity from './LoanSecurity';\nimport {\n  isAllowedToInviteCustomersToPromotion,\n  isAllowedToRemoveCustomerFromPromotion,\n  isAllowedToModifyPromotion,\n  isAllowedToManagePromotionDocuments,\n  isAllowedToAddLotsToPromotion,\n  isAllowedToModifyPromotionLots,\n  isAllowedToRemovePromotionLots,\n  isAllowedToViewPromotion,\n  isAllowedToBookPromotionLots,\n  isAllowedToBookPromotionLotToCustomer,\n  isAllowedToSellPromotionLots,\n  isAllowedToSellPromotionLotToCustomer,\n} from '../clientSecurityHelpers';\nimport LoanService from '../../loans/server/LoanService';\nimport {\n  getPromotionCustomerOwnerType,\n  makeLoanAnonymizer,\n} from '../../promotions/server/promotionServerHelpers';\nimport LotService from '../../lots/server/LotService';\n\nclass PromotionSecurity {\n  static checkPermissions({\n    promotionId,\n    userId,\n    checkingFunction,\n    errorMessage,\n  }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n    const promotion = PromotionService.safeFetchOne({\n      $filters: { _id: promotionId },\n      status: 1,\n      users: { _id: 1 },\n      userLinks: { _id: 1 },\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (!checkingFunction({ promotion, currentUser })) {\n      Security.handleUnauthorized(errorMessage || 'Checking permissions');\n    }\n  }\n\n  static getPromotionIdFromPromotionLot = ({ promotionLotId }) => {\n    const { promotion = {} } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1 },\n    });\n\n    return promotion._id;\n  };\n\n  static hasAccessToPromotion({ promotionId, userId }) {\n    try {\n      this.isAllowedToView({ promotionId, userId });\n      return;\n    } catch (error) {\n      const hasPromotion = UserService.hasPromotion({ promotionId, userId });\n\n      if (!hasPromotion) {\n        Security.handleUnauthorized(\"Vous n'avez pas accès à cette promotion\");\n      }\n    }\n  }\n\n  static hasAccessToPromotionLot({ promotionLotId, userId }) {\n    this.hasAccessToPromotion({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static hasAccessToPromotionOption({ promotionOptionId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { loan, promotionLots } = PromotionOptionService.safeFetchOne({\n      $filters: { _id: promotionOptionId },\n      loan: { _id: 1, userId: 1 },\n      promotionLots: { _id: 1 },\n    });\n\n    if (Security.hasRole(userId, ROLES.PRO)) {\n      this.hasAccessToPromotionLot(promotionLots[0]._id, userId);\n    } else {\n      LoanSecurity.isAllowedToUpdate(loan && loan._id);\n    }\n  }\n\n  static isAllowedToModify({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotion,\n      errorMessage: 'Vous ne pouvez pas modifier cette promotion',\n    });\n  }\n\n  static isAllowedToManageDocuments({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToManagePromotionDocuments,\n      errorMessage: 'Vous ne pouvez pas gérer les documents de cette promotion',\n    });\n  }\n\n  static isAllowedToManagePromotionLotDocuments({ propertyId, userId }) {\n    const { promotion } = PromotionLotService.safeFetchOne({\n      $filters: { 'propertyLinks._id': propertyId },\n      promotion: { _id: 1 },\n    });\n\n    this.isAllowedToManageDocuments({ promotionId: promotion._id, userId });\n  }\n\n  static isAllowedToAddLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToAddLotsToPromotion,\n      errorMessage: 'Vous ne pouvez pas ajouter de lots à cette promotion',\n    });\n  }\n\n  static isAllowedToModifyLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToModifyPromotionLots,\n      errorMessage: 'Vous ne pouvez pas modifier les lots de cette promotion',\n    });\n  }\n\n  static isAllowedToRemoveLots({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToRemovePromotionLots,\n      errorMessage: 'Vous ne pouvez pas supprimer les lots de cette promotion',\n    });\n  }\n\n  static isAllowedToInviteCustomers({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToInviteCustomersToPromotion,\n      errorMessage: 'Vous ne pouvez pas inviter des clients à cette promotion',\n    });\n  }\n\n  static isAllowedToRemoveCustomer({ promotionId, loanId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const promotion = PromotionService.safeFetchOne({\n      $filters: { _id: promotionId },\n      status: 1,\n      users: { _id: 1 },\n      userLinks: { _id: 1 },\n    });\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: loanId },\n      user: { _id: 1 },\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId,\n    });\n\n    if (\n      !isAllowedToRemoveCustomerFromPromotion({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas supprimer ce client de cette promotion');\n    }\n  }\n\n  static isAllowedToView({ promotionId, userId }) {\n    this.checkPermissions({\n      promotionId,\n      userId,\n      checkingFunction: isAllowedToViewPromotion,\n      errorMessage: \"Vous n'avez pas accès à cette promotion\",\n    });\n  }\n\n  static isAllowedToViewPromotionLot({ promotionLotId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    this.isAllowedToView({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToViewPromotionOption({ promotionOptionId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { promotionLots = [] } = PromotionOptionService.safeFetchOne({\n      $filters: { _id: promotionOptionId },\n      promotionLots: { _id: 1 },\n    });\n\n    promotionLots.forEach(({ _id: promotionLotId }) => {\n      this.isAllowedToViewPromotionLot({ promotionLotId, userId });\n    });\n  }\n\n  static isAllowedToModifyPromotionLot({ promotionLotId, userId }) {\n    this.isAllowedToModifyLots({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToRemovePromotionLot({ promotionLotId, userId }) {\n    this.isAllowedToRemoveLots({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n    });\n  }\n\n  static isAllowedToBookLots({ promotionLotId, userId }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n      checkingFunction: isAllowedToBookPromotionLots,\n      errorMessage: 'Vous ne pouvez pas réserver des lots dans cette promotion',\n    });\n  }\n\n  static isAllowedToBookLotToCustomer({ promotionLotId, loanId, userId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const { promotion } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1, users: { _id: 1 } },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: loanId },\n      user: {_id: 1},\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id,\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (\n      !isAllowedToBookPromotionLotToCustomer({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas réserver de lot à ce client');\n    }\n  }\n\n  static isAllowedToCancelLotBooking({ promotionLotId, userId }) {\n    const { attributedTo } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      attributedTo: { _id: 1 },\n    });\n\n    this.isAllowedToBookLotToCustomer({\n      promotionLotId,\n      loanId: attributedTo._id,\n      userId,\n    });\n  }\n\n  static isAllowedToSellLots({ promotionLotId, userId }) {\n    this.checkPermissions({\n      promotionId: this.getPromotionIdFromPromotionLot({ promotionLotId }),\n      userId,\n      checkingFunction: isAllowedToSellPromotionLots,\n      errorMessage: 'Vous ne pouvez pas vendre des lots dans cette promotion',\n    });\n  }\n\n  static isAllowedToSellLotToCustomer({ promotionLotId, userId }) {\n    if (Security.currentUserIsAdmin()) {\n      return;\n    }\n\n    const { promotion, attributedTo } = PromotionLotService.safeFetchOne({\n      $filters: { _id: promotionLotId },\n      promotion: { _id: 1, users: { _id: 1 } },\n      attributedTo: { _id: 1 },\n    });\n\n    const loan = LoanService.safeFetchOne({\n      $filters: { _id: attributedTo._id },\n      user: {_id: 1},\n    });\n\n    const customerOwnerType = getPromotionCustomerOwnerType({\n      customerId: loan.user._id,\n      userId,\n      promotionId: promotion._id,\n    });\n\n    const currentUser = UserService.safeFetchOne({\n      $filters: { _id: userId },\n      promotions: {\n        permissions: 1,\n        status: 1,\n        users: { _id: 1 },\n      },\n      organisations: { users: { _id: 1 } },\n    });\n\n    if (\n      !isAllowedToSellPromotionLotToCustomer({\n        promotion,\n        currentUser,\n        customerOwnerType,\n      })\n    ) {\n      Security.handleUnauthorized('Vous ne pouvez pas vendre de lot à ce client');\n    }\n  }\n\n  static isAllowedToModifyAdditionalLot({ lotId, userId }) {\n    const { promotions } = LotService.safeFetchOne({\n      $filters: { _id: lotId },\n      promotions: { _id: 1 },\n    });\n\n    this.isAllowedToModifyLots({ promotionId: promotions._id, userId });\n  }\n\n  static isAllowedToRemoveAdditionalLot({ lotId, userId }) {\n    const { promotions } = LotService.safeFetchOne({\n      $filters: { _id: lotId },\n      promotions: { _id: 1 },\n    });\n\n    this.isAllowedToRemoveLots({ promotionId: promotions._id, userId });\n  }\n\n  static isAllowedToSeePromotionCustomer({ userId, promotionId, loanId }) {\n    if (Security.isUserAdmin(userId)) {\n      return;\n    }\n\n    const loan = LoanService.fetchOne({\n      $filters: { _id: loanId },\n      _id: 1,\n      user: { _id: 1 },\n    });\n    const anonymizer = makeLoanAnonymizer({ userId, promotionId });\n    if (anonymizer(loan).isAnonymized) {\n      Security.handleUnauthorized(\"Vous n'avez pas accès à ce client\");\n    }\n  }\n}\n\nexport default PromotionSecurity;\n"]},"sourceType":"script","hash":"0f1f958493842ab8868cc38f8969027afa8988a2"}

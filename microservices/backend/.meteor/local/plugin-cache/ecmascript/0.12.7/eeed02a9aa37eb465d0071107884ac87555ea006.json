{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/updateWatchers/server/test/UpdateWatcherService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/updateWatchers/server/test/UpdateWatcherService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/updateWatchers/server/test/UpdateWatcherService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/updateWatchers/server/test/UpdateWatcherService.test.js"],"names":["expect","resetDatabase","Mongo","Factory","UpdateWatcherService","collectionName","Todos","Collection","describe","beforeEach","it","hook","addUpdateWatching","collection","fields","todoId","insert","title","update","updateWatcher","findOne","to","deep","include","docId","updatedFields","fieldName","previousValue","currentValue","remove","equal","checked","description","names","testAdmin","create","emails","address","verified","testUser","assignedEmployeeId","_id","roles","borrowerId","firstName","lastName","updateWatcherId","userId","processUpdateWatcher","fetch","length","formatUpdatedFields","formatValue","undefined","Date","a","b","formatArrayDiff","id","yo"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Mongo } from 'meteor/mongo';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport UpdateWatcherService from '../UpdateWatcherService';\n\nconst collectionName = 'todos_test';\nconst Todos = new Mongo.Collection(collectionName);\n\ndescribe('UpdateWatcherService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('addUpdateWatching', () => {\n    it('inserts new updateWatchers', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title'],\n      });\n\n      const todoId = Todos.insert({ title: 'Yo!' });\n\n      Todos.update(todoId, { title: 'Ha' });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher).to.deep.include({\n        docId: todoId,\n        collection: collectionName,\n        updatedFields: [\n          { fieldName: 'title', previousValue: 'Yo!', currentValue: 'Ha' },\n        ],\n      });\n\n      hook.remove();\n    });\n\n    it('updates existing updateWatchers', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title'],\n      });\n\n      const todoId = Todos.insert({ title: 'Yo!' });\n\n      Todos.update(todoId, { title: 'Ha1' });\n      Todos.update(todoId, { title: 'Ha2' });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher.updatedFields).to.deep.equal([\n        { fieldName: 'title', previousValue: 'Yo!', currentValue: 'Ha2' },\n      ]);\n\n      hook.remove();\n    });\n\n    it('updates existing updateWatchers (more advanced)', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title', 'description', 'checked'],\n      });\n\n      const todoId = Todos.insert({ title: 'Yo!', checked: false });\n\n      Todos.update(todoId, { title: 'Ha1', checked: true });\n      Todos.update(todoId, { title: 'Ha2', description: 'hi' });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher.updatedFields).to.deep.equal([\n        { fieldName: 'title', previousValue: 'Yo!', currentValue: 'Ha2' },\n        { fieldName: 'checked', previousValue: false, currentValue: true },\n        { fieldName: 'description', currentValue: 'hi' },\n      ]);\n\n      hook.remove();\n    });\n\n    it('creates an updateWatcher with arrays', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['names'],\n      });\n\n      const todoId = Todos.insert({ names: ['ha1', 'ha2'] });\n\n      Todos.update(todoId, { names: ['ha1', 'ha3'] });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher).to.deep.include({\n        docId: todoId,\n        collection: collectionName,\n        updatedFields: [\n          {\n            fieldName: 'names',\n            previousValue: ['ha1', 'ha2'],\n            currentValue: ['ha1', 'ha3'],\n          },\n        ],\n      });\n\n      hook.remove();\n    });\n  });\n\n  describe('processUpdateWatcher', () => {\n    it('sends a notification to the assignee', () => {\n      const testAdmin = Factory.create('admin', {\n        emails: [{ address: 'test@e-potek.ch', verified: false }],\n      });\n      const testUser = Factory.create('user', {\n        assignedEmployeeId: testAdmin._id,\n        roles: [],\n      });\n      const borrowerId = Factory.create('borrower', {\n        firstName: 'John',\n        lastName: 'Doe',\n      })._id;\n\n      const updateWatcherId = UpdateWatcherService.insert({\n        userId: testUser._id,\n        collection: 'borrowers',\n        docId: borrowerId,\n        updatedFields: [\n          {\n            fieldName: 'firstName',\n            previousValue: 'Joe',\n            currentValue: 'John',\n          },\n          {\n            fieldName: 'lastName',\n            previousValue: 'Duh',\n            currentValue: 'Doe',\n          },\n        ],\n      });\n\n      const updateWatcher = UpdateWatcherService.findOne(updateWatcherId);\n\n      UpdateWatcherService.processUpdateWatcher(updateWatcher);\n\n      expect(UpdateWatcherService.fetch({}).length).to.equal(0);\n    });\n  });\n\n  describe('formatUpdatedFields', () => {\n    it('does not fail when formatting value', () => {\n      expect(UpdateWatcherService.formatUpdatedFields([\n        { currentValue: 100, fieldName: 'value' },\n      ])).to.equal(\"*Prix d'achat*: 100\");\n    });\n  });\n\n  describe('formatValue', () => {\n    it('renders booleans properly', () => {\n      expect(UpdateWatcherService.formatValue(true)).to.equal('Oui');\n      expect(UpdateWatcherService.formatValue(false)).to.equal('Non');\n    });\n\n    it('renders falsy values properly', () => {\n      expect(UpdateWatcherService.formatValue(null)).to.equal('-');\n      expect(UpdateWatcherService.formatValue(undefined)).to.equal('-');\n    });\n\n    it('formats numbers properly if they are small or large', () => {\n      expect(UpdateWatcherService.formatValue(0)).to.equal('0');\n      expect(UpdateWatcherService.formatValue(1000)).to.equal('1 000');\n      expect(UpdateWatcherService.formatValue(0.01)).to.equal('1.00%');\n    });\n\n    it('formats numbers properly if they are small or large', () => {\n      expect(UpdateWatcherService.formatValue(new Date('December 17, 1995 03:24:00'))).to.equal('17/12/1995');\n    });\n\n    it('formats arrays properly', () => {\n      expect(UpdateWatcherService.formatValue(['a', 'b'])).to.equal('a\\nb');\n    });\n\n    it('formats objects properly', () => {\n      expect(UpdateWatcherService.formatValue({ a: 10, b: 'yo' }, 'obj')).to.equal('*Forms.obj.a*: 10, *Forms.obj.b*: yo');\n    });\n  });\n\n  describe('formatArrayDiff', () => {\n    it('only shows the difference', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        ['ha1', 'ha2'],\n        ['ha1', 'ha3'],\n      )).to.equal('*Forms.arr*:\\n`2`\\nha2 -> ha3');\n    });\n\n    it('only shows the difference in objects when added', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        [{ id: 'ha1' }, { id: 'ha2' }],\n        [{ id: 'ha1' }, { id: 'ha3' }, { id: 'ha4' }],\n      )).to.equal('*Forms.arr*:\\n`2`\\n*Forms.arr.id*: ha2 -> ha3\\n`3`\\n*Forms.arr.id*: ha4');\n    });\n\n    it('only shows the difference in objects when added and new keys', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        [{ a: 'b', id: 'ha2' }],\n        [{ a: 'b', id: 'ha3', yo: 'dude' }],\n      )).to.equal('*Forms.arr*:\\n`1`\\n*Forms.arr.id*: ha2 -> ha3\\n*Forms.arr.yo*: dude');\n    });\n\n    it('only shows the difference in objects when removed', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        [{ id: 'ha1' }, { id: 'ha2' }],\n        [{ id: 'ha1' }],\n      )).to.equal('*Forms.arr*:\\n`2`\\n*Forms.arr.id*: ha2 -> _supprimé_');\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/updateWatchers/server/test/UpdateWatcherService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/updateWatchers/server/test/UpdateWatcherService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 3);\nlet UpdateWatcherService;\nmodule.link(\"../UpdateWatcherService\", {\n  default(v) {\n    UpdateWatcherService = v;\n  }\n\n}, 4);\nconst collectionName = 'todos_test';\nconst Todos = new Mongo.Collection(collectionName);\ndescribe('UpdateWatcherService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('addUpdateWatching', () => {\n    it('inserts new updateWatchers', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title']\n      });\n      const todoId = Todos.insert({\n        title: 'Yo!'\n      });\n      Todos.update(todoId, {\n        title: 'Ha'\n      });\n      const updateWatcher = UpdateWatcherService.findOne({});\n      expect(updateWatcher).to.deep.include({\n        docId: todoId,\n        collection: collectionName,\n        updatedFields: [{\n          fieldName: 'title',\n          previousValue: 'Yo!',\n          currentValue: 'Ha'\n        }]\n      });\n      hook.remove();\n    });\n    it('updates existing updateWatchers', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title']\n      });\n      const todoId = Todos.insert({\n        title: 'Yo!'\n      });\n      Todos.update(todoId, {\n        title: 'Ha1'\n      });\n      Todos.update(todoId, {\n        title: 'Ha2'\n      });\n      const updateWatcher = UpdateWatcherService.findOne({});\n      expect(updateWatcher.updatedFields).to.deep.equal([{\n        fieldName: 'title',\n        previousValue: 'Yo!',\n        currentValue: 'Ha2'\n      }]);\n      hook.remove();\n    });\n    it('updates existing updateWatchers (more advanced)', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title', 'description', 'checked']\n      });\n      const todoId = Todos.insert({\n        title: 'Yo!',\n        checked: false\n      });\n      Todos.update(todoId, {\n        title: 'Ha1',\n        checked: true\n      });\n      Todos.update(todoId, {\n        title: 'Ha2',\n        description: 'hi'\n      });\n      const updateWatcher = UpdateWatcherService.findOne({});\n      expect(updateWatcher.updatedFields).to.deep.equal([{\n        fieldName: 'title',\n        previousValue: 'Yo!',\n        currentValue: 'Ha2'\n      }, {\n        fieldName: 'checked',\n        previousValue: false,\n        currentValue: true\n      }, {\n        fieldName: 'description',\n        currentValue: 'hi'\n      }]);\n      hook.remove();\n    });\n    it('creates an updateWatcher with arrays', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['names']\n      });\n      const todoId = Todos.insert({\n        names: ['ha1', 'ha2']\n      });\n      Todos.update(todoId, {\n        names: ['ha1', 'ha3']\n      });\n      const updateWatcher = UpdateWatcherService.findOne({});\n      expect(updateWatcher).to.deep.include({\n        docId: todoId,\n        collection: collectionName,\n        updatedFields: [{\n          fieldName: 'names',\n          previousValue: ['ha1', 'ha2'],\n          currentValue: ['ha1', 'ha3']\n        }]\n      });\n      hook.remove();\n    });\n  });\n  describe('processUpdateWatcher', () => {\n    it('sends a notification to the assignee', () => {\n      const testAdmin = Factory.create('admin', {\n        emails: [{\n          address: 'test@e-potek.ch',\n          verified: false\n        }]\n      });\n      const testUser = Factory.create('user', {\n        assignedEmployeeId: testAdmin._id,\n        roles: []\n      });\n\n      const borrowerId = Factory.create('borrower', {\n        firstName: 'John',\n        lastName: 'Doe'\n      })._id;\n\n      const updateWatcherId = UpdateWatcherService.insert({\n        userId: testUser._id,\n        collection: 'borrowers',\n        docId: borrowerId,\n        updatedFields: [{\n          fieldName: 'firstName',\n          previousValue: 'Joe',\n          currentValue: 'John'\n        }, {\n          fieldName: 'lastName',\n          previousValue: 'Duh',\n          currentValue: 'Doe'\n        }]\n      });\n      const updateWatcher = UpdateWatcherService.findOne(updateWatcherId);\n      UpdateWatcherService.processUpdateWatcher(updateWatcher);\n      expect(UpdateWatcherService.fetch({}).length).to.equal(0);\n    });\n  });\n  describe('formatUpdatedFields', () => {\n    it('does not fail when formatting value', () => {\n      expect(UpdateWatcherService.formatUpdatedFields([{\n        currentValue: 100,\n        fieldName: 'value'\n      }])).to.equal(\"*Prix d'achat*: 100\");\n    });\n  });\n  describe('formatValue', () => {\n    it('renders booleans properly', () => {\n      expect(UpdateWatcherService.formatValue(true)).to.equal('Oui');\n      expect(UpdateWatcherService.formatValue(false)).to.equal('Non');\n    });\n    it('renders falsy values properly', () => {\n      expect(UpdateWatcherService.formatValue(null)).to.equal('-');\n      expect(UpdateWatcherService.formatValue(undefined)).to.equal('-');\n    });\n    it('formats numbers properly if they are small or large', () => {\n      expect(UpdateWatcherService.formatValue(0)).to.equal('0');\n      expect(UpdateWatcherService.formatValue(1000)).to.equal('1 000');\n      expect(UpdateWatcherService.formatValue(0.01)).to.equal('1.00%');\n    });\n    it('formats numbers properly if they are small or large', () => {\n      expect(UpdateWatcherService.formatValue(new Date('December 17, 1995 03:24:00'))).to.equal('17/12/1995');\n    });\n    it('formats arrays properly', () => {\n      expect(UpdateWatcherService.formatValue(['a', 'b'])).to.equal('a\\nb');\n    });\n    it('formats objects properly', () => {\n      expect(UpdateWatcherService.formatValue({\n        a: 10,\n        b: 'yo'\n      }, 'obj')).to.equal('*Forms.obj.a*: 10, *Forms.obj.b*: yo');\n    });\n  });\n  describe('formatArrayDiff', () => {\n    it('only shows the difference', () => {\n      expect(UpdateWatcherService.formatArrayDiff('arr', ['ha1', 'ha2'], ['ha1', 'ha3'])).to.equal('*Forms.arr*:\\n`2`\\nha2 -> ha3');\n    });\n    it('only shows the difference in objects when added', () => {\n      expect(UpdateWatcherService.formatArrayDiff('arr', [{\n        id: 'ha1'\n      }, {\n        id: 'ha2'\n      }], [{\n        id: 'ha1'\n      }, {\n        id: 'ha3'\n      }, {\n        id: 'ha4'\n      }])).to.equal('*Forms.arr*:\\n`2`\\n*Forms.arr.id*: ha2 -> ha3\\n`3`\\n*Forms.arr.id*: ha4');\n    });\n    it('only shows the difference in objects when added and new keys', () => {\n      expect(UpdateWatcherService.formatArrayDiff('arr', [{\n        a: 'b',\n        id: 'ha2'\n      }], [{\n        a: 'b',\n        id: 'ha3',\n        yo: 'dude'\n      }])).to.equal('*Forms.arr*:\\n`1`\\n*Forms.arr.id*: ha2 -> ha3\\n*Forms.arr.yo*: dude');\n    });\n    it('only shows the difference in objects when removed', () => {\n      expect(UpdateWatcherService.formatArrayDiff('arr', [{\n        id: 'ha1'\n      }, {\n        id: 'ha2'\n      }], [{\n        id: 'ha1'\n      }])).to.equal('*Forms.arr*:\\n`2`\\n*Forms.arr.id*: ha2 -> _supprimé_');\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/updateWatchers/server/test/UpdateWatcherService.test.js"],"names":["collectionName","Todos","Mongo","describe","beforeEach","resetDatabase","it","hook","collection","fields","todoId","title","updateWatcher","UpdateWatcherService","expect","docId","updatedFields","fieldName","previousValue","currentValue","checked","description","names","testAdmin","emails","address","verified","testUser","assignedEmployeeId","roles","borrowerId","firstName","lastName","updateWatcherId","userId","a","b","id","yo"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Mongo } from 'meteor/mongo';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport UpdateWatcherService from '../UpdateWatcherService';\n\nconst collectionName = 'todos_test';\nconst Todos = new Mongo.Collection(collectionName);\n\ndescribe('UpdateWatcherService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('addUpdateWatching', () => {\n    it('inserts new updateWatchers', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title'],\n      });\n\n      const todoId = Todos.insert({ title: 'Yo!' });\n\n      Todos.update(todoId, { title: 'Ha' });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher).to.deep.include({\n        docId: todoId,\n        collection: collectionName,\n        updatedFields: [\n          { fieldName: 'title', previousValue: 'Yo!', currentValue: 'Ha' },\n        ],\n      });\n\n      hook.remove();\n    });\n\n    it('updates existing updateWatchers', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title'],\n      });\n\n      const todoId = Todos.insert({ title: 'Yo!' });\n\n      Todos.update(todoId, { title: 'Ha1' });\n      Todos.update(todoId, { title: 'Ha2' });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher.updatedFields).to.deep.equal([\n        { fieldName: 'title', previousValue: 'Yo!', currentValue: 'Ha2' },\n      ]);\n\n      hook.remove();\n    });\n\n    it('updates existing updateWatchers (more advanced)', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['title', 'description', 'checked'],\n      });\n\n      const todoId = Todos.insert({ title: 'Yo!', checked: false });\n\n      Todos.update(todoId, { title: 'Ha1', checked: true });\n      Todos.update(todoId, { title: 'Ha2', description: 'hi' });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher.updatedFields).to.deep.equal([\n        { fieldName: 'title', previousValue: 'Yo!', currentValue: 'Ha2' },\n        { fieldName: 'checked', previousValue: false, currentValue: true },\n        { fieldName: 'description', currentValue: 'hi' },\n      ]);\n\n      hook.remove();\n    });\n\n    it('creates an updateWatcher with arrays', () => {\n      const hook = UpdateWatcherService.addUpdateWatching({\n        collection: Todos,\n        fields: ['names'],\n      });\n\n      const todoId = Todos.insert({ names: ['ha1', 'ha2'] });\n\n      Todos.update(todoId, { names: ['ha1', 'ha3'] });\n\n      const updateWatcher = UpdateWatcherService.findOne({});\n\n      expect(updateWatcher).to.deep.include({\n        docId: todoId,\n        collection: collectionName,\n        updatedFields: [\n          {\n            fieldName: 'names',\n            previousValue: ['ha1', 'ha2'],\n            currentValue: ['ha1', 'ha3'],\n          },\n        ],\n      });\n\n      hook.remove();\n    });\n  });\n\n  describe('processUpdateWatcher', () => {\n    it('sends a notification to the assignee', () => {\n      const testAdmin = Factory.create('admin', {\n        emails: [{ address: 'test@e-potek.ch', verified: false }],\n      });\n      const testUser = Factory.create('user', {\n        assignedEmployeeId: testAdmin._id,\n        roles: [],\n      });\n      const borrowerId = Factory.create('borrower', {\n        firstName: 'John',\n        lastName: 'Doe',\n      })._id;\n\n      const updateWatcherId = UpdateWatcherService.insert({\n        userId: testUser._id,\n        collection: 'borrowers',\n        docId: borrowerId,\n        updatedFields: [\n          {\n            fieldName: 'firstName',\n            previousValue: 'Joe',\n            currentValue: 'John',\n          },\n          {\n            fieldName: 'lastName',\n            previousValue: 'Duh',\n            currentValue: 'Doe',\n          },\n        ],\n      });\n\n      const updateWatcher = UpdateWatcherService.findOne(updateWatcherId);\n\n      UpdateWatcherService.processUpdateWatcher(updateWatcher);\n\n      expect(UpdateWatcherService.fetch({}).length).to.equal(0);\n    });\n  });\n\n  describe('formatUpdatedFields', () => {\n    it('does not fail when formatting value', () => {\n      expect(UpdateWatcherService.formatUpdatedFields([\n        { currentValue: 100, fieldName: 'value' },\n      ])).to.equal(\"*Prix d'achat*: 100\");\n    });\n  });\n\n  describe('formatValue', () => {\n    it('renders booleans properly', () => {\n      expect(UpdateWatcherService.formatValue(true)).to.equal('Oui');\n      expect(UpdateWatcherService.formatValue(false)).to.equal('Non');\n    });\n\n    it('renders falsy values properly', () => {\n      expect(UpdateWatcherService.formatValue(null)).to.equal('-');\n      expect(UpdateWatcherService.formatValue(undefined)).to.equal('-');\n    });\n\n    it('formats numbers properly if they are small or large', () => {\n      expect(UpdateWatcherService.formatValue(0)).to.equal('0');\n      expect(UpdateWatcherService.formatValue(1000)).to.equal('1 000');\n      expect(UpdateWatcherService.formatValue(0.01)).to.equal('1.00%');\n    });\n\n    it('formats numbers properly if they are small or large', () => {\n      expect(UpdateWatcherService.formatValue(new Date('December 17, 1995 03:24:00'))).to.equal('17/12/1995');\n    });\n\n    it('formats arrays properly', () => {\n      expect(UpdateWatcherService.formatValue(['a', 'b'])).to.equal('a\\nb');\n    });\n\n    it('formats objects properly', () => {\n      expect(UpdateWatcherService.formatValue({ a: 10, b: 'yo' }, 'obj')).to.equal('*Forms.obj.a*: 10, *Forms.obj.b*: yo');\n    });\n  });\n\n  describe('formatArrayDiff', () => {\n    it('only shows the difference', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        ['ha1', 'ha2'],\n        ['ha1', 'ha3'],\n      )).to.equal('*Forms.arr*:\\n`2`\\nha2 -> ha3');\n    });\n\n    it('only shows the difference in objects when added', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        [{ id: 'ha1' }, { id: 'ha2' }],\n        [{ id: 'ha1' }, { id: 'ha3' }, { id: 'ha4' }],\n      )).to.equal('*Forms.arr*:\\n`2`\\n*Forms.arr.id*: ha2 -> ha3\\n`3`\\n*Forms.arr.id*: ha4');\n    });\n\n    it('only shows the difference in objects when added and new keys', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        [{ a: 'b', id: 'ha2' }],\n        [{ a: 'b', id: 'ha3', yo: 'dude' }],\n      )).to.equal('*Forms.arr*:\\n`1`\\n*Forms.arr.id*: ha2 -> ha3\\n*Forms.arr.yo*: dude');\n    });\n\n    it('only shows the difference in objects when removed', () => {\n      expect(UpdateWatcherService.formatArrayDiff(\n        'arr',\n        [{ id: 'ha1' }, { id: 'ha2' }],\n        [{ id: 'ha1' }],\n      )).to.equal('*Forms.arr*:\\n`2`\\n*Forms.arr.id*: ha2 -> _supprimé_');\n    });\n  });\n});\n"]},"sourceType":"script","hash":"eeed02a9aa37eb465d0071107884ac87555ea006"}

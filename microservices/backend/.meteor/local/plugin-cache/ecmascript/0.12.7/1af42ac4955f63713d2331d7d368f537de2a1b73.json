{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/collection.app-test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/api/queries/test/collection.app-test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/collection.app-test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/queries/test/collection.app-test.js"],"names":["SimpleSchema","require","default","Mongo","Method","TestCollection","Collection","testCollectionSchema","value","Number","name","String","attachSchema","module","exports","query1","createQuery","$filter","filters","params","query2","query3","query4","$postFilter","results","map","res","_userId","testCollectionInsert","_id"],"mappings":"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","sourcesContent":["const SimpleSchema = require('simpl-schema').default;\n\nconst { Mongo } = require('meteor/mongo');\nconst { Method } = require('../../methods/methods');\n\nconst TestCollection = new Mongo.Collection('collectionTest');\nconst testCollectionSchema = new SimpleSchema({ value: Number, name: String });\nTestCollection.attachSchema(testCollectionSchema);\n\nmodule.exports = {\n  default: TestCollection,\n  query1: TestCollection.createQuery('TEST_QUERY_1', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    value: 1,\n    name: 1,\n  }),\n  query2: TestCollection.createQuery('TEST_QUERY_2', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    value: 1,\n    name: 1,\n  }),\n  query3: TestCollection.createQuery('TEST_QUERY_3', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    value: 1,\n    name: 1,\n  }),\n  query4: TestCollection.createQuery('TEST_QUERY_4', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    $postFilter(results, params) {\n      return results.map(res => ({ ...res, _userId: params._userId }));\n    },\n    value: 1,\n    name: 1,\n  }),\n  testCollectionInsert: new Method({\n    name: 'testCollectionInsert',\n    params: { value: Number, name: String, _id: String },\n  }),\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/queries/test/collection.app-test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/queries/test/collection.app-test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nconst SimpleSchema = require('simpl-schema').default;\n\nconst {\n  Mongo\n} = require('meteor/mongo');\n\nconst {\n  Method\n} = require(\"../../methods/methods\");\n\nconst TestCollection = new Mongo.Collection('collectionTest');\nconst testCollectionSchema = new SimpleSchema({\n  value: Number,\n  name: String\n});\nTestCollection.attachSchema(testCollectionSchema);\nmodule.exports = {\n  default: TestCollection,\n  query1: TestCollection.createQuery('TEST_QUERY_1', {\n    $filter(_ref) {\n      let {\n        filters,\n        params: {\n          name\n        }\n      } = _ref;\n\n      if (name) {\n        filters.name = name;\n      }\n    },\n\n    value: 1,\n    name: 1\n  }),\n  query2: TestCollection.createQuery('TEST_QUERY_2', {\n    $filter(_ref2) {\n      let {\n        filters,\n        params: {\n          name\n        }\n      } = _ref2;\n\n      if (name) {\n        filters.name = name;\n      }\n    },\n\n    value: 1,\n    name: 1\n  }),\n  query3: TestCollection.createQuery('TEST_QUERY_3', {\n    $filter(_ref3) {\n      let {\n        filters,\n        params: {\n          name\n        }\n      } = _ref3;\n\n      if (name) {\n        filters.name = name;\n      }\n    },\n\n    value: 1,\n    name: 1\n  }),\n  query4: TestCollection.createQuery('TEST_QUERY_4', {\n    $filter(_ref4) {\n      let {\n        filters,\n        params: {\n          name\n        }\n      } = _ref4;\n\n      if (name) {\n        filters.name = name;\n      }\n    },\n\n    $postFilter(results, params) {\n      return results.map(res => (0, _objectSpread2.default)({}, res, {\n        _userId: params._userId\n      }));\n    },\n\n    value: 1,\n    name: 1\n  }),\n  testCollectionInsert: new Method({\n    name: 'testCollectionInsert',\n    params: {\n      value: Number,\n      name: String,\n      _id: String\n    }\n  })\n};","map":{"version":3,"sources":["imports/core/api/queries/test/collection.app-test.js"],"names":["SimpleSchema","require","Mongo","Method","TestCollection","testCollectionSchema","value","name","String","module","default","query1","$filter","params","filters","query2","query3","query4","$postFilter","res","_userId","testCollectionInsert","_id"],"mappings":"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","sourcesContent":["const SimpleSchema = require('simpl-schema').default;\n\nconst { Mongo } = require('meteor/mongo');\nconst { Method } = require('../../methods/methods');\n\nconst TestCollection = new Mongo.Collection('collectionTest');\nconst testCollectionSchema = new SimpleSchema({ value: Number, name: String });\nTestCollection.attachSchema(testCollectionSchema);\n\nmodule.exports = {\n  default: TestCollection,\n  query1: TestCollection.createQuery('TEST_QUERY_1', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    value: 1,\n    name: 1,\n  }),\n  query2: TestCollection.createQuery('TEST_QUERY_2', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    value: 1,\n    name: 1,\n  }),\n  query3: TestCollection.createQuery('TEST_QUERY_3', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    value: 1,\n    name: 1,\n  }),\n  query4: TestCollection.createQuery('TEST_QUERY_4', {\n    $filter({ filters, params: { name } }) {\n      if (name) {\n        filters.name = name;\n      }\n    },\n    $postFilter(results, params) {\n      return results.map(res => ({ ...res, _userId: params._userId }));\n    },\n    value: 1,\n    name: 1,\n  }),\n  testCollectionInsert: new Method({\n    name: 'testCollectionInsert',\n    params: { value: Number, name: String, _id: String },\n  }),\n};\n"]},"sourceType":"script","hash":"1af42ac4955f63713d2331d7d368f537de2a1b73"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/FinanceCalculator/FinanceCalculator.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/FinanceCalculator/FinanceCalculator.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/FinanceCalculator/FinanceCalculator.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/FinanceCalculator/FinanceCalculator.js"],"names":["GENDER","SUCCESS","ERROR","WARNING","RESIDENCE_TYPE","REAL_ESTATE_CONSIDERATION_TYPES","EXPENSE_TYPES_WITHOUT_DELTAS","AMORTIZATION_STOP","AMORTIZATION_YEARS","AVERAGE_TAX_RATE","BONUS_ALGORITHMS","BONUS_CONSIDERATION","BONUS_HISTORY_TO_CONSIDER","COMPANY_INCOME_TO_CONSIDER","DEFAULT_AMORTIZATION","DIVIDENDS_CONSIDERATION","DIVIDENDS_HISTORY_TO_CONSIDER","ESTIMATED_COMMISSION","FORTUNE_RETURNS_RATIO","INTERESTS_FINMA","INVESTMENT_INCOME_CONSIDERATION","MAINTENANCE_FINMA","MAX_BORROW_RATIO_PRIMARY_PROPERTY","MAX_BORROW_RATIO_WITH_PLEDGE","MAX_INCOME_RATIO_TIGHT","MAX_INCOME_RATIO","MIN_CASH","NOTARY_FEES","OWN_FUNDS_ROUNDING_AMOUNT","PENSION_INCOME_CONSIDERATION","REAL_ESTATE_INCOME_ALGORITHMS","REAL_ESTATE_INCOME_CONSIDERATION","REFERRAL_COMMISSION_SPLIT","REFERRAL_COMMISSION","MiddlewareManager","precisionMiddleware","memoizeMiddleware","FinanceCalculator","constructor","settings","Object","middlewares","Array","Function","middlewareObject","middlewareManager","applyToAllMethods","age1","age2","gender1","gender2","retirement1","getRetirementForGender","gender","retirement2","toRetirement1","toRetirement2","yearsToRetirement","Math","min","max","nF","r","i","mR","m","income","fortune","incomeLimited1","incomeLimited2","floor","initFinanceCalculator","allowPledge","amortizationBaseRate","amortizationGoal","amortizationYears","bonusAlgorithm","WEAK_AVERAGE","bonusConsideration","bonusHistoryToConsider","companyIncomeHistoryToConsider","dividendsConsideration","dividendsHistoryToConsider","expensesSubtractFromIncome","fortuneReturnsRatio","investmentIncomeConsideration","maxBorrowRatio","maxBorrowRatioWithPledge","maxIncomeRatio","maxIncomeRatioTight","minCash","notaryFees","ownFundsRoundingAmount","pensionIncomeConsideration","realEstateIncomeAlgorithm","DEFAULT","realEstateIncomeConsideration","realEstateIncomeConsiderationType","ADD_TO_INCOME","taxRate","theoreticalInterestRate","theoreticalInterestRate2ndRank","theoreticalMaintenanceRate","estimatedCommission","referralCommission","referralCommissionSplit","setMiddleware","getLoanValue","propertyValue","propertyWork","pledgedValue","fees","getFeesBase","getPropAndWork","getBorrowRatio","loan","getLoanFromBorrowRatio","borrowRatio","getBorrowRatioWithoutLoan","getBorrowRatioStatus","M","F","getIncomeRatio","monthlyIncome","monthlyPayment","getIncomeRatioStatus","incomeRatio","getLoanCost","maintenance","interests","amortization","getLoanCostWithParts","total","checkInterestsAndTranches","tranches","interestRates","type","value","reduce","invalidRate","undefined","getInterestsWithTranches","acc","rate","getAmortizationRateBase","amortizationRate","amountToAmortize","getMaxLoanBase","pledgedAmount","residenceType","MAIN_RESIDENCE","getTheoreticalMonthly","propAndWork","loanValue","getNotaryFeesRate","getMinCash","getAveragedInterestRate","totalRate"],"mappings":";;AAAA;AACA,SACEA,MADF,EAEEC,OAFF,EAGEC,KAHF,EAIEC,OAJF,EAKEC,cALF,EAMEC,+BANF,EAOEC,4BAPF;AASA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAKEC,mBALF,EAMEC,yBANF,EAOEC,0BAPF,EAQEC,oBARF,EASEC,uBATF,EAUEC,6BAVF,EAWEC,oBAXF,EAYEC,qBAZF,EAaEC,eAbF,EAcEC,+BAdF,EAeEC,iBAfF,EAgBEC,iCAhBF,EAiBEC,4BAjBF,EAkBEC,sBAlBF,EAmBEC,gBAnBF,EAoBEC,QApBF,EAqBEC,WArBF,EAsBEC,yBAtBF,EAuBEC,4BAvBF,EAwBEC,6BAxBF,EAyBEC,gCAzBF,EA0BEC,yBA1BF,EA2BEC,mBA3BF;AA6BA,OAAOC,iBAAP;AACA,SAASC,mBAAT;AACA,SAASC,iBAAT;AAEA,OAAO,MAAMC,iBAAN,CAAwB;AAC7BC,EAAAA,WAAW,CAACC,QAAD,CAAU,EAAEC,MAAZ,EAAoB;AAAA;;AAAA;;AAAA;;AAAA,2CA+Ef,CAACC,WAAD,CAAa,EAAEC,KAAK,CAACC,QAAD,CAApB,EAAgCC,gBAAhC,KAAqD;AACnE,YAAMC,iBAAiB,GAAG,IAAIX,iBAAJ,CAAsB,IAAtB,EAA4BU,gBAA5B,CAA1B;AACAC,MAAAA,iBAAiB,CAACC,iBAAlB,CAAoC,CAClCX,mBADkC,EAElCC,iBAFkC,EAGlC,GAAGK,WAH+B,CAApC;AAKD,KAtF8B;;AAAA,kDA8RR,CAAC;AACtBM,MAAAA,IADsB;AAEtBC,MAAAA,IAFsB;AAGtBC,MAAAA,OAHsB;AAItBC,MAAAA;AAJsB,KAKvB,EAAE;AACDH,MAAAA,IAAI,GAAG,MADN;AAEDC,MAAAA,IAAI,GAAG,MAFN;AAGDC,MAAAA,OAAO,GAAG,MAAM,GAHf;AAIDC,MAAAA,OAAO,GAAG,MAAM,GAJf;AAAA,KALqB,GAUpB,EAVmB,KAUZ;AACT,YAAMC,WAAW,GAAG,KAAKC,sBAAL,CAA4B;AAAEC,QAAAA,MAAM,EAAEJ;AAAV,OAA5B,CAApB;AACA,UAAIK,WAAW,GAAG,IAAlB;;AACA,UAAIJ,OAAJ,EAAa;AACXI,QAAAA,WAAW,GAAG,KAAKF,sBAAL,CAA4B;AAAEC,UAAAA,MAAM,EAAEH;AAAV,SAA5B,CAAd;AACD,OALQ,CAOT;;;AACA,YAAMK,aAAa,GAAGJ,WAAW,GAAGJ,IAApC;AACA,UAAIS,aAAJ;;AACA,UAAIF,WAAW,IAAIN,IAAnB,EAAyB;AACvBQ,QAAAA,aAAa,GAAGF,WAAW,GAAGN,IAA9B;AACD,OAZQ,CAcT;;;AACA,UAAIS,iBAAJ;;AACA,UAAID,aAAJ,EAAmB;AACjBC,QAAAA,iBAAiB,GAAGC,IAAI,CAACC,GAAL,CAASJ,aAAT,EAAwBC,aAAxB,CAApB;AACD,OAFD,MAEO;AACLC,QAAAA,iBAAiB,GAAGF,aAApB;AACD;;AAED,aAAOG,IAAI,CAACE,GAAL,CAASH,iBAAT,EAA4B,CAA5B,CAAP;AACD,KA/T8B;;AAAA,2DA4VC,CAAC;AAAEI,MAAAA,EAAF;AAAMC,MAAAA,CAAN;AAASC,MAAAA,CAAT;AAAYC,MAAAA,EAAZ;AAAgBC,MAAAA;AAAhB,KAAD,KAAyB,CAAC;AACxDC,MAAAA,MADwD;AAExDC,MAAAA;AAFwD,KAAD,KAGnD;AACJ;AACA,YAAMC,cAAc,GAAG,CAACJ,EAAE,GAAGE,MAAL,GAAcC,OAAO,GAAGJ,CAAzB,KAA+BE,CAAC,GAAG,CAAC,IAAIJ,EAAL,IAAWE,CAA9C,CAAvB,CAFI,CAIJ;;AACA,YAAMM,cAAc,GAAG,CAAC,CAAC,IAAIP,CAAC,GAAGC,CAAT,IAAcI,OAAd,GAAwBH,EAAE,GAAGF,CAAL,GAASI,MAAlC,KAClBJ,CAAC,IAAIG,CAAC,GAAGF,CAAR,CAAD,GAAcF,EAAE,IAAI,IAAIC,CAAC,GAAGC,CAAZ,CAAhB,GAAiC,IADf,CAAvB,CALI,CAQJ;AACA;;AACA,aAAOL,IAAI,CAACY,KAAL,CAAWZ,IAAI,CAACC,GAAL,CAASS,cAAT,EAAyBC,cAAzB,CAAX,CAAP;AACD,KA1W8B;;AAC7B,SAAKE,qBAAL,CAA2BhC,QAA3B;AACD;;AAQDgC,EAAAA,qBAAqB,CAAC;AACpBC,IAAAA,WAAW,GAAG,IADM;AAEpBC,IAAAA,oBAAoB,GAAG3D,oBAFH;AAGpB4D,IAAAA,gBAAgB,GAAGnE,iBAHC;AAIpBoE,IAAAA,iBAAiB,GAAGnE,kBAJA;AAKpBoE,IAAAA,cAAc,GAAGlE,gBAAgB,CAACmE,YALd;AAMpBC,IAAAA,kBAAkB,GAAGnE,mBAND;AAOpBoE,IAAAA,sBAAsB,GAAGnE,yBAPL;AAQpBoE,IAAAA,8BAA8B,GAAGnE,0BARb;AASpBoE,IAAAA,sBAAsB,GAAGlE,uBATL;AAUpBmE,IAAAA,0BAA0B,GAAGlE,6BAVT;AAWpBmE,IAAAA,0BAA0B,GAAG7E,4BAXT;AAYpB8E,IAAAA,mBAAmB,GAAGlE,qBAZF;AAapBmE,IAAAA,6BAA6B,GAAGjE,+BAbZ;AAcpBkE,IAAAA,cAAc,GAAGhE,iCAdG;AAepBiE,IAAAA,wBAAwB,GAAGhE,4BAfP;AAgBpBiE,IAAAA,cAAc,GAAG/D,gBAhBG;AAiBpBgE,IAAAA,mBAAmB,GAAGjE,sBAjBF;AAkBpBkE,IAAAA,OAAO,GAAGhE,QAlBU;AAmBpBiE,IAAAA,UAAU,GAAGhE,WAnBO;AAoBpBiE,IAAAA,sBAAsB,GAAGhE,yBApBL;AAqBpBiE,IAAAA,0BAA0B,GAAGhE,4BArBT;AAsBpBiE,IAAAA,yBAAyB,GAAGhE,6BAA6B,CAACiE,OAtBtC;AAuBpBC,IAAAA,6BAA6B,GAAGjE,gCAvBZ;AAwBpBkE,IAAAA,iCAAiC,GAAG5F,+BAA+B,CAAC6F,aAxBhD;AAyBpBC,IAAAA,OAAO,GAAG1F,gBAzBU;AA0BpB2F,IAAAA,uBAAuB,GAAGjF,eA1BN;AA2BpBkF,IAAAA,8BAA8B,GAAG,IA3Bb;AA4BpBC,IAAAA,0BAA0B,GAAGjF,iBA5BT;AA6BpBkF,IAAAA,mBAAmB,GAAGtF,oBA7BF;AA8BpBuF,IAAAA,kBAAkB,GAAGvE,mBA9BD;AA+BpBwE,IAAAA,uBAAuB,GAAGzE,yBA/BN;AAgCpBS,IAAAA,WAAW,GAAG,EAhCM;AAiCpBG,IAAAA;AAjCoB,MAkClB,EAlCiB,EAkCb;AACN,SAAK4B,WAAL,GAAmBA,WAAnB;AACA,SAAKC,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKE,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,8BAAL,GAAsCA,8BAAtC;AACA,SAAKC,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,0BAAL,GAAkCA,0BAAlC;AACA,SAAKC,0BAAL,GAAkCA,0BAAlC;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,6BAAL,GAAqCA,6BAArC;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,wBAAL,GAAgCA,wBAAhC;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,sBAAL,GAA8BA,sBAA9B;AACA,SAAKC,0BAAL,GAAkCA,0BAAlC;AACA,SAAKC,yBAAL,GAAiCA,yBAAjC;AACA,SAAKE,6BAAL,GAAqCA,6BAArC;AACA,SAAKC,iCAAL,GAAyCA,iCAAzC;AACA,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,8BAAL,GAAsCA,8BAAtC;AACA,SAAKC,0BAAL,GAAkCA,0BAAlC;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,uBAAL,GAA+BA,uBAA/B;AACA,SAAKC,aAAL,CAAmBjE,WAAnB,EAAgCG,gBAAhC;AACD;;AAWD+D,EAAAA,YAAY,CAAC;AACXC,IAAAA,aADW;AAEXC,IAAAA,YAAY,GAAG,CAFJ;AAGX1C,IAAAA,OAHW;AAIX2C,IAAAA,YAAY,GAAG,CAJJ;AAKXC,IAAAA,IAAI,GAAG,KAAKC,WAAL,CAAiB;AAAEJ,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAjB;AALI,GAMZ,EAAE;AACDD,IAAAA,aAAa,EAAE,MADd;AAEDzC,IAAAA,OAAO,EAAE,MAFR;AAGD2C,IAAAA,YAAY,GAAG,MAHd;AAIDC,IAAAA,IAAI,GAAG,MAJN;AAAA,GANS,EAWT;AACD,WAAOH,aAAa,GAAGC,YAAhB,GAA+BE,IAA/B,GAAsCD,YAAtC,GAAqD3C,OAA5D;AACD;;AAED8C,EAAAA,cAAc,CAAC;AAAEL,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAD,EAAkC;AAC9C,WAAOD,aAAa,GAAGC,YAAvB;AACD;;AAEDK,EAAAA,cAAc,CAAC;AACbN,IAAAA,aADa;AAEbO,IAAAA,IAAI,GAAG;AAFM,GAGd,EAAE;AACDP,IAAAA,aAAa,EAAE,MADd;AAEDO,IAAAA,IAAI,EAAE,MAFL;AAAA,GAHW,EAMX;AACD,WAAOA,IAAI,GAAGP,aAAd;AACD;;AAEDQ,EAAAA,sBAAsB,CAAC;AACrBR,IAAAA,aADqB;AAErBS,IAAAA;AAFqB,GAGtB,EAAE;AACDT,IAAAA,aAAa,EAAE,MADd;AAEDS,IAAAA,WAAW,EAAE,MAFZ;AAAA,GAHmB,EAMnB;AACD,WAAOA,WAAW,GAAGT,aAArB;AACD;;AAEDU,EAAAA,yBAAyB,CAAC;AACxBV,IAAAA,aADwB;AAExBzC,IAAAA;AAFwB,GAGzB,EAAE;AACDyC,IAAAA,aAAa,EAAE,MADd;AAEDzC,IAAAA,OAAO,EAAE,MAFR;AAAA,GAHsB,EAMtB;AACD,WAAO,KAAK+C,cAAL,CAAoB;AACzBN,MAAAA,aADyB;AAEzBO,MAAAA,IAAI,EAAE,KAAKR,YAAL,CAAkB;AAAEC,QAAAA,aAAF;AAAiBzC,QAAAA;AAAjB,OAAlB;AAFmB,KAApB,CAAP;AAID;;AAEDoD,EAAAA,oBAAoB,CAAC;AAAEF,IAAAA;AAAF,GAAD,EAAkB;AACpC,QAAIA,WAAW,IAAI,KAAK/B,cAAxB,EAAwC;AACtC,aAAOrF,OAAP;AACD;;AACD,QAAIoH,WAAW,IAAI,KAAK9B,wBAAxB,EAAkD;AAChD,aAAOpF,OAAP;AACD;;AACD,WAAOD,KAAP;AACD;;AAEDkD,EAAAA,sBAAsB,CAAC;AAAEC,IAAAA,MAAM,GAAGrD,MAAM,CAACwH;AAAlB,GAAqB,EAAE;AAAEnE,IAAAA,MAAM,GAAG;AAAX,GAAvB,GAA6C,EAA9C,EAAkD;AACtE,WAAOA,MAAM,KAAKrD,MAAM,CAACyH,CAAlB,GAAsB,EAAtB,GAA2B,EAAlC;AACD;;AAEDC,EAAAA,cAAc,CAAC;AACbC,IAAAA,aADa;AAEbC,IAAAA,cAAc,GAAG;AAFJ,GAGd,EAAE;AACDD,IAAAA,aAAa,EAAE,MADd;AAEDC,IAAAA,cAAc,EAAE,MAFf;AAAA,GAHW,EAMX;AACD,WAAOA,cAAc,GAAGD,aAAxB;AACD;;AAEDE,EAAAA,oBAAoB,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAkB;AACpC,QAAIA,WAAW,IAAI,KAAKtC,cAAxB,EAAwC;AACtC,aAAOvF,OAAP;AACD;;AACD,QAAI,KAAKwF,mBAAL,IAA4BqC,WAAW,IAAI,KAAKrC,mBAApD,EAAyE;AACvE;AACA;AACA,aAAOtF,OAAP;AACD;;AACD,WAAOD,KAAP;AACD;;AAED6H,EAAAA,WAAW,CAAC;AACVC,IAAAA,WAAW,GAAG,CADJ;AAEVC,IAAAA,SAAS,GAAG,CAFF;AAGVC,IAAAA,YAAY,GAAG;AAHL,GAIX,EAAE;AACDF,IAAAA,WAAW,GAAG,MADb;AAEDC,IAAAA,SAAS,GAAG,MAFX;AAGDC,IAAAA,YAAY,GAAG,MAHd;AAAA,GAJS,GAQR,EARO,EAQH;AACN,WAAOF,WAAW,GAAGC,SAAd,GAA0BC,YAAjC;AACD;;AAEDC,EAAAA,oBAAoB,CAAC;AACnBH,IAAAA,WADmB;AAEnBC,IAAAA,SAFmB;AAGnBC,IAAAA;AAHmB,GAIpB,EAAE;AACDF,IAAAA,WAAW,EAAE,MADZ;AAEDC,IAAAA,SAAS,EAAE,MAFV;AAGDC,IAAAA,YAAY,GAAG,MAHd;AAAA,GAJiB,EAQjB;AACD,WAAO;AACLF,MAAAA,WADK;AAELC,MAAAA,SAFK;AAGLC,MAAAA,YAHK;AAILE,MAAAA,KAAK,EAAE,KAAKL,WAAL,CAAiB;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,SAAf;AAA0BC,QAAAA;AAA1B,OAAjB;AAJF,KAAP;AAMD;;AAEDG,EAAAA,yBAAyB,CAAC;AACxBC,IAAAA,QAAQ,GAAG,EADa;AAExBC,IAAAA;AAFwB,GAGzB,EAAE;AACDD,IAAAA,QAAQ,EAAE5F,KAAK,CAAC;AAAE8F,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE,MAAvB;AAAA,KAAD,CADd;AAEDF,IAAAA,aAAa,EAAE/F,MAFd;AAAA,GAHsB,EAMtB;AACD,WAAO8F,QAAQ,CAACI,MAAT,CAAgB,CAACC,WAAD,EAAc;AAAEH,MAAAA;AAAF,KAAd,KAA2B;AAChD,UAAIG,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;;AAED,UAAI,CAACJ,aAAa,CAACC,IAAD,CAAlB,EAA0B;AACxB,eAAOA,IAAP;AACD;AACF,KARM,EAQJI,SARI,CAAP;AASD;;AAEDC,EAAAA,wBAAwB,CAAC;AACvBP,IAAAA,QAAQ,GAAG,EADY;AAEvBC,IAAAA;AAFuB,GAGxB,EAAE;AACDD,IAAAA,QAAQ,EAAE5F,KAAK,CAAC;AAAE8F,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAE,MAAvB;AAAA,KAAD,CADd;AAEDF,IAAAA,aAAa,EAAE/F,MAFd;AAAA,GAHsB,GAMrB,EANoB,EAMhB;AACN,WAAO8F,QAAQ,CAACI,MAAT,CAAgB,CAACI,GAAD,EAAM;AAAEN,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAN,KAA0B;AAC/C,YAAMM,IAAI,GAAGR,aAAa,CAACC,IAAD,CAA1B;;AAEA,UAAI,CAACO,IAAD,IAASD,GAAG,KAAK,GAArB,EAA0B;AACxB,eAAO,GAAP;AACD;;AAED,aAAOA,GAAG,GAAGL,KAAK,GAAGM,IAArB;AACD,KARM,EAQJ,CARI,CAAP;AASD;;AAEDC,EAAAA,uBAAuB,CAAC;AACtB3B,IAAAA,WAAW,GAAG,CADQ;AAEtB1C,IAAAA,iBAAiB,GAAG,KAAKA;AAFH,GAGvB,EAAE;AAAE0C,IAAAA,WAAW,EAAE,MAAf;AAAuB4B,IAAAA,gBAAgB,GAAG,MAA1C;AAAA,GAHqB,GAGgC,EAHjC,EAGqC;AAC1D,QAAIA,gBAAgB,GAAG,CAAvB;;AACA,QAAI5B,WAAW,GAAG,KAAK3C,gBAAvB,EAAyC;AACvC;AACA;AACA,YAAMwE,gBAAgB,GAAG7B,WAAW,GAAG,KAAK3C,gBAA5C,CAHuC,CAKvC;;AACA,UAAIC,iBAAiB,GAAG,CAAxB,EAA2B;AACzB;AACA;AACAsE,QAAAA,gBAAgB,GAAGC,gBAAgB,GAAGvE,iBAAtC;AACD;AACF,KAXD,MAWO,CACL;AACA;AACD;;AAED,WAAOsE,gBAAgB,GAAG5B,WAAnB,IAAkC,CAAzC;AACD;;AAED8B,EAAAA,cAAc,CAAC;AACbvC,IAAAA,aADa;AAEbC,IAAAA,YAFa;AAGbuC,IAAAA,aAAa,GAAG,CAHH;AAIbC,IAAAA;AAJa,GAKd,EAAE;AACDzC,IAAAA,aAAa,EAAE,MADd;AAEDC,IAAAA,YAAY,EAAE,MAFb;AAGDuC,IAAAA,aAAa,EAAE,MAHd;AAIDC,IAAAA,aAAa,EAAE,MAJd;AAAA,GALY,GAUX,EAVU,CAUP,EAAE,MAVK,CAUE;AACd,QAAIA,aAAa,KAAKjJ,cAAc,CAACkJ,cAArC,EAAqD;AACnD,aAAO5F,IAAI,CAACC,GAAL,CACL,CAACiD,aAAa,GAAGC,YAAjB,IAAiC,KAAKvB,cAAtC,GAAuD8D,aADlD,EAGL,CAACxC,aAAa,GAAGC,YAAjB,IAAiC,KAAKtB,wBAHjC,CAAP;AAKD;;AACD,WAAO,CAACqB,aAAa,GAAGC,YAAjB,IAAiC,KAAKvB,cAA7C;AACD;;AAqCDiE,EAAAA,qBAAqB,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,SAAf;AAA0BR,IAAAA;AAA1B,GAAD,EAA+C;AAClE,UAAMjB,WAAW,GAAIwB,WAAW,GAAG,KAAKlD,0BAApB,GAAkD,EAAtE;AACA,UAAM2B,SAAS,GAAIwB,SAAS,GAAG,KAAKrD,uBAAlB,GAA6C,EAA/D;AACA,UAAM8B,YAAY,GAAIuB,SAAS,GAAGR,gBAAb,GAAiC,EAAtD;AACA,WAAO,KAAKd,oBAAL,CAA0B;AAAEH,MAAAA,WAAF;AAAeC,MAAAA,SAAf;AAA0BC,MAAAA;AAA1B,KAA1B,CAAP;AACD;;AAEDwB,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAK/D,UAAZ;AACD;;AAEDgE,EAAAA,UAAU,CAAC;AACT/C,IAAAA,aADS;AAETC,IAAAA,YAFS;AAGTE,IAAAA,IAAI,GAAG,KAAKC,WAAL,CAAiB;AAAEJ,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAjB;AAHE,GAAD,EAIP;AACD,WAAO,CAACD,aAAa,GAAGC,YAAjB,IAAiC,KAAKnB,OAAtC,GAAgDqB,IAAvD;AACD;;AAEDC,EAAAA,WAAW,CAAC;AAAED,IAAAA,IAAF;AAAQH,IAAAA,aAAa,GAAG;AAAxB,GAAD,EAA8B;AACvC,QAAIG,IAAI,KAAK,CAAT,IAAcA,IAAI,GAAG,CAAzB,EAA4B;AAC1B,aAAOA,IAAP;AACD;;AAED,WAAOH,aAAa,GAAG,KAAKjB,UAA5B;AACD;;AAkBDiE,EAAAA,uBAAuB,CAAC;AAAEtB,IAAAA,QAAQ,GAAG,EAAb;AAAiBC,IAAAA,aAAa,GAAG;AAAjC,GAAD,EAAwC;AAC7D,WAAOD,QAAQ,CAACI,MAAT,CACL,CAACmB,SAAD,EAAY;AAAErB,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAZ,KAAgCoB,SAAS,GAAGtB,aAAa,CAACC,IAAD,CAAb,GAAsBC,KAD7D,EAEL,CAFK,CAAP;AAID;;AAlX4B;AAqX/B,eAAe,IAAIpG,iBAAJ,EAAf","sourcesContent":["// @flow\nimport {\n  GENDER,\n  SUCCESS,\n  ERROR,\n  WARNING,\n  RESIDENCE_TYPE,\n  REAL_ESTATE_CONSIDERATION_TYPES,\n  EXPENSE_TYPES_WITHOUT_DELTAS,\n} from '../../api/constants';\nimport {\n  AMORTIZATION_STOP,\n  AMORTIZATION_YEARS,\n  AVERAGE_TAX_RATE,\n  BONUS_ALGORITHMS,\n  BONUS_CONSIDERATION,\n  BONUS_HISTORY_TO_CONSIDER,\n  COMPANY_INCOME_TO_CONSIDER,\n  DEFAULT_AMORTIZATION,\n  DIVIDENDS_CONSIDERATION,\n  DIVIDENDS_HISTORY_TO_CONSIDER,\n  ESTIMATED_COMMISSION,\n  FORTUNE_RETURNS_RATIO,\n  INTERESTS_FINMA,\n  INVESTMENT_INCOME_CONSIDERATION,\n  MAINTENANCE_FINMA,\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n  MAX_BORROW_RATIO_WITH_PLEDGE,\n  MAX_INCOME_RATIO_TIGHT,\n  MAX_INCOME_RATIO,\n  MIN_CASH,\n  NOTARY_FEES,\n  OWN_FUNDS_ROUNDING_AMOUNT,\n  PENSION_INCOME_CONSIDERATION,\n  REAL_ESTATE_INCOME_ALGORITHMS,\n  REAL_ESTATE_INCOME_CONSIDERATION,\n  REFERRAL_COMMISSION_SPLIT,\n  REFERRAL_COMMISSION,\n} from '../../config/financeConstants';\nimport MiddlewareManager from '../MiddlewareManager';\nimport { precisionMiddleware } from './financeCalculatorMiddlewares';\nimport { memoizeMiddleware } from '../Calculator/middleware';\n\nexport class FinanceCalculator {\n  constructor(settings?: Object) {\n    this.initFinanceCalculator(settings);\n  }\n\n  notaryFees: number;\n\n  amortizationBaseRate: number;\n\n  amortizationGoal: number;\n\n  initFinanceCalculator({\n    allowPledge = true,\n    amortizationBaseRate = DEFAULT_AMORTIZATION,\n    amortizationGoal = AMORTIZATION_STOP,\n    amortizationYears = AMORTIZATION_YEARS,\n    bonusAlgorithm = BONUS_ALGORITHMS.WEAK_AVERAGE,\n    bonusConsideration = BONUS_CONSIDERATION,\n    bonusHistoryToConsider = BONUS_HISTORY_TO_CONSIDER,\n    companyIncomeHistoryToConsider = COMPANY_INCOME_TO_CONSIDER,\n    dividendsConsideration = DIVIDENDS_CONSIDERATION,\n    dividendsHistoryToConsider = DIVIDENDS_HISTORY_TO_CONSIDER,\n    expensesSubtractFromIncome = EXPENSE_TYPES_WITHOUT_DELTAS,\n    fortuneReturnsRatio = FORTUNE_RETURNS_RATIO,\n    investmentIncomeConsideration = INVESTMENT_INCOME_CONSIDERATION,\n    maxBorrowRatio = MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n    maxBorrowRatioWithPledge = MAX_BORROW_RATIO_WITH_PLEDGE,\n    maxIncomeRatio = MAX_INCOME_RATIO,\n    maxIncomeRatioTight = MAX_INCOME_RATIO_TIGHT,\n    minCash = MIN_CASH,\n    notaryFees = NOTARY_FEES,\n    ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT,\n    pensionIncomeConsideration = PENSION_INCOME_CONSIDERATION,\n    realEstateIncomeAlgorithm = REAL_ESTATE_INCOME_ALGORITHMS.DEFAULT,\n    realEstateIncomeConsideration = REAL_ESTATE_INCOME_CONSIDERATION,\n    realEstateIncomeConsiderationType = REAL_ESTATE_CONSIDERATION_TYPES.ADD_TO_INCOME,\n    taxRate = AVERAGE_TAX_RATE,\n    theoreticalInterestRate = INTERESTS_FINMA,\n    theoreticalInterestRate2ndRank = null,\n    theoreticalMaintenanceRate = MAINTENANCE_FINMA,\n    estimatedCommission = ESTIMATED_COMMISSION,\n    referralCommission = REFERRAL_COMMISSION,\n    referralCommissionSplit = REFERRAL_COMMISSION_SPLIT,\n    middlewares = [],\n    middlewareObject,\n  } = {}) {\n    this.allowPledge = allowPledge;\n    this.amortizationBaseRate = amortizationBaseRate;\n    this.amortizationGoal = amortizationGoal;\n    this.amortizationYears = amortizationYears;\n    this.bonusAlgorithm = bonusAlgorithm;\n    this.bonusConsideration = bonusConsideration;\n    this.bonusHistoryToConsider = bonusHistoryToConsider;\n    this.companyIncomeHistoryToConsider = companyIncomeHistoryToConsider;\n    this.dividendsConsideration = dividendsConsideration;\n    this.dividendsHistoryToConsider = dividendsHistoryToConsider;\n    this.expensesSubtractFromIncome = expensesSubtractFromIncome;\n    this.fortuneReturnsRatio = fortuneReturnsRatio;\n    this.investmentIncomeConsideration = investmentIncomeConsideration;\n    this.maxBorrowRatio = maxBorrowRatio;\n    this.maxBorrowRatioWithPledge = maxBorrowRatioWithPledge;\n    this.maxIncomeRatio = maxIncomeRatio;\n    this.maxIncomeRatioTight = maxIncomeRatioTight;\n    this.minCash = minCash;\n    this.notaryFees = notaryFees;\n    this.ownFundsRoundingAmount = ownFundsRoundingAmount;\n    this.pensionIncomeConsideration = pensionIncomeConsideration;\n    this.realEstateIncomeAlgorithm = realEstateIncomeAlgorithm;\n    this.realEstateIncomeConsideration = realEstateIncomeConsideration;\n    this.realEstateIncomeConsiderationType = realEstateIncomeConsiderationType;\n    this.taxRate = taxRate;\n    this.theoreticalInterestRate = theoreticalInterestRate;\n    this.theoreticalInterestRate2ndRank = theoreticalInterestRate2ndRank;\n    this.theoreticalMaintenanceRate = theoreticalMaintenanceRate;\n    this.estimatedCommission = estimatedCommission;\n    this.referralCommission = referralCommission;\n    this.referralCommissionSplit = referralCommissionSplit;\n    this.setMiddleware(middlewares, middlewareObject);\n  }\n\n  setMiddleware = (middlewares?: Array<Function>, middlewareObject) => {\n    const middlewareManager = new MiddlewareManager(this, middlewareObject);\n    middlewareManager.applyToAllMethods([\n      precisionMiddleware,\n      memoizeMiddleware,\n      ...middlewares,\n    ]);\n  };\n\n  getLoanValue({\n    propertyValue,\n    propertyWork = 0,\n    fortune,\n    pledgedValue = 0,\n    fees = this.getFeesBase({ propertyValue, propertyWork }),\n  }: {\n    propertyValue: number,\n    fortune: number,\n    pledgedValue?: number,\n    fees?: number,\n  }) {\n    return propertyValue + propertyWork + fees + pledgedValue - fortune;\n  }\n\n  getPropAndWork({ propertyValue, propertyWork }) {\n    return propertyValue + propertyWork;\n  }\n\n  getBorrowRatio({\n    propertyValue,\n    loan = 0,\n  }: {\n    propertyValue: number,\n    loan: number,\n  }) {\n    return loan / propertyValue;\n  }\n\n  getLoanFromBorrowRatio({\n    propertyValue,\n    borrowRatio,\n  }: {\n    propertyValue: number,\n    borrowRatio: number,\n  }) {\n    return borrowRatio * propertyValue;\n  }\n\n  getBorrowRatioWithoutLoan({\n    propertyValue,\n    fortune,\n  }: {\n    propertyValue: number,\n    fortune: number,\n  }) {\n    return this.getBorrowRatio({\n      propertyValue,\n      loan: this.getLoanValue({ propertyValue, fortune }),\n    });\n  }\n\n  getBorrowRatioStatus({ borrowRatio }) {\n    if (borrowRatio <= this.maxBorrowRatio) {\n      return SUCCESS;\n    }\n    if (borrowRatio <= this.maxBorrowRatioWithPledge) {\n      return WARNING;\n    }\n    return ERROR;\n  }\n\n  getRetirementForGender({ gender = GENDER.M }: { gender?: string } = {}) {\n    return gender === GENDER.F ? 64 : 65;\n  }\n\n  getIncomeRatio({\n    monthlyIncome,\n    monthlyPayment = 0,\n  }: {\n    monthlyIncome: number,\n    monthlyPayment: number,\n  }) {\n    return monthlyPayment / monthlyIncome;\n  }\n\n  getIncomeRatioStatus({ incomeRatio }) {\n    if (incomeRatio <= this.maxIncomeRatio) {\n      return SUCCESS;\n    }\n    if (this.maxIncomeRatioTight && incomeRatio <= this.maxIncomeRatioTight) {\n      // This ratio can be disabled, i.e. set to 0, and then it'll skip the warning\n      // and only display success or error\n      return WARNING;\n    }\n    return ERROR;\n  }\n\n  getLoanCost({\n    maintenance = 0,\n    interests = 0,\n    amortization = 0,\n  }: {\n    maintenance?: number,\n    interests?: number,\n    amortization?: number,\n  } = {}) {\n    return maintenance + interests + amortization;\n  }\n\n  getLoanCostWithParts({\n    maintenance,\n    interests,\n    amortization,\n  }: {\n    maintenance: number,\n    interests: number,\n    amortization?: number,\n  }) {\n    return {\n      maintenance,\n      interests,\n      amortization,\n      total: this.getLoanCost({ maintenance, interests, amortization }),\n    };\n  }\n\n  checkInterestsAndTranches({\n    tranches = [],\n    interestRates,\n  }: {\n    tranches: Array<{ type: string, value: number }>,\n    interestRates: Object,\n  }) {\n    return tranches.reduce((invalidRate, { type }) => {\n      if (invalidRate) {\n        return invalidRate;\n      }\n\n      if (!interestRates[type]) {\n        return type;\n      }\n    }, undefined);\n  }\n\n  getInterestsWithTranches({\n    tranches = [],\n    interestRates,\n  }: {\n    tranches: Array<{ type: string, value: number }>,\n    interestRates: Object,\n  } = {}) {\n    return tranches.reduce((acc, { type, value }) => {\n      const rate = interestRates[type];\n\n      if (!rate || acc === '-') {\n        return '-';\n      }\n\n      return acc + value * rate;\n    }, 0);\n  }\n\n  getAmortizationRateBase({\n    borrowRatio = 0,\n    amortizationYears = this.amortizationYears,\n  }: { borrowRatio: number, amortizationRate?: number } = {}) {\n    let amortizationRate = 0;\n    if (borrowRatio > this.amortizationGoal) {\n      // The loan has to be below 65% before 15 years or before retirement,\n      // whichever comes first\n      const amountToAmortize = borrowRatio - this.amortizationGoal;\n\n      // Make sure we don't create a black hole, or use negative values by error\n      if (amortizationYears > 0) {\n        // Amortization is the amount to amortize divided by the amount\n        // of years before the deadline\n        amortizationRate = amountToAmortize / amortizationYears;\n      }\n    } else {\n      // For projects below 65%, stop amortizing\n      // yearlyAmortization = propAndWork * constants.amortization;\n    }\n\n    return amortizationRate / borrowRatio || 0;\n  }\n\n  getMaxLoanBase({\n    propertyValue,\n    propertyWork,\n    pledgedAmount = 0,\n    residenceType,\n  }: {\n    propertyValue: number,\n    propertyWork: number,\n    pledgedAmount: number,\n    residenceType: string,\n  } = {}): number {\n    if (residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE) {\n      return Math.min(\n        (propertyValue + propertyWork) * this.maxBorrowRatio + pledgedAmount,\n\n        (propertyValue + propertyWork) * this.maxBorrowRatioWithPledge,\n      );\n    }\n    return (propertyValue + propertyWork) * this.maxBorrowRatio;\n  }\n\n  getYearsToRetirement = ({\n    age1,\n    age2,\n    gender1,\n    gender2,\n  }: {\n    age1?: number,\n    age2?: number,\n    gender1?: 'F' | 'M',\n    gender2?: 'F' | 'M',\n  } = {}) => {\n    const retirement1 = this.getRetirementForGender({ gender: gender1 });\n    let retirement2 = null;\n    if (gender2) {\n      retirement2 = this.getRetirementForGender({ gender: gender2 });\n    }\n\n    // Substract age to determine remaining time to retirement for both borrowers\n    const toRetirement1 = retirement1 - age1;\n    let toRetirement2;\n    if (retirement2 && age2) {\n      toRetirement2 = retirement2 - age2;\n    }\n\n    // Get the most limiting time to retirement for both borrowers, in years\n    let yearsToRetirement;\n    if (toRetirement2) {\n      yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n    } else {\n      yearsToRetirement = toRetirement1;\n    }\n\n    return Math.max(yearsToRetirement, 0);\n  };\n\n  getTheoreticalMonthly({ propAndWork, loanValue, amortizationRate }) {\n    const maintenance = (propAndWork * this.theoreticalMaintenanceRate) / 12;\n    const interests = (loanValue * this.theoreticalInterestRate) / 12;\n    const amortization = (loanValue * amortizationRate) / 12;\n    return this.getLoanCostWithParts({ maintenance, interests, amortization });\n  }\n\n  getNotaryFeesRate() {\n    return this.notaryFees;\n  }\n\n  getMinCash({\n    propertyValue,\n    propertyWork,\n    fees = this.getFeesBase({ propertyValue, propertyWork }),\n  }) {\n    return (propertyValue + propertyWork) * this.minCash + fees;\n  }\n\n  getFeesBase({ fees, propertyValue = 0 }) {\n    if (fees === 0 || fees > 0) {\n      return fees;\n    }\n\n    return propertyValue * this.notaryFees;\n  }\n\n  getIncomeLimitedPropertyValue = ({ nF, r, i, mR, m }) => ({\n    income,\n    fortune,\n  }) => {\n    // The first one is with 0 amortization\n    const incomeLimited1 = (mR * income + fortune * i) / (m + (1 + nF) * i);\n\n    // The second is with amortization factored in (and it could be negative due to math)\n    const incomeLimited2 = ((1 + r * i) * fortune + mR * r * income)\n      / (r * (m + i) + nF * (1 + r * i) + 0.35);\n\n    // Therefore, take the minimum value of both, which is the most limiting one\n    // Because of the ratios, round this value down\n    return Math.floor(Math.min(incomeLimited1, incomeLimited2));\n  };\n\n  getAveragedInterestRate({ tranches = [], interestRates = {} }) {\n    return tranches.reduce(\n      (totalRate, { type, value }) => totalRate + interestRates[type] * value,\n      0,\n    );\n  }\n}\n\nexport default new FinanceCalculator();\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/FinanceCalculator/FinanceCalculator.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/FinanceCalculator/FinanceCalculator.js"}},"code":"module.export({\n  FinanceCalculator: () => FinanceCalculator\n});\nlet GENDER, SUCCESS, ERROR, WARNING, RESIDENCE_TYPE, REAL_ESTATE_CONSIDERATION_TYPES, EXPENSE_TYPES_WITHOUT_DELTAS;\nmodule.link(\"../../api/constants\", {\n  GENDER(v) {\n    GENDER = v;\n  },\n\n  SUCCESS(v) {\n    SUCCESS = v;\n  },\n\n  ERROR(v) {\n    ERROR = v;\n  },\n\n  WARNING(v) {\n    WARNING = v;\n  },\n\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  },\n\n  REAL_ESTATE_CONSIDERATION_TYPES(v) {\n    REAL_ESTATE_CONSIDERATION_TYPES = v;\n  },\n\n  EXPENSE_TYPES_WITHOUT_DELTAS(v) {\n    EXPENSE_TYPES_WITHOUT_DELTAS = v;\n  }\n\n}, 0);\nlet AMORTIZATION_STOP, AMORTIZATION_YEARS, AVERAGE_TAX_RATE, BONUS_ALGORITHMS, BONUS_CONSIDERATION, BONUS_HISTORY_TO_CONSIDER, COMPANY_INCOME_TO_CONSIDER, DEFAULT_AMORTIZATION, DIVIDENDS_CONSIDERATION, DIVIDENDS_HISTORY_TO_CONSIDER, ESTIMATED_COMMISSION, FORTUNE_RETURNS_RATIO, INTERESTS_FINMA, INVESTMENT_INCOME_CONSIDERATION, MAINTENANCE_FINMA, MAX_BORROW_RATIO_PRIMARY_PROPERTY, MAX_BORROW_RATIO_WITH_PLEDGE, MAX_INCOME_RATIO_TIGHT, MAX_INCOME_RATIO, MIN_CASH, NOTARY_FEES, OWN_FUNDS_ROUNDING_AMOUNT, PENSION_INCOME_CONSIDERATION, REAL_ESTATE_INCOME_ALGORITHMS, REAL_ESTATE_INCOME_CONSIDERATION, REFERRAL_COMMISSION_SPLIT, REFERRAL_COMMISSION;\nmodule.link(\"../../config/financeConstants\", {\n  AMORTIZATION_STOP(v) {\n    AMORTIZATION_STOP = v;\n  },\n\n  AMORTIZATION_YEARS(v) {\n    AMORTIZATION_YEARS = v;\n  },\n\n  AVERAGE_TAX_RATE(v) {\n    AVERAGE_TAX_RATE = v;\n  },\n\n  BONUS_ALGORITHMS(v) {\n    BONUS_ALGORITHMS = v;\n  },\n\n  BONUS_CONSIDERATION(v) {\n    BONUS_CONSIDERATION = v;\n  },\n\n  BONUS_HISTORY_TO_CONSIDER(v) {\n    BONUS_HISTORY_TO_CONSIDER = v;\n  },\n\n  COMPANY_INCOME_TO_CONSIDER(v) {\n    COMPANY_INCOME_TO_CONSIDER = v;\n  },\n\n  DEFAULT_AMORTIZATION(v) {\n    DEFAULT_AMORTIZATION = v;\n  },\n\n  DIVIDENDS_CONSIDERATION(v) {\n    DIVIDENDS_CONSIDERATION = v;\n  },\n\n  DIVIDENDS_HISTORY_TO_CONSIDER(v) {\n    DIVIDENDS_HISTORY_TO_CONSIDER = v;\n  },\n\n  ESTIMATED_COMMISSION(v) {\n    ESTIMATED_COMMISSION = v;\n  },\n\n  FORTUNE_RETURNS_RATIO(v) {\n    FORTUNE_RETURNS_RATIO = v;\n  },\n\n  INTERESTS_FINMA(v) {\n    INTERESTS_FINMA = v;\n  },\n\n  INVESTMENT_INCOME_CONSIDERATION(v) {\n    INVESTMENT_INCOME_CONSIDERATION = v;\n  },\n\n  MAINTENANCE_FINMA(v) {\n    MAINTENANCE_FINMA = v;\n  },\n\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY(v) {\n    MAX_BORROW_RATIO_PRIMARY_PROPERTY = v;\n  },\n\n  MAX_BORROW_RATIO_WITH_PLEDGE(v) {\n    MAX_BORROW_RATIO_WITH_PLEDGE = v;\n  },\n\n  MAX_INCOME_RATIO_TIGHT(v) {\n    MAX_INCOME_RATIO_TIGHT = v;\n  },\n\n  MAX_INCOME_RATIO(v) {\n    MAX_INCOME_RATIO = v;\n  },\n\n  MIN_CASH(v) {\n    MIN_CASH = v;\n  },\n\n  NOTARY_FEES(v) {\n    NOTARY_FEES = v;\n  },\n\n  OWN_FUNDS_ROUNDING_AMOUNT(v) {\n    OWN_FUNDS_ROUNDING_AMOUNT = v;\n  },\n\n  PENSION_INCOME_CONSIDERATION(v) {\n    PENSION_INCOME_CONSIDERATION = v;\n  },\n\n  REAL_ESTATE_INCOME_ALGORITHMS(v) {\n    REAL_ESTATE_INCOME_ALGORITHMS = v;\n  },\n\n  REAL_ESTATE_INCOME_CONSIDERATION(v) {\n    REAL_ESTATE_INCOME_CONSIDERATION = v;\n  },\n\n  REFERRAL_COMMISSION_SPLIT(v) {\n    REFERRAL_COMMISSION_SPLIT = v;\n  },\n\n  REFERRAL_COMMISSION(v) {\n    REFERRAL_COMMISSION = v;\n  }\n\n}, 1);\nlet MiddlewareManager;\nmodule.link(\"../MiddlewareManager\", {\n  default(v) {\n    MiddlewareManager = v;\n  }\n\n}, 2);\nlet precisionMiddleware;\nmodule.link(\"./financeCalculatorMiddlewares\", {\n  precisionMiddleware(v) {\n    precisionMiddleware = v;\n  }\n\n}, 3);\nlet memoizeMiddleware;\nmodule.link(\"../Calculator/middleware\", {\n  memoizeMiddleware(v) {\n    memoizeMiddleware = v;\n  }\n\n}, 4);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass FinanceCalculator {\n  constructor(settings) {\n    var _this = this;\n\n    _defineProperty(this, \"notaryFees\", void 0);\n\n    _defineProperty(this, \"amortizationBaseRate\", void 0);\n\n    _defineProperty(this, \"amortizationGoal\", void 0);\n\n    _defineProperty(this, \"setMiddleware\", (middlewares, middlewareObject) => {\n      const middlewareManager = new MiddlewareManager(this, middlewareObject);\n      middlewareManager.applyToAllMethods([precisionMiddleware, memoizeMiddleware, ...middlewares]);\n    });\n\n    _defineProperty(this, \"getYearsToRetirement\", function () {\n      let {\n        age1,\n        age2,\n        gender1,\n        gender2\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      const retirement1 = _this.getRetirementForGender({\n        gender: gender1\n      });\n\n      let retirement2 = null;\n\n      if (gender2) {\n        retirement2 = _this.getRetirementForGender({\n          gender: gender2\n        });\n      } // Substract age to determine remaining time to retirement for both borrowers\n\n\n      const toRetirement1 = retirement1 - age1;\n      let toRetirement2;\n\n      if (retirement2 && age2) {\n        toRetirement2 = retirement2 - age2;\n      } // Get the most limiting time to retirement for both borrowers, in years\n\n\n      let yearsToRetirement;\n\n      if (toRetirement2) {\n        yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n      } else {\n        yearsToRetirement = toRetirement1;\n      }\n\n      return Math.max(yearsToRetirement, 0);\n    });\n\n    _defineProperty(this, \"getIncomeLimitedPropertyValue\", (_ref) => {\n      let {\n        nF,\n        r,\n        i,\n        mR,\n        m\n      } = _ref;\n      return (_ref2) => {\n        let {\n          income,\n          fortune\n        } = _ref2;\n        // The first one is with 0 amortization\n        const incomeLimited1 = (mR * income + fortune * i) / (m + (1 + nF) * i); // The second is with amortization factored in (and it could be negative due to math)\n\n        const incomeLimited2 = ((1 + r * i) * fortune + mR * r * income) / (r * (m + i) + nF * (1 + r * i) + 0.35); // Therefore, take the minimum value of both, which is the most limiting one\n        // Because of the ratios, round this value down\n\n        return Math.floor(Math.min(incomeLimited1, incomeLimited2));\n      };\n    });\n\n    this.initFinanceCalculator(settings);\n  }\n\n  initFinanceCalculator() {\n    let {\n      allowPledge = true,\n      amortizationBaseRate = DEFAULT_AMORTIZATION,\n      amortizationGoal = AMORTIZATION_STOP,\n      amortizationYears = AMORTIZATION_YEARS,\n      bonusAlgorithm = BONUS_ALGORITHMS.WEAK_AVERAGE,\n      bonusConsideration = BONUS_CONSIDERATION,\n      bonusHistoryToConsider = BONUS_HISTORY_TO_CONSIDER,\n      companyIncomeHistoryToConsider = COMPANY_INCOME_TO_CONSIDER,\n      dividendsConsideration = DIVIDENDS_CONSIDERATION,\n      dividendsHistoryToConsider = DIVIDENDS_HISTORY_TO_CONSIDER,\n      expensesSubtractFromIncome = EXPENSE_TYPES_WITHOUT_DELTAS,\n      fortuneReturnsRatio = FORTUNE_RETURNS_RATIO,\n      investmentIncomeConsideration = INVESTMENT_INCOME_CONSIDERATION,\n      maxBorrowRatio = MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n      maxBorrowRatioWithPledge = MAX_BORROW_RATIO_WITH_PLEDGE,\n      maxIncomeRatio = MAX_INCOME_RATIO,\n      maxIncomeRatioTight = MAX_INCOME_RATIO_TIGHT,\n      minCash = MIN_CASH,\n      notaryFees = NOTARY_FEES,\n      ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT,\n      pensionIncomeConsideration = PENSION_INCOME_CONSIDERATION,\n      realEstateIncomeAlgorithm = REAL_ESTATE_INCOME_ALGORITHMS.DEFAULT,\n      realEstateIncomeConsideration = REAL_ESTATE_INCOME_CONSIDERATION,\n      realEstateIncomeConsiderationType = REAL_ESTATE_CONSIDERATION_TYPES.ADD_TO_INCOME,\n      taxRate = AVERAGE_TAX_RATE,\n      theoreticalInterestRate = INTERESTS_FINMA,\n      theoreticalInterestRate2ndRank = null,\n      theoreticalMaintenanceRate = MAINTENANCE_FINMA,\n      estimatedCommission = ESTIMATED_COMMISSION,\n      referralCommission = REFERRAL_COMMISSION,\n      referralCommissionSplit = REFERRAL_COMMISSION_SPLIT,\n      middlewares = [],\n      middlewareObject\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.allowPledge = allowPledge;\n    this.amortizationBaseRate = amortizationBaseRate;\n    this.amortizationGoal = amortizationGoal;\n    this.amortizationYears = amortizationYears;\n    this.bonusAlgorithm = bonusAlgorithm;\n    this.bonusConsideration = bonusConsideration;\n    this.bonusHistoryToConsider = bonusHistoryToConsider;\n    this.companyIncomeHistoryToConsider = companyIncomeHistoryToConsider;\n    this.dividendsConsideration = dividendsConsideration;\n    this.dividendsHistoryToConsider = dividendsHistoryToConsider;\n    this.expensesSubtractFromIncome = expensesSubtractFromIncome;\n    this.fortuneReturnsRatio = fortuneReturnsRatio;\n    this.investmentIncomeConsideration = investmentIncomeConsideration;\n    this.maxBorrowRatio = maxBorrowRatio;\n    this.maxBorrowRatioWithPledge = maxBorrowRatioWithPledge;\n    this.maxIncomeRatio = maxIncomeRatio;\n    this.maxIncomeRatioTight = maxIncomeRatioTight;\n    this.minCash = minCash;\n    this.notaryFees = notaryFees;\n    this.ownFundsRoundingAmount = ownFundsRoundingAmount;\n    this.pensionIncomeConsideration = pensionIncomeConsideration;\n    this.realEstateIncomeAlgorithm = realEstateIncomeAlgorithm;\n    this.realEstateIncomeConsideration = realEstateIncomeConsideration;\n    this.realEstateIncomeConsiderationType = realEstateIncomeConsiderationType;\n    this.taxRate = taxRate;\n    this.theoreticalInterestRate = theoreticalInterestRate;\n    this.theoreticalInterestRate2ndRank = theoreticalInterestRate2ndRank;\n    this.theoreticalMaintenanceRate = theoreticalMaintenanceRate;\n    this.estimatedCommission = estimatedCommission;\n    this.referralCommission = referralCommission;\n    this.referralCommissionSplit = referralCommissionSplit;\n    this.setMiddleware(middlewares, middlewareObject);\n  }\n\n  getLoanValue(_ref3) {\n    let {\n      propertyValue,\n      propertyWork = 0,\n      fortune,\n      pledgedValue = 0,\n      fees = this.getFeesBase({\n        propertyValue,\n        propertyWork\n      })\n    } = _ref3;\n    return propertyValue + propertyWork + fees + pledgedValue - fortune;\n  }\n\n  getPropAndWork(_ref4) {\n    let {\n      propertyValue,\n      propertyWork\n    } = _ref4;\n    return propertyValue + propertyWork;\n  }\n\n  getBorrowRatio(_ref5) {\n    let {\n      propertyValue,\n      loan = 0\n    } = _ref5;\n    return loan / propertyValue;\n  }\n\n  getLoanFromBorrowRatio(_ref6) {\n    let {\n      propertyValue,\n      borrowRatio\n    } = _ref6;\n    return borrowRatio * propertyValue;\n  }\n\n  getBorrowRatioWithoutLoan(_ref7) {\n    let {\n      propertyValue,\n      fortune\n    } = _ref7;\n    return this.getBorrowRatio({\n      propertyValue,\n      loan: this.getLoanValue({\n        propertyValue,\n        fortune\n      })\n    });\n  }\n\n  getBorrowRatioStatus(_ref8) {\n    let {\n      borrowRatio\n    } = _ref8;\n\n    if (borrowRatio <= this.maxBorrowRatio) {\n      return SUCCESS;\n    }\n\n    if (borrowRatio <= this.maxBorrowRatioWithPledge) {\n      return WARNING;\n    }\n\n    return ERROR;\n  }\n\n  getRetirementForGender() {\n    let {\n      gender = GENDER.M\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return gender === GENDER.F ? 64 : 65;\n  }\n\n  getIncomeRatio(_ref9) {\n    let {\n      monthlyIncome,\n      monthlyPayment = 0\n    } = _ref9;\n    return monthlyPayment / monthlyIncome;\n  }\n\n  getIncomeRatioStatus(_ref10) {\n    let {\n      incomeRatio\n    } = _ref10;\n\n    if (incomeRatio <= this.maxIncomeRatio) {\n      return SUCCESS;\n    }\n\n    if (this.maxIncomeRatioTight && incomeRatio <= this.maxIncomeRatioTight) {\n      // This ratio can be disabled, i.e. set to 0, and then it'll skip the warning\n      // and only display success or error\n      return WARNING;\n    }\n\n    return ERROR;\n  }\n\n  getLoanCost() {\n    let {\n      maintenance = 0,\n      interests = 0,\n      amortization = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return maintenance + interests + amortization;\n  }\n\n  getLoanCostWithParts(_ref11) {\n    let {\n      maintenance,\n      interests,\n      amortization\n    } = _ref11;\n    return {\n      maintenance,\n      interests,\n      amortization,\n      total: this.getLoanCost({\n        maintenance,\n        interests,\n        amortization\n      })\n    };\n  }\n\n  checkInterestsAndTranches(_ref12) {\n    let {\n      tranches = [],\n      interestRates\n    } = _ref12;\n    return tranches.reduce((invalidRate, _ref13) => {\n      let {\n        type\n      } = _ref13;\n\n      if (invalidRate) {\n        return invalidRate;\n      }\n\n      if (!interestRates[type]) {\n        return type;\n      }\n    }, undefined);\n  }\n\n  getInterestsWithTranches() {\n    let {\n      tranches = [],\n      interestRates\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return tranches.reduce((acc, _ref14) => {\n      let {\n        type,\n        value\n      } = _ref14;\n      const rate = interestRates[type];\n\n      if (!rate || acc === '-') {\n        return '-';\n      }\n\n      return acc + value * rate;\n    }, 0);\n  }\n\n  getAmortizationRateBase() {\n    let {\n      borrowRatio = 0,\n      amortizationYears = this.amortizationYears\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let amortizationRate = 0;\n\n    if (borrowRatio > this.amortizationGoal) {\n      // The loan has to be below 65% before 15 years or before retirement,\n      // whichever comes first\n      const amountToAmortize = borrowRatio - this.amortizationGoal; // Make sure we don't create a black hole, or use negative values by error\n\n      if (amortizationYears > 0) {\n        // Amortization is the amount to amortize divided by the amount\n        // of years before the deadline\n        amortizationRate = amountToAmortize / amortizationYears;\n      }\n    } else {// For projects below 65%, stop amortizing\n      // yearlyAmortization = propAndWork * constants.amortization;\n    }\n\n    return amortizationRate / borrowRatio || 0;\n  }\n\n  getMaxLoanBase() {\n    let {\n      propertyValue,\n      propertyWork,\n      pledgedAmount = 0,\n      residenceType\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE) {\n      return Math.min((propertyValue + propertyWork) * this.maxBorrowRatio + pledgedAmount, (propertyValue + propertyWork) * this.maxBorrowRatioWithPledge);\n    }\n\n    return (propertyValue + propertyWork) * this.maxBorrowRatio;\n  }\n\n  getTheoreticalMonthly(_ref15) {\n    let {\n      propAndWork,\n      loanValue,\n      amortizationRate\n    } = _ref15;\n    const maintenance = propAndWork * this.theoreticalMaintenanceRate / 12;\n    const interests = loanValue * this.theoreticalInterestRate / 12;\n    const amortization = loanValue * amortizationRate / 12;\n    return this.getLoanCostWithParts({\n      maintenance,\n      interests,\n      amortization\n    });\n  }\n\n  getNotaryFeesRate() {\n    return this.notaryFees;\n  }\n\n  getMinCash(_ref16) {\n    let {\n      propertyValue,\n      propertyWork,\n      fees = this.getFeesBase({\n        propertyValue,\n        propertyWork\n      })\n    } = _ref16;\n    return (propertyValue + propertyWork) * this.minCash + fees;\n  }\n\n  getFeesBase(_ref17) {\n    let {\n      fees,\n      propertyValue = 0\n    } = _ref17;\n\n    if (fees === 0 || fees > 0) {\n      return fees;\n    }\n\n    return propertyValue * this.notaryFees;\n  }\n\n  getAveragedInterestRate(_ref18) {\n    let {\n      tranches = [],\n      interestRates = {}\n    } = _ref18;\n    return tranches.reduce((totalRate, _ref19) => {\n      let {\n        type,\n        value\n      } = _ref19;\n      return totalRate + interestRates[type] * value;\n    }, 0);\n  }\n\n}\n\nmodule.exportDefault(new FinanceCalculator());","map":{"version":3,"sources":["imports/core/utils/FinanceCalculator/FinanceCalculator.js"],"names":["constructor","initFinanceCalculator","allowPledge","amortizationBaseRate","amortizationGoal","amortizationYears","bonusAlgorithm","BONUS_ALGORITHMS","bonusConsideration","bonusHistoryToConsider","companyIncomeHistoryToConsider","dividendsConsideration","dividendsHistoryToConsider","expensesSubtractFromIncome","fortuneReturnsRatio","investmentIncomeConsideration","maxBorrowRatio","maxBorrowRatioWithPledge","maxIncomeRatio","maxIncomeRatioTight","minCash","notaryFees","ownFundsRoundingAmount","pensionIncomeConsideration","realEstateIncomeAlgorithm","REAL_ESTATE_INCOME_ALGORITHMS","realEstateIncomeConsideration","realEstateIncomeConsiderationType","REAL_ESTATE_CONSIDERATION_TYPES","taxRate","theoreticalInterestRate","theoreticalInterestRate2ndRank","theoreticalMaintenanceRate","estimatedCommission","referralCommission","referralCommissionSplit","middlewares","middlewareObject","middlewareManager","getLoanValue","propertyWork","pledgedValue","fees","propertyValue","getPropAndWork","getBorrowRatio","loan","getLoanFromBorrowRatio","borrowRatio","getBorrowRatioWithoutLoan","fortune","getBorrowRatioStatus","getRetirementForGender","gender","GENDER","M","getIncomeRatio","monthlyPayment","getIncomeRatioStatus","incomeRatio","getLoanCost","maintenance","interests","amortization","getLoanCostWithParts","total","checkInterestsAndTranches","tranches","interestRates","type","getInterestsWithTranches","value","rate","acc","getAmortizationRateBase","amortizationRate","amountToAmortize","getMaxLoanBase","pledgedAmount","residenceType","RESIDENCE_TYPE","Math","gender2","retirement1","gender1","retirement2","toRetirement1","toRetirement2","yearsToRetirement","getTheoreticalMonthly","propAndWork","loanValue","getNotaryFeesRate","getMinCash","getFeesBase","m","incomeLimited1","mR","incomeLimited2","r","nF","getAveragedInterestRate","totalRate"],"mappings":"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","sourcesContent":["// @flow\nimport {\n  GENDER,\n  SUCCESS,\n  ERROR,\n  WARNING,\n  RESIDENCE_TYPE,\n  REAL_ESTATE_CONSIDERATION_TYPES,\n  EXPENSE_TYPES_WITHOUT_DELTAS,\n} from '../../api/constants';\nimport {\n  AMORTIZATION_STOP,\n  AMORTIZATION_YEARS,\n  AVERAGE_TAX_RATE,\n  BONUS_ALGORITHMS,\n  BONUS_CONSIDERATION,\n  BONUS_HISTORY_TO_CONSIDER,\n  COMPANY_INCOME_TO_CONSIDER,\n  DEFAULT_AMORTIZATION,\n  DIVIDENDS_CONSIDERATION,\n  DIVIDENDS_HISTORY_TO_CONSIDER,\n  ESTIMATED_COMMISSION,\n  FORTUNE_RETURNS_RATIO,\n  INTERESTS_FINMA,\n  INVESTMENT_INCOME_CONSIDERATION,\n  MAINTENANCE_FINMA,\n  MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n  MAX_BORROW_RATIO_WITH_PLEDGE,\n  MAX_INCOME_RATIO_TIGHT,\n  MAX_INCOME_RATIO,\n  MIN_CASH,\n  NOTARY_FEES,\n  OWN_FUNDS_ROUNDING_AMOUNT,\n  PENSION_INCOME_CONSIDERATION,\n  REAL_ESTATE_INCOME_ALGORITHMS,\n  REAL_ESTATE_INCOME_CONSIDERATION,\n  REFERRAL_COMMISSION_SPLIT,\n  REFERRAL_COMMISSION,\n} from '../../config/financeConstants';\nimport MiddlewareManager from '../MiddlewareManager';\nimport { precisionMiddleware } from './financeCalculatorMiddlewares';\nimport { memoizeMiddleware } from '../Calculator/middleware';\n\nexport class FinanceCalculator {\n  constructor(settings?: Object) {\n    this.initFinanceCalculator(settings);\n  }\n\n  notaryFees: number;\n\n  amortizationBaseRate: number;\n\n  amortizationGoal: number;\n\n  initFinanceCalculator({\n    allowPledge = true,\n    amortizationBaseRate = DEFAULT_AMORTIZATION,\n    amortizationGoal = AMORTIZATION_STOP,\n    amortizationYears = AMORTIZATION_YEARS,\n    bonusAlgorithm = BONUS_ALGORITHMS.WEAK_AVERAGE,\n    bonusConsideration = BONUS_CONSIDERATION,\n    bonusHistoryToConsider = BONUS_HISTORY_TO_CONSIDER,\n    companyIncomeHistoryToConsider = COMPANY_INCOME_TO_CONSIDER,\n    dividendsConsideration = DIVIDENDS_CONSIDERATION,\n    dividendsHistoryToConsider = DIVIDENDS_HISTORY_TO_CONSIDER,\n    expensesSubtractFromIncome = EXPENSE_TYPES_WITHOUT_DELTAS,\n    fortuneReturnsRatio = FORTUNE_RETURNS_RATIO,\n    investmentIncomeConsideration = INVESTMENT_INCOME_CONSIDERATION,\n    maxBorrowRatio = MAX_BORROW_RATIO_PRIMARY_PROPERTY,\n    maxBorrowRatioWithPledge = MAX_BORROW_RATIO_WITH_PLEDGE,\n    maxIncomeRatio = MAX_INCOME_RATIO,\n    maxIncomeRatioTight = MAX_INCOME_RATIO_TIGHT,\n    minCash = MIN_CASH,\n    notaryFees = NOTARY_FEES,\n    ownFundsRoundingAmount = OWN_FUNDS_ROUNDING_AMOUNT,\n    pensionIncomeConsideration = PENSION_INCOME_CONSIDERATION,\n    realEstateIncomeAlgorithm = REAL_ESTATE_INCOME_ALGORITHMS.DEFAULT,\n    realEstateIncomeConsideration = REAL_ESTATE_INCOME_CONSIDERATION,\n    realEstateIncomeConsiderationType = REAL_ESTATE_CONSIDERATION_TYPES.ADD_TO_INCOME,\n    taxRate = AVERAGE_TAX_RATE,\n    theoreticalInterestRate = INTERESTS_FINMA,\n    theoreticalInterestRate2ndRank = null,\n    theoreticalMaintenanceRate = MAINTENANCE_FINMA,\n    estimatedCommission = ESTIMATED_COMMISSION,\n    referralCommission = REFERRAL_COMMISSION,\n    referralCommissionSplit = REFERRAL_COMMISSION_SPLIT,\n    middlewares = [],\n    middlewareObject,\n  } = {}) {\n    this.allowPledge = allowPledge;\n    this.amortizationBaseRate = amortizationBaseRate;\n    this.amortizationGoal = amortizationGoal;\n    this.amortizationYears = amortizationYears;\n    this.bonusAlgorithm = bonusAlgorithm;\n    this.bonusConsideration = bonusConsideration;\n    this.bonusHistoryToConsider = bonusHistoryToConsider;\n    this.companyIncomeHistoryToConsider = companyIncomeHistoryToConsider;\n    this.dividendsConsideration = dividendsConsideration;\n    this.dividendsHistoryToConsider = dividendsHistoryToConsider;\n    this.expensesSubtractFromIncome = expensesSubtractFromIncome;\n    this.fortuneReturnsRatio = fortuneReturnsRatio;\n    this.investmentIncomeConsideration = investmentIncomeConsideration;\n    this.maxBorrowRatio = maxBorrowRatio;\n    this.maxBorrowRatioWithPledge = maxBorrowRatioWithPledge;\n    this.maxIncomeRatio = maxIncomeRatio;\n    this.maxIncomeRatioTight = maxIncomeRatioTight;\n    this.minCash = minCash;\n    this.notaryFees = notaryFees;\n    this.ownFundsRoundingAmount = ownFundsRoundingAmount;\n    this.pensionIncomeConsideration = pensionIncomeConsideration;\n    this.realEstateIncomeAlgorithm = realEstateIncomeAlgorithm;\n    this.realEstateIncomeConsideration = realEstateIncomeConsideration;\n    this.realEstateIncomeConsiderationType = realEstateIncomeConsiderationType;\n    this.taxRate = taxRate;\n    this.theoreticalInterestRate = theoreticalInterestRate;\n    this.theoreticalInterestRate2ndRank = theoreticalInterestRate2ndRank;\n    this.theoreticalMaintenanceRate = theoreticalMaintenanceRate;\n    this.estimatedCommission = estimatedCommission;\n    this.referralCommission = referralCommission;\n    this.referralCommissionSplit = referralCommissionSplit;\n    this.setMiddleware(middlewares, middlewareObject);\n  }\n\n  setMiddleware = (middlewares?: Array<Function>, middlewareObject) => {\n    const middlewareManager = new MiddlewareManager(this, middlewareObject);\n    middlewareManager.applyToAllMethods([\n      precisionMiddleware,\n      memoizeMiddleware,\n      ...middlewares,\n    ]);\n  };\n\n  getLoanValue({\n    propertyValue,\n    propertyWork = 0,\n    fortune,\n    pledgedValue = 0,\n    fees = this.getFeesBase({ propertyValue, propertyWork }),\n  }: {\n    propertyValue: number,\n    fortune: number,\n    pledgedValue?: number,\n    fees?: number,\n  }) {\n    return propertyValue + propertyWork + fees + pledgedValue - fortune;\n  }\n\n  getPropAndWork({ propertyValue, propertyWork }) {\n    return propertyValue + propertyWork;\n  }\n\n  getBorrowRatio({\n    propertyValue,\n    loan = 0,\n  }: {\n    propertyValue: number,\n    loan: number,\n  }) {\n    return loan / propertyValue;\n  }\n\n  getLoanFromBorrowRatio({\n    propertyValue,\n    borrowRatio,\n  }: {\n    propertyValue: number,\n    borrowRatio: number,\n  }) {\n    return borrowRatio * propertyValue;\n  }\n\n  getBorrowRatioWithoutLoan({\n    propertyValue,\n    fortune,\n  }: {\n    propertyValue: number,\n    fortune: number,\n  }) {\n    return this.getBorrowRatio({\n      propertyValue,\n      loan: this.getLoanValue({ propertyValue, fortune }),\n    });\n  }\n\n  getBorrowRatioStatus({ borrowRatio }) {\n    if (borrowRatio <= this.maxBorrowRatio) {\n      return SUCCESS;\n    }\n    if (borrowRatio <= this.maxBorrowRatioWithPledge) {\n      return WARNING;\n    }\n    return ERROR;\n  }\n\n  getRetirementForGender({ gender = GENDER.M }: { gender?: string } = {}) {\n    return gender === GENDER.F ? 64 : 65;\n  }\n\n  getIncomeRatio({\n    monthlyIncome,\n    monthlyPayment = 0,\n  }: {\n    monthlyIncome: number,\n    monthlyPayment: number,\n  }) {\n    return monthlyPayment / monthlyIncome;\n  }\n\n  getIncomeRatioStatus({ incomeRatio }) {\n    if (incomeRatio <= this.maxIncomeRatio) {\n      return SUCCESS;\n    }\n    if (this.maxIncomeRatioTight && incomeRatio <= this.maxIncomeRatioTight) {\n      // This ratio can be disabled, i.e. set to 0, and then it'll skip the warning\n      // and only display success or error\n      return WARNING;\n    }\n    return ERROR;\n  }\n\n  getLoanCost({\n    maintenance = 0,\n    interests = 0,\n    amortization = 0,\n  }: {\n    maintenance?: number,\n    interests?: number,\n    amortization?: number,\n  } = {}) {\n    return maintenance + interests + amortization;\n  }\n\n  getLoanCostWithParts({\n    maintenance,\n    interests,\n    amortization,\n  }: {\n    maintenance: number,\n    interests: number,\n    amortization?: number,\n  }) {\n    return {\n      maintenance,\n      interests,\n      amortization,\n      total: this.getLoanCost({ maintenance, interests, amortization }),\n    };\n  }\n\n  checkInterestsAndTranches({\n    tranches = [],\n    interestRates,\n  }: {\n    tranches: Array<{ type: string, value: number }>,\n    interestRates: Object,\n  }) {\n    return tranches.reduce((invalidRate, { type }) => {\n      if (invalidRate) {\n        return invalidRate;\n      }\n\n      if (!interestRates[type]) {\n        return type;\n      }\n    }, undefined);\n  }\n\n  getInterestsWithTranches({\n    tranches = [],\n    interestRates,\n  }: {\n    tranches: Array<{ type: string, value: number }>,\n    interestRates: Object,\n  } = {}) {\n    return tranches.reduce((acc, { type, value }) => {\n      const rate = interestRates[type];\n\n      if (!rate || acc === '-') {\n        return '-';\n      }\n\n      return acc + value * rate;\n    }, 0);\n  }\n\n  getAmortizationRateBase({\n    borrowRatio = 0,\n    amortizationYears = this.amortizationYears,\n  }: { borrowRatio: number, amortizationRate?: number } = {}) {\n    let amortizationRate = 0;\n    if (borrowRatio > this.amortizationGoal) {\n      // The loan has to be below 65% before 15 years or before retirement,\n      // whichever comes first\n      const amountToAmortize = borrowRatio - this.amortizationGoal;\n\n      // Make sure we don't create a black hole, or use negative values by error\n      if (amortizationYears > 0) {\n        // Amortization is the amount to amortize divided by the amount\n        // of years before the deadline\n        amortizationRate = amountToAmortize / amortizationYears;\n      }\n    } else {\n      // For projects below 65%, stop amortizing\n      // yearlyAmortization = propAndWork * constants.amortization;\n    }\n\n    return amortizationRate / borrowRatio || 0;\n  }\n\n  getMaxLoanBase({\n    propertyValue,\n    propertyWork,\n    pledgedAmount = 0,\n    residenceType,\n  }: {\n    propertyValue: number,\n    propertyWork: number,\n    pledgedAmount: number,\n    residenceType: string,\n  } = {}): number {\n    if (residenceType === RESIDENCE_TYPE.MAIN_RESIDENCE) {\n      return Math.min(\n        (propertyValue + propertyWork) * this.maxBorrowRatio + pledgedAmount,\n\n        (propertyValue + propertyWork) * this.maxBorrowRatioWithPledge,\n      );\n    }\n    return (propertyValue + propertyWork) * this.maxBorrowRatio;\n  }\n\n  getYearsToRetirement = ({\n    age1,\n    age2,\n    gender1,\n    gender2,\n  }: {\n    age1?: number,\n    age2?: number,\n    gender1?: 'F' | 'M',\n    gender2?: 'F' | 'M',\n  } = {}) => {\n    const retirement1 = this.getRetirementForGender({ gender: gender1 });\n    let retirement2 = null;\n    if (gender2) {\n      retirement2 = this.getRetirementForGender({ gender: gender2 });\n    }\n\n    // Substract age to determine remaining time to retirement for both borrowers\n    const toRetirement1 = retirement1 - age1;\n    let toRetirement2;\n    if (retirement2 && age2) {\n      toRetirement2 = retirement2 - age2;\n    }\n\n    // Get the most limiting time to retirement for both borrowers, in years\n    let yearsToRetirement;\n    if (toRetirement2) {\n      yearsToRetirement = Math.min(toRetirement1, toRetirement2);\n    } else {\n      yearsToRetirement = toRetirement1;\n    }\n\n    return Math.max(yearsToRetirement, 0);\n  };\n\n  getTheoreticalMonthly({ propAndWork, loanValue, amortizationRate }) {\n    const maintenance = (propAndWork * this.theoreticalMaintenanceRate) / 12;\n    const interests = (loanValue * this.theoreticalInterestRate) / 12;\n    const amortization = (loanValue * amortizationRate) / 12;\n    return this.getLoanCostWithParts({ maintenance, interests, amortization });\n  }\n\n  getNotaryFeesRate() {\n    return this.notaryFees;\n  }\n\n  getMinCash({\n    propertyValue,\n    propertyWork,\n    fees = this.getFeesBase({ propertyValue, propertyWork }),\n  }) {\n    return (propertyValue + propertyWork) * this.minCash + fees;\n  }\n\n  getFeesBase({ fees, propertyValue = 0 }) {\n    if (fees === 0 || fees > 0) {\n      return fees;\n    }\n\n    return propertyValue * this.notaryFees;\n  }\n\n  getIncomeLimitedPropertyValue = ({ nF, r, i, mR, m }) => ({\n    income,\n    fortune,\n  }) => {\n    // The first one is with 0 amortization\n    const incomeLimited1 = (mR * income + fortune * i) / (m + (1 + nF) * i);\n\n    // The second is with amortization factored in (and it could be negative due to math)\n    const incomeLimited2 = ((1 + r * i) * fortune + mR * r * income)\n      / (r * (m + i) + nF * (1 + r * i) + 0.35);\n\n    // Therefore, take the minimum value of both, which is the most limiting one\n    // Because of the ratios, round this value down\n    return Math.floor(Math.min(incomeLimited1, incomeLimited2));\n  };\n\n  getAveragedInterestRate({ tranches = [], interestRates = {} }) {\n    return tranches.reduce(\n      (totalRate, { type, value }) => totalRate + interestRates[type] * value,\n      0,\n    );\n  }\n}\n\nexport default new FinanceCalculator();\n"]},"sourceType":"script","hash":"1732d08665190a2b9362a68ee0600ad4088a19e4"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/lib/intersectDeep.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/intersectDeep.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/lib/intersectDeep.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/lib/intersectDeep.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/lib/intersectDeep.js"}},"code":"let _;\n\nmodule.link(\"meteor/underscore\", {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet specialFields;\nmodule.link(\"./createGraph\", {\n  specialFields(v) {\n    specialFields = v;\n  }\n\n}, 1);\nconst EXTENDED_SPECIAL_FIELDS = [...specialFields, '$filter', '$paginate'];\n\nfunction isClientValueValid(value) {\n  if (_.isObject(value) && !_.isArray(value)) {\n    return _.values(value).every(nestedValue => isClientValueValid(nestedValue));\n  } else if (value === 1) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * \n * Recursive function which intersects the fields of the body objects.\n * \n * @param {object} allowed allowed body object - intersection can only be a subset of it\n * @param {object} client client body - can shrink main body, but not expand\n */\n\n\nfunction intersectFields(allowed, client) {\n  const intersection = {};\n\n  _.pairs(client).forEach(([field, clientValue]) => {\n    if (_.contains(EXTENDED_SPECIAL_FIELDS, field)) {\n      return;\n    }\n\n    const serverValue = allowed[field];\n\n    if (serverValue === 1) {\n      // server allows everything\n      if (isClientValueValid(clientValue)) {\n        intersection[field] = clientValue;\n      }\n    } else if (_.isObject(serverValue)) {\n      if (_.isObject(clientValue) && !_.isArray(clientValue)) {\n        intersection[field] = intersectFields(serverValue, clientValue);\n      } else if (clientValue === 1) {\n        // if client wants everything, serverValue is more restrictive here\n        intersection[field] = serverValue;\n      }\n    }\n  });\n\n  return intersection;\n}\n/**\n * Given a named query that has a specific body, you can query its subbody\n * This performs an intersection of the bodies allowed in each\n *\n * @param allowedBody\n * @param clientBody\n */\n\n\nmodule.exportDefault(function (allowedBody, clientBody) {\n  const build = intersectFields(allowedBody, clientBody); // Add back special fields to the new body\n\n  Object.assign(build, _.pick(allowedBody, ...EXTENDED_SPECIAL_FIELDS));\n  return build;\n});","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/lib/intersectDeep.js"],"names":["_","module","link","v","specialFields","EXTENDED_SPECIAL_FIELDS","isClientValueValid","value","isObject","isArray","values","every","nestedValue","intersectFields","allowed","client","intersection","pairs","forEach","field","clientValue","contains","serverValue","exportDefault","allowedBody","clientBody","build","Object","assign","pick"],"mappings":"AAAA,IAAIA,CAAJ;;AAAMC,MAAM,CAACC,IAAP,CAAY,mBAAZ,EAAgC;AAACF,EAAAA,CAAC,CAACG,CAAD,EAAG;AAACH,IAAAA,CAAC,GAACG,CAAF;AAAI;;AAAV,CAAhC,EAA4C,CAA5C;AAA+C,IAAIC,aAAJ;AAAkBH,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA4B;AAACE,EAAAA,aAAa,CAACD,CAAD,EAAG;AAACC,IAAAA,aAAa,GAACD,CAAd;AAAgB;;AAAlC,CAA5B,EAAgE,CAAhE;AAGvE,MAAME,uBAAuB,GAAG,CAAC,GAAGD,aAAJ,EAAmB,SAAnB,EAA8B,WAA9B,CAAhC;;AAEA,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,MAAIP,CAAC,CAACQ,QAAF,CAAWD,KAAX,KAAqB,CAACP,CAAC,CAACS,OAAF,CAAUF,KAAV,CAA1B,EAA4C;AACxC,WAAOP,CAAC,CAACU,MAAF,CAASH,KAAT,EAAgBI,KAAhB,CAAsBC,WAAW,IAAIN,kBAAkB,CAACM,WAAD,CAAvD,CAAP;AACH,GAFD,MAGK,IAAIL,KAAK,KAAK,CAAd,EAAiB;AAClB,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;AAED;;;;;;;;;AAOA,SAASM,eAAT,CAAyBC,OAAzB,EAAkCC,MAAlC,EAA0C;AACtC,QAAMC,YAAY,GAAG,EAArB;;AACAhB,EAAAA,CAAC,CAACiB,KAAF,CAAQF,MAAR,EAAgBG,OAAhB,CAAwB,CAAC,CAACC,KAAD,EAAQC,WAAR,CAAD,KAA0B;AAC9C,QAAIpB,CAAC,CAACqB,QAAF,CAAWhB,uBAAX,EAAoCc,KAApC,CAAJ,EAAgD;AAC5C;AACH;;AAED,UAAMG,WAAW,GAAGR,OAAO,CAACK,KAAD,CAA3B;;AACA,QAAIG,WAAW,KAAK,CAApB,EAAuB;AAAE;AACrB,UAAIhB,kBAAkB,CAACc,WAAD,CAAtB,EAAqC;AACjCJ,QAAAA,YAAY,CAACG,KAAD,CAAZ,GAAsBC,WAAtB;AACH;AACJ,KAJD,MAKK,IAAIpB,CAAC,CAACQ,QAAF,CAAWc,WAAX,CAAJ,EAA6B;AAC9B,UAAItB,CAAC,CAACQ,QAAF,CAAWY,WAAX,KAA2B,CAACpB,CAAC,CAACS,OAAF,CAAUW,WAAV,CAAhC,EAAwD;AACpDJ,QAAAA,YAAY,CAACG,KAAD,CAAZ,GAAsBN,eAAe,CAACS,WAAD,EAAcF,WAAd,CAArC;AACH,OAFD,MAGK,IAAIA,WAAW,KAAK,CAApB,EAAuB;AACxB;AACAJ,QAAAA,YAAY,CAACG,KAAD,CAAZ,GAAsBG,WAAtB;AACH;AACJ;AACJ,GApBD;;AAqBA,SAAON,YAAP;AACH;AAED;;;;;;;;;AAhDAf,MAAM,CAACsB,aAAP,CAuDe,UAAUC,WAAV,EAAuBC,UAAvB,EAAmC;AAC9C,QAAMC,KAAK,GAAGb,eAAe,CAACW,WAAD,EAAcC,UAAd,CAA7B,CAD8C,CAE9C;;AACAE,EAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqB1B,CAAC,CAAC6B,IAAF,CAAOL,WAAP,EAAoB,GAAGnB,uBAAvB,CAArB;AACA,SAAOqB,KAAP;AACH,CA5DD","sourcesContent":["import {_} from 'meteor/underscore';\nimport {specialFields} from './createGraph';\n\nconst EXTENDED_SPECIAL_FIELDS = [...specialFields, '$filter', '$paginate'];\n\nfunction isClientValueValid(value) {\n    if (_.isObject(value) && !_.isArray(value)) {\n        return _.values(value).every(nestedValue => isClientValueValid(nestedValue));\n    }\n    else if (value === 1) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * \n * Recursive function which intersects the fields of the body objects.\n * \n * @param {object} allowed allowed body object - intersection can only be a subset of it\n * @param {object} client client body - can shrink main body, but not expand\n */\nfunction intersectFields(allowed, client) {\n    const intersection = {};\n    _.pairs(client).forEach(([field, clientValue]) => {\n        if (_.contains(EXTENDED_SPECIAL_FIELDS, field)) {\n            return;\n        }\n\n        const serverValue = allowed[field];\n        if (serverValue === 1) { // server allows everything\n            if (isClientValueValid(clientValue)) {\n                intersection[field] = clientValue;\n            }\n        }\n        else if (_.isObject(serverValue)) {\n            if (_.isObject(clientValue) && !_.isArray(clientValue)) {\n                intersection[field] = intersectFields(serverValue, clientValue);\n            }\n            else if (clientValue === 1) {\n                // if client wants everything, serverValue is more restrictive here\n                intersection[field] = serverValue;\n            }\n        }\n    });\n    return intersection;\n}\n\n/**\n * Given a named query that has a specific body, you can query its subbody\n * This performs an intersection of the bodies allowed in each\n *\n * @param allowedBody\n * @param clientBody\n */\nexport default function (allowedBody, clientBody) {\n    const build = intersectFields(allowedBody, clientBody);\n    // Add back special fields to the new body\n    Object.assign(build, _.pick(allowedBody, ...EXTENDED_SPECIAL_FIELDS));\n    return build;\n}\n"]},"sourceType":"script","hash":"ff034b4b8b8a25e403adb21b7263e09396e2bf12"}

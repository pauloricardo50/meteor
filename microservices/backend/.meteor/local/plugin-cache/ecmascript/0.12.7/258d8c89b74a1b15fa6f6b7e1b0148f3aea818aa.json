{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/server/test/SecurityService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/security/server/test/SecurityService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/server/test/SecurityService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/security/server/test/SecurityService.test.js"],"names":["expect","Meteor","Factory","resetDatabase","sinon","SecurityService","SECURITY_ERROR","LoanSecurity","OfferSecurity","BorrowerSecurity","PropertySecurity","TaskSecurity","ROLES","COLLECTIONS","PROPERTY_CATEGORY","describe","userId","devId","proId","adminId","beforeEach","create","_id","stub","callsFake","afterEach","restore","it","checkRole","to","throw","undefined","checkLoggedIn","loan","checkOwnership","loans","equal","offers","borrowers","properties","tasks","minimumRole","devOnly","DEV","not","adminOnly","ADMIN","isAllowedToModifyFiles","fileKey","docId","propertyId","collection","PROPERTIES_COLLECTION","promotionId","PROMOTIONS_COLLECTION","userLinks","permissions","canManageDocuments","category","PROMOTION","promotionLotId","propertyLinks","promotionLotLinks","loanId","LOANS_COLLECTION"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport sinon from 'sinon';\n\nimport SecurityService, { SECURITY_ERROR } from '../..';\nimport {\n  LoanSecurity,\n  OfferSecurity,\n  BorrowerSecurity,\n  PropertySecurity,\n  TaskSecurity,\n} from '../../collections';\nimport { ROLES } from '../../../users/userConstants';\nimport { COLLECTIONS, PROPERTY_CATEGORY } from '../../../constants';\n\ndescribe('Security service', () => {\n  let userId;\n  let devId;\n  let proId;\n  let adminId;\n\n  beforeEach(() => {\n    resetDatabase();\n    userId = Factory.create('user')._id;\n    proId = Factory.create('pro')._id;\n    devId = Factory.create('dev')._id;\n    adminId = Factory.create('admin')._id;\n    sinon.stub(Meteor, 'userId').callsFake(() => userId);\n  });\n\n  afterEach(() => {\n    Meteor.userId.restore();\n  });\n\n  describe('checkRole', () => {\n    it('should throw if the user does not have the role', () => {\n      expect(() =>\n        SecurityService.checkRole(userId, 'incorrect-role')).to.throw(SECURITY_ERROR);\n    });\n\n    it('should not do anything if the user has the right role', () => {\n      SecurityService.checkRole(userId, 'user');\n    });\n\n    it('should throw if no userId was passed', () => {\n      expect(() =>\n        SecurityService.checkRole(undefined, 'incorrect-role')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(null, 'incorrect-role')).to.throw(SECURITY_ERROR);\n    });\n\n    it('should throw if an inexistent userId was given', () => {\n      expect(() => SecurityService.checkRole('invalid-id', 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(123, 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole({}, 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(() => {}, 'user')).to.throw(SECURITY_ERROR);\n    });\n  });\n\n  describe('checkLoggedIn', () => {\n    it('should not do anything if the user is logged in', () => {\n      SecurityService.checkLoggedIn();\n    });\n\n    it('should throw if the user is not logged in', () => {\n      Meteor.userId.restore();\n      sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n\n      expect(() => SecurityService.checkLoggedIn()).to.throw(SECURITY_ERROR);\n    });\n  });\n\n  describe('checkOwnership', () => {\n    let loan;\n\n    beforeEach(() => {\n      loan = Factory.create('loan', { userId });\n    });\n\n    it('should not do anything if ownership is correct', () => {\n      SecurityService.checkOwnership(loan);\n    });\n\n    it('should throw if ownership is incorrect', () => {\n      Meteor.userId.restore();\n      sinon.stub(Meteor, 'userId').callsFake(() => devId);\n      expect(() => SecurityService.checkOwnership(loan)).to.throw(SECURITY_ERROR);\n    });\n  });\n\n  describe('collection security getters', () => {\n    it('loans should return LoanSecurity', () => {\n      expect(SecurityService.loans).to.equal(LoanSecurity);\n    });\n\n    it('offers should return OfferSecurity', () => {\n      expect(SecurityService.offers).to.equal(OfferSecurity);\n    });\n\n    it('borrowers should return BorrowerSecurity', () => {\n      expect(SecurityService.borrowers).to.equal(BorrowerSecurity);\n    });\n\n    it('properties should return PropertySecurity', () => {\n      expect(SecurityService.properties).to.equal(PropertySecurity);\n    });\n\n    it('tasks should return TaskSecurity', () => {\n      expect(SecurityService.tasks).to.equal(TaskSecurity);\n    });\n  });\n\n  describe('minimumRole', () => {\n    it('throws if an unknown role is used', () => {\n      expect(() => SecurityService.minimumRole('wut')(userId)).to.throw('Invalid');\n    });\n\n    it('does not let admins do dev-only stuff', () => {\n      const devOnly = SecurityService.minimumRole(ROLES.DEV);\n      expect(() => devOnly(devId)).to.not.throw('Unauthorized role');\n      expect(() => devOnly(adminId)).to.throw('Unauthorized role');\n      expect(() => devOnly(userId)).to.throw('Unauthorized role');\n      expect(() => devOnly(proId)).to.throw('Unauthorized role');\n    });\n\n    it('does not let users do admin-only stuff', () => {\n      const adminOnly = SecurityService.minimumRole(ROLES.ADMIN);\n      expect(() => adminOnly(devId)).to.not.throw('Unauthorized role');\n      expect(() => adminOnly(adminId)).to.not.throw('Unauthorized role');\n      expect(() => adminOnly(userId)).to.throw('Unauthorized role');\n      expect(() => adminOnly(proId)).to.throw('Unauthorized role');\n    });\n  });\n\n  describe('isAllowedToModifyFiles', () => {\n    it('does throw if docId is not it fileKey', () => {\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: 'docId1/some/path',\n          docId: 'docId2',\n        })).to.throw('Invalid fileKey or docId');\n    });\n\n    it('does let admins modify files', () => {\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: 'docId/some/path',\n          docId: 'docId',\n          userId: adminId,\n        })).to.not.throw();\n    });\n\n    it('lets a user modify property files', () => {\n      const propertyId = Factory.create('property', { userId })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('does not let a user modify property files if it does not own them', () => {\n      const propertyId = Factory.create('property')._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.throw('Checking ownership');\n    });\n\n    it('lets an admin modify promotion files', () => {\n      const promotionId = Factory.create('promotion')._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${promotionId}/some/path`,\n          docId: promotionId,\n          userId: adminId,\n          collection: COLLECTIONS.PROMOTIONS_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('lets a pro modify promotion files', () => {\n      const promotionId = Factory.create('promotion', {\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: true },\n          },\n        ],\n      })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${promotionId}/some/path`,\n          docId: promotionId,\n          userId: proId,\n          collection: COLLECTIONS.PROMOTIONS_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('does not let a pro modify promotion files if he does not have the permissions', () => {\n      const promotionId = Factory.create('promotion', {\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: false },\n          },\n        ],\n      })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${promotionId}/some/path`,\n          docId: promotionId,\n          userId: proId,\n          collection: COLLECTIONS.PROMOTIONS_COLLECTION,\n        })).to.throw('Vous ne pouvez pas');\n    });\n\n    it('lets an admin modify promotion lot files', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION,\n      })._id;\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{ _id: propertyId }],\n      })._id;\n      Factory.create('promotion', {\n        promotionLotLinks: [{ _id: promotionLotId }],\n      });\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId: adminId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('lets a pro modify promotion lot files', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION,\n      })._id;\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{ _id: propertyId }],\n      })._id;\n      Factory.create('promotion', {\n        promotionLotLinks: [{ _id: promotionLotId }],\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: true },\n          },\n        ],\n      });\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId: proId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('does not let a pro modify promotion lot files if he does not have permissions', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION,\n      })._id;\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{ _id: propertyId }],\n      })._id;\n      Factory.create('promotion', {\n        promotionLotLinks: [{ _id: promotionLotId }],\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: false },\n          },\n        ],\n      });\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId: proId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.throw('Vous ne pouvez pas');\n    });\n\n    it('lets a user modify loan files', () => {\n      const loanId = Factory.create('loan', { userId })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${loanId}/some/path`,\n          docId: loanId,\n          userId,\n          collection: COLLECTIONS.LOANS_COLLECTION,\n        })).to.not.throw();\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/server/test/SecurityService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/security/server/test/SecurityService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 3);\nlet sinon;\nmodule.link(\"sinon\", {\n  default(v) {\n    sinon = v;\n  }\n\n}, 4);\nlet SecurityService, SECURITY_ERROR;\nmodule.link(\"../..\", {\n  default(v) {\n    SecurityService = v;\n  },\n\n  SECURITY_ERROR(v) {\n    SECURITY_ERROR = v;\n  }\n\n}, 5);\nlet LoanSecurity, OfferSecurity, BorrowerSecurity, PropertySecurity, TaskSecurity;\nmodule.link(\"../../collections\", {\n  LoanSecurity(v) {\n    LoanSecurity = v;\n  },\n\n  OfferSecurity(v) {\n    OfferSecurity = v;\n  },\n\n  BorrowerSecurity(v) {\n    BorrowerSecurity = v;\n  },\n\n  PropertySecurity(v) {\n    PropertySecurity = v;\n  },\n\n  TaskSecurity(v) {\n    TaskSecurity = v;\n  }\n\n}, 6);\nlet ROLES;\nmodule.link(\"../../../users/userConstants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 7);\nlet COLLECTIONS, PROPERTY_CATEGORY;\nmodule.link(\"../../../constants\", {\n  COLLECTIONS(v) {\n    COLLECTIONS = v;\n  },\n\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 8);\ndescribe('Security service', () => {\n  let userId;\n  let devId;\n  let proId;\n  let adminId;\n  beforeEach(() => {\n    resetDatabase();\n    userId = Factory.create('user')._id;\n    proId = Factory.create('pro')._id;\n    devId = Factory.create('dev')._id;\n    adminId = Factory.create('admin')._id;\n    sinon.stub(Meteor, 'userId').callsFake(() => userId);\n  });\n  afterEach(() => {\n    Meteor.userId.restore();\n  });\n  describe('checkRole', () => {\n    it('should throw if the user does not have the role', () => {\n      expect(() => SecurityService.checkRole(userId, 'incorrect-role')).to.throw(SECURITY_ERROR);\n    });\n    it('should not do anything if the user has the right role', () => {\n      SecurityService.checkRole(userId, 'user');\n    });\n    it('should throw if no userId was passed', () => {\n      expect(() => SecurityService.checkRole(undefined, 'incorrect-role')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(null, 'incorrect-role')).to.throw(SECURITY_ERROR);\n    });\n    it('should throw if an inexistent userId was given', () => {\n      expect(() => SecurityService.checkRole('invalid-id', 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(123, 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole({}, 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(() => {}, 'user')).to.throw(SECURITY_ERROR);\n    });\n  });\n  describe('checkLoggedIn', () => {\n    it('should not do anything if the user is logged in', () => {\n      SecurityService.checkLoggedIn();\n    });\n    it('should throw if the user is not logged in', () => {\n      Meteor.userId.restore();\n      sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n      expect(() => SecurityService.checkLoggedIn()).to.throw(SECURITY_ERROR);\n    });\n  });\n  describe('checkOwnership', () => {\n    let loan;\n    beforeEach(() => {\n      loan = Factory.create('loan', {\n        userId\n      });\n    });\n    it('should not do anything if ownership is correct', () => {\n      SecurityService.checkOwnership(loan);\n    });\n    it('should throw if ownership is incorrect', () => {\n      Meteor.userId.restore();\n      sinon.stub(Meteor, 'userId').callsFake(() => devId);\n      expect(() => SecurityService.checkOwnership(loan)).to.throw(SECURITY_ERROR);\n    });\n  });\n  describe('collection security getters', () => {\n    it('loans should return LoanSecurity', () => {\n      expect(SecurityService.loans).to.equal(LoanSecurity);\n    });\n    it('offers should return OfferSecurity', () => {\n      expect(SecurityService.offers).to.equal(OfferSecurity);\n    });\n    it('borrowers should return BorrowerSecurity', () => {\n      expect(SecurityService.borrowers).to.equal(BorrowerSecurity);\n    });\n    it('properties should return PropertySecurity', () => {\n      expect(SecurityService.properties).to.equal(PropertySecurity);\n    });\n    it('tasks should return TaskSecurity', () => {\n      expect(SecurityService.tasks).to.equal(TaskSecurity);\n    });\n  });\n  describe('minimumRole', () => {\n    it('throws if an unknown role is used', () => {\n      expect(() => SecurityService.minimumRole('wut')(userId)).to.throw('Invalid');\n    });\n    it('does not let admins do dev-only stuff', () => {\n      const devOnly = SecurityService.minimumRole(ROLES.DEV);\n      expect(() => devOnly(devId)).to.not.throw('Unauthorized role');\n      expect(() => devOnly(adminId)).to.throw('Unauthorized role');\n      expect(() => devOnly(userId)).to.throw('Unauthorized role');\n      expect(() => devOnly(proId)).to.throw('Unauthorized role');\n    });\n    it('does not let users do admin-only stuff', () => {\n      const adminOnly = SecurityService.minimumRole(ROLES.ADMIN);\n      expect(() => adminOnly(devId)).to.not.throw('Unauthorized role');\n      expect(() => adminOnly(adminId)).to.not.throw('Unauthorized role');\n      expect(() => adminOnly(userId)).to.throw('Unauthorized role');\n      expect(() => adminOnly(proId)).to.throw('Unauthorized role');\n    });\n  });\n  describe('isAllowedToModifyFiles', () => {\n    it('does throw if docId is not it fileKey', () => {\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: 'docId1/some/path',\n        docId: 'docId2'\n      })).to.throw('Invalid fileKey or docId');\n    });\n    it('does let admins modify files', () => {\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: 'docId/some/path',\n        docId: 'docId',\n        userId: adminId\n      })).to.not.throw();\n    });\n    it('lets a user modify property files', () => {\n      const propertyId = Factory.create('property', {\n        userId\n      })._id;\n\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${propertyId}/some/path`,\n        docId: propertyId,\n        userId,\n        collection: COLLECTIONS.PROPERTIES_COLLECTION\n      })).to.not.throw();\n    });\n    it('does not let a user modify property files if it does not own them', () => {\n      const propertyId = Factory.create('property')._id;\n\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${propertyId}/some/path`,\n        docId: propertyId,\n        userId,\n        collection: COLLECTIONS.PROPERTIES_COLLECTION\n      })).to.throw('Checking ownership');\n    });\n    it('lets an admin modify promotion files', () => {\n      const promotionId = Factory.create('promotion')._id;\n\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${promotionId}/some/path`,\n        docId: promotionId,\n        userId: adminId,\n        collection: COLLECTIONS.PROMOTIONS_COLLECTION\n      })).to.not.throw();\n    });\n    it('lets a pro modify promotion files', () => {\n      const promotionId = Factory.create('promotion', {\n        userLinks: [{\n          _id: proId,\n          permissions: {\n            canManageDocuments: true\n          }\n        }]\n      })._id;\n\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${promotionId}/some/path`,\n        docId: promotionId,\n        userId: proId,\n        collection: COLLECTIONS.PROMOTIONS_COLLECTION\n      })).to.not.throw();\n    });\n    it('does not let a pro modify promotion files if he does not have the permissions', () => {\n      const promotionId = Factory.create('promotion', {\n        userLinks: [{\n          _id: proId,\n          permissions: {\n            canManageDocuments: false\n          }\n        }]\n      })._id;\n\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${promotionId}/some/path`,\n        docId: promotionId,\n        userId: proId,\n        collection: COLLECTIONS.PROMOTIONS_COLLECTION\n      })).to.throw('Vous ne pouvez pas');\n    });\n    it('lets an admin modify promotion lot files', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION\n      })._id;\n\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{\n          _id: propertyId\n        }]\n      })._id;\n\n      Factory.create('promotion', {\n        promotionLotLinks: [{\n          _id: promotionLotId\n        }]\n      });\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${propertyId}/some/path`,\n        docId: propertyId,\n        userId: adminId,\n        collection: COLLECTIONS.PROPERTIES_COLLECTION\n      })).to.not.throw();\n    });\n    it('lets a pro modify promotion lot files', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION\n      })._id;\n\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{\n          _id: propertyId\n        }]\n      })._id;\n\n      Factory.create('promotion', {\n        promotionLotLinks: [{\n          _id: promotionLotId\n        }],\n        userLinks: [{\n          _id: proId,\n          permissions: {\n            canManageDocuments: true\n          }\n        }]\n      });\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${propertyId}/some/path`,\n        docId: propertyId,\n        userId: proId,\n        collection: COLLECTIONS.PROPERTIES_COLLECTION\n      })).to.not.throw();\n    });\n    it('does not let a pro modify promotion lot files if he does not have permissions', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION\n      })._id;\n\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{\n          _id: propertyId\n        }]\n      })._id;\n\n      Factory.create('promotion', {\n        promotionLotLinks: [{\n          _id: promotionLotId\n        }],\n        userLinks: [{\n          _id: proId,\n          permissions: {\n            canManageDocuments: false\n          }\n        }]\n      });\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${propertyId}/some/path`,\n        docId: propertyId,\n        userId: proId,\n        collection: COLLECTIONS.PROPERTIES_COLLECTION\n      })).to.throw('Vous ne pouvez pas');\n    });\n    it('lets a user modify loan files', () => {\n      const loanId = Factory.create('loan', {\n        userId\n      })._id;\n\n      expect(() => SecurityService.isAllowedToModifyFiles({\n        fileKey: `${loanId}/some/path`,\n        docId: loanId,\n        userId,\n        collection: COLLECTIONS.LOANS_COLLECTION\n      })).to.not.throw();\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/security/server/test/SecurityService.test.js"],"names":["describe","beforeEach","resetDatabase","userId","Factory","proId","devId","adminId","sinon","afterEach","Meteor","it","expect","SecurityService","loan","devOnly","ROLES","adminOnly","fileKey","docId","propertyId","collection","COLLECTIONS","PROPERTIES_COLLECTION","promotionId","PROMOTIONS_COLLECTION","userLinks","_id","permissions","canManageDocuments","category","PROPERTY_CATEGORY","PROMOTION","promotionLotId","propertyLinks","promotionLotLinks","loanId","LOANS_COLLECTION"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport sinon from 'sinon';\n\nimport SecurityService, { SECURITY_ERROR } from '../..';\nimport {\n  LoanSecurity,\n  OfferSecurity,\n  BorrowerSecurity,\n  PropertySecurity,\n  TaskSecurity,\n} from '../../collections';\nimport { ROLES } from '../../../users/userConstants';\nimport { COLLECTIONS, PROPERTY_CATEGORY } from '../../../constants';\n\ndescribe('Security service', () => {\n  let userId;\n  let devId;\n  let proId;\n  let adminId;\n\n  beforeEach(() => {\n    resetDatabase();\n    userId = Factory.create('user')._id;\n    proId = Factory.create('pro')._id;\n    devId = Factory.create('dev')._id;\n    adminId = Factory.create('admin')._id;\n    sinon.stub(Meteor, 'userId').callsFake(() => userId);\n  });\n\n  afterEach(() => {\n    Meteor.userId.restore();\n  });\n\n  describe('checkRole', () => {\n    it('should throw if the user does not have the role', () => {\n      expect(() =>\n        SecurityService.checkRole(userId, 'incorrect-role')).to.throw(SECURITY_ERROR);\n    });\n\n    it('should not do anything if the user has the right role', () => {\n      SecurityService.checkRole(userId, 'user');\n    });\n\n    it('should throw if no userId was passed', () => {\n      expect(() =>\n        SecurityService.checkRole(undefined, 'incorrect-role')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(null, 'incorrect-role')).to.throw(SECURITY_ERROR);\n    });\n\n    it('should throw if an inexistent userId was given', () => {\n      expect(() => SecurityService.checkRole('invalid-id', 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(123, 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole({}, 'user')).to.throw(SECURITY_ERROR);\n      expect(() => SecurityService.checkRole(() => {}, 'user')).to.throw(SECURITY_ERROR);\n    });\n  });\n\n  describe('checkLoggedIn', () => {\n    it('should not do anything if the user is logged in', () => {\n      SecurityService.checkLoggedIn();\n    });\n\n    it('should throw if the user is not logged in', () => {\n      Meteor.userId.restore();\n      sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n\n      expect(() => SecurityService.checkLoggedIn()).to.throw(SECURITY_ERROR);\n    });\n  });\n\n  describe('checkOwnership', () => {\n    let loan;\n\n    beforeEach(() => {\n      loan = Factory.create('loan', { userId });\n    });\n\n    it('should not do anything if ownership is correct', () => {\n      SecurityService.checkOwnership(loan);\n    });\n\n    it('should throw if ownership is incorrect', () => {\n      Meteor.userId.restore();\n      sinon.stub(Meteor, 'userId').callsFake(() => devId);\n      expect(() => SecurityService.checkOwnership(loan)).to.throw(SECURITY_ERROR);\n    });\n  });\n\n  describe('collection security getters', () => {\n    it('loans should return LoanSecurity', () => {\n      expect(SecurityService.loans).to.equal(LoanSecurity);\n    });\n\n    it('offers should return OfferSecurity', () => {\n      expect(SecurityService.offers).to.equal(OfferSecurity);\n    });\n\n    it('borrowers should return BorrowerSecurity', () => {\n      expect(SecurityService.borrowers).to.equal(BorrowerSecurity);\n    });\n\n    it('properties should return PropertySecurity', () => {\n      expect(SecurityService.properties).to.equal(PropertySecurity);\n    });\n\n    it('tasks should return TaskSecurity', () => {\n      expect(SecurityService.tasks).to.equal(TaskSecurity);\n    });\n  });\n\n  describe('minimumRole', () => {\n    it('throws if an unknown role is used', () => {\n      expect(() => SecurityService.minimumRole('wut')(userId)).to.throw('Invalid');\n    });\n\n    it('does not let admins do dev-only stuff', () => {\n      const devOnly = SecurityService.minimumRole(ROLES.DEV);\n      expect(() => devOnly(devId)).to.not.throw('Unauthorized role');\n      expect(() => devOnly(adminId)).to.throw('Unauthorized role');\n      expect(() => devOnly(userId)).to.throw('Unauthorized role');\n      expect(() => devOnly(proId)).to.throw('Unauthorized role');\n    });\n\n    it('does not let users do admin-only stuff', () => {\n      const adminOnly = SecurityService.minimumRole(ROLES.ADMIN);\n      expect(() => adminOnly(devId)).to.not.throw('Unauthorized role');\n      expect(() => adminOnly(adminId)).to.not.throw('Unauthorized role');\n      expect(() => adminOnly(userId)).to.throw('Unauthorized role');\n      expect(() => adminOnly(proId)).to.throw('Unauthorized role');\n    });\n  });\n\n  describe('isAllowedToModifyFiles', () => {\n    it('does throw if docId is not it fileKey', () => {\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: 'docId1/some/path',\n          docId: 'docId2',\n        })).to.throw('Invalid fileKey or docId');\n    });\n\n    it('does let admins modify files', () => {\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: 'docId/some/path',\n          docId: 'docId',\n          userId: adminId,\n        })).to.not.throw();\n    });\n\n    it('lets a user modify property files', () => {\n      const propertyId = Factory.create('property', { userId })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('does not let a user modify property files if it does not own them', () => {\n      const propertyId = Factory.create('property')._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.throw('Checking ownership');\n    });\n\n    it('lets an admin modify promotion files', () => {\n      const promotionId = Factory.create('promotion')._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${promotionId}/some/path`,\n          docId: promotionId,\n          userId: adminId,\n          collection: COLLECTIONS.PROMOTIONS_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('lets a pro modify promotion files', () => {\n      const promotionId = Factory.create('promotion', {\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: true },\n          },\n        ],\n      })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${promotionId}/some/path`,\n          docId: promotionId,\n          userId: proId,\n          collection: COLLECTIONS.PROMOTIONS_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('does not let a pro modify promotion files if he does not have the permissions', () => {\n      const promotionId = Factory.create('promotion', {\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: false },\n          },\n        ],\n      })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${promotionId}/some/path`,\n          docId: promotionId,\n          userId: proId,\n          collection: COLLECTIONS.PROMOTIONS_COLLECTION,\n        })).to.throw('Vous ne pouvez pas');\n    });\n\n    it('lets an admin modify promotion lot files', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION,\n      })._id;\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{ _id: propertyId }],\n      })._id;\n      Factory.create('promotion', {\n        promotionLotLinks: [{ _id: promotionLotId }],\n      });\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId: adminId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('lets a pro modify promotion lot files', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION,\n      })._id;\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{ _id: propertyId }],\n      })._id;\n      Factory.create('promotion', {\n        promotionLotLinks: [{ _id: promotionLotId }],\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: true },\n          },\n        ],\n      });\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId: proId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.not.throw();\n    });\n\n    it('does not let a pro modify promotion lot files if he does not have permissions', () => {\n      const propertyId = Factory.create('property', {\n        category: PROPERTY_CATEGORY.PROMOTION,\n      })._id;\n      const promotionLotId = Factory.create('promotionLot', {\n        propertyLinks: [{ _id: propertyId }],\n      })._id;\n      Factory.create('promotion', {\n        promotionLotLinks: [{ _id: promotionLotId }],\n        userLinks: [\n          {\n            _id: proId,\n            permissions: { canManageDocuments: false },\n          },\n        ],\n      });\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${propertyId}/some/path`,\n          docId: propertyId,\n          userId: proId,\n          collection: COLLECTIONS.PROPERTIES_COLLECTION,\n        })).to.throw('Vous ne pouvez pas');\n    });\n\n    it('lets a user modify loan files', () => {\n      const loanId = Factory.create('loan', { userId })._id;\n      expect(() =>\n        SecurityService.isAllowedToModifyFiles({\n          fileKey: `${loanId}/some/path`,\n          docId: loanId,\n          userId,\n          collection: COLLECTIONS.LOANS_COLLECTION,\n        })).to.not.throw();\n    });\n  });\n});\n"]},"sourceType":"script","hash":"258d8c89b74a1b15fa6f6b7e1b0148f3aea818aa"}

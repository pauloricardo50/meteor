{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/mongoCollectionNames.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/mongoCollectionNames.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/mongoCollectionNames.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/mongoCollectionNames.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/mongoCollectionNames.js"}},"code":"module.export({\n  getName: () => getName\n});\nlet map = {};\n\nfunction getName(name) {\n  return map[name];\n}\n\nfunction extend(base, sub) {\n  // Avoid instantiating the base class just to setup inheritance\n  // Also, do a recursive merge of two prototypes, so we don't overwrite\n  // the existing prototype, but still maintain the inheritance chain\n  // Thanks to @ccnokes\n  var origProto = sub.prototype;\n  sub.prototype = Object.create(base.prototype);\n\n  for (var key in origProto) {\n    sub.prototype[key] = origProto[key];\n  } // The constructor property was set wrong, let's fix it\n\n\n  Object.defineProperty(sub.prototype, 'constructor', {\n    enumerable: false,\n    value: sub\n  });\n}\n\nconst old = Mongo.Collection;\n\nfunction extension(name, ...args) {\n  old.call(this, name, ...args);\n  map[name] = this;\n}\n\n_.extend(extension, old);\n\nextend(old, extension);\nMongo.Collection = extension;\nMongo.Collection.__getCollectionByName = getName;","map":{"version":3,"sources":["packages/cultofcoders:redis-oplog/lib/mongo/mongoCollectionNames.js"],"names":["module","export","getName","map","name","extend","base","sub","origProto","prototype","Object","create","key","defineProperty","enumerable","value","old","Mongo","Collection","extension","args","call","_","__getCollectionByName"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIA;AAAb,CAAd;AAAA,IAAIC,GAAG,GAAG,EAAV;;AAEO,SAASD,OAAT,CAAiBE,IAAjB,EAAuB;AAC1B,SAAOD,GAAG,CAACC,IAAD,CAAV;AACH;;AAED,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2B;AACvB;AACA;AACA;AACA;AACA,MAAIC,SAAS,GAAGD,GAAG,CAACE,SAApB;AACAF,EAAAA,GAAG,CAACE,SAAJ,GAAgBC,MAAM,CAACC,MAAP,CAAcL,IAAI,CAACG,SAAnB,CAAhB;;AACA,OAAK,IAAIG,GAAT,IAAgBJ,SAAhB,EAA2B;AACvBD,IAAAA,GAAG,CAACE,SAAJ,CAAcG,GAAd,IAAqBJ,SAAS,CAACI,GAAD,CAA9B;AACH,GATsB,CAUvB;;;AACAF,EAAAA,MAAM,CAACG,cAAP,CAAsBN,GAAG,CAACE,SAA1B,EAAqC,aAArC,EAAoD;AAChDK,IAAAA,UAAU,EAAE,KADoC;AAEhDC,IAAAA,KAAK,EAAER;AAFyC,GAApD;AAIH;;AAED,MAAMS,GAAG,GAAGC,KAAK,CAACC,UAAlB;;AAEA,SAASC,SAAT,CAAmBf,IAAnB,EAAyB,GAAGgB,IAA5B,EAAkC;AAC9BJ,EAAAA,GAAG,CAACK,IAAJ,CAAS,IAAT,EAAejB,IAAf,EAAqB,GAAGgB,IAAxB;AACAjB,EAAAA,GAAG,CAACC,IAAD,CAAH,GAAY,IAAZ;AACH;;AAEDkB,CAAC,CAACjB,MAAF,CAASc,SAAT,EAAoBH,GAApB;;AACAX,MAAM,CAACW,GAAD,EAAMG,SAAN,CAAN;AAEAF,KAAK,CAACC,UAAN,GAAmBC,SAAnB;AACAF,KAAK,CAACC,UAAN,CAAiBK,qBAAjB,GAAyCrB,OAAzC","sourcesContent":["let map = {};\n\nexport function getName(name) {\n    return map[name];\n}\n\nfunction extend(base, sub) {\n    // Avoid instantiating the base class just to setup inheritance\n    // Also, do a recursive merge of two prototypes, so we don't overwrite\n    // the existing prototype, but still maintain the inheritance chain\n    // Thanks to @ccnokes\n    var origProto = sub.prototype;\n    sub.prototype = Object.create(base.prototype);\n    for (var key in origProto) {\n        sub.prototype[key] = origProto[key];\n    }\n    // The constructor property was set wrong, let's fix it\n    Object.defineProperty(sub.prototype, 'constructor', {\n        enumerable: false,\n        value: sub,\n    });\n}\n\nconst old = Mongo.Collection;\n\nfunction extension(name, ...args) {\n    old.call(this, name, ...args);\n    map[name] = this;\n}\n\n_.extend(extension, old);\nextend(old, extension);\n\nMongo.Collection = extension;\nMongo.Collection.__getCollectionByName = getName;\n"]},"sourceType":"script","hash":"dd8d3dd6367f2f1d5f7a0b2b060fe1629daba830"}

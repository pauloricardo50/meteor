{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/Selector.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/utils/Calculator/test/Selector.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/Selector.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/test/Selector.spec.js"],"names":["expect","Calculator","describe","params","structure","property","beforeEach","value","id","propertyId","loan","structures","properties","it","selectProperty","to","deep","equal","yo","promotionOption","promotionLots","undefined","totalValue","context","structureId","_id","promotionOptionId","promotionOptions","propertyValue","selectPropertyValue","lots","makeSelectPropertyKey"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator from '..';\n\ndescribe('Calculator Selector', () => {\n  let params;\n  let structure;\n  let property;\n\n  beforeEach(() => {\n    property = { value: 100 };\n    structure = { id: 'struct', propertyId: 'prop', property };\n    params = {\n      loan: { structure, structures: [structure], properties: [property] },\n    };\n  });\n\n  describe('selectProperty', () => {\n    it('returns an empty object if nothing is on the structure', () => {\n      expect(Calculator.selectProperty(params)).to.deep.equal(property);\n    });\n\n    it('returns the property if it exists', () => {\n      const property = { yo: 'dude' };\n      params.loan.structure.property = property;\n      expect(Calculator.selectProperty(params)).to.deep.equal(property);\n    });\n\n    it('returns the promotionOption if it exists, and there is no property', () => {\n      const promotionOption = {\n        promotionLots: [{ properties: [{}] }],\n        value: 100,\n      };\n      structure.promotionOption = promotionOption;\n      structure.property = undefined;\n      structure.propertyId = undefined;\n      expect(Calculator.selectProperty(params)).to.deep.equal({\n        ...promotionOption,\n        totalValue: 100,\n      });\n    });\n\n    context('with a structureId', () => {\n      beforeEach(() => {\n        params.structureId = 'struct';\n      });\n\n      it('returns an empty object if nothing is on the structure', () => {\n        structure.property = undefined;\n        structure.propertyId = undefined;\n        expect(Calculator.selectProperty(params)).to.deep.equal({});\n      });\n\n      it('returns the property if it exists', () => {\n        property = { _id: 'dude' };\n        structure.propertyId = property._id;\n        params.loan.properties = [property];\n        expect(Calculator.selectProperty(params)).to.deep.equal(property);\n      });\n\n      it('returns the promotionOption if it exists', () => {\n        const promotionOption = {\n          _id: 'dawg',\n          promotionLots: [{ properties: [{}] }],\n          value: 100,\n        };\n        structure.promotionOptionId = promotionOption._id;\n        structure.propertyId = undefined;\n        params.loan.promotionOptions = [promotionOption];\n        expect(Calculator.selectProperty(params)).to.deep.equal({\n          ...promotionOption,\n          totalValue: 100,\n        });\n      });\n    });\n  });\n\n  describe('selectPropertyValue', () => {\n    it('returns the propertyValue on the structure, even if propertyValue or totalValue exists', () => {\n      structure.propertyValue = 300;\n      property.totalValue = 200;\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(300);\n    });\n\n    it('returns the totalValue if it exists', () => {\n      property.totalValue = 200;\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(200);\n    });\n\n    it('returns the property value if it exists', () => {\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(100);\n    });\n\n    it('returns the right value for a promotionOption with additionalLots', () => {\n      const promotionOption = {\n        _id: 'dawg',\n        value: 110,\n        promotionLots: [\n          {\n            properties: [{ value: 100, totalValue: 100 }],\n            lots: [{ value: 10 }, { value: 0 }],\n          },\n        ],\n      };\n      structure.promotionOptionId = promotionOption._id;\n      structure.property = undefined;\n      structure.propertyId = undefined;\n      params.loan.promotionOptions = [promotionOption];\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(110);\n    });\n  });\n\n  describe('makeSelectPropertyKey', () => {\n    it('returns the exact value of a property for a promotionOption', () => {\n      const params = {\n        loan: {\n          structures: [{ id: 'dude', promotionOptionId: 'yo' }],\n          promotionOptions: [\n            {\n              _id: 'yo',\n              value: 100,\n              promotionLots: [{ properties: [{ value: 0 }] }],\n            },\n          ],\n        },\n        structureId: 'dude',\n      };\n      expect(Calculator.makeSelectPropertyKey('value')(params)).to.equal(0);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/Selector.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/test/Selector.spec.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar Calculator;\nmodule.link(\"..\", {\n  \"default\": function (v) {\n    Calculator = v;\n  }\n}, 1);\ndescribe('Calculator Selector', function () {\n  var params;\n  var structure;\n  var property;\n  beforeEach(function () {\n    property = {\n      value: 100\n    };\n    structure = {\n      id: 'struct',\n      propertyId: 'prop',\n      property: property\n    };\n    params = {\n      loan: {\n        structure: structure,\n        structures: [structure],\n        properties: [property]\n      }\n    };\n  });\n  describe('selectProperty', function () {\n    it('returns an empty object if nothing is on the structure', function () {\n      expect(Calculator.selectProperty(params)).to.deep.equal(property);\n    });\n    it('returns the property if it exists', function () {\n      var property = {\n        yo: 'dude'\n      };\n      params.loan.structure.property = property;\n      expect(Calculator.selectProperty(params)).to.deep.equal(property);\n    });\n    it('returns the promotionOption if it exists, and there is no property', function () {\n      var promotionOption = {\n        promotionLots: [{\n          properties: [{}]\n        }],\n        value: 100\n      };\n      structure.promotionOption = promotionOption;\n      structure.property = undefined;\n      structure.propertyId = undefined;\n      expect(Calculator.selectProperty(params)).to.deep.equal((0, _objectSpread2.default)({}, promotionOption, {\n        totalValue: 100\n      }));\n    });\n    context('with a structureId', function () {\n      beforeEach(function () {\n        params.structureId = 'struct';\n      });\n      it('returns an empty object if nothing is on the structure', function () {\n        structure.property = undefined;\n        structure.propertyId = undefined;\n        expect(Calculator.selectProperty(params)).to.deep.equal({});\n      });\n      it('returns the property if it exists', function () {\n        property = {\n          _id: 'dude'\n        };\n        structure.propertyId = property._id;\n        params.loan.properties = [property];\n        expect(Calculator.selectProperty(params)).to.deep.equal(property);\n      });\n      it('returns the promotionOption if it exists', function () {\n        var promotionOption = {\n          _id: 'dawg',\n          promotionLots: [{\n            properties: [{}]\n          }],\n          value: 100\n        };\n        structure.promotionOptionId = promotionOption._id;\n        structure.propertyId = undefined;\n        params.loan.promotionOptions = [promotionOption];\n        expect(Calculator.selectProperty(params)).to.deep.equal((0, _objectSpread2.default)({}, promotionOption, {\n          totalValue: 100\n        }));\n      });\n    });\n  });\n  describe('selectPropertyValue', function () {\n    it('returns the propertyValue on the structure, even if propertyValue or totalValue exists', function () {\n      structure.propertyValue = 300;\n      property.totalValue = 200;\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(300);\n    });\n    it('returns the totalValue if it exists', function () {\n      property.totalValue = 200;\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(200);\n    });\n    it('returns the property value if it exists', function () {\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(100);\n    });\n    it('returns the right value for a promotionOption with additionalLots', function () {\n      var promotionOption = {\n        _id: 'dawg',\n        value: 110,\n        promotionLots: [{\n          properties: [{\n            value: 100,\n            totalValue: 100\n          }],\n          lots: [{\n            value: 10\n          }, {\n            value: 0\n          }]\n        }]\n      };\n      structure.promotionOptionId = promotionOption._id;\n      structure.property = undefined;\n      structure.propertyId = undefined;\n      params.loan.promotionOptions = [promotionOption];\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(110);\n    });\n  });\n  describe('makeSelectPropertyKey', function () {\n    it('returns the exact value of a property for a promotionOption', function () {\n      var params = {\n        loan: {\n          structures: [{\n            id: 'dude',\n            promotionOptionId: 'yo'\n          }],\n          promotionOptions: [{\n            _id: 'yo',\n            value: 100,\n            promotionLots: [{\n              properties: [{\n                value: 0\n              }]\n            }]\n          }]\n        },\n        structureId: 'dude'\n      };\n      expect(Calculator.makeSelectPropertyKey('value')(params)).to.equal(0);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/Calculator/test/Selector.spec.js"],"names":["describe","beforeEach","property","value","structure","id","propertyId","params","loan","structures","properties","it","expect","Calculator","yo","promotionOption","promotionLots","totalValue","context","_id","lots","promotionOptionId","promotionOptions","structureId"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator from '..';\n\ndescribe('Calculator Selector', () => {\n  let params;\n  let structure;\n  let property;\n\n  beforeEach(() => {\n    property = { value: 100 };\n    structure = { id: 'struct', propertyId: 'prop', property };\n    params = {\n      loan: { structure, structures: [structure], properties: [property] },\n    };\n  });\n\n  describe('selectProperty', () => {\n    it('returns an empty object if nothing is on the structure', () => {\n      expect(Calculator.selectProperty(params)).to.deep.equal(property);\n    });\n\n    it('returns the property if it exists', () => {\n      const property = { yo: 'dude' };\n      params.loan.structure.property = property;\n      expect(Calculator.selectProperty(params)).to.deep.equal(property);\n    });\n\n    it('returns the promotionOption if it exists, and there is no property', () => {\n      const promotionOption = {\n        promotionLots: [{ properties: [{}] }],\n        value: 100,\n      };\n      structure.promotionOption = promotionOption;\n      structure.property = undefined;\n      structure.propertyId = undefined;\n      expect(Calculator.selectProperty(params)).to.deep.equal({\n        ...promotionOption,\n        totalValue: 100,\n      });\n    });\n\n    context('with a structureId', () => {\n      beforeEach(() => {\n        params.structureId = 'struct';\n      });\n\n      it('returns an empty object if nothing is on the structure', () => {\n        structure.property = undefined;\n        structure.propertyId = undefined;\n        expect(Calculator.selectProperty(params)).to.deep.equal({});\n      });\n\n      it('returns the property if it exists', () => {\n        property = { _id: 'dude' };\n        structure.propertyId = property._id;\n        params.loan.properties = [property];\n        expect(Calculator.selectProperty(params)).to.deep.equal(property);\n      });\n\n      it('returns the promotionOption if it exists', () => {\n        const promotionOption = {\n          _id: 'dawg',\n          promotionLots: [{ properties: [{}] }],\n          value: 100,\n        };\n        structure.promotionOptionId = promotionOption._id;\n        structure.propertyId = undefined;\n        params.loan.promotionOptions = [promotionOption];\n        expect(Calculator.selectProperty(params)).to.deep.equal({\n          ...promotionOption,\n          totalValue: 100,\n        });\n      });\n    });\n  });\n\n  describe('selectPropertyValue', () => {\n    it('returns the propertyValue on the structure, even if propertyValue or totalValue exists', () => {\n      structure.propertyValue = 300;\n      property.totalValue = 200;\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(300);\n    });\n\n    it('returns the totalValue if it exists', () => {\n      property.totalValue = 200;\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(200);\n    });\n\n    it('returns the property value if it exists', () => {\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(100);\n    });\n\n    it('returns the right value for a promotionOption with additionalLots', () => {\n      const promotionOption = {\n        _id: 'dawg',\n        value: 110,\n        promotionLots: [\n          {\n            properties: [{ value: 100, totalValue: 100 }],\n            lots: [{ value: 10 }, { value: 0 }],\n          },\n        ],\n      };\n      structure.promotionOptionId = promotionOption._id;\n      structure.property = undefined;\n      structure.propertyId = undefined;\n      params.loan.promotionOptions = [promotionOption];\n      expect(Calculator.selectPropertyValue(params)).to.deep.equal(110);\n    });\n  });\n\n  describe('makeSelectPropertyKey', () => {\n    it('returns the exact value of a property for a promotionOption', () => {\n      const params = {\n        loan: {\n          structures: [{ id: 'dude', promotionOptionId: 'yo' }],\n          promotionOptions: [\n            {\n              _id: 'yo',\n              value: 100,\n              promotionLots: [{ properties: [{ value: 0 }] }],\n            },\n          ],\n        },\n        structureId: 'dude',\n      };\n      expect(Calculator.makeSelectPropertyKey('value')(params)).to.equal(0);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"2e1245326350baf75a06b722d0dc6e1b060c10d7"}

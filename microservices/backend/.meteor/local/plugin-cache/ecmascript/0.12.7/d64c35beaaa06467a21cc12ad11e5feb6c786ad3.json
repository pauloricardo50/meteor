{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/helpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/api/lenderRules/helpers.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/helpers.js","inputSourceMap":{"version":3,"sources":["imports/core/api/lenderRules/helpers.js"],"names":["jsonLogic","rulesToMerge","filterIsValid","filter","variables","apply","mergeRules","names","oldRules","newRules","mergedObject","Object","keys","forEach","newRuleName","newRule","includes","undefined","name","getMatchingRules","lenderRules","storeOrigin","reduce","validRules","rules","_id","isAllRule","and","parseFilter","ruleObject","value","operator","var","variable","find","o","formatFilter"],"mappings":"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","sourcesContent":["import jsonLogic from 'json-logic-js';\n\nconst rulesToMerge = ['pdfComments', 'adminComments'];\n\nconst filterIsValid = (filter, variables) => jsonLogic.apply(filter, variables);\n\nconst mergeRules = ({ names = [], ...oldRules }, newRules) => {\n  let mergedObject = { ...oldRules };\n\n  Object.keys(newRules).forEach((newRuleName) => {\n    const newRule = newRules[newRuleName];\n\n    if (rulesToMerge.includes(newRuleName) && mergedObject[newRuleName]) {\n      mergedObject = {\n        ...mergedObject,\n        [newRuleName]: [...mergedObject[newRuleName], ...newRule],\n      };\n    } else if (newRule !== undefined && newRule !== null) {\n      mergedObject = { ...mergedObject, [newRuleName]: newRule };\n    }\n  });\n\n  return {\n    ...mergedObject,\n    names: [...names, newRules.name],\n  };\n};\n\nexport const getMatchingRules = (\n  lenderRules,\n  variables,\n  storeOrigin = () => {},\n) =>\n  lenderRules.reduce((validRules, { filter, ...rules }) => {\n    if (filterIsValid(filter, variables)) {\n      storeOrigin(rules, rules._id);\n      return mergeRules(validRules, rules);\n    }\n\n    return validRules;\n  }, {});\n\nexport const isAllRule = ({ filter: { and } }) => and[0] === true;\n\nexport const parseFilter = (ruleObject) => {\n  if (ruleObject === true) {\n    // Handle exception for rules that are true, i.e. apply to all loans\n    return { value: true };\n  }\n\n  const [operator] = Object.keys(ruleObject);\n  const { var: variable } = ruleObject[operator].find(o => o && o.var);\n  const value = ruleObject[operator].find(o => !(o && o.var));\n\n  return { operator, variable, value };\n};\n\nexport const formatFilter = ({ variable, operator, value }) => ({\n  [operator]: [{ var: variable }, value],\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/helpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/lenderRules/helpers.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread4 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nmodule.export({\n  getMatchingRules: function () {\n    return getMatchingRules;\n  },\n  isAllRule: function () {\n    return isAllRule;\n  },\n  parseFilter: function () {\n    return parseFilter;\n  },\n  formatFilter: function () {\n    return formatFilter;\n  }\n});\nvar jsonLogic;\nmodule.link(\"json-logic-js\", {\n  \"default\": function (v) {\n    jsonLogic = v;\n  }\n}, 0);\nvar rulesToMerge = ['pdfComments', 'adminComments'];\n\nvar filterIsValid = function (filter, variables) {\n  return jsonLogic.apply(filter, variables);\n};\n\nvar mergeRules = function (_ref, newRules) {\n  var _ref$names = _ref.names,\n      names = _ref$names === void 0 ? [] : _ref$names,\n      oldRules = (0, _objectWithoutProperties2.default)(_ref, [\"names\"]);\n  var mergedObject = (0, _objectSpread4.default)({}, oldRules);\n  Object.keys(newRules).forEach(function (newRuleName) {\n    var newRule = newRules[newRuleName];\n\n    if (rulesToMerge.includes(newRuleName) && mergedObject[newRuleName]) {\n      var _objectSpread2;\n\n      mergedObject = (0, _objectSpread4.default)({}, mergedObject, (_objectSpread2 = {}, _objectSpread2[newRuleName] = [].concat((0, _toConsumableArray2.default)(mergedObject[newRuleName]), (0, _toConsumableArray2.default)(newRule)), _objectSpread2));\n    } else if (newRule !== undefined && newRule !== null) {\n      var _objectSpread3;\n\n      mergedObject = (0, _objectSpread4.default)({}, mergedObject, (_objectSpread3 = {}, _objectSpread3[newRuleName] = newRule, _objectSpread3));\n    }\n  });\n  return (0, _objectSpread4.default)({}, mergedObject, {\n    names: [].concat((0, _toConsumableArray2.default)(names), [newRules.name])\n  });\n};\n\nvar getMatchingRules = function (lenderRules, variables) {\n  var storeOrigin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n  return lenderRules.reduce(function (validRules, _ref2) {\n    var filter = _ref2.filter,\n        rules = (0, _objectWithoutProperties2.default)(_ref2, [\"filter\"]);\n\n    if (filterIsValid(filter, variables)) {\n      storeOrigin(rules, rules._id);\n      return mergeRules(validRules, rules);\n    }\n\n    return validRules;\n  }, {});\n};\n\nvar isAllRule = function (_ref3) {\n  var and = _ref3.filter.and;\n  return and[0] === true;\n};\n\nvar parseFilter = function (ruleObject) {\n  if (ruleObject === true) {\n    // Handle exception for rules that are true, i.e. apply to all loans\n    return {\n      value: true\n    };\n  }\n\n  var _Object$keys = Object.keys(ruleObject),\n      _Object$keys2 = (0, _slicedToArray2.default)(_Object$keys, 1),\n      operator = _Object$keys2[0];\n\n  var _ruleObject$operator$ = ruleObject[operator].find(function (o) {\n    return o && o.var;\n  }),\n      variable = _ruleObject$operator$.var;\n\n  var value = ruleObject[operator].find(function (o) {\n    return !(o && o.var);\n  });\n  return {\n    operator: operator,\n    variable: variable,\n    value: value\n  };\n};\n\nvar formatFilter = function (_ref4) {\n  var _ref5;\n\n  var variable = _ref4.variable,\n      operator = _ref4.operator,\n      value = _ref4.value;\n  return _ref5 = {}, _ref5[operator] = [{\n    \"var\": variable\n  }, value], _ref5;\n};","map":{"version":3,"sources":["imports/core/api/lenderRules/helpers.js"],"names":["jsonLogic","rulesToMerge","filterIsValid","mergeRules","names","oldRules","mergedObject","Object","newRuleName","newRule","newRules","getMatchingRules","storeOrigin","rules","isAllRule","filter","and","parseFilter","ruleObject","value","var","variable","o","operator","formatFilter"],"mappings":";;;;;;;;;;AAAA,MAAA,CAAOA,MAAP,CAAOA;AAAP,EAAA,gBAAsB,EAAA;AAAA,WAAtB,gBAAsB;AAAA,GAAfA;AAAP,EAAA,SAAA,EAAA;AAAA,WAAA,SAAA;AAAA,GAAOA;AAAP,EAAA,WAAA,EAAA;AAAA,WAAA,WAAA;AAAA,GAAOA;AAAP,EAAA,YAAA,EAAA;AAAA,WAAA,YAAA;AAAA;AAAOA,CAAP;AAAA,IAAA,SAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,uBAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAEA,IAAMC,YAAY,GAAG,CAAA,aAAA,EAArB,eAAqB,CAArB;;AAEA,IAAMC,aAAa,GAAG,UAAA,MAAA,EAAA,SAAA;AAAA,SAAuBF,SAAS,CAATA,KAAAA,CAAAA,MAAAA,EAA7C,SAA6CA,CAAvB;AAAA,CAAtB;;AAEA,IAAMG,UAAU,GAAG,gBAAA,QAAA,EAA2C;AAAA,wBAAxCC,KAAwC;AAAA,MAAxCA,KAAwC,2BAA1C,EAA0C;AAAA,MAAzBC,QAAyB;AAC5D,MAAIC,YAAY,mCAAQD,QAAR,CAAhB;AAEAE,EAAAA,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAA+BC,UAAAA,WAAD,EAAiB;AAC7C,QAAMC,OAAO,GAAGC,QAAQ,CAAxB,WAAwB,CAAxB;;AAEA,QAAIT,YAAY,CAAZA,QAAAA,CAAAA,WAAAA,KAAsCK,YAAY,CAAtD,WAAsD,CAAtD,EAAqE;AAAA;;AACnEA,MAAAA,YAAY,mCAAG,YAAH,uCAEV,WAFU,+CAESA,YAAY,CAAhB,WAAgB,CAFrB,oCAEK,OAFL,oBAAZA;AADF,KAAA,MAKO,IAAIG,OAAO,KAAPA,SAAAA,IAAyBA,OAAO,KAApC,IAAA,EAA+C;AAAA;;AACpDH,MAAAA,YAAY,mCAAG,YAAH,uCAAsB,WAAtB,IAAqCG,OAArC,kBAAZH;AACD;AAVHC,GAAAA;AAaA,yCAAO,YAAP;AAEEH,IAAAA,KAAK,6CAAE,KAAF,IAAaM,QAAQ,CAAnB,IAAF;AAFP;AAhBF,CAAA;;AAsBO,IAAMC,gBAAgB,GAAG,UAAA,WAAA,EAAA,SAAA;AAAA,MAG9BC,WAH8B,uEAGhB,YAAM,CAHU,CAAA;AAAA,SAK9B,WAAW,CAAX,MAAA,CAAmB,UAAA,UAAA,SAAsC;AAAA,QAAzB,MAAyB,SAAzB,MAAyB;AAAA,QAAZC,KAAY;;AACvD,QAAIX,aAAa,CAAA,MAAA,EAAjB,SAAiB,CAAjB,EAAsC;AACpCU,MAAAA,WAAW,CAAA,KAAA,EAAQC,KAAK,CAAxBD,GAAW,CAAXA;AACA,aAAOT,UAAU,CAAA,UAAA,EAAjB,KAAiB,CAAjB;AACD;;AAED,WAAA,UAAA;AANF,GAAA,EALK,EAKL,CAL8B;AAAA,CAAzB;;AAcA,IAAMW,SAAS,GAAG;AAAA,MAAaE,GAAb,SAAGD,MAAH,CAAaC,GAAb;AAAA,SAAyBA,GAAG,CAAHA,CAAG,CAAHA,KAA3C,IAAkB;AAAA,CAAlB;;AAEA,IAAMC,WAAW,GAAIC,UAAAA,UAAD,EAAgB;AACzC,MAAIA,UAAU,KAAd,IAAA,EAAyB;AACvB;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD;;AAJwC,qBAMtBZ,MAAM,CAANA,IAAAA,CAAnB,UAAmBA,CANsB;AAAA;AAAA,MAMnC,QANmC;;AAAA,8BAOfW,UAAU,CAAVA,QAAU,CAAVA,CAAAA,IAAAA,CAA0BI,UAAAA,CAAC;AAAA,WAAIA,CAAC,IAAIA,CAAC,CAA/D,GAAqD;AAAA,GAA3BJ,CAPe;AAAA,MAO5BG,QAP4B,yBAOjCD,GAPiC;;AAQzC,MAAMD,KAAK,GAAGD,UAAU,CAAVA,QAAU,CAAVA,CAAAA,IAAAA,CAA0BI,UAAAA,CAAC;AAAA,WAAI,EAAEA,CAAC,IAAIA,CAAC,CAArD,GAA6C,CAAJ;AAAA,GAA3BJ,CAAd;AAEA,SAAO;AAAEK,IAAAA,QAAF,EAAEA,QAAF;AAAYF,IAAAA,QAAZ,EAAYA,QAAZ;AAAsBF,IAAAA,KAAAA,EAAAA;AAAtB,GAAP;AAVK,CAAA;;AAaA,IAAMK,YAAY,GAAG;AAAA;;AAAA,MAAC,QAAD,SAAC,QAAD;AAAA,MAAC,QAAD,SAAC,QAAD;AAAA,MAAuBL,KAAvB,SAAuBA,KAAvB;AAAA,2BAC1B,QAD0B,IACd,CAAC;AAAEC,WAAKC;AAAP,GAAD,EAAA,KAAA,CADc;AAAA,CAArB","sourcesContent":["import jsonLogic from 'json-logic-js';\n\nconst rulesToMerge = ['pdfComments', 'adminComments'];\n\nconst filterIsValid = (filter, variables) => jsonLogic.apply(filter, variables);\n\nconst mergeRules = ({ names = [], ...oldRules }, newRules) => {\n  let mergedObject = { ...oldRules };\n\n  Object.keys(newRules).forEach((newRuleName) => {\n    const newRule = newRules[newRuleName];\n\n    if (rulesToMerge.includes(newRuleName) && mergedObject[newRuleName]) {\n      mergedObject = {\n        ...mergedObject,\n        [newRuleName]: [...mergedObject[newRuleName], ...newRule],\n      };\n    } else if (newRule !== undefined && newRule !== null) {\n      mergedObject = { ...mergedObject, [newRuleName]: newRule };\n    }\n  });\n\n  return {\n    ...mergedObject,\n    names: [...names, newRules.name],\n  };\n};\n\nexport const getMatchingRules = (\n  lenderRules,\n  variables,\n  storeOrigin = () => {},\n) =>\n  lenderRules.reduce((validRules, { filter, ...rules }) => {\n    if (filterIsValid(filter, variables)) {\n      storeOrigin(rules, rules._id);\n      return mergeRules(validRules, rules);\n    }\n\n    return validRules;\n  }, {});\n\nexport const isAllRule = ({ filter: { and } }) => and[0] === true;\n\nexport const parseFilter = (ruleObject) => {\n  if (ruleObject === true) {\n    // Handle exception for rules that are true, i.e. apply to all loans\n    return { value: true };\n  }\n\n  const [operator] = Object.keys(ruleObject);\n  const { var: variable } = ruleObject[operator].find(o => o && o.var);\n  const value = ruleObject[operator].find(o => !(o && o.var));\n\n  return { operator, variable, value };\n};\n\nexport const formatFilter = ({ variable, operator, value }) => ({\n  [operator]: [{ var: variable }, value],\n});\n"]},"sourceType":"script","hash":"d64c35beaaa06467a21cc12ad11e5feb6c786ad3"}

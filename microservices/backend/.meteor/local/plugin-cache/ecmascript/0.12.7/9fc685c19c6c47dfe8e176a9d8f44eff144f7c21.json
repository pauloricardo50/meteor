{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/maps/test/googleMapsHelpers.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/components/maps/test/googleMapsHelpers.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/maps/test/googleMapsHelpers.test.js","inputSourceMap":{"version":3,"sources":["imports/core/components/maps/test/googleMapsHelpers.test.js"],"names":["expect","getAddressString","isIncompleteAddress","describe","address","beforeEach","address1","city","zipCode","it","to","equal"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,MAAvB;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B;AAEAC,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClC,MAAIC,OAAJ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,OAAO,GAAG;AAAEE,MAAAA,QAAQ,EAAE,aAAZ;AAA2BC,MAAAA,IAAI,EAAE,WAAjC;AAA8CC,MAAAA,OAAO,EAAE;AAAvD,KAAV;AACD,GAFS,CAAV;AAIAL,EAAAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpCM,IAAAA,EAAE,CAAC,6CAAD,EAAgD,MAAM;AACtDL,MAAAA,OAAO,GAAG;AAAEG,QAAAA,IAAI,EAAE,WAAR;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAV;AACAR,MAAAA,MAAM,CAACE,mBAAmB,CAACE,OAAD,CAApB,CAAN,CAAqCM,EAArC,CAAwCC,KAAxC,CAA8C,IAA9C;AACD,KAHC,CAAF;AAKAF,IAAAA,EAAE,CAAC,kDAAD,EAAqD,MAAM;AAC3DL,MAAAA,OAAO,GAAG;AAAEE,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,IAAI,EAAE,WAAtB;AAAmCC,QAAAA,OAAO,EAAE;AAA5C,OAAV;AACAR,MAAAA,MAAM,CAACE,mBAAmB,CAACE,OAAD,CAApB,CAAN,CAAqCM,EAArC,CAAwCC,KAAxC,CAA8C,IAA9C;AACD,KAHC,CAAF;AAKAF,IAAAA,EAAE,CAAC,4CAAD,EAA+C,MAAM;AACrDT,MAAAA,MAAM,CAACE,mBAAmB,CAACE,OAAD,CAApB,CAAN,CAAqCM,EAArC,CAAwCC,KAAxC,CAA8C,KAA9C;AACD,KAFC,CAAF;AAGD,GAdO,CAAR;AAgBAR,EAAAA,QAAQ,CAAC,kBAAD,EAAqB,MAAM;AACjCM,IAAAA,EAAE,CAAC,4BAAD,EAA+B,MAAM;AACrCT,MAAAA,MAAM,CAACC,gBAAgB,CAACG,OAAD,CAAjB,CAAN,CAAkCM,EAAlC,CAAqCC,KAArC,CAA2C,+BAA3C;AACD,KAFC,CAAF;AAGD,GAJO,CAAR;AAKD,CA5BO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { getAddressString, isIncompleteAddress } from '../googleMapsHelpers';\n\ndescribe('googleMapsHelpers', () => {\n  let address;\n\n  beforeEach(() => {\n    address = { address1: 'Thamel Marg', city: 'Kathmandu', zipCode: '123456' };\n  });\n\n  describe('isIncompleteAddress', () => {\n    it('returns true when the address is incomplete', () => {\n      address = { city: 'Kathmandu', zipCode: '123456' };\n      expect(isIncompleteAddress(address)).to.equal(true);\n    });\n\n    it('returns true when the address is an empty string', () => {\n      address = { address1: '', city: 'Kathmandu', zipCode: '123456' };\n      expect(isIncompleteAddress(address)).to.equal(true);\n    });\n\n    it('returns false when the address is complete', () => {\n      expect(isIncompleteAddress(address)).to.equal(false);\n    });\n  });\n\n  describe('getAddressString', () => {\n    it('returns a formated address', () => {\n      expect(getAddressString(address)).to.equal('Thamel Marg, 123456 Kathmandu');\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/maps/test/googleMapsHelpers.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/maps/test/googleMapsHelpers.test.js"}},"code":"var expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 0);\nvar getAddressString, isIncompleteAddress;\nmodule.link(\"../googleMapsHelpers\", {\n  getAddressString: function (v) {\n    getAddressString = v;\n  },\n  isIncompleteAddress: function (v) {\n    isIncompleteAddress = v;\n  }\n}, 1);\ndescribe('googleMapsHelpers', function () {\n  var address;\n  beforeEach(function () {\n    address = {\n      address1: 'Thamel Marg',\n      city: 'Kathmandu',\n      zipCode: '123456'\n    };\n  });\n  describe('isIncompleteAddress', function () {\n    it('returns true when the address is incomplete', function () {\n      address = {\n        city: 'Kathmandu',\n        zipCode: '123456'\n      };\n      expect(isIncompleteAddress(address)).to.equal(true);\n    });\n    it('returns true when the address is an empty string', function () {\n      address = {\n        address1: '',\n        city: 'Kathmandu',\n        zipCode: '123456'\n      };\n      expect(isIncompleteAddress(address)).to.equal(true);\n    });\n    it('returns false when the address is complete', function () {\n      expect(isIncompleteAddress(address)).to.equal(false);\n    });\n  });\n  describe('getAddressString', function () {\n    it('returns a formated address', function () {\n      expect(getAddressString(address)).to.equal('Thamel Marg, 123456 Kathmandu');\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/maps/test/googleMapsHelpers.test.js"],"names":["describe","beforeEach","address","address1","city","zipCode","it","expect","isIncompleteAddress","getAddressString"],"mappings":"AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,YAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,gBAAA,EAAA,mBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,EAAA;AAAA,EAAA,gBAAA,YAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAAA,GAAA;AAAA,EAAA,mBAAA,YAAA,CAAA,EAAA;AAAA,IAAA,mBAAA,GAAA,CAAA;AAAA;AAAA,CAAA,EAAA,CAAA;AAKAA,QAAQ,CAAA,mBAAA,EAAsB,YAAM;AAClC,MAAA,OAAA;AAEAC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,OAAO,GAAG;AAAEC,MAAAA,QAAQ,EAAV,aAAA;AAA2BC,MAAAA,IAAI,EAA/B,WAAA;AAA8CC,MAAAA,OAAO,EAAE;AAAvD,KAAVH;AADFD,GAAU,CAAVA;AAIAD,EAAAA,QAAQ,CAAA,qBAAA,EAAwB,YAAM;AACpCM,IAAAA,EAAE,CAAA,6CAAA,EAAgD,YAAM;AACtDJ,MAAAA,OAAO,GAAG;AAAEE,QAAAA,IAAI,EAAN,WAAA;AAAqBC,QAAAA,OAAO,EAAE;AAA9B,OAAVH;AACAK,MAAAA,MAAM,CAACC,mBAAmB,CAA1BD,OAA0B,CAApB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAFFD,KAAE,CAAFA;AAKAA,IAAAA,EAAE,CAAA,kDAAA,EAAqD,YAAM;AAC3DJ,MAAAA,OAAO,GAAG;AAAEC,QAAAA,QAAQ,EAAV,EAAA;AAAgBC,QAAAA,IAAI,EAApB,WAAA;AAAmCC,QAAAA,OAAO,EAAE;AAA5C,OAAVH;AACAK,MAAAA,MAAM,CAACC,mBAAmB,CAA1BD,OAA0B,CAApB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAFFD,KAAE,CAAFA;AAKAA,IAAAA,EAAE,CAAA,4CAAA,EAA+C,YAAM;AACrDC,MAAAA,MAAM,CAACC,mBAAmB,CAA1BD,OAA0B,CAApB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,KAAAA;AADFD,KAAE,CAAFA;AAXFN,GAAQ,CAARA;AAgBAA,EAAAA,QAAQ,CAAA,kBAAA,EAAqB,YAAM;AACjCM,IAAAA,EAAE,CAAA,4BAAA,EAA+B,YAAM;AACrCC,MAAAA,MAAM,CAACE,gBAAgB,CAAvBF,OAAuB,CAAjB,CAANA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,+BAAAA;AADFD,KAAE,CAAFA;AADFN,GAAQ,CAARA;AAvBFA,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { getAddressString, isIncompleteAddress } from '../googleMapsHelpers';\n\ndescribe('googleMapsHelpers', () => {\n  let address;\n\n  beforeEach(() => {\n    address = { address1: 'Thamel Marg', city: 'Kathmandu', zipCode: '123456' };\n  });\n\n  describe('isIncompleteAddress', () => {\n    it('returns true when the address is incomplete', () => {\n      address = { city: 'Kathmandu', zipCode: '123456' };\n      expect(isIncompleteAddress(address)).to.equal(true);\n    });\n\n    it('returns true when the address is an empty string', () => {\n      address = { address1: '', city: 'Kathmandu', zipCode: '123456' };\n      expect(isIncompleteAddress(address)).to.equal(true);\n    });\n\n    it('returns false when the address is complete', () => {\n      expect(isIncompleteAddress(address)).to.equal(false);\n    });\n  });\n\n  describe('getAddressString', () => {\n    it('returns a formated address', () => {\n      expect(getAddressString(address)).to.equal('Thamel Marg, 123456 Kathmandu');\n    });\n  });\n});\n"]},"sourceType":"script","hash":"9fc685c19c6c47dfe8e176a9d8f44eff144f7c21"}

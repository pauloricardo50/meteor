{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/server/test/collectionSecurity.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/security/server/test/collectionSecurity.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/server/test/collectionSecurity.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/security/server/test/collectionSecurity.test.js"],"names":["expect","Meteor","Factory","resetDatabase","sinon","PROMOTION_PERMISSIONS","LOAN_STATUS","SecurityService","SECURITY_ERROR","ROLES","PromotionService","LoanService","generator","PROPERTY_CATEGORY","describe","beforeEach","userRole","USER","adminRole","ADMIN","devRole","DEV","otherRole","admin","create","stub","callsFake","_id","afterEach","userId","restore","it","users","isAllowedToInsertByRole","to","throw","role","user","userId2","adminId","devId","loanId","undefined","loans","isAllowedToInsert","isAllowedToUpdate","not","equal","anonymous","status","UNSUCCESSFUL","borrowers","_factory","promotionId","promotions","isAllowedToModify","addProUser","setUserPermissions","permissions","canModifyPromotion","hasAccessToPromotion","addLink","id","linkName","linkId","properties","promotionLots","propertyLinks","hasAccessToPromotionLot","promotionLotId","promotionOptionId","hasAccessToPromotionOption","isAllowedToSeePromotionCustomer","$metadata","invitedBy","displayCustomerNames","forLotStatus","Object","values","DISPLAY_CUSTOMER_NAMES","FOR_LOT_STATUS","promotionOptions","attributedTo","category","PRO","canModifyProperty","PROMOTION"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport sinon from 'sinon';\n\nimport { PROMOTION_PERMISSIONS } from 'core/api/promotions/promotionConstants';\nimport { LOAN_STATUS } from 'core/api/loans/loanConstants';\nimport SecurityService, { SECURITY_ERROR } from '../..';\nimport { ROLES } from '../../../constants';\nimport PromotionService from '../../../promotions/server/PromotionService';\nimport LoanService from '../../../loans/server/LoanService';\nimport generator from '../../../factories';\nimport { PROPERTY_CATEGORY } from '../../../properties/propertyConstants';\n\ndescribe('Collection Security', () => {\n  describe('UserSecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n    });\n\n    describe('isAllowedToInsertByRole', () => {\n      const userRole = ROLES.USER;\n      const adminRole = ROLES.ADMIN;\n      const devRole = ROLES.DEV;\n      const otherRole = 'OTHER';\n      let admin;\n\n      beforeEach(() => {\n        admin = Factory.create('admin');\n        sinon.stub(Meteor, 'userId').callsFake(() => admin._id);\n      });\n\n      afterEach(() => {\n        if (Meteor.userId.restore) {\n          Meteor.userId.restore();\n        }\n      });\n\n      it('throws if no argument is provided', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole()).to.throw();\n      });\n\n      it('throws if no role is provided', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({})).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if passed another role than the ones defined', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: otherRole })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if you try to add devs without dev privileges', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: devRole })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if you try to add admins without dev privileges', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: adminRole })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if you try to add users with user privileges', () => {\n        const user = Factory.create('user')._id;\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => user._id);\n\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: userRole })).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('LoanSecurity', () => {\n    let userId;\n    let userId2;\n    let adminId;\n    let devId;\n    let loanId;\n\n    beforeEach(() => {\n      resetDatabase();\n      userId = Factory.create('user')._id;\n      userId2 = Factory.create('user')._id;\n      adminId = Factory.create('admin')._id;\n      devId = Factory.create('dev')._id;\n      loanId = Factory.create('loan', { userId })._id;\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n\n    afterEach(() => {\n      Meteor.userId.restore();\n    });\n\n    describe('isAllowedToInsert', () => {\n      it('should throw if the user is not logged in', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n\n        expect(() => SecurityService.loans.isAllowedToInsert()).to.throw(SECURITY_ERROR);\n      });\n\n      it('should not do anything if the user is logged in', () => {\n        SecurityService.loans.isAllowedToInsert();\n      });\n    });\n\n    describe('isAllowedToUpdate', () => {\n      it('should not do anything if the user is the owner', () => {\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n\n      it('should not do anything if the user is an admin', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => adminId);\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n\n      it('should not do anything if the user is a dev', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => devId);\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n\n      it('should throw if the user is not the owner', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => userId2);\n\n        expect(userId).to.not.equal(userId2);\n        expect(() => SecurityService.loans.isAllowedToUpdate(loanId)).to.throw(SECURITY_ERROR);\n      });\n\n      it('should not do anything for anonymous loans', () => {\n        generator({ loans: { _id: 'loanId', anonymous: true } });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.not.throw();\n      });\n\n      it('should not do anything for non anonymous loans without userIds', () => {\n        generator({ loans: { _id: 'loanId' } });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n\n      it('should throw for expired anonymous loans', () => {\n        generator({\n          loans: {\n            _id: 'loanId',\n            anonymous: true,\n            status: LOAN_STATUS.UNSUCCESSFUL,\n          },\n        });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n\n      it('should throw for accidental anonymous loans', () => {\n        generator({\n          loans: { _id: 'loanId', anonymous: true, userId: 'someId' },\n        });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('BorrowerSecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n      sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n    });\n\n    afterEach(() => {\n      Meteor.userId.restore();\n    });\n\n    describe('isAllowedToUpdate', () => {\n      it('should not do anything if the user is the owner', () => {\n        generator({\n          borrowers: { _id: 'borrowerId', user: { _id: 'userId' } },\n        });\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n\n      it('should not do anything if the user is an admin', () => {\n        generator({\n          borrowers: { _id: 'borrowerId' },\n          users: { _id: 'adminId', _factory: 'admin' },\n        });\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => 'adminId');\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n\n      it('should not do anything if the borrower is on one anonymous loan', () => {\n        generator({\n          borrowers: { _id: 'borrowerId', loans: { anonymous: true } },\n        });\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n\n      it('should throw if the borrower is on multiple loans', () => {\n        generator({\n          borrowers: { _id: 'borrowerId', loans: [{ anonymous: true }, {}] },\n        });\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('PromotionSecurity', () => {\n    let userId;\n    beforeEach(() => {\n      resetDatabase();\n    });\n\n    beforeEach(() => {\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n\n    afterEach(() => {\n      if (Meteor.userId.restore) {\n        Meteor.userId.restore();\n      }\n    });\n\n    describe('isAllowedToModify', () => {\n      it('throws if the user is not linked to this promotion', () => {\n        userId = Factory.create('pro')._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToModify({ promotionId, userId })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if the user is a PRO without permissions', () => {\n        userId = Factory.create('user')._id;\n        const promotionId = Factory.create('promotion')._id;\n        PromotionService.addProUser({ promotionId, userId });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: { canModifyPromotion: false },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToModify({ promotionId, userId })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the user is a PRO with MODIFY on it', () => {\n        userId = Factory.create('pro')._id;\n        const promotionId = Factory.create('promotion')._id;\n        PromotionService.addProUser({ promotionId, userId });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: { canModifyPromotion: true },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToModify({ promotionId, userId })).to.not.throw();\n      });\n    });\n\n    describe('hasAccessToPromotion', () => {\n      it('throws if the user has no loan linked to this promotion', () => {\n        userId = Factory.create('user')._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the user has a loan linked to this promotion', () => {\n        userId = Factory.create('user')._id;\n        const loanId = Factory.create('loan', { userId })._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId,\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.not.throw();\n      });\n\n      it('does not throw if the user is a PRO with right permissions', () => {\n        userId = Factory.create('pro')._id;\n        const promotionId = Factory.create('promotion')._id;\n        PromotionService.addProUser({ promotionId, userId });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: {},\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.not.throw();\n      });\n\n      it('does not throw if user is an admin', () => {\n        userId = Factory.create('admin')._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.not.throw();\n      });\n    });\n\n    describe('hasAccessToPromotionLot', () => {\n      it('throws if the user is not on this promotion', () => {\n        generator({\n          users: { _id: 'userId', loans: { _id: 'loanId' } },\n          properties: { _id: 'propId' },\n          promotions: [\n            {\n              promotionLots: {\n                _id: 'pLotId',\n                propertyLinks: [{ _id: 'propId' }],\n              },\n            },\n            { loans: { _id: 'loanId' } },\n          ],\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionLot({\n            promotionLotId: 'pLotId',\n            userId: 'userId',\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the user is on the promotion', () => {\n        generator({\n          users: { _id: 'userId', loans: { _id: 'loanId' } },\n          properties: { _id: 'propId' },\n          promotions: {\n            promotionLots: {\n              _id: 'pLotId',\n              propertyLinks: [{ _id: 'propId' }],\n            },\n            loans: { _id: 'loanId' },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionLot({\n            promotionLotId: 'pLotId',\n            userId: 'userId',\n          })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n\n    describe('hasAccessToPromotionOption', () => {\n      it('throws if the option is not on the users loan', () => {\n        userId = Factory.create('user')._id;\n        const loanId = Factory.create('loan', { userId })._id;\n        const promotionId = Factory.create('promotion')._id;\n        const promotionOptionId = Factory.create('promotionOption')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId,\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionOption({\n            promotionOptionId,\n            userId,\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the option is on the users loan', () => {\n        userId = Factory.create('user')._id;\n        const loanId = Factory.create('loan', { userId })._id;\n        const promotionId = Factory.create('promotion')._id;\n        const promotionOptionId = Factory.create('promotionOption')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId,\n        });\n        LoanService.addLink({\n          id: loanId,\n          linkName: 'promotionOptions',\n          linkId: promotionOptionId,\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionOption({\n            promotionOptionId,\n            userId,\n          })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n\n    describe('isAllowedToSeePromotionCustomer', () => {\n      it('does not throw if the user is admin', () => {\n        generator({\n          users: { _factory: 'admin', _id: 'adminId' },\n          promotions: { _id: 'promotionId', loans: { _id: 'loanId' } },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'adminId',\n            loanId: 'loanId',\n          })).to.not.throw();\n      });\n\n      it('throws if the pro is not on this promotion', () => {\n        generator({\n          users: { _factory: 'pro', _id: 'proId' },\n          promotions: { _id: 'promotionId', loans: { _id: 'loanId' } },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if the pro is not allowed to see customers', () => {\n        generator({\n          promotions: {\n            _id: 'promotionId',\n            loans: { _id: 'loanId' },\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: { permissions: {} },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the pro is allowed to see customers', () => {\n        generator({\n          promotions: {\n            _id: 'promotionId',\n            loans: {\n              _id: 'loanId',\n              $metadata: { invitedBy: 'proId' },\n              user: {},\n            },\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  displayCustomerNames: {\n                    invitedBy: 'ANY',\n                    forLotStatus: Object.values(PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES\n                      .FOR_LOT_STATUS),\n                  },\n                },\n              },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.not.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the pro is allowed to see customers 2', () => {\n        generator({\n          properties: { _id: 'prop' },\n          promotions: {\n            _id: 'promotionId',\n            loans: [\n              {\n                _id: 'loanId',\n                $metadata: { invitedBy: 'proId' },\n                user: {},\n                promotionOptions: {\n                  promotionLots: {\n                    _id: 'bookedPromotionLot',\n                    status: 'BOOKED',\n                    propertyLinks: [{ _id: 'prop' }],\n                    attributedTo: { _id: 'loanId' },\n                  },\n                },\n              },\n              {\n                _id: 'loanId2',\n                $metadata: { invitedBy: 'proId' },\n                user: {},\n                promotionOptions: {\n                  promotionLots: {\n                    _id: 'soldPromotionLot',\n                    status: 'SOLD',\n                    propertyLinks: [{ _id: 'prop' }],\n                    attributedTo: { _id: 'loanId2' },\n                  },\n                },\n              },\n            ],\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  displayCustomerNames: {\n                    invitedBy: 'ANY',\n                    forLotStatus: 'SOLD',\n                  },\n                },\n              },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.throw(SECURITY_ERROR);\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId2',\n          })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('PropertySecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n    });\n\n    describe('isAllowedToUpdate', () => {\n      it('does not throw if user is admin', () => {\n        generator({\n          users: [{ _id: 'adminId', _factory: 'admin' }],\n          properties: [{ _id: 'propertyId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'adminId')).to.not.throw();\n      });\n\n      it('does throw if user is pro and is not allowed to update', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: [{ _id: 'propertyId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier ce bien immobilier');\n      });\n\n      it('does throw if user is user and is not allowed to update', () => {\n        generator({\n          users: [{ _id: 'userId' }],\n          properties: [{ _id: 'propertyId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'userId')).to.throw('Checking ownership [NOT_AUTHORIZED]');\n      });\n\n      it('does not throw if user is user and is allowed to update', () => {\n        generator({\n          users: [{ _id: 'userId' }],\n          properties: [{ _id: 'propertyId', userId: 'userId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'userId')).to.not.throw();\n      });\n\n      it('does not throw if user is pro and is allowed to update PRO property', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyProperty: true } },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.not.throw();\n      });\n\n      it('does throw if user is pro and is not allowed to update PRO property', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyProperty: false } },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier ce bien immobilier');\n      });\n\n      it('does throw if user is pro and is not allowed to update PROMOTION property', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PROMOTION,\n          },\n\n          promotions: {\n            _id: 'promotionId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyPromotion: false } },\n            },\n\n            propertyLinks: [{ _id: 'propertyId' }],\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier cette promotion');\n      });\n\n      it('does not throw if user is pro and is allowed to update PROMOTION property', () => {\n        generator({\n          users: { _id: 'proId', _factory: 'pro' },\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PROMOTION,\n          },\n\n          promotions: {\n            _id: 'promotionId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyPromotion: true } },\n            },\n            propertyLinks: [{ _id: 'propertyId' }],\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.not.throw();\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/security/server/test/collectionSecurity.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/security/server/test/collectionSecurity.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 3);\nlet sinon;\nmodule.link(\"sinon\", {\n  default(v) {\n    sinon = v;\n  }\n\n}, 4);\nlet PROMOTION_PERMISSIONS;\nmodule.link(\"../../../promotions/promotionConstants\", {\n  PROMOTION_PERMISSIONS(v) {\n    PROMOTION_PERMISSIONS = v;\n  }\n\n}, 5);\nlet LOAN_STATUS;\nmodule.link(\"../../../loans/loanConstants\", {\n  LOAN_STATUS(v) {\n    LOAN_STATUS = v;\n  }\n\n}, 6);\nlet SecurityService, SECURITY_ERROR;\nmodule.link(\"../..\", {\n  default(v) {\n    SecurityService = v;\n  },\n\n  SECURITY_ERROR(v) {\n    SECURITY_ERROR = v;\n  }\n\n}, 7);\nlet ROLES;\nmodule.link(\"../../../constants\", {\n  ROLES(v) {\n    ROLES = v;\n  }\n\n}, 8);\nlet PromotionService;\nmodule.link(\"../../../promotions/server/PromotionService\", {\n  default(v) {\n    PromotionService = v;\n  }\n\n}, 9);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 10);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 11);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 12);\ndescribe('Collection Security', () => {\n  describe('UserSecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n    });\n    describe('isAllowedToInsertByRole', () => {\n      const userRole = ROLES.USER;\n      const adminRole = ROLES.ADMIN;\n      const devRole = ROLES.DEV;\n      const otherRole = 'OTHER';\n      let admin;\n      beforeEach(() => {\n        admin = Factory.create('admin');\n        sinon.stub(Meteor, 'userId').callsFake(() => admin._id);\n      });\n      afterEach(() => {\n        if (Meteor.userId.restore) {\n          Meteor.userId.restore();\n        }\n      });\n      it('throws if no argument is provided', () => {\n        expect(() => SecurityService.users.isAllowedToInsertByRole()).to.throw();\n      });\n      it('throws if no role is provided', () => {\n        expect(() => SecurityService.users.isAllowedToInsertByRole({})).to.throw(SECURITY_ERROR);\n      });\n      it('throws if passed another role than the ones defined', () => {\n        expect(() => SecurityService.users.isAllowedToInsertByRole({\n          role: otherRole\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('throws if you try to add devs without dev privileges', () => {\n        expect(() => SecurityService.users.isAllowedToInsertByRole({\n          role: devRole\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('throws if you try to add admins without dev privileges', () => {\n        expect(() => SecurityService.users.isAllowedToInsertByRole({\n          role: adminRole\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('throws if you try to add users with user privileges', () => {\n        const user = Factory.create('user')._id;\n\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => user._id);\n        expect(() => SecurityService.users.isAllowedToInsertByRole({\n          role: userRole\n        })).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n  describe('LoanSecurity', () => {\n    let userId;\n    let userId2;\n    let adminId;\n    let devId;\n    let loanId;\n    beforeEach(() => {\n      resetDatabase();\n      userId = Factory.create('user')._id;\n      userId2 = Factory.create('user')._id;\n      adminId = Factory.create('admin')._id;\n      devId = Factory.create('dev')._id;\n      loanId = Factory.create('loan', {\n        userId\n      })._id;\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n    afterEach(() => {\n      Meteor.userId.restore();\n    });\n    describe('isAllowedToInsert', () => {\n      it('should throw if the user is not logged in', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n        expect(() => SecurityService.loans.isAllowedToInsert()).to.throw(SECURITY_ERROR);\n      });\n      it('should not do anything if the user is logged in', () => {\n        SecurityService.loans.isAllowedToInsert();\n      });\n    });\n    describe('isAllowedToUpdate', () => {\n      it('should not do anything if the user is the owner', () => {\n        expect(() => SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n      it('should not do anything if the user is an admin', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => adminId);\n        expect(() => SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n      it('should not do anything if the user is a dev', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => devId);\n        expect(() => SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n      it('should throw if the user is not the owner', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => userId2);\n        expect(userId).to.not.equal(userId2);\n        expect(() => SecurityService.loans.isAllowedToUpdate(loanId)).to.throw(SECURITY_ERROR);\n      });\n      it('should not do anything for anonymous loans', () => {\n        generator({\n          loans: {\n            _id: 'loanId',\n            anonymous: true\n          }\n        });\n        expect(() => SecurityService.loans.isAllowedToUpdate('loanId')).to.not.throw();\n      });\n      it('should not do anything for non anonymous loans without userIds', () => {\n        generator({\n          loans: {\n            _id: 'loanId'\n          }\n        });\n        expect(() => SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n      it('should throw for expired anonymous loans', () => {\n        generator({\n          loans: {\n            _id: 'loanId',\n            anonymous: true,\n            status: LOAN_STATUS.UNSUCCESSFUL\n          }\n        });\n        expect(() => SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n      it('should throw for accidental anonymous loans', () => {\n        generator({\n          loans: {\n            _id: 'loanId',\n            anonymous: true,\n            userId: 'someId'\n          }\n        });\n        expect(() => SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n  describe('BorrowerSecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n      sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n    });\n    afterEach(() => {\n      Meteor.userId.restore();\n    });\n    describe('isAllowedToUpdate', () => {\n      it('should not do anything if the user is the owner', () => {\n        generator({\n          borrowers: {\n            _id: 'borrowerId',\n            user: {\n              _id: 'userId'\n            }\n          }\n        });\n        expect(() => SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n      it('should not do anything if the user is an admin', () => {\n        generator({\n          borrowers: {\n            _id: 'borrowerId'\n          },\n          users: {\n            _id: 'adminId',\n            _factory: 'admin'\n          }\n        });\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => 'adminId');\n        expect(() => SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n      it('should not do anything if the borrower is on one anonymous loan', () => {\n        generator({\n          borrowers: {\n            _id: 'borrowerId',\n            loans: {\n              anonymous: true\n            }\n          }\n        });\n        expect(() => SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n      it('should throw if the borrower is on multiple loans', () => {\n        generator({\n          borrowers: {\n            _id: 'borrowerId',\n            loans: [{\n              anonymous: true\n            }, {}]\n          }\n        });\n        expect(() => SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n  describe('PromotionSecurity', () => {\n    let userId;\n    beforeEach(() => {\n      resetDatabase();\n    });\n    beforeEach(() => {\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n    afterEach(() => {\n      if (Meteor.userId.restore) {\n        Meteor.userId.restore();\n      }\n    });\n    describe('isAllowedToModify', () => {\n      it('throws if the user is not linked to this promotion', () => {\n        userId = Factory.create('pro')._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() => SecurityService.promotions.isAllowedToModify({\n          promotionId,\n          userId\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('throws if the user is a PRO without permissions', () => {\n        userId = Factory.create('user')._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        PromotionService.addProUser({\n          promotionId,\n          userId\n        });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: {\n            canModifyPromotion: false\n          }\n        });\n        expect(() => SecurityService.promotions.isAllowedToModify({\n          promotionId,\n          userId\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('does not throw if the user is a PRO with MODIFY on it', () => {\n        userId = Factory.create('pro')._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        PromotionService.addProUser({\n          promotionId,\n          userId\n        });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: {\n            canModifyPromotion: true\n          }\n        });\n        expect(() => SecurityService.promotions.isAllowedToModify({\n          promotionId,\n          userId\n        })).to.not.throw();\n      });\n    });\n    describe('hasAccessToPromotion', () => {\n      it('throws if the user has no loan linked to this promotion', () => {\n        userId = Factory.create('user')._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() => SecurityService.promotions.hasAccessToPromotion({\n          promotionId,\n          userId\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('does not throw if the user has a loan linked to this promotion', () => {\n        userId = Factory.create('user')._id;\n\n        const loanId = Factory.create('loan', {\n          userId\n        })._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId\n        });\n        expect(() => SecurityService.promotions.hasAccessToPromotion({\n          promotionId,\n          userId\n        })).to.not.throw();\n      });\n      it('does not throw if the user is a PRO with right permissions', () => {\n        userId = Factory.create('pro')._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        PromotionService.addProUser({\n          promotionId,\n          userId\n        });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: {}\n        });\n        expect(() => SecurityService.promotions.hasAccessToPromotion({\n          promotionId,\n          userId\n        })).to.not.throw();\n      });\n      it('does not throw if user is an admin', () => {\n        userId = Factory.create('admin')._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() => SecurityService.promotions.hasAccessToPromotion({\n          promotionId,\n          userId\n        })).to.not.throw();\n      });\n    });\n    describe('hasAccessToPromotionLot', () => {\n      it('throws if the user is not on this promotion', () => {\n        generator({\n          users: {\n            _id: 'userId',\n            loans: {\n              _id: 'loanId'\n            }\n          },\n          properties: {\n            _id: 'propId'\n          },\n          promotions: [{\n            promotionLots: {\n              _id: 'pLotId',\n              propertyLinks: [{\n                _id: 'propId'\n              }]\n            }\n          }, {\n            loans: {\n              _id: 'loanId'\n            }\n          }]\n        });\n        expect(() => SecurityService.promotions.hasAccessToPromotionLot({\n          promotionLotId: 'pLotId',\n          userId: 'userId'\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('does not throw if the user is on the promotion', () => {\n        generator({\n          users: {\n            _id: 'userId',\n            loans: {\n              _id: 'loanId'\n            }\n          },\n          properties: {\n            _id: 'propId'\n          },\n          promotions: {\n            promotionLots: {\n              _id: 'pLotId',\n              propertyLinks: [{\n                _id: 'propId'\n              }]\n            },\n            loans: {\n              _id: 'loanId'\n            }\n          }\n        });\n        expect(() => SecurityService.promotions.hasAccessToPromotionLot({\n          promotionLotId: 'pLotId',\n          userId: 'userId'\n        })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n    describe('hasAccessToPromotionOption', () => {\n      it('throws if the option is not on the users loan', () => {\n        userId = Factory.create('user')._id;\n\n        const loanId = Factory.create('loan', {\n          userId\n        })._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        const promotionOptionId = Factory.create('promotionOption')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId\n        });\n        expect(() => SecurityService.promotions.hasAccessToPromotionOption({\n          promotionOptionId,\n          userId\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('does not throw if the option is on the users loan', () => {\n        userId = Factory.create('user')._id;\n\n        const loanId = Factory.create('loan', {\n          userId\n        })._id;\n\n        const promotionId = Factory.create('promotion')._id;\n\n        const promotionOptionId = Factory.create('promotionOption')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId\n        });\n        LoanService.addLink({\n          id: loanId,\n          linkName: 'promotionOptions',\n          linkId: promotionOptionId\n        });\n        expect(() => SecurityService.promotions.hasAccessToPromotionOption({\n          promotionOptionId,\n          userId\n        })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n    describe('isAllowedToSeePromotionCustomer', () => {\n      it('does not throw if the user is admin', () => {\n        generator({\n          users: {\n            _factory: 'admin',\n            _id: 'adminId'\n          },\n          promotions: {\n            _id: 'promotionId',\n            loans: {\n              _id: 'loanId'\n            }\n          }\n        });\n        expect(() => SecurityService.promotions.isAllowedToSeePromotionCustomer({\n          promotionId: 'promotionId',\n          userId: 'adminId',\n          loanId: 'loanId'\n        })).to.not.throw();\n      });\n      it('throws if the pro is not on this promotion', () => {\n        generator({\n          users: {\n            _factory: 'pro',\n            _id: 'proId'\n          },\n          promotions: {\n            _id: 'promotionId',\n            loans: {\n              _id: 'loanId'\n            }\n          }\n        });\n        expect(() => SecurityService.promotions.isAllowedToSeePromotionCustomer({\n          promotionId: 'promotionId',\n          userId: 'proId',\n          loanId: 'loanId'\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('throws if the pro is not allowed to see customers', () => {\n        generator({\n          promotions: {\n            _id: 'promotionId',\n            loans: {\n              _id: 'loanId'\n            },\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: {\n                permissions: {}\n              }\n            }\n          }\n        });\n        expect(() => SecurityService.promotions.isAllowedToSeePromotionCustomer({\n          promotionId: 'promotionId',\n          userId: 'proId',\n          loanId: 'loanId'\n        })).to.throw(SECURITY_ERROR);\n      });\n      it('does not throw if the pro is allowed to see customers', () => {\n        generator({\n          promotions: {\n            _id: 'promotionId',\n            loans: {\n              _id: 'loanId',\n              $metadata: {\n                invitedBy: 'proId'\n              },\n              user: {}\n            },\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  displayCustomerNames: {\n                    invitedBy: 'ANY',\n                    forLotStatus: Object.values(PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES.FOR_LOT_STATUS)\n                  }\n                }\n              }\n            }\n          }\n        });\n        expect(() => SecurityService.promotions.isAllowedToSeePromotionCustomer({\n          promotionId: 'promotionId',\n          userId: 'proId',\n          loanId: 'loanId'\n        })).to.not.throw(SECURITY_ERROR);\n      });\n      it('does not throw if the pro is allowed to see customers 2', () => {\n        generator({\n          properties: {\n            _id: 'prop'\n          },\n          promotions: {\n            _id: 'promotionId',\n            loans: [{\n              _id: 'loanId',\n              $metadata: {\n                invitedBy: 'proId'\n              },\n              user: {},\n              promotionOptions: {\n                promotionLots: {\n                  _id: 'bookedPromotionLot',\n                  status: 'BOOKED',\n                  propertyLinks: [{\n                    _id: 'prop'\n                  }],\n                  attributedTo: {\n                    _id: 'loanId'\n                  }\n                }\n              }\n            }, {\n              _id: 'loanId2',\n              $metadata: {\n                invitedBy: 'proId'\n              },\n              user: {},\n              promotionOptions: {\n                promotionLots: {\n                  _id: 'soldPromotionLot',\n                  status: 'SOLD',\n                  propertyLinks: [{\n                    _id: 'prop'\n                  }],\n                  attributedTo: {\n                    _id: 'loanId2'\n                  }\n                }\n              }\n            }],\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  displayCustomerNames: {\n                    invitedBy: 'ANY',\n                    forLotStatus: 'SOLD'\n                  }\n                }\n              }\n            }\n          }\n        });\n        expect(() => SecurityService.promotions.isAllowedToSeePromotionCustomer({\n          promotionId: 'promotionId',\n          userId: 'proId',\n          loanId: 'loanId'\n        })).to.throw(SECURITY_ERROR);\n        expect(() => SecurityService.promotions.isAllowedToSeePromotionCustomer({\n          promotionId: 'promotionId',\n          userId: 'proId',\n          loanId: 'loanId2'\n        })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n  });\n  describe('PropertySecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n    });\n    describe('isAllowedToUpdate', () => {\n      it('does not throw if user is admin', () => {\n        generator({\n          users: [{\n            _id: 'adminId',\n            _factory: 'admin'\n          }],\n          properties: [{\n            _id: 'propertyId'\n          }]\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'adminId')).to.not.throw();\n      });\n      it('does throw if user is pro and is not allowed to update', () => {\n        generator({\n          users: [{\n            _id: 'proId',\n            _factory: 'pro'\n          }],\n          properties: [{\n            _id: 'propertyId'\n          }]\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier ce bien immobilier');\n      });\n      it('does throw if user is user and is not allowed to update', () => {\n        generator({\n          users: [{\n            _id: 'userId'\n          }],\n          properties: [{\n            _id: 'propertyId'\n          }]\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'userId')).to.throw('Checking ownership [NOT_AUTHORIZED]');\n      });\n      it('does not throw if user is user and is allowed to update', () => {\n        generator({\n          users: [{\n            _id: 'userId'\n          }],\n          properties: [{\n            _id: 'propertyId',\n            userId: 'userId'\n          }]\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'userId')).to.not.throw();\n      });\n      it('does not throw if user is pro and is allowed to update PRO property', () => {\n        generator({\n          users: [{\n            _id: 'proId',\n            _factory: 'pro'\n          }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  canModifyProperty: true\n                }\n              }\n            }\n          }\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.not.throw();\n      });\n      it('does throw if user is pro and is not allowed to update PRO property', () => {\n        generator({\n          users: [{\n            _id: 'proId',\n            _factory: 'pro'\n          }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  canModifyProperty: false\n                }\n              }\n            }\n          }\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier ce bien immobilier');\n      });\n      it('does throw if user is pro and is not allowed to update PROMOTION property', () => {\n        generator({\n          users: [{\n            _id: 'proId',\n            _factory: 'pro'\n          }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PROMOTION\n          },\n          promotions: {\n            _id: 'promotionId',\n            users: {\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  canModifyPromotion: false\n                }\n              }\n            },\n            propertyLinks: [{\n              _id: 'propertyId'\n            }]\n          }\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier cette promotion');\n      });\n      it('does not throw if user is pro and is allowed to update PROMOTION property', () => {\n        generator({\n          users: {\n            _id: 'proId',\n            _factory: 'pro'\n          },\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PROMOTION\n          },\n          promotions: {\n            _id: 'promotionId',\n            users: {\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  canModifyPromotion: true\n                }\n              }\n            },\n            propertyLinks: [{\n              _id: 'propertyId'\n            }]\n          }\n        });\n        expect(() => SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.not.throw();\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/security/server/test/collectionSecurity.test.js"],"names":["describe","beforeEach","resetDatabase","userRole","ROLES","adminRole","devRole","otherRole","admin","Factory","sinon","afterEach","Meteor","it","expect","SecurityService","role","user","userId","userId2","adminId","devId","loanId","generator","loans","_id","anonymous","status","LOAN_STATUS","UNSUCCESSFUL","borrowers","users","_factory","promotionId","PromotionService","permissions","canModifyPromotion","id","linkName","linkId","properties","promotions","promotionLots","propertyLinks","promotionLotId","promotionOptionId","LoanService","$metadata","invitedBy","displayCustomerNames","forLotStatus","Object","PROMOTION_PERMISSIONS","promotionOptions","attributedTo","category","PROPERTY_CATEGORY","canModifyProperty","PROMOTION"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport sinon from 'sinon';\n\nimport { PROMOTION_PERMISSIONS } from 'core/api/promotions/promotionConstants';\nimport { LOAN_STATUS } from 'core/api/loans/loanConstants';\nimport SecurityService, { SECURITY_ERROR } from '../..';\nimport { ROLES } from '../../../constants';\nimport PromotionService from '../../../promotions/server/PromotionService';\nimport LoanService from '../../../loans/server/LoanService';\nimport generator from '../../../factories';\nimport { PROPERTY_CATEGORY } from '../../../properties/propertyConstants';\n\ndescribe('Collection Security', () => {\n  describe('UserSecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n    });\n\n    describe('isAllowedToInsertByRole', () => {\n      const userRole = ROLES.USER;\n      const adminRole = ROLES.ADMIN;\n      const devRole = ROLES.DEV;\n      const otherRole = 'OTHER';\n      let admin;\n\n      beforeEach(() => {\n        admin = Factory.create('admin');\n        sinon.stub(Meteor, 'userId').callsFake(() => admin._id);\n      });\n\n      afterEach(() => {\n        if (Meteor.userId.restore) {\n          Meteor.userId.restore();\n        }\n      });\n\n      it('throws if no argument is provided', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole()).to.throw();\n      });\n\n      it('throws if no role is provided', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({})).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if passed another role than the ones defined', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: otherRole })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if you try to add devs without dev privileges', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: devRole })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if you try to add admins without dev privileges', () => {\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: adminRole })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if you try to add users with user privileges', () => {\n        const user = Factory.create('user')._id;\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => user._id);\n\n        expect(() =>\n          SecurityService.users.isAllowedToInsertByRole({ role: userRole })).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('LoanSecurity', () => {\n    let userId;\n    let userId2;\n    let adminId;\n    let devId;\n    let loanId;\n\n    beforeEach(() => {\n      resetDatabase();\n      userId = Factory.create('user')._id;\n      userId2 = Factory.create('user')._id;\n      adminId = Factory.create('admin')._id;\n      devId = Factory.create('dev')._id;\n      loanId = Factory.create('loan', { userId })._id;\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n\n    afterEach(() => {\n      Meteor.userId.restore();\n    });\n\n    describe('isAllowedToInsert', () => {\n      it('should throw if the user is not logged in', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n\n        expect(() => SecurityService.loans.isAllowedToInsert()).to.throw(SECURITY_ERROR);\n      });\n\n      it('should not do anything if the user is logged in', () => {\n        SecurityService.loans.isAllowedToInsert();\n      });\n    });\n\n    describe('isAllowedToUpdate', () => {\n      it('should not do anything if the user is the owner', () => {\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n\n      it('should not do anything if the user is an admin', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => adminId);\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n\n      it('should not do anything if the user is a dev', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => devId);\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate(loanId)).to.not.throw();\n      });\n\n      it('should throw if the user is not the owner', () => {\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => userId2);\n\n        expect(userId).to.not.equal(userId2);\n        expect(() => SecurityService.loans.isAllowedToUpdate(loanId)).to.throw(SECURITY_ERROR);\n      });\n\n      it('should not do anything for anonymous loans', () => {\n        generator({ loans: { _id: 'loanId', anonymous: true } });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.not.throw();\n      });\n\n      it('should not do anything for non anonymous loans without userIds', () => {\n        generator({ loans: { _id: 'loanId' } });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n\n      it('should throw for expired anonymous loans', () => {\n        generator({\n          loans: {\n            _id: 'loanId',\n            anonymous: true,\n            status: LOAN_STATUS.UNSUCCESSFUL,\n          },\n        });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n\n      it('should throw for accidental anonymous loans', () => {\n        generator({\n          loans: { _id: 'loanId', anonymous: true, userId: 'someId' },\n        });\n\n        expect(() =>\n          SecurityService.loans.isAllowedToUpdate('loanId')).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('BorrowerSecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n      sinon.stub(Meteor, 'userId').callsFake(() => undefined);\n    });\n\n    afterEach(() => {\n      Meteor.userId.restore();\n    });\n\n    describe('isAllowedToUpdate', () => {\n      it('should not do anything if the user is the owner', () => {\n        generator({\n          borrowers: { _id: 'borrowerId', user: { _id: 'userId' } },\n        });\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n\n      it('should not do anything if the user is an admin', () => {\n        generator({\n          borrowers: { _id: 'borrowerId' },\n          users: { _id: 'adminId', _factory: 'admin' },\n        });\n        Meteor.userId.restore();\n        sinon.stub(Meteor, 'userId').callsFake(() => 'adminId');\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n\n      it('should not do anything if the borrower is on one anonymous loan', () => {\n        generator({\n          borrowers: { _id: 'borrowerId', loans: { anonymous: true } },\n        });\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.not.throw();\n      });\n\n      it('should throw if the borrower is on multiple loans', () => {\n        generator({\n          borrowers: { _id: 'borrowerId', loans: [{ anonymous: true }, {}] },\n        });\n\n        expect(() =>\n          SecurityService.borrowers.isAllowedToUpdate('borrowerId', 'userId')).to.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('PromotionSecurity', () => {\n    let userId;\n    beforeEach(() => {\n      resetDatabase();\n    });\n\n    beforeEach(() => {\n      sinon.stub(Meteor, 'userId').callsFake(() => userId);\n    });\n\n    afterEach(() => {\n      if (Meteor.userId.restore) {\n        Meteor.userId.restore();\n      }\n    });\n\n    describe('isAllowedToModify', () => {\n      it('throws if the user is not linked to this promotion', () => {\n        userId = Factory.create('pro')._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToModify({ promotionId, userId })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if the user is a PRO without permissions', () => {\n        userId = Factory.create('user')._id;\n        const promotionId = Factory.create('promotion')._id;\n        PromotionService.addProUser({ promotionId, userId });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: { canModifyPromotion: false },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToModify({ promotionId, userId })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the user is a PRO with MODIFY on it', () => {\n        userId = Factory.create('pro')._id;\n        const promotionId = Factory.create('promotion')._id;\n        PromotionService.addProUser({ promotionId, userId });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: { canModifyPromotion: true },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToModify({ promotionId, userId })).to.not.throw();\n      });\n    });\n\n    describe('hasAccessToPromotion', () => {\n      it('throws if the user has no loan linked to this promotion', () => {\n        userId = Factory.create('user')._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the user has a loan linked to this promotion', () => {\n        userId = Factory.create('user')._id;\n        const loanId = Factory.create('loan', { userId })._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId,\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.not.throw();\n      });\n\n      it('does not throw if the user is a PRO with right permissions', () => {\n        userId = Factory.create('pro')._id;\n        const promotionId = Factory.create('promotion')._id;\n        PromotionService.addProUser({ promotionId, userId });\n        PromotionService.setUserPermissions({\n          promotionId,\n          userId,\n          permissions: {},\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.not.throw();\n      });\n\n      it('does not throw if user is an admin', () => {\n        userId = Factory.create('admin')._id;\n        const promotionId = Factory.create('promotion')._id;\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotion({\n            promotionId,\n            userId,\n          })).to.not.throw();\n      });\n    });\n\n    describe('hasAccessToPromotionLot', () => {\n      it('throws if the user is not on this promotion', () => {\n        generator({\n          users: { _id: 'userId', loans: { _id: 'loanId' } },\n          properties: { _id: 'propId' },\n          promotions: [\n            {\n              promotionLots: {\n                _id: 'pLotId',\n                propertyLinks: [{ _id: 'propId' }],\n              },\n            },\n            { loans: { _id: 'loanId' } },\n          ],\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionLot({\n            promotionLotId: 'pLotId',\n            userId: 'userId',\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the user is on the promotion', () => {\n        generator({\n          users: { _id: 'userId', loans: { _id: 'loanId' } },\n          properties: { _id: 'propId' },\n          promotions: {\n            promotionLots: {\n              _id: 'pLotId',\n              propertyLinks: [{ _id: 'propId' }],\n            },\n            loans: { _id: 'loanId' },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionLot({\n            promotionLotId: 'pLotId',\n            userId: 'userId',\n          })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n\n    describe('hasAccessToPromotionOption', () => {\n      it('throws if the option is not on the users loan', () => {\n        userId = Factory.create('user')._id;\n        const loanId = Factory.create('loan', { userId })._id;\n        const promotionId = Factory.create('promotion')._id;\n        const promotionOptionId = Factory.create('promotionOption')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId,\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionOption({\n            promotionOptionId,\n            userId,\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the option is on the users loan', () => {\n        userId = Factory.create('user')._id;\n        const loanId = Factory.create('loan', { userId })._id;\n        const promotionId = Factory.create('promotion')._id;\n        const promotionOptionId = Factory.create('promotionOption')._id;\n\n        PromotionService.addLink({\n          id: promotionId,\n          linkName: 'loans',\n          linkId: loanId,\n        });\n        LoanService.addLink({\n          id: loanId,\n          linkName: 'promotionOptions',\n          linkId: promotionOptionId,\n        });\n\n        expect(() =>\n          SecurityService.promotions.hasAccessToPromotionOption({\n            promotionOptionId,\n            userId,\n          })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n\n    describe('isAllowedToSeePromotionCustomer', () => {\n      it('does not throw if the user is admin', () => {\n        generator({\n          users: { _factory: 'admin', _id: 'adminId' },\n          promotions: { _id: 'promotionId', loans: { _id: 'loanId' } },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'adminId',\n            loanId: 'loanId',\n          })).to.not.throw();\n      });\n\n      it('throws if the pro is not on this promotion', () => {\n        generator({\n          users: { _factory: 'pro', _id: 'proId' },\n          promotions: { _id: 'promotionId', loans: { _id: 'loanId' } },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('throws if the pro is not allowed to see customers', () => {\n        generator({\n          promotions: {\n            _id: 'promotionId',\n            loans: { _id: 'loanId' },\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: { permissions: {} },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the pro is allowed to see customers', () => {\n        generator({\n          promotions: {\n            _id: 'promotionId',\n            loans: {\n              _id: 'loanId',\n              $metadata: { invitedBy: 'proId' },\n              user: {},\n            },\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  displayCustomerNames: {\n                    invitedBy: 'ANY',\n                    forLotStatus: Object.values(PROMOTION_PERMISSIONS.DISPLAY_CUSTOMER_NAMES\n                      .FOR_LOT_STATUS),\n                  },\n                },\n              },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.not.throw(SECURITY_ERROR);\n      });\n\n      it('does not throw if the pro is allowed to see customers 2', () => {\n        generator({\n          properties: { _id: 'prop' },\n          promotions: {\n            _id: 'promotionId',\n            loans: [\n              {\n                _id: 'loanId',\n                $metadata: { invitedBy: 'proId' },\n                user: {},\n                promotionOptions: {\n                  promotionLots: {\n                    _id: 'bookedPromotionLot',\n                    status: 'BOOKED',\n                    propertyLinks: [{ _id: 'prop' }],\n                    attributedTo: { _id: 'loanId' },\n                  },\n                },\n              },\n              {\n                _id: 'loanId2',\n                $metadata: { invitedBy: 'proId' },\n                user: {},\n                promotionOptions: {\n                  promotionLots: {\n                    _id: 'soldPromotionLot',\n                    status: 'SOLD',\n                    propertyLinks: [{ _id: 'prop' }],\n                    attributedTo: { _id: 'loanId2' },\n                  },\n                },\n              },\n            ],\n            users: {\n              _factory: 'pro',\n              _id: 'proId',\n              $metadata: {\n                permissions: {\n                  displayCustomerNames: {\n                    invitedBy: 'ANY',\n                    forLotStatus: 'SOLD',\n                  },\n                },\n              },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId',\n          })).to.throw(SECURITY_ERROR);\n\n        expect(() =>\n          SecurityService.promotions.isAllowedToSeePromotionCustomer({\n            promotionId: 'promotionId',\n            userId: 'proId',\n            loanId: 'loanId2',\n          })).to.not.throw(SECURITY_ERROR);\n      });\n    });\n  });\n\n  describe('PropertySecurity', () => {\n    beforeEach(() => {\n      resetDatabase();\n    });\n\n    describe('isAllowedToUpdate', () => {\n      it('does not throw if user is admin', () => {\n        generator({\n          users: [{ _id: 'adminId', _factory: 'admin' }],\n          properties: [{ _id: 'propertyId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'adminId')).to.not.throw();\n      });\n\n      it('does throw if user is pro and is not allowed to update', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: [{ _id: 'propertyId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier ce bien immobilier');\n      });\n\n      it('does throw if user is user and is not allowed to update', () => {\n        generator({\n          users: [{ _id: 'userId' }],\n          properties: [{ _id: 'propertyId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'userId')).to.throw('Checking ownership [NOT_AUTHORIZED]');\n      });\n\n      it('does not throw if user is user and is allowed to update', () => {\n        generator({\n          users: [{ _id: 'userId' }],\n          properties: [{ _id: 'propertyId', userId: 'userId' }],\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'userId')).to.not.throw();\n      });\n\n      it('does not throw if user is pro and is allowed to update PRO property', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyProperty: true } },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.not.throw();\n      });\n\n      it('does throw if user is pro and is not allowed to update PRO property', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PRO,\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyProperty: false } },\n            },\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier ce bien immobilier');\n      });\n\n      it('does throw if user is pro and is not allowed to update PROMOTION property', () => {\n        generator({\n          users: [{ _id: 'proId', _factory: 'pro' }],\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PROMOTION,\n          },\n\n          promotions: {\n            _id: 'promotionId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyPromotion: false } },\n            },\n\n            propertyLinks: [{ _id: 'propertyId' }],\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.throw('Vous ne pouvez pas modifier cette promotion');\n      });\n\n      it('does not throw if user is pro and is allowed to update PROMOTION property', () => {\n        generator({\n          users: { _id: 'proId', _factory: 'pro' },\n          properties: {\n            _id: 'propertyId',\n            category: PROPERTY_CATEGORY.PROMOTION,\n          },\n\n          promotions: {\n            _id: 'promotionId',\n            users: {\n              _id: 'proId',\n              $metadata: { permissions: { canModifyPromotion: true } },\n            },\n            propertyLinks: [{ _id: 'propertyId' }],\n          },\n        });\n\n        expect(() =>\n          SecurityService.properties.isAllowedToUpdate('propertyId', 'proId')).to.not.throw();\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"ee168e22797a9d69f2debdd50b6e9adbe9a60c34"}

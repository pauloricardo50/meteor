{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/PageHead/test/Pagehead.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/core/components/PageHead/test/Pagehead.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/PageHead/test/Pagehead.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/PageHead/test/Pagehead.spec.jsx"],"names":["React","expect","shallow","PageHead","describe","props","component","beforeEach","intl","formatMessage","id","it","title","to","equal","meta","deep","include","charSet","titleId","find","length","descriptionId","name","content"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,OAAT;AAEA,SAASC,QAAT;AAEAC,QAAQ,CAAC,UAAD,EAAa,MAAM;AACzB,MAAIC,KAAJ;;AACA,QAAMC,SAAS,GAAG,MAAMJ,OAAO,CAAC,CAAC,QAAD,CAAU,IAAIG,KAAJ,CAAV,GAAD,CAA/B;;AAEAE,EAAAA,UAAU,CAAC,MAAM;AACfF,IAAAA,KAAK,GAAG;AAAEG,MAAAA,IAAI,EAAE;AAAEC,QAAAA,aAAa,EAAE,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAYA;AAA7B;AAAR,KAAR;AACD,GAFS,CAAV;AAIAC,EAAAA,EAAE,CAAC,qEAAD,EAAwE,MAAM;AAC9EV,IAAAA,MAAM,CAACK,SAAS,GAAGD,KAAZ,CAAkB,OAAlB,EAA2BO,KAA5B,CAAN,CAAyCC,EAAzC,CAA4CC,KAA5C,CAAkD,SAAlD;AACD,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5CV,IAAAA,MAAM,CAACK,SAAS,GAAGD,KAAZ,GAAoBU,IAArB,CAAN,CAAiCF,EAAjC,CAAoCG,IAApC,CAAyCC,OAAzC,CAAiD;AAC/CC,MAAAA,OAAO,EAAE;AADsC,KAAjD;AAGD,GAJC,CAAF;AAMAP,EAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AACnE,UAAMQ,OAAO,GAAG,IAAhB;AACAd,IAAAA,KAAK,CAACc,OAAN,GAAgBA,OAAhB;AACAlB,IAAAA,MAAM,CAACK,SAAS,GAAGD,KAAZ,GAAoBO,KAArB,CAAN,CAAkCC,EAAlC,CAAqCC,KAArC,CAA4C,aAAYK,OAAQ,QAAhE;AACD,GAJC,CAAF;AAMAR,EAAAA,EAAE,CAAC,yEAAD,EAA4E,MAAM;AAClF,UAAMQ,OAAO,GAAG,UAAhB;AACAd,IAAAA,KAAK,CAACc,OAAN,GAAgBA,OAAhB;AACAlB,IAAAA,MAAM,CAACK,SAAS,GAAGD,KAAZ,GAAoBO,KAArB,CAAN,CAAkCC,EAAlC,CAAqCC,KAArC,CAA4C,aAAYK,OAAQ,EAAhE;AACD,GAJC,CAAF;AAMAR,EAAAA,EAAE,CAAC,mEAAD,EAAsE,MAAM;AAC5EV,IAAAA,MAAM,CAACK,SAAS,GAAGc,IAAZ,CAAiB,0BAAjB,EAA6CC,MAA9C,CAAN,CAA4DR,EAA5D,CAA+DC,KAA/D,CAAqE,CAArE;AACD,GAFC,CAAF;AAIAH,EAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AACnE,UAAMW,aAAa,GAAG,MAAtB;AACAjB,IAAAA,KAAK,CAACiB,aAAN,GAAsBA,aAAtB;AACArB,IAAAA,MAAM,CAACK,SAAS,GAAGD,KAAZ,GAAoBU,IAArB,CAAN,CAAiCF,EAAjC,CAAoCG,IAApC,CAAyCC,OAAzC,CAAiD;AAC/CM,MAAAA,IAAI,EAAE,aADyC;AAE/CC,MAAAA,OAAO,EAAEF;AAFsC,KAAjD;AAID,GAPC,CAAF;AAQD,CA1CO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'core/utils/testHelpers/enzyme';\n\nimport { PageHead } from '../PageHead';\n\ndescribe('PageHead', () => {\n  let props;\n  const component = () => shallow(<PageHead {...props} />);\n\n  beforeEach(() => {\n    props = { intl: { formatMessage: ({ id }) => id } };\n  });\n\n  it('renders a title tag with just e-Potek in it if no title is provided', () => {\n    expect(component().props('title').title).to.equal('e-Potek');\n  });\n\n  it('renders a meta tag with a charSet', () => {\n    expect(component().props().meta).to.deep.include({\n      charSet: 'UTF-8',\n    });\n  });\n\n  it('renders the title with more stuff if titleId is provided', () => {\n    const titleId = 'yo';\n    props.titleId = titleId;\n    expect(component().props().title).to.equal(`e-Potek | ${titleId}.title`);\n  });\n\n  it('does not add .title at the end of the i18n id if it is already provided', () => {\n    const titleId = 'yo.title';\n    props.titleId = titleId;\n    expect(component().props().title).to.equal(`e-Potek | ${titleId}`);\n  });\n\n  it('does not render a description tag if no descriptionId is provided', () => {\n    expect(component().find('meta[name=\"description\"]').length).to.equal(0);\n  });\n\n  it('renders a description tag if a descriptionId is provided', () => {\n    const descriptionId = 'test';\n    props.descriptionId = descriptionId;\n    expect(component().props().meta).to.deep.include({\n      name: 'description',\n      content: descriptionId,\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/PageHead/test/Pagehead.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/PageHead/test/Pagehead.spec.jsx"}},"code":"var React;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar expect;\nmodule.link(\"chai\", {\n  expect: function (v) {\n    expect = v;\n  }\n}, 1);\nvar shallow;\nmodule.link(\"../../../utils/testHelpers/enzyme\", {\n  shallow: function (v) {\n    shallow = v;\n  }\n}, 2);\nvar PageHead;\nmodule.link(\"../PageHead\", {\n  PageHead: function (v) {\n    PageHead = v;\n  }\n}, 3);\ndescribe('PageHead', function () {\n  var props;\n\n  var component = function () {\n    return shallow(React.createElement(PageHead, props));\n  };\n\n  beforeEach(function () {\n    props = {\n      intl: {\n        formatMessage: function (_ref) {\n          var id = _ref.id;\n          return id;\n        }\n      }\n    };\n  });\n  it('renders a title tag with just e-Potek in it if no title is provided', function () {\n    expect(component().props('title').title).to.equal('e-Potek');\n  });\n  it('renders a meta tag with a charSet', function () {\n    expect(component().props().meta).to.deep.include({\n      charSet: 'UTF-8'\n    });\n  });\n  it('renders the title with more stuff if titleId is provided', function () {\n    var titleId = 'yo';\n    props.titleId = titleId;\n    expect(component().props().title).to.equal(\"e-Potek | \" + titleId + \".title\");\n  });\n  it('does not add .title at the end of the i18n id if it is already provided', function () {\n    var titleId = 'yo.title';\n    props.titleId = titleId;\n    expect(component().props().title).to.equal(\"e-Potek | \" + titleId);\n  });\n  it('does not render a description tag if no descriptionId is provided', function () {\n    expect(component().find('meta[name=\"description\"]').length).to.equal(0);\n  });\n  it('renders a description tag if a descriptionId is provided', function () {\n    var descriptionId = 'test';\n    props.descriptionId = descriptionId;\n    expect(component().props().meta).to.deep.include({\n      name: 'description',\n      content: descriptionId\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/PageHead/test/Pagehead.spec.jsx"],"names":["describe","component","shallow","beforeEach","props","intl","formatMessage","id","it","expect","charSet","titleId","descriptionId","name","content"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from 'core/utils/testHelpers/enzyme';\n\nimport { PageHead } from '../PageHead';\n\ndescribe('PageHead', () => {\n  let props;\n  const component = () => shallow(<PageHead {...props} />);\n\n  beforeEach(() => {\n    props = { intl: { formatMessage: ({ id }) => id } };\n  });\n\n  it('renders a title tag with just e-Potek in it if no title is provided', () => {\n    expect(component().props('title').title).to.equal('e-Potek');\n  });\n\n  it('renders a meta tag with a charSet', () => {\n    expect(component().props().meta).to.deep.include({\n      charSet: 'UTF-8',\n    });\n  });\n\n  it('renders the title with more stuff if titleId is provided', () => {\n    const titleId = 'yo';\n    props.titleId = titleId;\n    expect(component().props().title).to.equal(`e-Potek | ${titleId}.title`);\n  });\n\n  it('does not add .title at the end of the i18n id if it is already provided', () => {\n    const titleId = 'yo.title';\n    props.titleId = titleId;\n    expect(component().props().title).to.equal(`e-Potek | ${titleId}`);\n  });\n\n  it('does not render a description tag if no descriptionId is provided', () => {\n    expect(component().find('meta[name=\"description\"]').length).to.equal(0);\n  });\n\n  it('renders a description tag if a descriptionId is provided', () => {\n    const descriptionId = 'test';\n    props.descriptionId = descriptionId;\n    expect(component().props().meta).to.deep.include({\n      name: 'description',\n      content: descriptionId,\n    });\n  });\n});\n"]},"sourceType":"script","hash":"73015825942b948c34b781fd6ffb54600eba3667"}

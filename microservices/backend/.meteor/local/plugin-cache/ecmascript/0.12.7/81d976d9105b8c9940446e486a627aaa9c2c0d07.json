{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/checkObjectStructure.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/checkObjectStructure.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/checkObjectStructure.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/checkObjectStructure.js"],"names":["testErrors","missingKey","key","parentKey","shouldBeArray","shouldBeObject","emptyArray","makeCheckObjectStructure","errorMessages","errors","checkObjectStructure","obj","template","checkTemplate","subObj","subTemplate","subParentKey","Object","keys","forEach","undefined","$or","push","Array","isArray","length","object","includes","errorMessage","join"],"mappings":"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","sourcesContent":["export const testErrors = {\n  missingKey: (key, parentKey) => `Missing key ${key} from object ${parentKey}`,\n  shouldBeArray: key => `Object key ${key} must be an array`,\n  shouldBeObject: key => `Object key ${key} must be an object`,\n  emptyArray: (key, parentKey) =>\n    `Array at object key ${key} in ${parentKey} should not be empty`,\n};\n\nexport const makeCheckObjectStructure = (errorMessages = testErrors) => {\n  const {\n    missingKey,\n    shouldBeArray,\n    shouldBeObject,\n    emptyArray,\n  } = errorMessages;\n  let errors = [];\n\n  const checkObjectStructure = ({ obj, template, parentKey }) => {\n    const checkTemplate = (subObj, subTemplate, subParentKey) =>\n      Object.keys(subTemplate).forEach((key) => {\n        if (subObj[key] === undefined) {\n          if (typeof subTemplate[key] === 'object' && subTemplate[key].$or) {\n            if (!subObj[subTemplate[key].$or]) {\n              errors.push(missingKey(key, subParentKey || ''));\n              return;\n            }\n          } else {\n            errors.push(missingKey(key, subParentKey || ''));\n            return;\n          }\n        }\n\n        if (Array.isArray(subTemplate[key])) {\n          if (!Array.isArray(subObj[key])) {\n            errors.push(shouldBeArray(key));\n          }\n          if (subTemplate[key].length > 0 && subObj[key].length === 0) {\n            errors.push(emptyArray(key, subParentKey));\n          }\n\n          if (\n            subTemplate[key].length > 0\n            && typeof subTemplate[key][0] === 'object'\n            && !Array.isArray(subTemplate[key][0])\n          ) {\n            subObj[key].forEach(object =>\n              checkTemplate(object, subTemplate[key][0]));\n          }\n        } else if (\n          typeof subTemplate[key] === 'object'\n          && !Object.keys(subTemplate[key]).includes('$or')\n        ) {\n          if (typeof subObj[key] !== 'object' || Array.isArray(subObj[key])) {\n            errors.push(shouldBeObject(key));\n          } else {\n            checkTemplate(subObj[key], subTemplate[key], key);\n          }\n        }\n      });\n\n    checkTemplate(obj, template, parentKey);\n\n    if (errors.length) {\n      const errorMessage = errors.join(', ');\n      errors = [];\n      throw errorMessage;\n    }\n\n    errors = [];\n  };\n  return checkObjectStructure;\n};\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/checkObjectStructure.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/checkObjectStructure.js"}},"code":"module.export({\n  testErrors: () => testErrors,\n  makeCheckObjectStructure: () => makeCheckObjectStructure\n});\nconst testErrors = {\n  missingKey: (key, parentKey) => \"Missing key \".concat(key, \" from object \").concat(parentKey),\n  shouldBeArray: key => \"Object key \".concat(key, \" must be an array\"),\n  shouldBeObject: key => \"Object key \".concat(key, \" must be an object\"),\n  emptyArray: (key, parentKey) => \"Array at object key \".concat(key, \" in \").concat(parentKey, \" should not be empty\")\n};\n\nconst makeCheckObjectStructure = function () {\n  let errorMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : testErrors;\n  const {\n    missingKey,\n    shouldBeArray,\n    shouldBeObject,\n    emptyArray\n  } = errorMessages;\n  let errors = [];\n\n  const checkObjectStructure = (_ref) => {\n    let {\n      obj,\n      template,\n      parentKey\n    } = _ref;\n\n    const checkTemplate = (subObj, subTemplate, subParentKey) => Object.keys(subTemplate).forEach(key => {\n      if (subObj[key] === undefined) {\n        if (typeof subTemplate[key] === 'object' && subTemplate[key].$or) {\n          if (!subObj[subTemplate[key].$or]) {\n            errors.push(missingKey(key, subParentKey || ''));\n            return;\n          }\n        } else {\n          errors.push(missingKey(key, subParentKey || ''));\n          return;\n        }\n      }\n\n      if (Array.isArray(subTemplate[key])) {\n        if (!Array.isArray(subObj[key])) {\n          errors.push(shouldBeArray(key));\n        }\n\n        if (subTemplate[key].length > 0 && subObj[key].length === 0) {\n          errors.push(emptyArray(key, subParentKey));\n        }\n\n        if (subTemplate[key].length > 0 && typeof subTemplate[key][0] === 'object' && !Array.isArray(subTemplate[key][0])) {\n          subObj[key].forEach(object => checkTemplate(object, subTemplate[key][0]));\n        }\n      } else if (typeof subTemplate[key] === 'object' && !Object.keys(subTemplate[key]).includes('$or')) {\n        if (typeof subObj[key] !== 'object' || Array.isArray(subObj[key])) {\n          errors.push(shouldBeObject(key));\n        } else {\n          checkTemplate(subObj[key], subTemplate[key], key);\n        }\n      }\n    });\n\n    checkTemplate(obj, template, parentKey);\n\n    if (errors.length) {\n      const errorMessage = errors.join(', ');\n      errors = [];\n      throw errorMessage;\n    }\n\n    errors = [];\n  };\n\n  return checkObjectStructure;\n};","map":{"version":3,"sources":["imports/core/utils/checkObjectStructure.js"],"names":["testErrors","missingKey","key","shouldBeArray","shouldBeObject","emptyArray","parentKey","makeCheckObjectStructure","errorMessages","errors","checkObjectStructure","checkTemplate","subObj","subTemplate","subParentKey","Array","object","Object","errorMessage"],"mappings":"AAAA,MAAA,CAAO,MAAP,CAAaA;AAAAA,EAAAA,UAAU,EAAG,MAAA,UAAbA;AAAa,EAAA,wBAAA,EAAA,MAAA;AAAbA,CAAb;AAAO,MAAMA,UAAU,GAAG;AACxBC,EAAAA,UAAU,EAAE,CAAA,GAAA,EAAA,SAAA,2BAAmCC,GAAnC,0BADY,SACZ,CADY;AAExBC,EAAAA,aAAa,EAAED,GAAG,yBAFM,GAEN,sBAFM;AAGxBE,EAAAA,cAAc,EAAEF,GAAG,yBAHK,GAGL,uBAHK;AAIxBG,EAAAA,UAAU,EAAE,CAAA,GAAA,EAAA,SAAA,mCACaH,GADb,iBACuBI,SADvB;AAJY,CAAnB;;AAQA,MAAMC,wBAAwB,GAAG,YAAgC;AAAA,MAA/BC,aAA+B,uEAAhC,UAAgC;AACtE,QAAM;AAAA,IAAA,UAAA;AAAA,IAAA,aAAA;AAAA,IAAA,cAAA;AAIJH,IAAAA;AAJI,MAAN,aAAA;AAMA,MAAII,MAAM,GAAV,EAAA;;AAEA,QAAMC,oBAAoB,GAAG,UAAkC;AAAA,QAAjC;AAAA,MAAA,GAAA;AAAA,MAAA,QAAA;AAAiBJ,MAAAA;AAAjB,KAAiC;;AAC7D,UAAMK,aAAa,GAAG,CAAA,MAAA,EAAA,WAAA,EAAA,YAAA,KACpB,MAAM,CAAN,IAAA,CAAA,WAAA,EAAA,OAAA,CAAkCT,GAAD,IAAS;AACxC,UAAIU,MAAM,CAANA,GAAM,CAANA,KAAJ,SAAA,EAA+B;AAC7B,YAAI,OAAOC,WAAW,CAAlB,GAAkB,CAAlB,KAAA,QAAA,IAAwCA,WAAW,CAAXA,GAAW,CAAXA,CAA5C,GAAA,EAAkE;AAChE,cAAI,CAACD,MAAM,CAACC,WAAW,CAAXA,GAAW,CAAXA,CAAZ,GAAW,CAAX,EAAmC;AACjCJ,YAAAA,MAAM,CAANA,IAAAA,CAAYR,UAAU,CAAA,GAAA,EAAMa,YAAY,IAAxCL,EAAsB,CAAtBA;AACA;AACD;AAJH,SAAA,MAKO;AACLA,UAAAA,MAAM,CAANA,IAAAA,CAAYR,UAAU,CAAA,GAAA,EAAMa,YAAY,IAAxCL,EAAsB,CAAtBA;AACA;AACD;AACF;;AAED,UAAIM,KAAK,CAALA,OAAAA,CAAcF,WAAW,CAA7B,GAA6B,CAAzBE,CAAJ,EAAqC;AACnC,YAAI,CAACA,KAAK,CAALA,OAAAA,CAAcH,MAAM,CAAzB,GAAyB,CAApBG,CAAL,EAAiC;AAC/BN,UAAAA,MAAM,CAANA,IAAAA,CAAYN,aAAa,CAAzBM,GAAyB,CAAzBA;AACD;;AACD,YAAII,WAAW,CAAXA,GAAW,CAAXA,CAAAA,MAAAA,GAAAA,CAAAA,IAA+BD,MAAM,CAANA,GAAM,CAANA,CAAAA,MAAAA,KAAnC,CAAA,EAA6D;AAC3DH,UAAAA,MAAM,CAANA,IAAAA,CAAYJ,UAAU,CAAA,GAAA,EAAtBI,YAAsB,CAAtBA;AACD;;AAED,YACEI,WAAW,CAAXA,GAAW,CAAXA,CAAAA,MAAAA,GAAAA,CAAAA,IACG,OAAOA,WAAW,CAAXA,GAAW,CAAXA,CAAP,CAAOA,CAAP,KADHA,QAAAA,IAEG,CAACE,KAAK,CAALA,OAAAA,CAAcF,WAAW,CAAXA,GAAW,CAAXA,CAHpB,CAGoBA,CAAdE,CAHN,EAIE;AACAH,UAAAA,MAAM,CAANA,GAAM,CAANA,CAAAA,OAAAA,CAAoBI,MAAM,IACxBL,aAAa,CAAA,MAAA,EAASE,WAAW,CAAXA,GAAW,CAAXA,CADxBD,CACwBC,CAAT,CADfD;AAED;AAfH,OAAA,MAgBO,IACL,OAAOC,WAAW,CAAlB,GAAkB,CAAlB,KAAA,QAAA,IACG,CAACI,MAAM,CAANA,IAAAA,CAAYJ,WAAW,CAAvBI,GAAuB,CAAvBA,EAAAA,QAAAA,CAFC,KAEDA,CAFC,EAGL;AACA,YAAI,OAAOL,MAAM,CAAb,GAAa,CAAb,KAAA,QAAA,IAAmCG,KAAK,CAALA,OAAAA,CAAcH,MAAM,CAA3D,GAA2D,CAApBG,CAAvC,EAAmE;AACjEN,UAAAA,MAAM,CAANA,IAAAA,CAAYL,cAAc,CAA1BK,GAA0B,CAA1BA;AADF,SAAA,MAEO;AACLE,UAAAA,aAAa,CAACC,MAAM,CAAP,GAAO,CAAP,EAAcC,WAAW,CAAzB,GAAyB,CAAzB,EAAbF,GAAa,CAAbA;AACD;AACF;AAvCL,KACE,CADF;;AA0CAA,IAAAA,aAAa,CAAA,GAAA,EAAA,QAAA,EAAbA,SAAa,CAAbA;;AAEA,QAAIF,MAAM,CAAV,MAAA,EAAmB;AACjB,YAAMS,YAAY,GAAGT,MAAM,CAANA,IAAAA,CAArB,IAAqBA,CAArB;AACAA,MAAAA,MAAM,GAANA,EAAAA;AACA,YAAA,YAAA;AACD;;AAEDA,IAAAA,MAAM,GAANA,EAAAA;AAnDF,GAAA;;AAqDA,SAAA,oBAAA;AA9DK,CAAA","sourcesContent":["export const testErrors = {\n  missingKey: (key, parentKey) => `Missing key ${key} from object ${parentKey}`,\n  shouldBeArray: key => `Object key ${key} must be an array`,\n  shouldBeObject: key => `Object key ${key} must be an object`,\n  emptyArray: (key, parentKey) =>\n    `Array at object key ${key} in ${parentKey} should not be empty`,\n};\n\nexport const makeCheckObjectStructure = (errorMessages = testErrors) => {\n  const {\n    missingKey,\n    shouldBeArray,\n    shouldBeObject,\n    emptyArray,\n  } = errorMessages;\n  let errors = [];\n\n  const checkObjectStructure = ({ obj, template, parentKey }) => {\n    const checkTemplate = (subObj, subTemplate, subParentKey) =>\n      Object.keys(subTemplate).forEach((key) => {\n        if (subObj[key] === undefined) {\n          if (typeof subTemplate[key] === 'object' && subTemplate[key].$or) {\n            if (!subObj[subTemplate[key].$or]) {\n              errors.push(missingKey(key, subParentKey || ''));\n              return;\n            }\n          } else {\n            errors.push(missingKey(key, subParentKey || ''));\n            return;\n          }\n        }\n\n        if (Array.isArray(subTemplate[key])) {\n          if (!Array.isArray(subObj[key])) {\n            errors.push(shouldBeArray(key));\n          }\n          if (subTemplate[key].length > 0 && subObj[key].length === 0) {\n            errors.push(emptyArray(key, subParentKey));\n          }\n\n          if (\n            subTemplate[key].length > 0\n            && typeof subTemplate[key][0] === 'object'\n            && !Array.isArray(subTemplate[key][0])\n          ) {\n            subObj[key].forEach(object =>\n              checkTemplate(object, subTemplate[key][0]));\n          }\n        } else if (\n          typeof subTemplate[key] === 'object'\n          && !Object.keys(subTemplate[key]).includes('$or')\n        ) {\n          if (typeof subObj[key] !== 'object' || Array.isArray(subObj[key])) {\n            errors.push(shouldBeObject(key));\n          } else {\n            checkTemplate(subObj[key], subTemplate[key], key);\n          }\n        }\n      });\n\n    checkTemplate(obj, template, parentKey);\n\n    if (errors.length) {\n      const errorMessage = errors.join(', ');\n      errors = [];\n      throw errorMessage;\n    }\n\n    errors = [];\n  };\n  return checkObjectStructure;\n};\n"]},"sourceType":"script","hash":"81d976d9105b8c9940446e486a627aaa9c2c0d07"}

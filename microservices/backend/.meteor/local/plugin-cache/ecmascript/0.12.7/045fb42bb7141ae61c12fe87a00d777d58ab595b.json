{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/updateProperty.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/updateProperty.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/updateProperty.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/updateProperty.test.js"],"names":["Meteor","resetDatabase","expect","PropertyService","generator","PROPERTY_CATEGORY","getTimestampAndNonce","fetchAndCheckResponse","makeHeaders","RESTAPI","updatePropertyAPI","api","addEndpoint","updateProperty","propertyId","body","expectedResponse","status","userId","impersonateUser","timestamp","nonce","query","undefined","url","data","method","headers","JSON","stringify","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","users","_id","_factory","organisations","emails","address","verified","proProperties","externalId","category","PRO","$metadata","permissions","canModifyProperty","it","update","value","then","response","property","get","to","equal","message","returnedProperty","not"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport { PROPERTY_CATEGORY } from '../../../../properties/propertyConstants';\nimport {\n  getTimestampAndNonce,\n  fetchAndCheckResponse,\n  makeHeaders,\n} from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport updatePropertyAPI from '../updateProperty';\n\nconst api = new RESTAPI();\napi.addEndpoint('/properties/:propertyId', 'POST', updatePropertyAPI);\n\nconst updateProperty = ({\n  propertyId,\n  body,\n  expectedResponse,\n  status,\n  userId,\n  impersonateUser,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: `/properties/${propertyId}`,\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\ndescribe('REST: updateProperty', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: {\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n        emails: [{ address: 'pro@org.com', verified: true }],\n        proProperties: {\n          _id: 'prop',\n          externalId: 'extId',\n          category: PROPERTY_CATEGORY.PRO,\n          $metadata: {\n            permissions: { canModifyProperty: true },\n          },\n        },\n      },\n    });\n  });\n\n  it('updates a property', () => {\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'prop',\n      body: update,\n    }).then((response) => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"prop\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('updates a property by externalId', () => {\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'extId',\n      body: update,\n    }).then((response) => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"extId\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('updates a property when impersonating users', () => {\n    generator({\n      users: {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n      },\n    });\n\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro2',\n      propertyId: 'prop',\n      body: update,\n      impersonateUser: 'pro@org.com',\n    }).then((response) => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"prop\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('throws if no property was found', () => {\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'some-id',\n      body: update,\n      expectedResponse: {\n        status: 400,\n        message: '[No property found for id \"some-id\"]',\n      },\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/updateProperty.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/updateProperty.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet PropertyService;\nmodule.link(\"../../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 3);\nlet generator;\nmodule.link(\"../../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 4);\nlet PROPERTY_CATEGORY;\nmodule.link(\"../../../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 5);\nlet getTimestampAndNonce, fetchAndCheckResponse, makeHeaders;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  },\n\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  }\n\n}, 6);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 7);\nlet updatePropertyAPI;\nmodule.link(\"../updateProperty\", {\n  default(v) {\n    updatePropertyAPI = v;\n  }\n\n}, 8);\nconst api = new RESTAPI();\napi.addEndpoint('/properties/:propertyId', 'POST', updatePropertyAPI);\n\nconst updateProperty = ({\n  propertyId,\n  body,\n  expectedResponse,\n  status,\n  userId,\n  impersonateUser\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const query = impersonateUser ? {\n    'impersonate-user': impersonateUser\n  } : undefined;\n  return fetchAndCheckResponse({\n    url: `/properties/${propertyId}`,\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query\n      }),\n      body: JSON.stringify(body)\n    },\n    expectedResponse,\n    status\n  });\n};\n\ndescribe('REST: updateProperty', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: {\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        },\n        emails: [{\n          address: 'pro@org.com',\n          verified: true\n        }],\n        proProperties: {\n          _id: 'prop',\n          externalId: 'extId',\n          category: PROPERTY_CATEGORY.PRO,\n          $metadata: {\n            permissions: {\n              canModifyProperty: true\n            }\n          }\n        }\n      }\n    });\n  });\n  it('updates a property', () => {\n    const update = {\n      value: 300000\n    };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'prop',\n      body: update\n    }).then(response => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const {\n        status,\n        message,\n        property: returnedProperty\n      } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"prop\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n  it('updates a property by externalId', () => {\n    const update = {\n      value: 300000\n    };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'extId',\n      body: update\n    }).then(response => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const {\n        status,\n        message,\n        property: returnedProperty\n      } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"extId\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n  it('updates a property when impersonating users', () => {\n    generator({\n      users: {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: {\n          _id: 'org1'\n        }\n      }\n    });\n    const update = {\n      value: 300000\n    };\n    return updateProperty({\n      userId: 'pro2',\n      propertyId: 'prop',\n      body: update,\n      impersonateUser: 'pro@org.com'\n    }).then(response => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const {\n        status,\n        message,\n        property: returnedProperty\n      } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"prop\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n  it('throws if no property was found', () => {\n    const update = {\n      value: 300000\n    };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'some-id',\n      body: update,\n      expectedResponse: {\n        status: 400,\n        message: '[No property found for id \"some-id\"]'\n      }\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/updateProperty.test.js"],"names":["api","updateProperty","impersonateUser","nonce","getTimestampAndNonce","query","fetchAndCheckResponse","url","propertyId","data","method","headers","makeHeaders","body","JSON","status","describe","before","Meteor","after","beforeEach","resetDatabase","generator","users","_id","_factory","organisations","emails","address","verified","proProperties","externalId","category","PROPERTY_CATEGORY","$metadata","permissions","canModifyProperty","it","update","value","userId","response","property","PropertyService","expect","returnedProperty","expectedResponse","message"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\n\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport generator from '../../../../factories';\nimport { PROPERTY_CATEGORY } from '../../../../properties/propertyConstants';\nimport {\n  getTimestampAndNonce,\n  fetchAndCheckResponse,\n  makeHeaders,\n} from '../../test/apiTestHelpers.test';\nimport RESTAPI from '../../RESTAPI';\nimport updatePropertyAPI from '../updateProperty';\n\nconst api = new RESTAPI();\napi.addEndpoint('/properties/:propertyId', 'POST', updatePropertyAPI);\n\nconst updateProperty = ({\n  propertyId,\n  body,\n  expectedResponse,\n  status,\n  userId,\n  impersonateUser,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: `/properties/${propertyId}`,\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId,\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n    status,\n  });\n};\n\ndescribe('REST: updateProperty', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: {\n        _id: 'pro',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n        emails: [{ address: 'pro@org.com', verified: true }],\n        proProperties: {\n          _id: 'prop',\n          externalId: 'extId',\n          category: PROPERTY_CATEGORY.PRO,\n          $metadata: {\n            permissions: { canModifyProperty: true },\n          },\n        },\n      },\n    });\n  });\n\n  it('updates a property', () => {\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'prop',\n      body: update,\n    }).then((response) => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"prop\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('updates a property by externalId', () => {\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'extId',\n      body: update,\n    }).then((response) => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"extId\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('updates a property when impersonating users', () => {\n    generator({\n      users: {\n        _id: 'pro2',\n        _factory: 'pro',\n        organisations: { _id: 'org1' },\n      },\n    });\n\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro2',\n      propertyId: 'prop',\n      body: update,\n      impersonateUser: 'pro@org.com',\n    }).then((response) => {\n      const property = PropertyService.get('prop');\n      expect(property.value).to.equal(update.value);\n      const { status, message, property: returnedProperty } = response;\n      expect(status).to.equal(200);\n      expect(message).to.equal('Property with id \"prop\" updated !');\n      expect(returnedProperty).to.not.equal(undefined);\n    });\n  });\n\n  it('throws if no property was found', () => {\n    const update = { value: 300000 };\n    return updateProperty({\n      userId: 'pro',\n      propertyId: 'some-id',\n      body: update,\n      expectedResponse: {\n        status: 400,\n        message: '[No property found for id \"some-id\"]',\n      },\n    });\n  });\n});\n"]},"sourceType":"script","hash":"045fb42bb7141ae61c12fe87a00d777d58ab595b"}

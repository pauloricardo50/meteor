{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/BorrowersRecapFinance.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/BorrowersRecapFinance.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/BorrowersRecapFinance.jsx","inputSourceMap":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/BorrowersRecapFinance.jsx"],"names":["React","cx","T","PdfTable","ROW_TYPES","OTHER_INCOME","OWN_FUNDS_TYPES","EXPENSE_TYPES","getBorrowersInfos","makeTableMoneyLine","getFormattedMoneyArray","addTableEmptyLine","shouldRenderArray","BorrowersRecapFinanceProps","renderExpenses","expenses","addTableMoneyLine","Object","values","map","expense","value","label","field","negative","getBorrowersFinanceArray","borrowers","calculator","multipleBorrowers","length","borrowersInfos","salary","bonus","otherIncome","realEstateValue","realEstateDebt","otherFortune","realEstateIncome","type","TITLE","data","className","colspan","SUBSECTION","shouldUseNetSalary","condition","income","array","borrower","getTotalIncome","twoBorrowers","SUM","ownFund","getTotalFunds","BorrowersRecapFinance","anonymous"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport cx from 'classnames';\n\nimport T from 'core/components/Translation';\nimport PdfTable from '../../PdfTable';\nimport { ROW_TYPES } from '../../PdfTable/PdfTable';\nimport {\n  OTHER_INCOME,\n  OWN_FUNDS_TYPES,\n} from '../../../../../borrowers/borrowerConstants';\nimport { EXPENSE_TYPES } from '../../../../../lenderRules/lenderRulesConstants';\nimport {\n  getBorrowersInfos,\n  makeTableMoneyLine,\n  getFormattedMoneyArray,\n  addTableEmptyLine,\n  shouldRenderArray,\n} from './borrowersRecapHelpers';\n\ntype BorrowersRecapFinanceProps = {};\n\nconst renderExpenses = (expenses, addTableMoneyLine) =>\n  Object.values(EXPENSE_TYPES).map((expense) => {\n    const value = expenses[expense];\n    return addTableMoneyLine({\n      label: <T id={`PDF.borrowersInfos.expenses.${expense}`} />,\n      field: value,\n      negative: true,\n    });\n  });\n\nconst getBorrowersFinanceArray = ({ borrowers, calculator }) => {\n  const multipleBorrowers = borrowers.length > 1;\n  const addTableMoneyLine = makeTableMoneyLine(multipleBorrowers);\n  const borrowersInfos = getBorrowersInfos(borrowers, calculator);\n  const {\n    salary,\n    bonus,\n    otherIncome,\n    expenses,\n    realEstateValue,\n    realEstateDebt,\n    otherFortune,\n    realEstateIncome,\n  } = borrowersInfos;\n\n  return [\n    {\n      label: <T id=\"PDF.borrowersInfos.category.financialSituation\" />,\n      type: ROW_TYPES.TITLE,\n      data: multipleBorrowers\n        ? [null, null, <T id=\"PDF.borrowersInfos.total\" key=\"total\" />]\n        : [],\n      className: 'borrower-table-title-row',\n      colspan: multipleBorrowers ? 1 : 2,\n    },\n    {\n      label: <T id=\"PDF.borrowersInfos.income\" />,\n      type: ROW_TYPES.SUBSECTION,\n    },\n    addTableMoneyLine({\n      label: (\n        <T\n          id={\n            calculator.shouldUseNetSalary()\n              ? 'PDF.borrowersInfos.netSalary'\n              : 'PDF.borrowersInfos.salary'\n          }\n        />\n      ),\n      field: salary,\n      condition: true,\n    }),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.bonus\" />,\n      field: bonus,\n    }),\n    ...Object.values(OTHER_INCOME).map(income =>\n      addTableMoneyLine({\n        label: <T id={`PDF.borrowersInfos.otherIncome.${income}`} />,\n        field: otherIncome[income],\n      })),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.realEstateIncome\" />,\n      field: realEstateIncome,\n      condition: shouldRenderArray(realEstateIncome),\n    }),\n    ...renderExpenses(expenses, addTableMoneyLine),\n    {\n      label: <T id=\"PDF.borrowersInfos.totalIncome\" />,\n      data: getFormattedMoneyArray({\n        array: borrowers.map(borrower =>\n          calculator.getTotalIncome({ borrowers: borrower })),\n        negative: false,\n        twoBorrowers: multipleBorrowers,\n      }),\n      type: ROW_TYPES.SUM,\n    },\n    addTableEmptyLine(),\n    {\n      label: <T id=\"PDF.borrowersInfos.category.fortune\" />,\n      type: ROW_TYPES.SUBSECTION,\n    },\n    ...Object.values(OWN_FUNDS_TYPES).map(ownFund =>\n      addTableMoneyLine({\n        label: <T id={`PDF.borrowersInfos.ownFund.${ownFund}`} />,\n        field: borrowersInfos[ownFund],\n      })),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.realEstateValue\" />,\n      field: realEstateValue,\n    }),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.realEstateDebt\" />,\n      field: realEstateDebt,\n      condition: shouldRenderArray(realEstateValue),\n      negative: true,\n    }),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.otherFortune\" />,\n      field: otherFortune,\n    }),\n    {\n      label: <T id=\"PDF.borrowersInfos.totalFortune\" />,\n      data: getFormattedMoneyArray({\n        array: borrowers.map(borrower =>\n          calculator.getTotalFunds({ borrowers: borrower })),\n        negative: false,\n        twoBorrowers: multipleBorrowers,\n      }),\n      type: ROW_TYPES.SUM,\n    },\n  ];\n};\n\nconst BorrowersRecapFinance = ({\n  anonymous,\n  borrowers,\n  calculator,\n  twoBorrowers,\n}: BorrowersRecapFinanceProps) => (\n  <PdfTable\n    className={cx('borrowers-recap finance', { twoBorrowers })}\n    rows={getBorrowersFinanceArray({ borrowers, anonymous, calculator })}\n  />\n);\n\nexport default BorrowersRecapFinance;\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/BorrowersRecapFinance.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/BorrowersRecapFinance.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet cx;\nmodule.link(\"classnames\", {\n  default(v) {\n    cx = v;\n  }\n\n}, 1);\nlet T;\nmodule.link(\"../../../../../../components/Translation\", {\n  default(v) {\n    T = v;\n  }\n\n}, 2);\nlet PdfTable;\nmodule.link(\"../../PdfTable\", {\n  default(v) {\n    PdfTable = v;\n  }\n\n}, 3);\nlet ROW_TYPES;\nmodule.link(\"../../PdfTable/PdfTable\", {\n  ROW_TYPES(v) {\n    ROW_TYPES = v;\n  }\n\n}, 4);\nlet OTHER_INCOME, OWN_FUNDS_TYPES;\nmodule.link(\"../../../../../borrowers/borrowerConstants\", {\n  OTHER_INCOME(v) {\n    OTHER_INCOME = v;\n  },\n\n  OWN_FUNDS_TYPES(v) {\n    OWN_FUNDS_TYPES = v;\n  }\n\n}, 5);\nlet EXPENSE_TYPES;\nmodule.link(\"../../../../../lenderRules/lenderRulesConstants\", {\n  EXPENSE_TYPES(v) {\n    EXPENSE_TYPES = v;\n  }\n\n}, 6);\nlet getBorrowersInfos, makeTableMoneyLine, getFormattedMoneyArray, addTableEmptyLine, shouldRenderArray;\nmodule.link(\"./borrowersRecapHelpers\", {\n  getBorrowersInfos(v) {\n    getBorrowersInfos = v;\n  },\n\n  makeTableMoneyLine(v) {\n    makeTableMoneyLine = v;\n  },\n\n  getFormattedMoneyArray(v) {\n    getFormattedMoneyArray = v;\n  },\n\n  addTableEmptyLine(v) {\n    addTableEmptyLine = v;\n  },\n\n  shouldRenderArray(v) {\n    shouldRenderArray = v;\n  }\n\n}, 7);\n\nconst renderExpenses = (expenses, addTableMoneyLine) => Object.values(EXPENSE_TYPES).map(expense => {\n  const value = expenses[expense];\n  return addTableMoneyLine({\n    label: React.createElement(T, {\n      id: `PDF.borrowersInfos.expenses.${expense}`\n    }),\n    field: value,\n    negative: true\n  });\n});\n\nconst getBorrowersFinanceArray = ({\n  borrowers,\n  calculator\n}) => {\n  const multipleBorrowers = borrowers.length > 1;\n  const addTableMoneyLine = makeTableMoneyLine(multipleBorrowers);\n  const borrowersInfos = getBorrowersInfos(borrowers, calculator);\n  const {\n    salary,\n    bonus,\n    otherIncome,\n    expenses,\n    realEstateValue,\n    realEstateDebt,\n    otherFortune,\n    realEstateIncome\n  } = borrowersInfos;\n  return [{\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.category.financialSituation\"\n    }),\n    type: ROW_TYPES.TITLE,\n    data: multipleBorrowers ? [null, null, React.createElement(T, {\n      id: \"PDF.borrowersInfos.total\",\n      key: \"total\"\n    })] : [],\n    className: 'borrower-table-title-row',\n    colspan: multipleBorrowers ? 1 : 2\n  }, {\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.income\"\n    }),\n    type: ROW_TYPES.SUBSECTION\n  }, addTableMoneyLine({\n    label: React.createElement(T, {\n      id: calculator.shouldUseNetSalary() ? 'PDF.borrowersInfos.netSalary' : 'PDF.borrowersInfos.salary'\n    }),\n    field: salary,\n    condition: true\n  }), addTableMoneyLine({\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.bonus\"\n    }),\n    field: bonus\n  }), ...Object.values(OTHER_INCOME).map(income => addTableMoneyLine({\n    label: React.createElement(T, {\n      id: `PDF.borrowersInfos.otherIncome.${income}`\n    }),\n    field: otherIncome[income]\n  })), addTableMoneyLine({\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.realEstateIncome\"\n    }),\n    field: realEstateIncome,\n    condition: shouldRenderArray(realEstateIncome)\n  }), ...renderExpenses(expenses, addTableMoneyLine), {\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.totalIncome\"\n    }),\n    data: getFormattedMoneyArray({\n      array: borrowers.map(borrower => calculator.getTotalIncome({\n        borrowers: borrower\n      })),\n      negative: false,\n      twoBorrowers: multipleBorrowers\n    }),\n    type: ROW_TYPES.SUM\n  }, addTableEmptyLine(), {\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.category.fortune\"\n    }),\n    type: ROW_TYPES.SUBSECTION\n  }, ...Object.values(OWN_FUNDS_TYPES).map(ownFund => addTableMoneyLine({\n    label: React.createElement(T, {\n      id: `PDF.borrowersInfos.ownFund.${ownFund}`\n    }),\n    field: borrowersInfos[ownFund]\n  })), addTableMoneyLine({\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.realEstateValue\"\n    }),\n    field: realEstateValue\n  }), addTableMoneyLine({\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.realEstateDebt\"\n    }),\n    field: realEstateDebt,\n    condition: shouldRenderArray(realEstateValue),\n    negative: true\n  }), addTableMoneyLine({\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.otherFortune\"\n    }),\n    field: otherFortune\n  }), {\n    label: React.createElement(T, {\n      id: \"PDF.borrowersInfos.totalFortune\"\n    }),\n    data: getFormattedMoneyArray({\n      array: borrowers.map(borrower => calculator.getTotalFunds({\n        borrowers: borrower\n      })),\n      negative: false,\n      twoBorrowers: multipleBorrowers\n    }),\n    type: ROW_TYPES.SUM\n  }];\n};\n\nconst BorrowersRecapFinance = ({\n  anonymous,\n  borrowers,\n  calculator,\n  twoBorrowers\n}) => React.createElement(PdfTable, {\n  className: cx('borrowers-recap finance', {\n    twoBorrowers\n  }),\n  rows: getBorrowersFinanceArray({\n    borrowers,\n    anonymous,\n    calculator\n  })\n});\n\nmodule.exportDefault(BorrowersRecapFinance);","map":{"version":3,"sources":["imports/core/api/pdf/server/pdfComponents/pages/BorrowersPdfPage/BorrowersRecapFinance.jsx"],"names":["renderExpenses","expense","value","expenses","addTableMoneyLine","label","field","negative","getBorrowersFinanceArray","calculator","multipleBorrowers","borrowers","makeTableMoneyLine","borrowersInfos","getBorrowersInfos","realEstateIncome","type","ROW_TYPES","data","className","colspan","SUBSECTION","condition","bonus","income","otherIncome","shouldRenderArray","getFormattedMoneyArray","array","borrower","twoBorrowers","SUM","addTableEmptyLine","ownFund","realEstateValue","otherFortune","BorrowersRecapFinance","cx"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport cx from 'classnames';\n\nimport T from 'core/components/Translation';\nimport PdfTable from '../../PdfTable';\nimport { ROW_TYPES } from '../../PdfTable/PdfTable';\nimport {\n  OTHER_INCOME,\n  OWN_FUNDS_TYPES,\n} from '../../../../../borrowers/borrowerConstants';\nimport { EXPENSE_TYPES } from '../../../../../lenderRules/lenderRulesConstants';\nimport {\n  getBorrowersInfos,\n  makeTableMoneyLine,\n  getFormattedMoneyArray,\n  addTableEmptyLine,\n  shouldRenderArray,\n} from './borrowersRecapHelpers';\n\ntype BorrowersRecapFinanceProps = {};\n\nconst renderExpenses = (expenses, addTableMoneyLine) =>\n  Object.values(EXPENSE_TYPES).map((expense) => {\n    const value = expenses[expense];\n    return addTableMoneyLine({\n      label: <T id={`PDF.borrowersInfos.expenses.${expense}`} />,\n      field: value,\n      negative: true,\n    });\n  });\n\nconst getBorrowersFinanceArray = ({ borrowers, calculator }) => {\n  const multipleBorrowers = borrowers.length > 1;\n  const addTableMoneyLine = makeTableMoneyLine(multipleBorrowers);\n  const borrowersInfos = getBorrowersInfos(borrowers, calculator);\n  const {\n    salary,\n    bonus,\n    otherIncome,\n    expenses,\n    realEstateValue,\n    realEstateDebt,\n    otherFortune,\n    realEstateIncome,\n  } = borrowersInfos;\n\n  return [\n    {\n      label: <T id=\"PDF.borrowersInfos.category.financialSituation\" />,\n      type: ROW_TYPES.TITLE,\n      data: multipleBorrowers\n        ? [null, null, <T id=\"PDF.borrowersInfos.total\" key=\"total\" />]\n        : [],\n      className: 'borrower-table-title-row',\n      colspan: multipleBorrowers ? 1 : 2,\n    },\n    {\n      label: <T id=\"PDF.borrowersInfos.income\" />,\n      type: ROW_TYPES.SUBSECTION,\n    },\n    addTableMoneyLine({\n      label: (\n        <T\n          id={\n            calculator.shouldUseNetSalary()\n              ? 'PDF.borrowersInfos.netSalary'\n              : 'PDF.borrowersInfos.salary'\n          }\n        />\n      ),\n      field: salary,\n      condition: true,\n    }),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.bonus\" />,\n      field: bonus,\n    }),\n    ...Object.values(OTHER_INCOME).map(income =>\n      addTableMoneyLine({\n        label: <T id={`PDF.borrowersInfos.otherIncome.${income}`} />,\n        field: otherIncome[income],\n      })),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.realEstateIncome\" />,\n      field: realEstateIncome,\n      condition: shouldRenderArray(realEstateIncome),\n    }),\n    ...renderExpenses(expenses, addTableMoneyLine),\n    {\n      label: <T id=\"PDF.borrowersInfos.totalIncome\" />,\n      data: getFormattedMoneyArray({\n        array: borrowers.map(borrower =>\n          calculator.getTotalIncome({ borrowers: borrower })),\n        negative: false,\n        twoBorrowers: multipleBorrowers,\n      }),\n      type: ROW_TYPES.SUM,\n    },\n    addTableEmptyLine(),\n    {\n      label: <T id=\"PDF.borrowersInfos.category.fortune\" />,\n      type: ROW_TYPES.SUBSECTION,\n    },\n    ...Object.values(OWN_FUNDS_TYPES).map(ownFund =>\n      addTableMoneyLine({\n        label: <T id={`PDF.borrowersInfos.ownFund.${ownFund}`} />,\n        field: borrowersInfos[ownFund],\n      })),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.realEstateValue\" />,\n      field: realEstateValue,\n    }),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.realEstateDebt\" />,\n      field: realEstateDebt,\n      condition: shouldRenderArray(realEstateValue),\n      negative: true,\n    }),\n    addTableMoneyLine({\n      label: <T id=\"PDF.borrowersInfos.otherFortune\" />,\n      field: otherFortune,\n    }),\n    {\n      label: <T id=\"PDF.borrowersInfos.totalFortune\" />,\n      data: getFormattedMoneyArray({\n        array: borrowers.map(borrower =>\n          calculator.getTotalFunds({ borrowers: borrower })),\n        negative: false,\n        twoBorrowers: multipleBorrowers,\n      }),\n      type: ROW_TYPES.SUM,\n    },\n  ];\n};\n\nconst BorrowersRecapFinance = ({\n  anonymous,\n  borrowers,\n  calculator,\n  twoBorrowers,\n}: BorrowersRecapFinanceProps) => (\n  <PdfTable\n    className={cx('borrowers-recap finance', { twoBorrowers })}\n    rows={getBorrowersFinanceArray({ borrowers, anonymous, calculator })}\n  />\n);\n\nexport default BorrowersRecapFinance;\n"]},"sourceType":"script","hash":"00a86124916e38b2729951ebe27d8f01978b202a"}

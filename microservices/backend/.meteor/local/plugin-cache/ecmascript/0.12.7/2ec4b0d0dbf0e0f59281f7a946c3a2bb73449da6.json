{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:browser-tests/browser/chromedriver.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/meteortesting:browser-tests/browser/chromedriver.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:browser-tests/browser/chromedriver.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/meteortesting:browser-tests/browser/chromedriver.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/meteortesting:browser-tests/browser/chromedriver.js"}},"code":"module.export({\n  default: () => startChrome\n});\n\n/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\nlet driver; // Make sure the chromedriver process does not stick around\n\nprocess.on('exit', () => {\n  if (driver) {\n    driver.quit();\n  }\n});\n\nfunction startChrome({\n  stdout,\n  stderr,\n  done\n}) {\n  let chromedriver;\n  let webdriver;\n  let logging;\n  let chrome;\n\n  try {\n    require('chromedriver');\n\n    webdriver = require('selenium-webdriver');\n    logging = require('selenium-webdriver/lib/logging');\n    chrome = require('selenium-webdriver/chrome');\n  } catch (error) {\n    console.error(error);\n    throw new Error('When running app tests with TEST_BROWSER_DRIVER=chrome, you must first ' + '\"npm i --save-dev selenium-webdriver@3.0.0-beta-2 chromedriver\"');\n  } // Get the driver instance. By default, chromedriver gives us only errors\n  // so we need to set browser logging level to \"ALL\".\n\n\n  const options = new chrome.Options();\n  if (!process.env.TEST_BROWSER_VISIBLE) options.addArguments('--headless'); // Pass additional chrome options as appropriate\n\n  if (process.env.TEST_CHROME_ARGS) {\n    // Convert any appearances of \"%20\" to \" \" so as to support spaces in arguments if necessary\n    let additionalOptions = process.env.TEST_CHROME_ARGS.split(/\\s+/).map(arg => arg.replace(/%20/g, \" \"));\n    options.addArguments.apply(options, additionalOptions);\n  }\n\n  driver = new webdriver.Builder().forBrowser('chrome').withCapabilities(options.toCapabilities()).setLoggingPrefs({\n    browser: 'ALL'\n  }).build(); // Can't hide the window but can move it off screen\n\n  driver.manage().window().setPosition(20000, 20000); // We periodically grab logs from Chrome and pass them back.\n  // Every time we call this, we get only the log entries since\n  // the previous time we called it.\n\n  function passThroughLogs() {\n    return driver.manage().logs().get(logging.Type.BROWSER).then(entries => {\n      (entries || []).forEach(entry => {\n        let message = entry.message || ''; // Message may look something like this:\n        // http://localhost:3000/packages/dispatch_mocha.js?hash=abc 239:20 \"  5 passing (182ms)\"\n        // So we will try to strip off the part that isn't the pure message.\n\n        if (message.startsWith('http://') && message.endsWith('\"')) {\n          message = message.slice(message.indexOf('\"') + 1, -1);\n        }\n\n        if (entry.level.name === 'SEVERE') {\n          stderr(`[ERROR] ${message}`);\n        } else {\n          // Message may have escaped newlines\n          const messageLines = message.split('\\\\n');\n          messageLines.forEach(messageLine => {\n            stdout(messageLine);\n          });\n        }\n      });\n    });\n  } // Meteor will call the `runTests` function exported by the driver package\n  // on the client as soon as this page loads.\n\n\n  driver.get(process.env.ROOT_URL);\n  let testFailures;\n  driver.wait(function () {\n    // After the page loads, the tests are running. Eventually they\n    // finish and the driver package is supposed to set window.testsDone\n    // and window.testFailures at that time.\n    return passThroughLogs().then(() => {\n      return driver.executeScript('return window.testsDone');\n    });\n  }, 600000).then(() => {\n    // Empty the logs one last time\n    return passThroughLogs();\n  }).then(() => {\n    return driver.executeScript('return window.testFailures');\n  }).then(failures => {\n    testFailures = failures;\n    return driver.quit();\n  }).then(() => {\n    driver = null;\n    done(testFailures);\n  });\n}","map":{"version":3,"sources":["packages/meteortesting:browser-tests/browser/chromedriver.js"],"names":["module","export","default","startChrome","driver","process","on","quit","stdout","stderr","done","chromedriver","webdriver","logging","chrome","require","error","console","Error","options","Options","env","TEST_BROWSER_VISIBLE","addArguments","TEST_CHROME_ARGS","additionalOptions","split","map","arg","replace","apply","Builder","forBrowser","withCapabilities","toCapabilities","setLoggingPrefs","browser","build","manage","window","setPosition","passThroughLogs","logs","get","Type","BROWSER","then","entries","forEach","entry","message","startsWith","endsWith","slice","indexOf","level","name","messageLines","messageLine","ROOT_URL","testFailures","wait","executeScript","failures"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,OAAO,EAAC,MAAIC;AAAb,CAAd;;AAAA;;;;;;;;;AAUA,IAAIC,MAAJ,C,CAEA;;AACAC,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmB,MAAM;AACvB,MAAIF,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACG,IAAP;AACD;AACF,CAJD;;AAMe,SAASJ,WAAT,CAAqB;AAClCK,EAAAA,MADkC;AAElCC,EAAAA,MAFkC;AAGlCC,EAAAA;AAHkC,CAArB,EAIZ;AACD,MAAIC,YAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,MAAJ;;AACA,MAAI;AACFC,IAAAA,OAAO,CAAC,cAAD,CAAP;;AACAH,IAAAA,SAAS,GAAGG,OAAO,CAAC,oBAAD,CAAnB;AACAF,IAAAA,OAAO,GAAGE,OAAO,CAAC,gCAAD,CAAjB;AACAD,IAAAA,MAAM,GAAGC,OAAO,CAAC,2BAAD,CAAhB;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,UAAM,IAAIE,KAAJ,CACJ,4EACA,iEAFI,CAAN;AAID,GAhBA,CAkBD;AACA;;;AACA,QAAMC,OAAO,GAAG,IAAIL,MAAM,CAACM,OAAX,EAAhB;AACA,MAAI,CAACf,OAAO,CAACgB,GAAR,CAAYC,oBAAjB,EAAuCH,OAAO,CAACI,YAAR,CAAqB,YAArB,EArBtC,CAsBD;;AACA,MAAIlB,OAAO,CAACgB,GAAR,CAAYG,gBAAhB,EAAkC;AAChC;AACA,QAAIC,iBAAiB,GAAGpB,OAAO,CAACgB,GAAR,CAAYG,gBAAZ,CACnBE,KADmB,CACb,KADa,EAEnBC,GAFmB,CAEdC,GAAD,IAASA,GAAG,CAACC,OAAJ,CAAY,MAAZ,EAAoB,GAApB,CAFM,CAAxB;AAGAV,IAAAA,OAAO,CAACI,YAAR,CAAqBO,KAArB,CAA2BX,OAA3B,EAAoCM,iBAApC;AACD;;AACDrB,EAAAA,MAAM,GAAG,IAAIQ,SAAS,CAACmB,OAAd,GAAwBC,UAAxB,CAAmC,QAAnC,EAA6CC,gBAA7C,CAA8Dd,OAAO,CAACe,cAAR,EAA9D,EAAwFC,eAAxF,CAAwG;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAxG,EAA4HC,KAA5H,EAAT,CA9BC,CAgCD;;AACAjC,EAAAA,MAAM,CAACkC,MAAP,GAAgBC,MAAhB,GAAyBC,WAAzB,CAAqC,KAArC,EAA4C,KAA5C,EAjCC,CAmCD;AACA;AACA;;AACA,WAASC,eAAT,GAA2B;AACzB,WAAOrC,MAAM,CAACkC,MAAP,GAAgBI,IAAhB,GAAuBC,GAAvB,CAA2B9B,OAAO,CAAC+B,IAAR,CAAaC,OAAxC,EACJC,IADI,CACCC,OAAO,IAAI;AACf,OAACA,OAAO,IAAI,EAAZ,EAAgBC,OAAhB,CAAwBC,KAAK,IAAI;AAC/B,YAAIC,OAAO,GAAGD,KAAK,CAACC,OAAN,IAAiB,EAA/B,CAD+B,CAG/B;AACA;AACA;;AACA,YAAIA,OAAO,CAACC,UAAR,CAAmB,SAAnB,KAAiCD,OAAO,CAACE,QAAR,CAAiB,GAAjB,CAArC,EAA4D;AAC1DF,UAAAA,OAAO,GAAGA,OAAO,CAACG,KAAR,CAAcH,OAAO,CAACI,OAAR,CAAgB,GAAhB,IAAuB,CAArC,EAAwC,CAAC,CAAzC,CAAV;AACD;;AAED,YAAIL,KAAK,CAACM,KAAN,CAAYC,IAAZ,KAAqB,QAAzB,EAAmC;AACjC/C,UAAAA,MAAM,CAAE,WAAUyC,OAAQ,EAApB,CAAN;AACD,SAFD,MAEO;AACL;AACA,gBAAMO,YAAY,GAAGP,OAAO,CAACxB,KAAR,CAAc,KAAd,CAArB;AACA+B,UAAAA,YAAY,CAACT,OAAb,CAAqBU,WAAW,IAAI;AAClClD,YAAAA,MAAM,CAACkD,WAAD,CAAN;AACD,WAFD;AAGD;AACF,OAnBD;AAoBD,KAtBI,CAAP;AAuBD,GA9DA,CAgED;AACA;;;AACAtD,EAAAA,MAAM,CAACuC,GAAP,CAAWtC,OAAO,CAACgB,GAAR,CAAYsC,QAAvB;AAEA,MAAIC,YAAJ;AACAxD,EAAAA,MAAM,CACHyD,IADH,CACQ,YAAW;AACf;AACA;AACA;AACA,WAAOpB,eAAe,GAAGK,IAAlB,CAAuB,MAAM;AAClC,aAAO1C,MAAM,CAAC0D,aAAP,CAAqB,yBAArB,CAAP;AACD,KAFM,CAAP;AAGD,GARH,EAQK,MARL,EASGhB,IATH,CASQ,MAAM;AACV;AACA,WAAOL,eAAe,EAAtB;AACD,GAZH,EAaGK,IAbH,CAaQ,MAAM;AACV,WAAO1C,MAAM,CAAC0D,aAAP,CAAqB,4BAArB,CAAP;AACD,GAfH,EAgBGhB,IAhBH,CAgBQiB,QAAQ,IAAI;AAChBH,IAAAA,YAAY,GAAGG,QAAf;AACA,WAAO3D,MAAM,CAACG,IAAP,EAAP;AACD,GAnBH,EAoBGuC,IApBH,CAoBQ,MAAM;AACV1C,IAAAA,MAAM,GAAG,IAAT;AACAM,IAAAA,IAAI,CAACkD,YAAD,CAAJ;AACD,GAvBH;AAwBD","sourcesContent":["/**\n * All browser drivers must do the following things:\n * - Open a page to ROOT_URL\n * - send all console messages to the stdout function\n * - send all errors to the stderr function, only when window.testsAreRunning is false\n * - When window.testsDone becomes true, call `done` with window.testFailures argument\n * - As a safeguard, exit with code 2 if there hasn't been console output\n *   for 30 seconds.\n */\n\nlet driver;\n\n// Make sure the chromedriver process does not stick around\nprocess.on('exit', () => {\n  if (driver) {\n    driver.quit();\n  }\n});\n\nexport default function startChrome({\n  stdout,\n  stderr,\n  done,\n}) {\n  let chromedriver;\n  let webdriver;\n  let logging;\n  let chrome;\n  try {\n    require('chromedriver');\n    webdriver = require('selenium-webdriver');\n    logging = require('selenium-webdriver/lib/logging');\n    chrome = require('selenium-webdriver/chrome');\n  } catch (error) {\n    console.error(error);\n    throw new Error(\n      'When running app tests with TEST_BROWSER_DRIVER=chrome, you must first ' +\n      '\"npm i --save-dev selenium-webdriver@3.0.0-beta-2 chromedriver\"'\n    );\n  }\n\n  // Get the driver instance. By default, chromedriver gives us only errors\n  // so we need to set browser logging level to \"ALL\".\n  const options = new chrome.Options();\n  if (!process.env.TEST_BROWSER_VISIBLE) options.addArguments('--headless');\n  // Pass additional chrome options as appropriate\n  if (process.env.TEST_CHROME_ARGS) {\n    // Convert any appearances of \"%20\" to \" \" so as to support spaces in arguments if necessary\n    let additionalOptions = process.env.TEST_CHROME_ARGS\n        .split(/\\s+/)\n        .map((arg) => arg.replace(/%20/g, \" \"));\n    options.addArguments.apply(options, additionalOptions);\n  }\n  driver = new webdriver.Builder().forBrowser('chrome').withCapabilities(options.toCapabilities()).setLoggingPrefs({ browser: 'ALL' }).build();\n\n  // Can't hide the window but can move it off screen\n  driver.manage().window().setPosition(20000, 20000);\n\n  // We periodically grab logs from Chrome and pass them back.\n  // Every time we call this, we get only the log entries since\n  // the previous time we called it.\n  function passThroughLogs() {\n    return driver.manage().logs().get(logging.Type.BROWSER)\n      .then(entries => {\n        (entries || []).forEach(entry => {\n          let message = entry.message || '';\n\n          // Message may look something like this:\n          // http://localhost:3000/packages/dispatch_mocha.js?hash=abc 239:20 \"  5 passing (182ms)\"\n          // So we will try to strip off the part that isn't the pure message.\n          if (message.startsWith('http://') && message.endsWith('\"')) {\n            message = message.slice(message.indexOf('\"') + 1, -1);\n          }\n\n          if (entry.level.name === 'SEVERE') {\n            stderr(`[ERROR] ${message}`);\n          } else {\n            // Message may have escaped newlines\n            const messageLines = message.split('\\\\n');\n            messageLines.forEach(messageLine => {\n              stdout(messageLine);\n            });\n          }\n        });\n      });\n  }\n\n  // Meteor will call the `runTests` function exported by the driver package\n  // on the client as soon as this page loads.\n  driver.get(process.env.ROOT_URL);\n\n  let testFailures;\n  driver\n    .wait(function() {\n      // After the page loads, the tests are running. Eventually they\n      // finish and the driver package is supposed to set window.testsDone\n      // and window.testFailures at that time.\n      return passThroughLogs().then(() => {\n        return driver.executeScript('return window.testsDone');\n      });\n    }, 600000)\n    .then(() => {\n      // Empty the logs one last time\n      return passThroughLogs();\n    })\n    .then(() => {\n      return driver.executeScript('return window.testFailures');\n    })\n    .then(failures => {\n      testFailures = failures;\n      return driver.quit();\n    })\n    .then(() => {\n      driver = null;\n      done(testFailures);\n    });\n}\n"]},"sourceType":"script","hash":"2ec4b0d0dbf0e0f59281f7a946c3a2bb73449da6"}

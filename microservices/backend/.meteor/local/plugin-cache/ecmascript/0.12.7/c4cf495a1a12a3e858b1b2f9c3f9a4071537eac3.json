{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nmodule.export({\n  \"default\": function () {\n    return CollectionNode;\n  },\n  runFieldSanityChecks: function () {\n    return runFieldSanityChecks;\n  }\n});\nvar FieldNode;\nmodule.link(\"./fieldNode.js\", {\n  \"default\": function (v) {\n    FieldNode = v;\n  }\n}, 0);\nvar ReducerNode;\nmodule.link(\"./reducerNode.js\", {\n  \"default\": function (v) {\n    ReducerNode = v;\n  }\n}, 1);\nvar deepClone;\nmodule.link(\"lodash.clonedeep\", {\n  \"default\": function (v) {\n    deepClone = v;\n  }\n}, 2);\nvar check, Match;\nmodule.link(\"meteor/check\", {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 3);\nvar expandField, isFieldInProjection;\nmodule.link(\"../lib/fieldInProjection\", {\n  expandField: function (v) {\n    expandField = v;\n  },\n  isFieldInProjection: function (v) {\n    isFieldInProjection = v;\n  }\n}, 4);\n\nvar CollectionNode =\n/*#__PURE__*/\nfunction () {\n  function CollectionNode(collection) {\n    var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var linkName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    if (collection && !_.isObject(body)) {\n      throw new Meteor.Error('invalid-body', \"The field \\\"\" + linkName + \"\\\" is a collection link, and should have its body defined as an object.\");\n    }\n\n    this.body = deepClone(body);\n    this.linkName = linkName;\n    this.collection = collection;\n    this.nodes = [];\n    this.props = {};\n    this.parent = null;\n    this.linker = null;\n    this.linkStorageField = null;\n    this.scheduledForDeletion = false;\n    this.reducers = [];\n    this.results = [];\n    this.snapCaches = {}; // {cacheField: linkName}\n\n    this.snapCachesSingles = []; // [cacheField1, cacheField2]\n  }\n\n  var _proto = CollectionNode.prototype;\n\n  /**\n   * Adds children to itself\n   *\n   * @param node\n   * @param linker\n   */\n  _proto.add = function () {\n    function add(node, linker) {\n      node.parent = this;\n\n      if (node instanceof FieldNode) {\n        runFieldSanityChecks(node.name);\n      }\n\n      if (linker) {\n        node.linker = linker;\n        node.linkStorageField = linker.linkStorageField;\n        node.isMeta = linker.isMeta();\n        node.isVirtual = linker.isVirtual();\n        node.isOneResult = linker.isOneResult();\n        node.shouldCleanStorage = this._shouldCleanStorage(node);\n      }\n\n      this.nodes.push(node);\n    }\n\n    return add;\n  }()\n  /**\n   * @param prop\n   * @param value\n   */\n  ;\n\n  _proto.addProp = function () {\n    function addProp(prop, value) {\n      var _Object$assign;\n\n      if (prop === '$postFilter') {\n        check(value, Match.OneOf(Function, [Function]));\n      }\n\n      Object.assign(this.props, (_Object$assign = {}, _Object$assign[prop] = value, _Object$assign));\n    }\n\n    return addProp;\n  }()\n  /**\n   * @param _node\n   */\n  ;\n\n  _proto.remove = function () {\n    function remove(_node) {\n      this.nodes = _.filter(this.nodes, function (node) {\n        return _node !== node;\n      });\n    }\n\n    return remove;\n  }()\n  /**\n   * @param filters\n   * @param options\n   */\n  ;\n\n  _proto.applyFields = function () {\n    function applyFields(filters, options) {\n      var hasAddedAnyField = false;\n\n      _.each(this.fieldNodes, function (n) {\n        /**\n         * $meta field should be added to the options.fields, but MongoDB does not exclude other fields.\n         * Therefore, we do not count this as a field addition.\n         * \n         * See: https://docs.mongodb.com/manual/reference/operator/projection/meta/\n         * The $meta expression specifies the inclusion of the field to the result set \n         * and does not specify the exclusion of the other fields.\n         */\n        if (n.projectionOperator !== '$meta') {\n          hasAddedAnyField = true;\n        }\n\n        n.applyFields(options.fields);\n      }); // it will only get here if it has collectionNodes children\n\n\n      _.each(this.collectionNodes, function (collectionNode) {\n        var linker = collectionNode.linker;\n\n        if (linker && !linker.isVirtual()) {\n          if (!isFieldInProjection(options.fields, linker.linkStorageField, true)) {\n            options.fields[linker.linkStorageField] = 1;\n            hasAddedAnyField = true;\n          }\n        }\n      }); // if he selected filters, we should automatically add those fields\n\n\n      _.each(filters, function (value, field) {\n        // special handling for the $meta filter, conditional operators and text search\n        if (!_.contains(['$or', '$nor', '$not', '$and', '$meta', '$text'], field)) {\n          // if the field or the parent of the field already exists, don't add it\n          if (!_.has(options.fields, field.split('.')[0])) {\n            hasAddedAnyField = true;\n            options.fields[field] = 1;\n          }\n        }\n      });\n\n      if (!hasAddedAnyField) {\n        options.fields = (0, _objectSpread2.default)({\n          _id: 1\n        }, options.fields);\n      }\n    }\n\n    return applyFields;\n  }()\n  /**\n   * @param fieldName\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasField = function () {\n    function hasField(fieldName) {\n      var checkNested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // for checkNested flag it expands profile.phone.verified into \n      // ['profile', 'profile.phone', 'profile.phone.verified']\n      // if any of these fields match it means that field exists\n      var options = checkNested ? expandField(fieldName) : [fieldName];\n      var result = !!_.find(this.fieldNodes, function (fieldNode) {\n        return _.contains(options, fieldNode.name);\n      });\n      return result;\n    }\n\n    return hasField;\n  }()\n  /**\n   * @param fieldName\n   * @returns {FieldNode}\n   */\n  ;\n\n  _proto.getField = function () {\n    function getField(fieldName) {\n      return _.find(this.fieldNodes, function (fieldNode) {\n        return fieldNode.name == fieldName;\n      });\n    }\n\n    return getField;\n  }()\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasCollectionNode = function () {\n    function hasCollectionNode(name) {\n      return !!_.find(this.collectionNodes, function (node) {\n        return node.linkName == name;\n      });\n    }\n\n    return hasCollectionNode;\n  }()\n  /**\n   * @param name\n   * @returns {boolean}\n   */\n  ;\n\n  _proto.hasReducerNode = function () {\n    function hasReducerNode(name) {\n      return !!_.find(this.reducerNodes, function (node) {\n        return node.name == name;\n      });\n    }\n\n    return hasReducerNode;\n  }()\n  /**\n   * @param name\n   * @returns {ReducerNode}\n   */\n  ;\n\n  _proto.getReducerNode = function () {\n    function getReducerNode(name) {\n      return _.find(this.reducerNodes, function (node) {\n        return node.name == name;\n      });\n    }\n\n    return getReducerNode;\n  }()\n  /**\n   * @param name\n   * @returns {CollectionNode}\n   */\n  ;\n\n  _proto.getCollectionNode = function () {\n    function getCollectionNode(name) {\n      return _.find(this.collectionNodes, function (node) {\n        return node.linkName == name;\n      });\n    }\n\n    return getCollectionNode;\n  }()\n  /**\n   * @returns {*}\n   */\n  ;\n\n  _proto.getName = function () {\n    function getName() {\n      return this.linkName ? this.linkName : this.collection ? this.collection._name : 'N/A';\n    }\n\n    return getName;\n  }()\n  /**\n   * This is used for caching links\n   *\n   * @param cacheField\n   * @param subLinkName\n   */\n  ;\n\n  _proto.snapCache = function () {\n    function snapCache(cacheField, subLinkName) {\n      this.snapCaches[cacheField] = subLinkName;\n\n      if (this.collection.getLinker(subLinkName).isOneResult()) {\n        this.snapCachesSingles.push(cacheField);\n      }\n    }\n\n    return snapCache;\n  }()\n  /**\n   * This method verifies whether to remove the linkStorageField form the results\n   * unless you specify it in your query.\n   *\n   * @param node\n   * @returns {boolean}\n   * @private\n   */\n  ;\n\n  _proto._shouldCleanStorage = function () {\n    function _shouldCleanStorage(node) {\n      if (node.linkStorageField === '_id') {\n        return false;\n      } else {\n        if (node.isVirtual) {\n          return !node.hasField(node.linkStorageField, true);\n        } else {\n          return !this.hasField(node.linkStorageField, true);\n        }\n      }\n    }\n\n    return _shouldCleanStorage;\n  }();\n\n  (0, _createClass2.default)(CollectionNode, [{\n    key: \"collectionNodes\",\n    get: function () {\n      return _.filter(this.nodes, function (n) {\n        return n instanceof CollectionNode;\n      });\n    }\n  }, {\n    key: \"fieldNodes\",\n    get: function () {\n      return _.filter(this.nodes, function (n) {\n        return n instanceof FieldNode;\n      });\n    }\n  }, {\n    key: \"reducerNodes\",\n    get: function () {\n      return _.filter(this.nodes, function (n) {\n        return n instanceof ReducerNode;\n      });\n    }\n  }]);\n  return CollectionNode;\n}();\n\nfunction runFieldSanityChecks(fieldName) {\n  // Run sanity checks on the field\n  if (fieldName[0] === '$') {\n    throw new Error(\"You are not allowed to use fields that start with $ inside a reducer's body: \" + fieldName);\n  }\n\n  return true;\n}","map":{"version":3,"sources":["packages/cultofcoders:grapher/lib/query/nodes/collectionNode.js"],"names":["module","export","CollectionNode","runFieldSanityChecks","FieldNode","link","v","ReducerNode","deepClone","check","Match","expandField","isFieldInProjection","collection","body","linkName","_","isObject","Meteor","Error","nodes","props","parent","linker","linkStorageField","scheduledForDeletion","reducers","results","snapCaches","snapCachesSingles","add","node","name","isMeta","isVirtual","isOneResult","shouldCleanStorage","_shouldCleanStorage","push","addProp","prop","value","OneOf","Function","Object","assign","remove","_node","filter","applyFields","filters","options","hasAddedAnyField","each","fieldNodes","n","projectionOperator","fields","collectionNodes","collectionNode","field","contains","has","split","_id","hasField","fieldName","checkNested","result","find","fieldNode","getField","hasCollectionNode","hasReducerNode","reducerNodes","getReducerNode","getCollectionNode","getName","_name","snapCache","cacheField","subLinkName","getLinker"],"mappings":"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","sourcesContent":["import FieldNode from './fieldNode.js';\nimport ReducerNode from './reducerNode.js';\nimport deepClone from 'lodash.clonedeep';\nimport {check, Match} from 'meteor/check';\nimport {expandField, isFieldInProjection} from '../lib/fieldInProjection';\n\nexport default class CollectionNode {\n    constructor(collection, body = {}, linkName = null) {\n        if (collection && !_.isObject(body)) {\n            throw new Meteor.Error('invalid-body', `The field \"${linkName}\" is a collection link, and should have its body defined as an object.`);\n        }\n\n        this.body = deepClone(body);\n        this.linkName = linkName;\n        this.collection = collection;\n\n        this.nodes = [];\n        this.props = {};\n        this.parent = null;\n        this.linker = null;\n        this.linkStorageField = null;\n        this.scheduledForDeletion = false;\n        this.reducers = [];\n        this.results = [];\n        this.snapCaches = {}; // {cacheField: linkName}\n        this.snapCachesSingles = []; // [cacheField1, cacheField2]\n    }\n\n    get collectionNodes() {\n        return _.filter(this.nodes, n => n instanceof CollectionNode)\n    }\n\n    get fieldNodes() {\n        return _.filter(this.nodes, n => n instanceof FieldNode);\n    }\n\n    get reducerNodes() {\n        return _.filter(this.nodes, n => n instanceof ReducerNode);\n    }\n\n    /**\n     * Adds children to itself\n     *\n     * @param node\n     * @param linker\n     */\n    add(node, linker) {\n        node.parent = this;\n\n        if (node instanceof FieldNode) {\n            runFieldSanityChecks(node.name);\n        }\n        \n        if (linker) {\n            node.linker = linker;\n            node.linkStorageField = linker.linkStorageField;\n            node.isMeta = linker.isMeta();\n            node.isVirtual = linker.isVirtual();\n            node.isOneResult = linker.isOneResult();\n            node.shouldCleanStorage = this._shouldCleanStorage(node);\n        }\n\n        this.nodes.push(node);\n    }\n\n    /**\n     * @param prop\n     * @param value\n     */\n    addProp(prop, value) {\n        if (prop === '$postFilter') {\n            check(value, Match.OneOf(Function, [Function]))\n        }\n\n        Object.assign(this.props, {\n            [prop]: value\n        });\n    }\n\n    /**\n     * @param _node\n     */\n    remove(_node) {\n        this.nodes = _.filter(this.nodes, node => _node !== node);\n    }\n\n    /**\n     * @param filters\n     * @param options\n     */\n    applyFields(filters, options) {\n        let hasAddedAnyField = false;\n\n        _.each(this.fieldNodes, n => {\n            /**\n             * $meta field should be added to the options.fields, but MongoDB does not exclude other fields.\n             * Therefore, we do not count this as a field addition.\n             * \n             * See: https://docs.mongodb.com/manual/reference/operator/projection/meta/\n             * The $meta expression specifies the inclusion of the field to the result set \n             * and does not specify the exclusion of the other fields.\n             */\n            if (n.projectionOperator !== '$meta') {\n                hasAddedAnyField = true;\n            }\n            n.applyFields(options.fields)\n        });\n\n        // it will only get here if it has collectionNodes children\n        _.each(this.collectionNodes, (collectionNode) => {\n            let linker = collectionNode.linker;\n\n            if (linker && !linker.isVirtual()) {\n                if (!isFieldInProjection(options.fields, linker.linkStorageField, true)) {\n                    options.fields[linker.linkStorageField] = 1;\n                    hasAddedAnyField = true;\n                }\n            }\n        });\n\n        // if he selected filters, we should automatically add those fields\n        _.each(filters, (value, field) => {\n            // special handling for the $meta filter, conditional operators and text search\n            if (!_.contains(['$or', '$nor', '$not', '$and', '$meta', '$text'], field)) {\n                // if the field or the parent of the field already exists, don't add it\n                if (!_.has(options.fields, field.split('.')[0])){\n                    hasAddedAnyField = true;\n                    options.fields[field] = 1;\n                }\n            }\n        });\n\n        if (!hasAddedAnyField) {\n            options.fields = {\n                _id: 1,\n                // fields might contain $meta expression, so it should be added here,\n                ...options.fields,\n            };\n        }\n    }\n\n    /**\n     * @param fieldName\n     * @returns {boolean}\n     */\n    hasField(fieldName, checkNested = false) {\n        // for checkNested flag it expands profile.phone.verified into \n        // ['profile', 'profile.phone', 'profile.phone.verified']\n        // if any of these fields match it means that field exists\n\n        const options = checkNested ? expandField(fieldName) : [fieldName];\n\n        const result = !!_.find(this.fieldNodes, fieldNode => {\n            return _.contains(options, fieldNode.name);\n        });\n\n        return result;\n    }\n\n    /**\n     * @param fieldName\n     * @returns {FieldNode}\n     */\n    getField(fieldName) {\n        return _.find(this.fieldNodes, fieldNode => {\n            return fieldNode.name == fieldName\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasCollectionNode(name) {\n        return !!_.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {boolean}\n     */\n    hasReducerNode(name) {\n        return !!_.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {ReducerNode}\n     */\n    getReducerNode(name) {\n        return _.find(this.reducerNodes, node => {\n            return node.name == name\n        })\n    }\n\n    /**\n     * @param name\n     * @returns {CollectionNode}\n     */\n    getCollectionNode(name) {\n        return _.find(this.collectionNodes, node => {\n            return node.linkName == name\n        })\n    }\n\n    /**\n     * @returns {*}\n     */\n    getName() {\n        return this.linkName\n            ? this.linkName\n            : (this.collection ? this.collection._name : 'N/A');\n    }\n\n    /**\n     * This is used for caching links\n     *\n     * @param cacheField\n     * @param subLinkName\n     */\n    snapCache(cacheField, subLinkName) {\n        this.snapCaches[cacheField] = subLinkName;\n\n        if (this.collection.getLinker(subLinkName).isOneResult()) {\n            this.snapCachesSingles.push(cacheField);\n        }\n    }\n\n    /**\n     * This method verifies whether to remove the linkStorageField form the results\n     * unless you specify it in your query.\n     *\n     * @param node\n     * @returns {boolean}\n     * @private\n     */\n    _shouldCleanStorage(node) {\n        if (node.linkStorageField === '_id') {\n            return false;\n        } else {\n            if (node.isVirtual) {\n                return !node.hasField(node.linkStorageField, true);\n            } else {\n                return !this.hasField(node.linkStorageField, true);\n            }\n        }\n    }\n}\n\n/**\n * Make sure that the field is ok to be added\n * @param {*} fieldName \n */\nexport function runFieldSanityChecks(fieldName) {\n    // Run sanity checks on the field\n    if (fieldName[0] === '$') {\n        throw new Error(`You are not allowed to use fields that start with $ inside a reducer's body: ${fieldName}`);\n    }\n\n    return true;\n}\n"]},"sourceType":"script","hash":"c4cf495a1a12a3e858b1b2f9c3f9a4071537eac3"}

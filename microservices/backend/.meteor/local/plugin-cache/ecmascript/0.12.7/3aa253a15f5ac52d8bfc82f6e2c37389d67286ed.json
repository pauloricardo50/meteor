{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/CustomSelectField.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/AutoForm2/client/test/CustomSelectField.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/CustomSelectField.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/AutoForm2/client/test/CustomSelectField.spec.jsx"],"names":["expect","SimpleSchema","MenuItem","AutoForm","getMountedComponent","CustomSelectField","pollUntilReady","props","component","Component","setInput","name","value","find","simulate","target","describe","beforeEach","reset","context","it","schema","text","type","String","allowedValues","childAt","prop","to","deep","equal","transform","uniforms","displayEmpty","placeholder","SelectField","at","not","undefined","items","forEach","item","customAllowedValues","update","length","then","done","Promise","resolve","setTimeout","text2"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport SimpleSchema from 'simpl-schema';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AutoForm from '../../AutoForm';\nimport getMountedComponent from '../../../../utils/testHelpers/getMountedComponent';\nimport CustomSelectField from '../../CustomSelectField';\nimport pollUntilReady from '../../../../utils/pollUntilReady';\n\nlet props;\nconst component = () =>\n  getMountedComponent({\n    Component: AutoForm,\n    props,\n  });\n\nconst setInput = (name, value) => {\n  component()\n    .find(`[name=\"${name}\"]`)\n    .find('input')\n    .simulate('change', { target: { value } });\n};\n\ndescribe('CustomSelectField', () => {\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = {};\n  });\n\n  context('with allowed values', () => {\n    it('renders allowed values', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: String, allowedValues: ['yo', 'dude'] },\n        }),\n      };\n\n      expect(component()\n        .find(CustomSelectField)\n        .childAt(0)\n        .prop('values')).to.deep.equal(['yo', 'dude']);\n    });\n\n    it('renders the select field', () => {\n      const transform = value => `${value}-mec`;\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            allowedValues: ['yo', 'hola'],\n            uniforms: { transform, displayEmpty: false, placeholder: '' },\n          },\n        }),\n      };\n\n      const SelectField = component()\n        .find(CustomSelectField)\n        .at(0);\n\n      expect(SelectField).to.not.equal(undefined);\n      SelectField.find('[role=\"button\"]').simulate('click');\n\n      const items = component()\n        .find(CustomSelectField)\n        .find(MenuItem)\n        .find('li');\n\n      items.forEach((item) => {\n        expect(item.text()).to.equal(transform(item.prop('data-value')));\n      });\n    });\n  });\n  \n  context('with custom allowed values', () => {\n    it('renders the select field', () => {\n      const transform = value => `${value}-mec`;\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: ({ value }) => [`${value}1`, `${value}2`],\n            uniforms: { transform, placeholder: '', displayEmpty: false },\n          },\n          value: {\n            type: String,\n          },\n        }),\n      };\n\n      setInput('value', 'yo');\n\n      return pollUntilReady(() => {\n        component().update();\n        return (\n          component()\n            .find(CustomSelectField)\n            .at(0)\n            .find('[role=\"button\"]').length === 1\n        );\n      }).then(() => {\n        const SelectField = component()\n          .find(CustomSelectField)\n          .at(0)\n          .find('[role=\"button\"]');\n\n        expect(SelectField).to.not.equal(undefined);\n        SelectField.find('[role=\"button\"]').simulate('click');\n\n        const items = component()\n          .find(CustomSelectField)\n          .find(MenuItem)\n          .find('li');\n\n        expect(items.length).to.equal(2);\n\n        items.forEach((item) => {\n          expect(item.text()).to.equal(transform(item.prop('data-value')));\n        });\n      });\n    });\n\n    it('renders custom allowed values coming from a promise', (done) => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: () => Promise.resolve(['yo', 'dude']),\n          },\n        }),\n      };\n      component();\n\n      setTimeout(() => {\n        component().update();\n        expect(component()\n          .find(CustomSelectField)\n          .childAt(0)\n          .prop('values')).to.deep.equal(['yo', 'dude']);\n        done();\n      }, 0);\n    });\n\n    it('renders custom allowed values coming from a function', (done) => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: () => ['yo', 'dude'],\n          },\n        }),\n      };\n      component();\n\n      setTimeout(() => {\n        component().update();\n        expect(component()\n          .find(CustomSelectField)\n          .childAt(0)\n          .prop('values')).to.deep.equal(['yo', 'dude']);\n        done();\n      }, 0);\n    });\n\n    it('fetches allowed values based on the model', (done) => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: ({ text2 }) => [text2],\n          },\n          text2: String,\n        }),\n      };\n      component();\n\n      setTimeout(() => {\n        component().update();\n        expect(component()\n          .find(CustomSelectField)\n          .childAt(0)\n          .prop('values')).to.deep.equal(['']);\n\n        setInput('text2', 'dude');\n\n        setTimeout(() => {\n          component().update();\n          expect(component()\n            .find(CustomSelectField)\n            .childAt(0)\n            .prop('values')).to.deep.equal(['dude']);\n          done();\n        }, 0);\n      }, 0);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/CustomSelectField.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/AutoForm2/client/test/CustomSelectField.spec.jsx"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet MenuItem;\nmodule.link(\"@material-ui/core/MenuItem\", {\n  default(v) {\n    MenuItem = v;\n  }\n\n}, 2);\nlet AutoForm;\nmodule.link(\"../../AutoForm\", {\n  default(v) {\n    AutoForm = v;\n  }\n\n}, 3);\nlet getMountedComponent;\nmodule.link(\"../../../../utils/testHelpers/getMountedComponent\", {\n  default(v) {\n    getMountedComponent = v;\n  }\n\n}, 4);\nlet CustomSelectField;\nmodule.link(\"../../CustomSelectField\", {\n  default(v) {\n    CustomSelectField = v;\n  }\n\n}, 5);\nlet pollUntilReady;\nmodule.link(\"../../../../utils/pollUntilReady\", {\n  default(v) {\n    pollUntilReady = v;\n  }\n\n}, 6);\nlet props;\n\nconst component = () => getMountedComponent({\n  Component: AutoForm,\n  props\n});\n\nconst setInput = (name, value) => {\n  component().find(\"[name=\\\"\".concat(name, \"\\\"]\")).find('input').simulate('change', {\n    target: {\n      value\n    }\n  });\n};\n\ndescribe('CustomSelectField', () => {\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = {};\n  });\n  context('with allowed values', () => {\n    it('renders allowed values', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            allowedValues: ['yo', 'dude']\n          }\n        })\n      };\n      expect(component().find(CustomSelectField).childAt(0).prop('values')).to.deep.equal(['yo', 'dude']);\n    });\n    it('renders the select field', () => {\n      const transform = value => \"\".concat(value, \"-mec\");\n\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            allowedValues: ['yo', 'hola'],\n            uniforms: {\n              transform,\n              displayEmpty: false,\n              placeholder: ''\n            }\n          }\n        })\n      };\n      const SelectField = component().find(CustomSelectField).at(0);\n      expect(SelectField).to.not.equal(undefined);\n      SelectField.find('[role=\"button\"]').simulate('click');\n      const items = component().find(CustomSelectField).find(MenuItem).find('li');\n      items.forEach(item => {\n        expect(item.text()).to.equal(transform(item.prop('data-value')));\n      });\n    });\n  });\n  context('with custom allowed values', () => {\n    it('renders the select field', () => {\n      const transform = value => \"\".concat(value, \"-mec\");\n\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: (_ref) => {\n              let {\n                value\n              } = _ref;\n              return [\"\".concat(value, \"1\"), \"\".concat(value, \"2\")];\n            },\n            uniforms: {\n              transform,\n              placeholder: '',\n              displayEmpty: false\n            }\n          },\n          value: {\n            type: String\n          }\n        })\n      };\n      setInput('value', 'yo');\n      return pollUntilReady(() => {\n        component().update();\n        return component().find(CustomSelectField).at(0).find('[role=\"button\"]').length === 1;\n      }).then(() => {\n        const SelectField = component().find(CustomSelectField).at(0).find('[role=\"button\"]');\n        expect(SelectField).to.not.equal(undefined);\n        SelectField.find('[role=\"button\"]').simulate('click');\n        const items = component().find(CustomSelectField).find(MenuItem).find('li');\n        expect(items.length).to.equal(2);\n        items.forEach(item => {\n          expect(item.text()).to.equal(transform(item.prop('data-value')));\n        });\n      });\n    });\n    it('renders custom allowed values coming from a promise', done => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: () => Promise.resolve(['yo', 'dude'])\n          }\n        })\n      };\n      component();\n      setTimeout(() => {\n        component().update();\n        expect(component().find(CustomSelectField).childAt(0).prop('values')).to.deep.equal(['yo', 'dude']);\n        done();\n      }, 0);\n    });\n    it('renders custom allowed values coming from a function', done => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: () => ['yo', 'dude']\n          }\n        })\n      };\n      component();\n      setTimeout(() => {\n        component().update();\n        expect(component().find(CustomSelectField).childAt(0).prop('values')).to.deep.equal(['yo', 'dude']);\n        done();\n      }, 0);\n    });\n    it('fetches allowed values based on the model', done => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: (_ref2) => {\n              let {\n                text2\n              } = _ref2;\n              return [text2];\n            }\n          },\n          text2: String\n        })\n      };\n      component();\n      setTimeout(() => {\n        component().update();\n        expect(component().find(CustomSelectField).childAt(0).prop('values')).to.deep.equal(['']);\n        setInput('text2', 'dude');\n        setTimeout(() => {\n          component().update();\n          expect(component().find(CustomSelectField).childAt(0).prop('values')).to.deep.equal(['dude']);\n          done();\n        }, 0);\n      }, 0);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/components/AutoForm2/client/test/CustomSelectField.spec.jsx"],"names":["component","getMountedComponent","Component","props","setInput","target","value","describe","beforeEach","context","it","schema","text","type","allowedValues","expect","transform","uniforms","displayEmpty","placeholder","SelectField","items","item","customAllowedValues","String","done","Promise","setTimeout","text2"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport SimpleSchema from 'simpl-schema';\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AutoForm from '../../AutoForm';\nimport getMountedComponent from '../../../../utils/testHelpers/getMountedComponent';\nimport CustomSelectField from '../../CustomSelectField';\nimport pollUntilReady from '../../../../utils/pollUntilReady';\n\nlet props;\nconst component = () =>\n  getMountedComponent({\n    Component: AutoForm,\n    props,\n  });\n\nconst setInput = (name, value) => {\n  component()\n    .find(`[name=\"${name}\"]`)\n    .find('input')\n    .simulate('change', { target: { value } });\n};\n\ndescribe('CustomSelectField', () => {\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = {};\n  });\n\n  context('with allowed values', () => {\n    it('renders allowed values', () => {\n      props = {\n        schema: new SimpleSchema({\n          text: { type: String, allowedValues: ['yo', 'dude'] },\n        }),\n      };\n\n      expect(component()\n        .find(CustomSelectField)\n        .childAt(0)\n        .prop('values')).to.deep.equal(['yo', 'dude']);\n    });\n\n    it('renders the select field', () => {\n      const transform = value => `${value}-mec`;\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            allowedValues: ['yo', 'hola'],\n            uniforms: { transform, displayEmpty: false, placeholder: '' },\n          },\n        }),\n      };\n\n      const SelectField = component()\n        .find(CustomSelectField)\n        .at(0);\n\n      expect(SelectField).to.not.equal(undefined);\n      SelectField.find('[role=\"button\"]').simulate('click');\n\n      const items = component()\n        .find(CustomSelectField)\n        .find(MenuItem)\n        .find('li');\n\n      items.forEach((item) => {\n        expect(item.text()).to.equal(transform(item.prop('data-value')));\n      });\n    });\n  });\n  \n  context('with custom allowed values', () => {\n    it('renders the select field', () => {\n      const transform = value => `${value}-mec`;\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: ({ value }) => [`${value}1`, `${value}2`],\n            uniforms: { transform, placeholder: '', displayEmpty: false },\n          },\n          value: {\n            type: String,\n          },\n        }),\n      };\n\n      setInput('value', 'yo');\n\n      return pollUntilReady(() => {\n        component().update();\n        return (\n          component()\n            .find(CustomSelectField)\n            .at(0)\n            .find('[role=\"button\"]').length === 1\n        );\n      }).then(() => {\n        const SelectField = component()\n          .find(CustomSelectField)\n          .at(0)\n          .find('[role=\"button\"]');\n\n        expect(SelectField).to.not.equal(undefined);\n        SelectField.find('[role=\"button\"]').simulate('click');\n\n        const items = component()\n          .find(CustomSelectField)\n          .find(MenuItem)\n          .find('li');\n\n        expect(items.length).to.equal(2);\n\n        items.forEach((item) => {\n          expect(item.text()).to.equal(transform(item.prop('data-value')));\n        });\n      });\n    });\n\n    it('renders custom allowed values coming from a promise', (done) => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: () => Promise.resolve(['yo', 'dude']),\n          },\n        }),\n      };\n      component();\n\n      setTimeout(() => {\n        component().update();\n        expect(component()\n          .find(CustomSelectField)\n          .childAt(0)\n          .prop('values')).to.deep.equal(['yo', 'dude']);\n        done();\n      }, 0);\n    });\n\n    it('renders custom allowed values coming from a function', (done) => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: () => ['yo', 'dude'],\n          },\n        }),\n      };\n      component();\n\n      setTimeout(() => {\n        component().update();\n        expect(component()\n          .find(CustomSelectField)\n          .childAt(0)\n          .prop('values')).to.deep.equal(['yo', 'dude']);\n        done();\n      }, 0);\n    });\n\n    it('fetches allowed values based on the model', (done) => {\n      props = {\n        schema: new SimpleSchema({\n          text: {\n            type: String,\n            customAllowedValues: ({ text2 }) => [text2],\n          },\n          text2: String,\n        }),\n      };\n      component();\n\n      setTimeout(() => {\n        component().update();\n        expect(component()\n          .find(CustomSelectField)\n          .childAt(0)\n          .prop('values')).to.deep.equal(['']);\n\n        setInput('text2', 'dude');\n\n        setTimeout(() => {\n          component().update();\n          expect(component()\n            .find(CustomSelectField)\n            .childAt(0)\n            .prop('values')).to.deep.equal(['dude']);\n          done();\n        }, 0);\n      }, 0);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"3aa253a15f5ac52d8bfc82f6e2c37389d67286ed"}

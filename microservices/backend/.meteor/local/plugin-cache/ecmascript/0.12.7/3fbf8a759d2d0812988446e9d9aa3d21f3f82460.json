{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/PromotionCalculator.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/Calculator/test/PromotionCalculator.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/PromotionCalculator.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/test/PromotionCalculator.spec.js"],"names":["expect","Calculator","describe","it","context","getSolvency","loan","borrowers","bankFortune","salary","notaryFees","to","deep","include","withBankFortune","insurance2","value","withInsurance2","insurance3A","withInsurance3","withInsurance2And3","skip"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator from '..';\n\ndescribe('PromotionCalculator', () => {\n  describe('canAffordPromotionOption', () => {\n    it('test name', () => {\n      // Test code\n    });\n  });\n\n  describe('getSolvency', () => {\n    context('with infinite salary', () => {\n      it('returns property value with bank fortune only', () => {\n        expect(Calculator.getSolvency({\n          loan: { borrowers: [{ bankFortune: 250000, salary: 10000000 }] },\n          notaryFees: 50000,\n        })).to.deep.include({ withBankFortune: 1000000 });\n      });\n\n      it('returns property value with insurance2', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 150000,\n                insurance2: [{ value: 100000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance2: 1000000 });\n      });\n\n      it('returns a smaller propertyValue if little insurance2 is available', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 150000,\n                insurance2: [{ value: 60000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance2: 800000 });\n      });\n\n      it('returns a propertyValue with insurance3', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 200000,\n                insurance3A: [{ value: 50000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance3: 1000000 });\n      });\n\n      it('returns a propertyValue with insurance3 and insurance2', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 100000,\n                insurance3A: [{ value: 50000 }],\n                insurance2: [{ value: 100000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance2And3: 1000000 });\n      });\n    });\n\n    context.skip('limited by income', () => {\n      it('returns a salary limited value', () => {\n        expect(Calculator.getSolvency({\n          loan: { borrowers: [{ bankFortune: 10000000, salary: 180000 }] },\n          notaryFees: 50000,\n        })).to.deep.include({ withBankFortune: 1000000 });\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/PromotionCalculator.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/test/PromotionCalculator.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Calculator;\nmodule.link(\"..\", {\n  default(v) {\n    Calculator = v;\n  }\n\n}, 1);\ndescribe('PromotionCalculator', () => {\n  describe('canAffordPromotionOption', () => {\n    it('test name', () => {// Test code\n    });\n  });\n  describe('getSolvency', () => {\n    context('with infinite salary', () => {\n      it('returns property value with bank fortune only', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [{\n              bankFortune: 250000,\n              salary: 10000000\n            }]\n          },\n          notaryFees: 50000\n        })).to.deep.include({\n          withBankFortune: 1000000\n        });\n      });\n      it('returns property value with insurance2', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [{\n              bankFortune: 150000,\n              insurance2: [{\n                value: 100000\n              }],\n              salary: 10000000\n            }]\n          },\n          notaryFees: 50000\n        })).to.deep.include({\n          withInsurance2: 1000000\n        });\n      });\n      it('returns a smaller propertyValue if little insurance2 is available', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [{\n              bankFortune: 150000,\n              insurance2: [{\n                value: 60000\n              }],\n              salary: 10000000\n            }]\n          },\n          notaryFees: 50000\n        })).to.deep.include({\n          withInsurance2: 800000\n        });\n      });\n      it('returns a propertyValue with insurance3', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [{\n              bankFortune: 200000,\n              insurance3A: [{\n                value: 50000\n              }],\n              salary: 10000000\n            }]\n          },\n          notaryFees: 50000\n        })).to.deep.include({\n          withInsurance3: 1000000\n        });\n      });\n      it('returns a propertyValue with insurance3 and insurance2', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [{\n              bankFortune: 100000,\n              insurance3A: [{\n                value: 50000\n              }],\n              insurance2: [{\n                value: 100000\n              }],\n              salary: 10000000\n            }]\n          },\n          notaryFees: 50000\n        })).to.deep.include({\n          withInsurance2And3: 1000000\n        });\n      });\n    });\n    context.skip('limited by income', () => {\n      it('returns a salary limited value', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [{\n              bankFortune: 10000000,\n              salary: 180000\n            }]\n          },\n          notaryFees: 50000\n        })).to.deep.include({\n          withBankFortune: 1000000\n        });\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/Calculator/test/PromotionCalculator.spec.js"],"names":["describe","it","context","expect","loan","borrowers","bankFortune","salary","notaryFees","withBankFortune","insurance2","value","withInsurance2","insurance3A","withInsurance3","withInsurance2And3"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator from '..';\n\ndescribe('PromotionCalculator', () => {\n  describe('canAffordPromotionOption', () => {\n    it('test name', () => {\n      // Test code\n    });\n  });\n\n  describe('getSolvency', () => {\n    context('with infinite salary', () => {\n      it('returns property value with bank fortune only', () => {\n        expect(Calculator.getSolvency({\n          loan: { borrowers: [{ bankFortune: 250000, salary: 10000000 }] },\n          notaryFees: 50000,\n        })).to.deep.include({ withBankFortune: 1000000 });\n      });\n\n      it('returns property value with insurance2', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 150000,\n                insurance2: [{ value: 100000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance2: 1000000 });\n      });\n\n      it('returns a smaller propertyValue if little insurance2 is available', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 150000,\n                insurance2: [{ value: 60000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance2: 800000 });\n      });\n\n      it('returns a propertyValue with insurance3', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 200000,\n                insurance3A: [{ value: 50000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance3: 1000000 });\n      });\n\n      it('returns a propertyValue with insurance3 and insurance2', () => {\n        expect(Calculator.getSolvency({\n          loan: {\n            borrowers: [\n              {\n                bankFortune: 100000,\n                insurance3A: [{ value: 50000 }],\n                insurance2: [{ value: 100000 }],\n                salary: 10000000,\n              },\n            ],\n          },\n          notaryFees: 50000,\n        })).to.deep.include({ withInsurance2And3: 1000000 });\n      });\n    });\n\n    context.skip('limited by income', () => {\n      it('returns a salary limited value', () => {\n        expect(Calculator.getSolvency({\n          loan: { borrowers: [{ bankFortune: 10000000, salary: 180000 }] },\n          notaryFees: 50000,\n        })).to.deep.include({ withBankFortune: 1000000 });\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"3fbf8a759d2d0812988446e9d9aa3d21f3f82460"}

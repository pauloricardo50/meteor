{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotionOptions/server/test/PromotionOptionService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/promotionOptions/server/test/PromotionOptionService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotionOptions/server/test/PromotionOptionService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/promotionOptions/server/test/PromotionOptionService.test.js"],"names":["expect","resetDatabase","Factory","generator","LoanService","PromotionOptionService","describe","beforeEach","promotionOptionId","loanId","promotionId","promotionLotId","properties","_id","promotions","promotionLots","propertyLinks","promotionOptions","loan","loans","it","get","to","not","equal","undefined","remove","promotionOptionLinks","deep","promotionLinks","priorityOrder","showAllLots","$metadata","id","insert","throw","length","create","increasePriorityOrder","reducePriorityOrder"],"mappings":"AAAA;;AACA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,OAAOC,SAAP;AACA,OAAOC,WAAP;AACA,OAAOC,sBAAP;AAEAC,QAAQ,CAAC,wBAAD,EAA2B,MAAM;AACvCC,EAAAA,UAAU,CAAC,MAAM;AACfN,IAAAA,aAAa;AACd,GAFS,CAAV;AAIAK,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvB,QAAIE,iBAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,WAAJ;AACA,QAAIC,cAAJ;AAEAJ,IAAAA,UAAU,CAAC,MAAM;AACfG,MAAAA,WAAW,GAAG,SAAd;AACAC,MAAAA,cAAc,GAAG,QAAjB;AACAH,MAAAA,iBAAiB,GAAG,QAApB;AACAC,MAAAA,MAAM,GAAG,QAAT;AACAN,MAAAA,SAAS,CAAC;AACRS,QAAAA,UAAU,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERC,QAAAA,UAAU,EAAE;AACVD,UAAAA,GAAG,EAAEH,WADK;AAEVK,UAAAA,aAAa,EAAE;AACbF,YAAAA,GAAG,EAAEF,cADQ;AAEbK,YAAAA,aAAa,EAAE,CAAC;AAAEH,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFF;AAGbI,YAAAA,gBAAgB,EAAE;AAAEJ,cAAAA,GAAG,EAAEL,iBAAP;AAA0BU,cAAAA,IAAI,EAAE;AAAEL,gBAAAA,GAAG,EAAEJ;AAAP;AAAhC;AAHL,WAFL;AAOVU,UAAAA,KAAK,EAAE;AAAEN,YAAAA,GAAG,EAAEJ;AAAP;AAPG;AAFJ,OAAD,CAAT;AAYD,KAjBS,CAAV;AAmBAW,IAAAA,EAAE,CAAC,6BAAD,EAAgC,MAAM;AACtCpB,MAAAA,MAAM,CAACK,sBAAsB,CAACgB,GAAvB,CAA2Bb,iBAA3B,CAAD,CAAN,CAAsDc,EAAtD,CAAyDC,GAAzD,CAA6DC,KAA7D,CAAmEC,SAAnE;AACApB,MAAAA,sBAAsB,CAACqB,MAAvB,CAA8B;AAAElB,QAAAA;AAAF,OAA9B;AACAR,MAAAA,MAAM,CAACK,sBAAsB,CAACgB,GAAvB,CAA2Bb,iBAA3B,CAAD,CAAN,CAAsDc,EAAtD,CAAyDE,KAAzD,CAA+DC,SAA/D;AACD,KAJC,CAAF;AAMAL,IAAAA,EAAE,CAAC,gCAAD,EAAmC,MAAM;AACzCf,MAAAA,sBAAsB,CAACqB,MAAvB,CAA8B;AAAElB,QAAAA;AAAF,OAA9B;AACA,YAAMU,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAb;AACAT,MAAAA,MAAM,CAACkB,IAAI,CAACS,oBAAN,CAAN,CAAkCL,EAAlC,CAAqCM,IAArC,CAA0CJ,KAA1C,CAAgD,EAAhD;AACD,KAJC,CAAF;AAMAJ,IAAAA,EAAE,CAAC,0CAAD,EAA6C,MAAM;AACnDf,MAAAA,sBAAsB,CAACqB,MAAvB,CAA8B;AAAElB,QAAAA;AAAF,OAA9B;AACA,YAAMU,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAb;AACAT,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAN,CAAN,CAA4BP,EAA5B,CAA+BM,IAA/B,CAAoCJ,KAApC,CAA0C,CACxC;AAAEX,QAAAA,GAAG,EAAEH,WAAP;AAAoBoB,QAAAA,aAAa,EAAE,EAAnC;AAAuCC,QAAAA,WAAW,EAAE;AAApD,OADwC,CAA1C;AAGD,KANC,CAAF;AAOD,GA5CO,CAAR;AA8CAzB,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvB,QAAIG,MAAJ;AACA,QAAIC,WAAJ;AACA,QAAIC,cAAJ;AAEAJ,IAAAA,UAAU,CAAC,MAAM;AACfG,MAAAA,WAAW,GAAG,SAAd;AACAC,MAAAA,cAAc,GAAG,QAAjB;AACAF,MAAAA,MAAM,GAAG,QAAT;AACAN,MAAAA,SAAS,CAAC;AACRS,QAAAA,UAAU,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERC,QAAAA,UAAU,EAAE;AACVD,UAAAA,GAAG,EAAEH,WADK;AAEVK,UAAAA,aAAa,EAAE;AACbF,YAAAA,GAAG,EAAEF,cADQ;AAEbK,YAAAA,aAAa,EAAE,CAAC;AAAEH,cAAAA,GAAG,EAAE;AAAP,aAAD;AAFF,WAFL;AAMVM,UAAAA,KAAK,EAAE;AAAEN,YAAAA,GAAG,EAAEJ,MAAP;AAAeuB,YAAAA,SAAS,EAAE;AAAEF,cAAAA,aAAa,EAAE;AAAjB;AAA1B;AANG;AAFJ,OAAD,CAAT;AAWD,KAfS,CAAV;AAiBAV,IAAAA,EAAE,CAAC,+BAAD,EAAkC,MAAM;AACxC,YAAMa,EAAE,GAAG5B,sBAAsB,CAAC6B,MAAvB,CAA8B;AAAEvB,QAAAA,cAAF;AAAkBF,QAAAA;AAAlB,OAA9B,CAAX;AACAT,MAAAA,MAAM,CAACK,sBAAsB,CAACgB,GAAvB,CAA2BY,EAA3B,CAAD,CAAN,CAAuCX,EAAvC,CAA0CC,GAA1C,CAA8CC,KAA9C,CAAoDC,SAApD;AACD,KAHC,CAAF;AAKAL,IAAAA,EAAE,CAAC,uEAAD,EAA0E,MAAM;AAChF,YAAMa,EAAE,GAAG5B,sBAAsB,CAAC6B,MAAvB,CAA8B;AAAEvB,QAAAA,cAAF;AAAkBF,QAAAA;AAAlB,OAA9B,CAAX;AACAT,MAAAA,MAAM,CAACK,sBAAsB,CAACgB,GAAvB,CAA2BY,EAA3B,CAAD,CAAN,CAAuCX,EAAvC,CAA0CC,GAA1C,CAA8CC,KAA9C,CAAoDC,SAApD;AAEAzB,MAAAA,MAAM,CAAC,MACLK,sBAAsB,CAAC6B,MAAvB,CAA8B;AAAEvB,QAAAA,cAAF;AAAkBF,QAAAA;AAAlB,OAA9B,CADI,CAAN,CAC6Da,EAD7D,CACgEa,KADhE,CACsE,gBADtE;AAED,KANC,CAAF;AAQAf,IAAAA,EAAE,CAAC,yBAAD,EAA4B,MAAM;AAClCf,MAAAA,sBAAsB,CAAC6B,MAAvB,CAA8B;AAAEvB,QAAAA,cAAF;AAAkBF,QAAAA;AAAlB,OAA9B;AACA,YAAMS,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAb;AACAT,MAAAA,MAAM,CAACkB,IAAI,CAACS,oBAAL,CAA0BS,MAA3B,CAAN,CAAyCd,EAAzC,CAA4CE,KAA5C,CAAkD,CAAlD;AACD,KAJC,CAAF;AAMAJ,IAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAC7D,YAAMa,EAAE,GAAG5B,sBAAsB,CAAC6B,MAAvB,CAA8B;AAAEvB,QAAAA,cAAF;AAAkBF,QAAAA;AAAlB,OAA9B,CAAX;AACA,YAAMS,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAb;AACAT,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAvB,CAAqC,CAArC,CAAD,CAAN,CAAgDR,EAAhD,CAAmDE,KAAnD,CAAyDS,EAAzD;AACD,KAJC,CAAF;AAMAb,IAAAA,EAAE,CAAC,+DAAD,EAAkE,MAAM;AACxEhB,MAAAA,WAAW,CAACsB,MAAZ,CAAmBjB,MAAnB;AACAA,MAAAA,MAAM,GAAGP,OAAO,CAACmC,MAAR,CAAe,MAAf,EAAuB;AAC9BR,QAAAA,cAAc,EAAE,CAAC;AAAEhB,UAAAA,GAAG,EAAEH,WAAP;AAAoBoB,UAAAA,aAAa,EAAE,CAAC,MAAD;AAAnC,SAAD;AADc,OAAvB,EAENjB,GAFH;AAGA,UAAIK,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAX;AACAT,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAvB,CAAqCM,MAAtC,CAAN,CAAoDd,EAApD,CAAuDE,KAAvD,CAA6D,CAA7D;AAEA,YAAMS,EAAE,GAAG5B,sBAAsB,CAAC6B,MAAvB,CAA8B;AAAEvB,QAAAA,cAAF;AAAkBF,QAAAA;AAAlB,OAA9B,CAAX;AACAS,MAAAA,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAP;AAEAT,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAvB,CAAqCM,MAAtC,CAAN,CAAoDd,EAApD,CAAuDE,KAAvD,CAA6D,CAA7D;AACAxB,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAvB,CAAqC,CAArC,CAAD,CAAN,CAAgDR,EAAhD,CAAmDE,KAAnD,CAAyDS,EAAzD;AACD,KAbC,CAAF;AAcD,GA7DO,CAAR;AA+DA3B,EAAAA,QAAQ,CAAC,uBAAD,EAA0B,MAAM;AACtC,QAAIE,iBAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,WAAJ;AACA,QAAIC,cAAJ;AAEAJ,IAAAA,UAAU,CAAC,MAAM;AACfG,MAAAA,WAAW,GAAG,SAAd;AACAC,MAAAA,cAAc,GAAG,QAAjB;AACAH,MAAAA,iBAAiB,GAAG,QAApB;AACAC,MAAAA,MAAM,GAAG,QAAT;AAEAN,MAAAA,SAAS,CAAC;AACRS,QAAAA,UAAU,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERC,QAAAA,UAAU,EAAE;AACVD,UAAAA,GAAG,EAAEH,WADK;AAEVS,UAAAA,KAAK,EAAE;AACLN,YAAAA,GAAG,EAAEJ,MADA;AAELuB,YAAAA,SAAS,EAAE;AAAEF,cAAAA,aAAa,EAAE,CAACtB,iBAAD;AAAjB;AAFN,WAFG;AAMVO,UAAAA,aAAa,EAAE;AACbF,YAAAA,GAAG,EAAEF,cADQ;AAEbK,YAAAA,aAAa,EAAE,CAAC;AAAEH,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFF;AAGbI,YAAAA,gBAAgB,EAAE;AAAEJ,cAAAA,GAAG,EAAEL,iBAAP;AAA0BU,cAAAA,IAAI,EAAE;AAAEL,gBAAAA,GAAG,EAAEJ;AAAP;AAAhC;AAHL;AANL;AAFJ,OAAD,CAAT;AAeD,KArBS,CAAV;AAuBAW,IAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClDf,MAAAA,sBAAsB,CAACiC,qBAAvB,CAA6C;AAAE9B,QAAAA;AAAF,OAA7C;AACA,YAAMU,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAb;AACAT,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAxB,CAAN,CAA6CR,EAA7C,CAAgDM,IAAhD,CAAqDJ,KAArD,CAA2D,CACzDhB,iBADyD,CAA3D;AAGD,KANC,CAAF;AAQAY,IAAAA,EAAE,CAAC,qCAAD,EAAwC,MAAM;AAC9CjB,MAAAA,SAAS,CAAC;AACRc,QAAAA,gBAAgB,EAAE;AAChBJ,UAAAA,GAAG,EAAE,SADW;AAEhBE,UAAAA,aAAa,EAAE;AAAEF,YAAAA,GAAG,EAAEF;AAAP,WAFC;AAGhBO,UAAAA,IAAI,EAAE;AACJL,YAAAA,GAAG,EAAE,SADD;AAEJgB,YAAAA,cAAc,EAAE,CACd;AAAEhB,cAAAA,GAAG,EAAEH,WAAP;AAAoBoB,cAAAA,aAAa,EAAE,CAAC,MAAD,EAAS,SAAT;AAAnC,aADc;AAFZ;AAHU;AADV,OAAD,CAAT;AAYAzB,MAAAA,sBAAsB,CAACiC,qBAAvB,CAA6C;AAC3C9B,QAAAA,iBAAiB,EAAE;AADwB,OAA7C;AAGA,YAAMU,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgB,SAAhB,CAAb;AACArB,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAxB,CAAN,CAA6CR,EAA7C,CAAgDM,IAAhD,CAAqDJ,KAArD,CAA2D,CACzD,SADyD,EAEzD,MAFyD,CAA3D;AAID,KArBC,CAAF;AAsBD,GA3DO,CAAR;AA6DAlB,EAAAA,QAAQ,CAAC,qBAAD,EAAwB,MAAM;AACpC,QAAIE,iBAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,WAAJ;AACA,QAAIC,cAAJ;AAEAJ,IAAAA,UAAU,CAAC,MAAM;AACfG,MAAAA,WAAW,GAAG,SAAd;AACAC,MAAAA,cAAc,GAAG,QAAjB;AACAH,MAAAA,iBAAiB,GAAG,QAApB;AACAC,MAAAA,MAAM,GAAG,QAAT;AAEAN,MAAAA,SAAS,CAAC;AACRS,QAAAA,UAAU,EAAE;AAAEC,UAAAA,GAAG,EAAE;AAAP,SADJ;AAERC,QAAAA,UAAU,EAAE;AACVD,UAAAA,GAAG,EAAEH,WADK;AAEVS,UAAAA,KAAK,EAAE;AACLN,YAAAA,GAAG,EAAEJ,MADA;AAELuB,YAAAA,SAAS,EAAE;AAAEF,cAAAA,aAAa,EAAE,CAACtB,iBAAD;AAAjB;AAFN,WAFG;AAMVO,UAAAA,aAAa,EAAE;AACbF,YAAAA,GAAG,EAAEF,cADQ;AAEbK,YAAAA,aAAa,EAAE,CAAC;AAAEH,cAAAA,GAAG,EAAE;AAAP,aAAD,CAFF;AAGbI,YAAAA,gBAAgB,EAAE;AAAEJ,cAAAA,GAAG,EAAEL,iBAAP;AAA0BU,cAAAA,IAAI,EAAE;AAAEL,gBAAAA,GAAG,EAAEJ;AAAP;AAAhC;AAHL;AANL;AAFJ,OAAD,CAAT;AAeD,KArBS,CAAV;AAuBAW,IAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAClDf,MAAAA,sBAAsB,CAACkC,mBAAvB,CAA2C;AAAE/B,QAAAA;AAAF,OAA3C;AACA,YAAMU,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgBZ,MAAhB,CAAb;AACAT,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAxB,CAAN,CAA6CR,EAA7C,CAAgDM,IAAhD,CAAqDJ,KAArD,CAA2D,CACzDhB,iBADyD,CAA3D;AAGD,KANC,CAAF;AAQAY,IAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAChDjB,MAAAA,SAAS,CAAC;AACRc,QAAAA,gBAAgB,EAAE;AAChBJ,UAAAA,GAAG,EAAE,SADW;AAEhBE,UAAAA,aAAa,EAAE;AAAEF,YAAAA,GAAG,EAAEF;AAAP,WAFC;AAGhBO,UAAAA,IAAI,EAAE;AACJL,YAAAA,GAAG,EAAE,SADD;AAEJgB,YAAAA,cAAc,EAAE,CACd;AAAEhB,cAAAA,GAAG,EAAEH,WAAP;AAAoBoB,cAAAA,aAAa,EAAE,CAAC,SAAD,EAAY,MAAZ;AAAnC,aADc;AAFZ;AAHU;AADV,OAAD,CAAT;AAYAzB,MAAAA,sBAAsB,CAACkC,mBAAvB,CAA2C;AACzC/B,QAAAA,iBAAiB,EAAE;AADsB,OAA3C;AAGA,YAAMU,IAAI,GAAGd,WAAW,CAACiB,GAAZ,CAAgB,SAAhB,CAAb;AACArB,MAAAA,MAAM,CAACkB,IAAI,CAACW,cAAL,CAAoB,CAApB,EAAuBC,aAAxB,CAAN,CAA6CR,EAA7C,CAAgDM,IAAhD,CAAqDJ,KAArD,CAA2D,CACzD,MADyD,EAEzD,SAFyD,CAA3D;AAID,KArBC,CAAF;AAsBD,GA3DO,CAAR;AA4DD,CA3OO,CAAR","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from '../../../factories';\nimport LoanService from '../../../loans/server/LoanService';\nimport PromotionOptionService from '../PromotionOptionService';\n\ndescribe('PromotionOptionService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('remove', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n          loans: { _id: loanId },\n        },\n      });\n    });\n\n    it('Removes the promotionOption', () => {\n      expect(PromotionOptionService.get(promotionOptionId)).to.not.equal(undefined);\n      PromotionOptionService.remove({ promotionOptionId });\n      expect(PromotionOptionService.get(promotionOptionId)).to.equal(undefined);\n    });\n\n    it('Removes the link from the loan', () => {\n      PromotionOptionService.remove({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionOptionLinks).to.deep.equal([]);\n    });\n\n    it('Removes the priority order from the loan', () => {\n      PromotionOptionService.remove({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks).to.deep.equal([\n        { _id: promotionId, priorityOrder: [], showAllLots: true },\n      ]);\n    });\n  });\n\n  describe('insert', () => {\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      loanId = 'loanId';\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n          },\n          loans: { _id: loanId, $metadata: { priorityOrder: [] } },\n        },\n      });\n    });\n\n    it('inserts a new promotionOption', () => {\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      expect(PromotionOptionService.get(id)).to.not.equal(undefined);\n    });\n\n    it('throws if promotion lot exists in another promotionOption in the loan', () => {\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      expect(PromotionOptionService.get(id)).to.not.equal(undefined);\n\n      expect(() =>\n        PromotionOptionService.insert({ promotionLotId, loanId })).to.throw('Vous avez déjà');\n    });\n\n    it('adds a link on the loan', () => {\n      PromotionOptionService.insert({ promotionLotId, loanId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionOptionLinks.length).to.equal(1);\n    });\n\n    it('inserts the promotionOptionId in the priorityOrder', () => {\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder[0]).to.equal(id);\n    });\n\n    it('inserts the promotionOptionId at the end of the priorityOrder', () => {\n      LoanService.remove(loanId);\n      loanId = Factory.create('loan', {\n        promotionLinks: [{ _id: promotionId, priorityOrder: ['test'] }],\n      })._id;\n      let loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder.length).to.equal(1);\n\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.promotionLinks[0].priorityOrder.length).to.equal(2);\n      expect(loan.promotionLinks[0].priorityOrder[1]).to.equal(id);\n    });\n  });\n\n  describe('increasePriorityOrder', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          loans: {\n            _id: loanId,\n            $metadata: { priorityOrder: [promotionOptionId] },\n          },\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n        },\n      });\n    });\n\n    it('does nothing if priority is already max', () => {\n      PromotionOptionService.increasePriorityOrder({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        promotionOptionId,\n      ]);\n    });\n\n    it('moves the promotionOption up by one', () => {\n      generator({\n        promotionOptions: {\n          _id: 'pOptId2',\n          promotionLots: { _id: promotionLotId },\n          loan: {\n            _id: 'loanId2',\n            promotionLinks: [\n              { _id: promotionId, priorityOrder: ['test', 'pOptId2'] },\n            ],\n          },\n        },\n      });\n      PromotionOptionService.increasePriorityOrder({\n        promotionOptionId: 'pOptId2',\n      });\n      const loan = LoanService.get('loanId2');\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        'pOptId2',\n        'test',\n      ]);\n    });\n  });\n\n  describe('reducePriorityOrder', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          loans: {\n            _id: loanId,\n            $metadata: { priorityOrder: [promotionOptionId] },\n          },\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n        },\n      });\n    });\n\n    it('does nothing if priority is already max', () => {\n      PromotionOptionService.reducePriorityOrder({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        promotionOptionId,\n      ]);\n    });\n\n    it('moves the promotionOption down by one', () => {\n      generator({\n        promotionOptions: {\n          _id: 'pOptId2',\n          promotionLots: { _id: promotionLotId },\n          loan: {\n            _id: 'loanId2',\n            promotionLinks: [\n              { _id: promotionId, priorityOrder: ['pOptId2', 'test'] },\n            ],\n          },\n        },\n      });\n      PromotionOptionService.reducePriorityOrder({\n        promotionOptionId: 'pOptId2',\n      });\n      const loan = LoanService.get('loanId2');\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        'test',\n        'pOptId2',\n      ]);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/promotionOptions/server/test/PromotionOptionService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/promotionOptions/server/test/PromotionOptionService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 3);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 4);\nlet PromotionOptionService;\nmodule.link(\"../PromotionOptionService\", {\n  default(v) {\n    PromotionOptionService = v;\n  }\n\n}, 5);\ndescribe('PromotionOptionService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('remove', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: {\n          _id: 'propId'\n        },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{\n              _id: 'propId'\n            }],\n            promotionOptions: {\n              _id: promotionOptionId,\n              loan: {\n                _id: loanId\n              }\n            }\n          },\n          loans: {\n            _id: loanId\n          }\n        }\n      });\n    });\n    it('Removes the promotionOption', () => {\n      expect(PromotionOptionService.get(promotionOptionId)).to.not.equal(undefined);\n      PromotionOptionService.remove({\n        promotionOptionId\n      });\n      expect(PromotionOptionService.get(promotionOptionId)).to.equal(undefined);\n    });\n    it('Removes the link from the loan', () => {\n      PromotionOptionService.remove({\n        promotionOptionId\n      });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionOptionLinks).to.deep.equal([]);\n    });\n    it('Removes the priority order from the loan', () => {\n      PromotionOptionService.remove({\n        promotionOptionId\n      });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks).to.deep.equal([{\n        _id: promotionId,\n        priorityOrder: [],\n        showAllLots: true\n      }]);\n    });\n  });\n  describe('insert', () => {\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      loanId = 'loanId';\n      generator({\n        properties: {\n          _id: 'propId'\n        },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{\n              _id: 'propId'\n            }]\n          },\n          loans: {\n            _id: loanId,\n            $metadata: {\n              priorityOrder: []\n            }\n          }\n        }\n      });\n    });\n    it('inserts a new promotionOption', () => {\n      const id = PromotionOptionService.insert({\n        promotionLotId,\n        loanId\n      });\n      expect(PromotionOptionService.get(id)).to.not.equal(undefined);\n    });\n    it('throws if promotion lot exists in another promotionOption in the loan', () => {\n      const id = PromotionOptionService.insert({\n        promotionLotId,\n        loanId\n      });\n      expect(PromotionOptionService.get(id)).to.not.equal(undefined);\n      expect(() => PromotionOptionService.insert({\n        promotionLotId,\n        loanId\n      })).to.throw('Vous avez déjà');\n    });\n    it('adds a link on the loan', () => {\n      PromotionOptionService.insert({\n        promotionLotId,\n        loanId\n      });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionOptionLinks.length).to.equal(1);\n    });\n    it('inserts the promotionOptionId in the priorityOrder', () => {\n      const id = PromotionOptionService.insert({\n        promotionLotId,\n        loanId\n      });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder[0]).to.equal(id);\n    });\n    it('inserts the promotionOptionId at the end of the priorityOrder', () => {\n      LoanService.remove(loanId);\n      loanId = Factory.create('loan', {\n        promotionLinks: [{\n          _id: promotionId,\n          priorityOrder: ['test']\n        }]\n      })._id;\n      let loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder.length).to.equal(1);\n      const id = PromotionOptionService.insert({\n        promotionLotId,\n        loanId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder.length).to.equal(2);\n      expect(loan.promotionLinks[0].priorityOrder[1]).to.equal(id);\n    });\n  });\n  describe('increasePriorityOrder', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: {\n          _id: 'propId'\n        },\n        promotions: {\n          _id: promotionId,\n          loans: {\n            _id: loanId,\n            $metadata: {\n              priorityOrder: [promotionOptionId]\n            }\n          },\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{\n              _id: 'propId'\n            }],\n            promotionOptions: {\n              _id: promotionOptionId,\n              loan: {\n                _id: loanId\n              }\n            }\n          }\n        }\n      });\n    });\n    it('does nothing if priority is already max', () => {\n      PromotionOptionService.increasePriorityOrder({\n        promotionOptionId\n      });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([promotionOptionId]);\n    });\n    it('moves the promotionOption up by one', () => {\n      generator({\n        promotionOptions: {\n          _id: 'pOptId2',\n          promotionLots: {\n            _id: promotionLotId\n          },\n          loan: {\n            _id: 'loanId2',\n            promotionLinks: [{\n              _id: promotionId,\n              priorityOrder: ['test', 'pOptId2']\n            }]\n          }\n        }\n      });\n      PromotionOptionService.increasePriorityOrder({\n        promotionOptionId: 'pOptId2'\n      });\n      const loan = LoanService.get('loanId2');\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal(['pOptId2', 'test']);\n    });\n  });\n  describe('reducePriorityOrder', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: {\n          _id: 'propId'\n        },\n        promotions: {\n          _id: promotionId,\n          loans: {\n            _id: loanId,\n            $metadata: {\n              priorityOrder: [promotionOptionId]\n            }\n          },\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{\n              _id: 'propId'\n            }],\n            promotionOptions: {\n              _id: promotionOptionId,\n              loan: {\n                _id: loanId\n              }\n            }\n          }\n        }\n      });\n    });\n    it('does nothing if priority is already max', () => {\n      PromotionOptionService.reducePriorityOrder({\n        promotionOptionId\n      });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([promotionOptionId]);\n    });\n    it('moves the promotionOption down by one', () => {\n      generator({\n        promotionOptions: {\n          _id: 'pOptId2',\n          promotionLots: {\n            _id: promotionLotId\n          },\n          loan: {\n            _id: 'loanId2',\n            promotionLinks: [{\n              _id: promotionId,\n              priorityOrder: ['pOptId2', 'test']\n            }]\n          }\n        }\n      });\n      PromotionOptionService.reducePriorityOrder({\n        promotionOptionId: 'pOptId2'\n      });\n      const loan = LoanService.get('loanId2');\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal(['test', 'pOptId2']);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/promotionOptions/server/test/PromotionOptionService.test.js"],"names":["describe","beforeEach","resetDatabase","promotionId","promotionLotId","promotionOptionId","loanId","generator","properties","_id","promotions","promotionLots","propertyLinks","promotionOptions","loan","loans","it","expect","PromotionOptionService","LoanService","priorityOrder","showAllLots","$metadata","id","promotionLinks"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\n\nimport generator from '../../../factories';\nimport LoanService from '../../../loans/server/LoanService';\nimport PromotionOptionService from '../PromotionOptionService';\n\ndescribe('PromotionOptionService', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('remove', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n          loans: { _id: loanId },\n        },\n      });\n    });\n\n    it('Removes the promotionOption', () => {\n      expect(PromotionOptionService.get(promotionOptionId)).to.not.equal(undefined);\n      PromotionOptionService.remove({ promotionOptionId });\n      expect(PromotionOptionService.get(promotionOptionId)).to.equal(undefined);\n    });\n\n    it('Removes the link from the loan', () => {\n      PromotionOptionService.remove({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionOptionLinks).to.deep.equal([]);\n    });\n\n    it('Removes the priority order from the loan', () => {\n      PromotionOptionService.remove({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks).to.deep.equal([\n        { _id: promotionId, priorityOrder: [], showAllLots: true },\n      ]);\n    });\n  });\n\n  describe('insert', () => {\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      loanId = 'loanId';\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n          },\n          loans: { _id: loanId, $metadata: { priorityOrder: [] } },\n        },\n      });\n    });\n\n    it('inserts a new promotionOption', () => {\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      expect(PromotionOptionService.get(id)).to.not.equal(undefined);\n    });\n\n    it('throws if promotion lot exists in another promotionOption in the loan', () => {\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      expect(PromotionOptionService.get(id)).to.not.equal(undefined);\n\n      expect(() =>\n        PromotionOptionService.insert({ promotionLotId, loanId })).to.throw('Vous avez déjà');\n    });\n\n    it('adds a link on the loan', () => {\n      PromotionOptionService.insert({ promotionLotId, loanId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionOptionLinks.length).to.equal(1);\n    });\n\n    it('inserts the promotionOptionId in the priorityOrder', () => {\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder[0]).to.equal(id);\n    });\n\n    it('inserts the promotionOptionId at the end of the priorityOrder', () => {\n      LoanService.remove(loanId);\n      loanId = Factory.create('loan', {\n        promotionLinks: [{ _id: promotionId, priorityOrder: ['test'] }],\n      })._id;\n      let loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder.length).to.equal(1);\n\n      const id = PromotionOptionService.insert({ promotionLotId, loanId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.promotionLinks[0].priorityOrder.length).to.equal(2);\n      expect(loan.promotionLinks[0].priorityOrder[1]).to.equal(id);\n    });\n  });\n\n  describe('increasePriorityOrder', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          loans: {\n            _id: loanId,\n            $metadata: { priorityOrder: [promotionOptionId] },\n          },\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n        },\n      });\n    });\n\n    it('does nothing if priority is already max', () => {\n      PromotionOptionService.increasePriorityOrder({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        promotionOptionId,\n      ]);\n    });\n\n    it('moves the promotionOption up by one', () => {\n      generator({\n        promotionOptions: {\n          _id: 'pOptId2',\n          promotionLots: { _id: promotionLotId },\n          loan: {\n            _id: 'loanId2',\n            promotionLinks: [\n              { _id: promotionId, priorityOrder: ['test', 'pOptId2'] },\n            ],\n          },\n        },\n      });\n      PromotionOptionService.increasePriorityOrder({\n        promotionOptionId: 'pOptId2',\n      });\n      const loan = LoanService.get('loanId2');\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        'pOptId2',\n        'test',\n      ]);\n    });\n  });\n\n  describe('reducePriorityOrder', () => {\n    let promotionOptionId;\n    let loanId;\n    let promotionId;\n    let promotionLotId;\n\n    beforeEach(() => {\n      promotionId = 'promoId';\n      promotionLotId = 'pLotId';\n      promotionOptionId = 'pOptId';\n      loanId = 'loanId';\n\n      generator({\n        properties: { _id: 'propId' },\n        promotions: {\n          _id: promotionId,\n          loans: {\n            _id: loanId,\n            $metadata: { priorityOrder: [promotionOptionId] },\n          },\n          promotionLots: {\n            _id: promotionLotId,\n            propertyLinks: [{ _id: 'propId' }],\n            promotionOptions: { _id: promotionOptionId, loan: { _id: loanId } },\n          },\n        },\n      });\n    });\n\n    it('does nothing if priority is already max', () => {\n      PromotionOptionService.reducePriorityOrder({ promotionOptionId });\n      const loan = LoanService.get(loanId);\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        promotionOptionId,\n      ]);\n    });\n\n    it('moves the promotionOption down by one', () => {\n      generator({\n        promotionOptions: {\n          _id: 'pOptId2',\n          promotionLots: { _id: promotionLotId },\n          loan: {\n            _id: 'loanId2',\n            promotionLinks: [\n              { _id: promotionId, priorityOrder: ['pOptId2', 'test'] },\n            ],\n          },\n        },\n      });\n      PromotionOptionService.reducePriorityOrder({\n        promotionOptionId: 'pOptId2',\n      });\n      const loan = LoanService.get('loanId2');\n      expect(loan.promotionLinks[0].priorityOrder).to.deep.equal([\n        'test',\n        'pOptId2',\n      ]);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"ad8a975764d50a165d115f4f853a67b3ff0f66e4"}

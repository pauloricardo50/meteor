{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/APIs.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/APIs.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/APIs.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/APIs.js"],"names":["Meteor","fetch","isServer","require","global","getClosestStations","latitude","longitude","then","response","status","Error","json","data","stations","getNearbyPlace","type","byDistance","location","window","google","maps","LatLng","Promise","resolve","reject","div","document","createElement","service","places","PlacesService","nearbySearch","radius","undefined","rankBy","RankBy","DISTANCE","PROMINENCE","PlacesServiceStatus","OK","place","lat","geometry","lng","name","distanceService","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","result","distance","rows","elements","google_key","getLocations","zipCode","array","results","postcode_localities","localities","address_components","filter","obj","types","indexOf","length","forEach","l","push","long_name","value","index"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nlet fetch;\nif (Meteor.isServer) {\n  fetch = require('node-fetch');\n} else {\n  fetch = global.fetch;\n}\n\nexport const getClosestStations = (latitude, longitude) =>\n  fetch(`https://transport.opendata.ch/v1/locations?x=${latitude}&y=${longitude}&type=station`)\n    .then((response) => {\n      if (response.status !== 200) {\n        throw new Error('error code: ', response.status);\n      } else {\n        return response.json();\n      }\n    })\n    .then(data => data.stations);\n\n/**\n * getPlace - Description\n *\n * @param {Object} origin {lat: Number, lng: Number}\n * @param {String} type   type of place to search for\n *\n * @return {type} returns a promise with object {name: String, distance: Object}\n */\nexport const getNearbyPlace = (latitude, longitude, type, byDistance) => {\n  const location = new window.google.maps.LatLng(latitude, longitude);\n\n  return new Promise((resolve, reject) => {\n    const div = document.createElement('div');\n    const service = new window.google.maps.places.PlacesService(div);\n    service.nearbySearch(\n      {\n        location,\n        radius: byDistance ? undefined : 5000,\n        rankBy: byDistance\n          ? window.google.maps.places.RankBy.DISTANCE\n          : window.google.maps.places.RankBy.PROMINENCE,\n        type: [type],\n      },\n      (places, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          resolve(places[0]);\n        } else {\n          reject(status);\n        }\n      },\n    );\n  }).then((place) => {\n    const lat = place.geometry.location.lat();\n    const lng = place.geometry.location.lng();\n    const name = place.name;\n\n    return new Promise((resolve, reject) => {\n      const distanceService = new window.google.maps.DistanceMatrixService();\n\n      distanceService.getDistanceMatrix(\n        {\n          origins: [location],\n          destinations: [new window.google.maps.LatLng(lat, lng)],\n          travelMode: 'WALKING',\n        },\n        (result, status) => {\n          if (status !== 'OK') {\n            reject(status);\n          }\n          resolve({ distance: result.rows[0].elements[0].distance, name });\n        },\n      );\n    });\n  });\n};\n\nconst google_key = 'AIzaSyCdoi6BxlTf7GgxqAGAsd1ADM_UwgqWUP8';\nexport const getLocations = zipCode =>\n  fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&components=country:CH&language=fr&key=${google_key}`)\n    .then(result => result.json())\n    .then((result) => {\n      const array = result.results[0].postcode_localities || [];\n      const localities = result.results[0].address_components.filter(obj => obj.types.indexOf('locality') >= 0);\n      if (localities && localities.length) {\n        localities.forEach(l => array.push(l.long_name));\n      }\n      // filter duplicates\n      return array.filter((value, index) => array.indexOf(value) === index);\n    });\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/APIs.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/APIs.js"}},"code":"module.export({\n  getClosestStations: () => getClosestStations,\n  getNearbyPlace: () => getNearbyPlace,\n  getLocations: () => getLocations\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet fetch;\n\nif (Meteor.isServer) {\n  fetch = require('node-fetch');\n} else {\n  fetch = global.fetch;\n}\n\nconst getClosestStations = (latitude, longitude) => fetch(\"https://transport.opendata.ch/v1/locations?x=\".concat(latitude, \"&y=\").concat(longitude, \"&type=station\")).then(response => {\n  if (response.status !== 200) {\n    throw new Error('error code: ', response.status);\n  } else {\n    return response.json();\n  }\n}).then(data => data.stations);\n\nconst getNearbyPlace = (latitude, longitude, type, byDistance) => {\n  const location = new window.google.maps.LatLng(latitude, longitude);\n  return new Promise((resolve, reject) => {\n    const div = document.createElement('div');\n    const service = new window.google.maps.places.PlacesService(div);\n    service.nearbySearch({\n      location,\n      radius: byDistance ? undefined : 5000,\n      rankBy: byDistance ? window.google.maps.places.RankBy.DISTANCE : window.google.maps.places.RankBy.PROMINENCE,\n      type: [type]\n    }, (places, status) => {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        resolve(places[0]);\n      } else {\n        reject(status);\n      }\n    });\n  }).then(place => {\n    const lat = place.geometry.location.lat();\n    const lng = place.geometry.location.lng();\n    const name = place.name;\n    return new Promise((resolve, reject) => {\n      const distanceService = new window.google.maps.DistanceMatrixService();\n      distanceService.getDistanceMatrix({\n        origins: [location],\n        destinations: [new window.google.maps.LatLng(lat, lng)],\n        travelMode: 'WALKING'\n      }, (result, status) => {\n        if (status !== 'OK') {\n          reject(status);\n        }\n\n        resolve({\n          distance: result.rows[0].elements[0].distance,\n          name\n        });\n      });\n    });\n  });\n};\n\nconst google_key = 'AIzaSyCdoi6BxlTf7GgxqAGAsd1ADM_UwgqWUP8';\n\nconst getLocations = zipCode => fetch(\"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(zipCode, \"&components=country:CH&language=fr&key=\").concat(google_key)).then(result => result.json()).then(result => {\n  const array = result.results[0].postcode_localities || [];\n  const localities = result.results[0].address_components.filter(obj => obj.types.indexOf('locality') >= 0);\n\n  if (localities && localities.length) {\n    localities.forEach(l => array.push(l.long_name));\n  } // filter duplicates\n\n\n  return array.filter((value, index) => array.indexOf(value) === index);\n});","map":{"version":3,"sources":["imports/core/utils/APIs.js"],"names":["Meteor","fetch","require","global","getClosestStations","latitude","response","data","getNearbyPlace","location","window","div","document","service","radius","byDistance","rankBy","type","status","resolve","places","reject","place","lat","lng","name","distanceService","origins","destinations","travelMode","distance","result","google_key","getLocations","zipCode","array","localities","obj","l"],"mappings":"AAAA,MAAA,CAAA,MAAA,CAASA;AAAT,EAAA,kBAAuB,EAAA,MAAvB,kBAASA;AAAT,EAAA,cAAA,EAAA,MAAA,cAASA;AAAT,EAAA,YAAA,EAAA,MAAA;AAASA,CAAT;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAEA,IAAA,KAAA;;AACA,IAAIA,MAAM,CAAV,QAAA,EAAqB;AACnBC,EAAAA,KAAK,GAAGC,OAAO,CAAfD,YAAe,CAAfA;AADF,CAAA,MAEO;AACLA,EAAAA,KAAK,GAAGE,MAAM,CAAdF,KAAAA;AACD;;AAEM,MAAMG,kBAAkB,GAAG,CAAA,QAAA,EAAA,SAAA,KAChC,KAAK,wDAAiDC,QAAjD,gBAAL,SAAK,mBAAL,CAAA,IAAA,CACSC,QAAD,IAAc;AAClB,MAAIA,QAAQ,CAARA,MAAAA,KAAJ,GAAA,EAA6B;AAC3B,UAAM,IAAA,KAAA,CAAA,cAAA,EAA0BA,QAAQ,CAAxC,MAAM,CAAN;AADF,GAAA,MAEO;AACL,WAAOA,QAAQ,CAAf,IAAOA,EAAP;AACD;AANL,CAAA,EAAA,IAAA,CAQQC,IAAI,IAAIA,IAAI,CATf,QACL,CADK;;AAmBA,MAAMC,cAAc,GAAG,CAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA,UAAA,KAA2C;AACvE,QAAMC,QAAQ,GAAG,IAAIC,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAA,QAAA,EAAjB,SAAiB,CAAjB;AAEA,SAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,UAAMC,GAAG,GAAGC,QAAQ,CAARA,aAAAA,CAAZ,KAAYA,CAAZ;AACA,UAAMC,OAAO,GAAG,IAAIH,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAJ,aAAA,CAAhB,GAAgB,CAAhB;AACAG,IAAAA,OAAO,CAAPA,YAAAA,CACE;AAAA,MAAA,QAAA;AAEEC,MAAAA,MAAM,EAAEC,UAAU,GAAA,SAAA,GAFpB,IAAA;AAGEC,MAAAA,MAAM,EAAED,UAAU,GACdL,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CADc,QAAA,GAEdA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CALN,UAAA;AAMEO,MAAAA,IAAI,EAAE,CAAA,IAAA;AANR,KADFJ,EASE,CAAA,MAAA,EAAA,MAAA,KAAoB;AAClB,UAAIK,MAAM,KAAKR,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,mBAAAA,CAAf,EAAA,EAAiE;AAC/DS,QAAAA,OAAO,CAACC,MAAM,CAAdD,CAAc,CAAP,CAAPA;AADF,OAAA,MAEO;AACLE,QAAAA,MAAM,CAANA,MAAM,CAANA;AACD;AAdLR,KAAAA;AAHK,GAAA,EAAA,IAAA,CAoBES,KAAD,IAAW;AACjB,UAAMC,GAAG,GAAGD,KAAK,CAALA,QAAAA,CAAAA,QAAAA,CAAZ,GAAYA,EAAZ;AACA,UAAME,GAAG,GAAGF,KAAK,CAALA,QAAAA,CAAAA,QAAAA,CAAZ,GAAYA,EAAZ;AACA,UAAMG,IAAI,GAAGH,KAAK,CAAlB,IAAA;AAEA,WAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,YAAMI,eAAe,GAAG,IAAIhB,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAA5B,qBAAwB,EAAxB;AAEAgB,MAAAA,eAAe,CAAfA,iBAAAA,CACE;AACEC,QAAAA,OAAO,EAAE,CADX,QACW,CADX;AAEEC,QAAAA,YAAY,EAAE,CAAC,IAAIlB,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAA,GAAA,EAFjB,GAEiB,CAAD,CAFhB;AAGEmB,QAAAA,UAAU,EAAE;AAHd,OADFH,EAME,CAAA,MAAA,EAAA,MAAA,KAAoB;AAClB,YAAIR,MAAM,KAAV,IAAA,EAAqB;AACnBG,UAAAA,MAAM,CAANA,MAAM,CAANA;AACD;;AACDF,QAAAA,OAAO,CAAC;AAAEW,UAAAA,QAAQ,EAAEC,MAAM,CAANA,IAAAA,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EAAZ,QAAA;AAAiDN,UAAAA;AAAjD,SAAD,CAAPN;AAVJO,OAAAA;AAHF,KAAO,CAAP;AAzBF,GAAO,CAAP;AAHK,CAAA;;AAgDP,MAAMM,UAAU,GAAhB,yCAAA;;AACO,MAAMC,YAAY,GAAGC,OAAO,IACjC,KAAK,qEAA8DA,OAA9D,oDAAL,UAAK,EAAL,CAAA,IAAA,CACQH,MAAM,IAAIA,MAAM,CADxB,IACkBA,EADlB,EAAA,IAAA,CAESA,MAAD,IAAY;AAChB,QAAMI,KAAK,GAAGJ,MAAM,CAANA,OAAAA,CAAAA,CAAAA,EAAAA,mBAAAA,IAAd,EAAA;AACA,QAAMK,UAAU,GAAGL,MAAM,CAANA,OAAAA,CAAAA,CAAAA,EAAAA,kBAAAA,CAAAA,MAAAA,CAA4CM,GAAG,IAAIA,GAAG,CAAHA,KAAAA,CAAAA,OAAAA,CAAAA,UAAAA,KAAtE,CAAmBN,CAAnB;;AACA,MAAIK,UAAU,IAAIA,UAAU,CAA5B,MAAA,EAAqC;AACnCA,IAAAA,UAAU,CAAVA,OAAAA,CAAmBE,CAAC,IAAIH,KAAK,CAALA,IAAAA,CAAWG,CAAC,CAApCF,SAAwBD,CAAxBC;AAJc,GAAA,CAMhB;;;AACA,SAAOD,KAAK,CAALA,MAAAA,CAAa,CAAA,KAAA,EAAA,KAAA,KAAkBA,KAAK,CAALA,OAAAA,CAAAA,KAAAA,MAAtC,KAAOA,CAAP;AAVC,CACL,CADK","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nlet fetch;\nif (Meteor.isServer) {\n  fetch = require('node-fetch');\n} else {\n  fetch = global.fetch;\n}\n\nexport const getClosestStations = (latitude, longitude) =>\n  fetch(`https://transport.opendata.ch/v1/locations?x=${latitude}&y=${longitude}&type=station`)\n    .then((response) => {\n      if (response.status !== 200) {\n        throw new Error('error code: ', response.status);\n      } else {\n        return response.json();\n      }\n    })\n    .then(data => data.stations);\n\n/**\n * getPlace - Description\n *\n * @param {Object} origin {lat: Number, lng: Number}\n * @param {String} type   type of place to search for\n *\n * @return {type} returns a promise with object {name: String, distance: Object}\n */\nexport const getNearbyPlace = (latitude, longitude, type, byDistance) => {\n  const location = new window.google.maps.LatLng(latitude, longitude);\n\n  return new Promise((resolve, reject) => {\n    const div = document.createElement('div');\n    const service = new window.google.maps.places.PlacesService(div);\n    service.nearbySearch(\n      {\n        location,\n        radius: byDistance ? undefined : 5000,\n        rankBy: byDistance\n          ? window.google.maps.places.RankBy.DISTANCE\n          : window.google.maps.places.RankBy.PROMINENCE,\n        type: [type],\n      },\n      (places, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          resolve(places[0]);\n        } else {\n          reject(status);\n        }\n      },\n    );\n  }).then((place) => {\n    const lat = place.geometry.location.lat();\n    const lng = place.geometry.location.lng();\n    const name = place.name;\n\n    return new Promise((resolve, reject) => {\n      const distanceService = new window.google.maps.DistanceMatrixService();\n\n      distanceService.getDistanceMatrix(\n        {\n          origins: [location],\n          destinations: [new window.google.maps.LatLng(lat, lng)],\n          travelMode: 'WALKING',\n        },\n        (result, status) => {\n          if (status !== 'OK') {\n            reject(status);\n          }\n          resolve({ distance: result.rows[0].elements[0].distance, name });\n        },\n      );\n    });\n  });\n};\n\nconst google_key = 'AIzaSyCdoi6BxlTf7GgxqAGAsd1ADM_UwgqWUP8';\nexport const getLocations = zipCode =>\n  fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&components=country:CH&language=fr&key=${google_key}`)\n    .then(result => result.json())\n    .then((result) => {\n      const array = result.results[0].postcode_localities || [];\n      const localities = result.results[0].address_components.filter(obj => obj.types.indexOf('locality') >= 0);\n      if (localities && localities.length) {\n        localities.forEach(l => array.push(l.long_name));\n      }\n      // filter duplicates\n      return array.filter((value, index) => array.indexOf(value) === index);\n    });\n"]},"sourceType":"script","hash":"9fd1a6982f69722145407e68bb63c8140a0aca11"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/epotek:accounts-ui/imports/accounts_ui.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/epotek:accounts-ui/imports/accounts_ui.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/epotek:accounts-ui/imports/accounts_ui.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/epotek:accounts-ui/imports/accounts_ui.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/epotek:accounts-ui/imports/accounts_ui.js"}},"code":"let Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 0);\nlet redirect, validatePassword, validateEmail, validateUsername;\nmodule.link(\"./helpers.js\", {\n  redirect(v) {\n    redirect = v;\n  },\n\n  validatePassword(v) {\n    validatePassword = v;\n  },\n\n  validateEmail(v) {\n    validateEmail = v;\n  },\n\n  validateUsername(v) {\n    validateUsername = v;\n  }\n\n}, 1);\n\n/**\n * @summary Accounts UI\n * @namespace\n * @memberOf Accounts\n */\nAccounts.ui = {};\nAccounts.ui._options = {\n  requestPermissions: [],\n  requestOfflineToken: {},\n  forceApprovalPrompt: {},\n  requireEmailVerification: false,\n  passwordSignupFields: 'EMAIL_ONLY_NO_PASSWORD',\n  minimumPasswordLength: 7,\n  loginPath: '/',\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: '/',\n  changePasswordPath: null,\n  homeRoutePath: '/',\n  onSubmitHook: () => {},\n  onPreSignUpHook: () => new Promise(resolve => resolve()),\n  onPostSignUpHook: () => {},\n  onEnrollAccountHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onResetPasswordHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onVerifyEmailHook: () => redirect(`${Accounts.ui._options.profilePath}`),\n  onSignedInHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  onSignedOutHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  emailPattern: new RegExp('[^@]+@[^@.]{2,}.[^.@]+')\n};\n/**\n * @summary Configure the behavior of [`<Accounts.ui.LoginForm />`](#react-accounts-ui).\n * @anywhere\n * @param {Object} options\n * @param {Object} options.requestPermissions Which [permissions](#requestpermissions) to request from the user for each external service.\n * @param {Object} options.requestOfflineToken To ask the user for permission to act on their behalf when offline, map the relevant external service to `true`. Currently only supported with Google. See [Meteor.loginWithExternalService](#meteor_loginwithexternalservice) for more details.\n * @param {Object} options.forceApprovalPrompt If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.\n * @param {String} options.passwordSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`USERNAME_AND_OPTIONAL_EMAIL`', '`USERNAME_ONLY`', '`EMAIL_ONLY`', or '`NO_PASSWORD`' (default).\n */\n\nAccounts.ui.config = function (options) {\n  // validate options keys\n  const VALID_KEYS = ['passwordSignupFields', 'requestPermissions', 'requestOfflineToken', 'forbidClientAccountCreation', 'requireEmailVerification', 'minimumPasswordLength', 'loginPath', 'signUpPath', 'resetPasswordPath', 'profilePath', 'changePasswordPath', 'homeRoutePath', 'onSubmitHook', 'onPreSignUpHook', 'onPostSignUpHook', 'onEnrollAccountHook', 'onResetPasswordHook', 'onVerifyEmailHook', 'onSignedInHook', 'onSignedOutHook', 'validateField', 'emailPattern'];\n  Object.keys(options).forEach(function (key) {\n    if (!VALID_KEYS.includes(key)) throw new Error('Accounts.ui.config: Invalid key: ' + key);\n  }); // Deal with `passwordSignupFields`\n\n  if (options.passwordSignupFields) {\n    if (['USERNAME_AND_EMAIL', 'USERNAME_AND_OPTIONAL_EMAIL', 'USERNAME_ONLY', 'EMAIL_ONLY', 'EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(options.passwordSignupFields)) {\n      Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n    } else {\n      throw new Error('Accounts.ui.config: Invalid option for `passwordSignupFields`: ' + options.passwordSignupFields);\n    }\n  } // Deal with `requestPermissions`\n\n\n  if (options.requestPermissions) {\n    Object.keys(options.requestPermissions).forEach(service => {\n      const scope = options.requestPermissions[service];\n\n      if (Accounts.ui._options.requestPermissions[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \" + service);\n      } else if (!(scope instanceof Array)) {\n        throw new Error('Accounts.ui.config: Value for `requestPermissions` must be an array');\n      } else {\n        Accounts.ui._options.requestPermissions[service] = scope;\n      }\n    });\n  } // Deal with `requestOfflineToken`\n\n\n  if (options.requestOfflineToken) {\n    Object.keys(options.requestOfflineToken).forEach(service => {\n      const value = options.requestOfflineToken[service];\n      if (service !== 'google') throw new Error('Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.');\n\n      if (Accounts.ui._options.requestOfflineToken[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" + service);\n      } else {\n        Accounts.ui._options.requestOfflineToken[service] = value;\n      }\n    });\n  } // Deal with `forceApprovalPrompt`\n\n\n  if (options.forceApprovalPrompt) {\n    Object.keys(options.forceApprovalPrompt).forEach(service => {\n      const value = options.forceApprovalPrompt[service];\n      if (service !== 'google') throw new Error('Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.');\n\n      if (Accounts.ui._options.forceApprovalPrompt[service]) {\n        throw new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" + service);\n      } else {\n        Accounts.ui._options.forceApprovalPrompt[service] = value;\n      }\n    });\n  } // Deal with `requireEmailVerification`\n\n\n  if (options.requireEmailVerification) {\n    if (typeof options.requireEmailVerification != 'boolean') {\n      throw new Error(`Accounts.ui.config: \"requireEmailVerification\" not a boolean`);\n    } else {\n      Accounts.ui._options.requireEmailVerification = options.requireEmailVerification;\n    }\n  } // Deal with `minimumPasswordLength`\n\n\n  if (options.minimumPasswordLength) {\n    if (typeof options.minimumPasswordLength != 'number') {\n      throw new Error(`Accounts.ui.config: \"minimumPasswordLength\" not a number`);\n    } else {\n      Accounts.ui._options.minimumPasswordLength = options.minimumPasswordLength;\n    }\n  } // Deal with the hooks.\n\n\n  for (let hook of ['onSubmitHook', 'onPreSignUpHook', 'onPostSignUpHook']) {\n    if (options[hook]) {\n      if (typeof options[hook] != 'function') {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a function`);\n      } else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  } // Deal with pattern.\n\n\n  for (let hook of ['emailPattern']) {\n    if (options[hook]) {\n      if (!(options[hook] instanceof RegExp)) {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a Regular Expression`);\n      } else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  } // deal with the paths.\n\n\n  for (let path of ['loginPath', 'signUpPath', 'resetPasswordPath', 'profilePath', 'changePasswordPath', 'homeRoutePath']) {\n    if (typeof options[path] !== 'undefined') {\n      if (options[path] !== null && typeof options[path] !== 'string') {\n        throw new Error(`Accounts.ui.config: ${path} is not a string or null`);\n      } else {\n        Accounts.ui._options[path] = options[path];\n      }\n    }\n  } // deal with redirect hooks.\n\n\n  for (let hook of ['onEnrollAccountHook', 'onResetPasswordHook', 'onVerifyEmailHook', 'onSignedInHook', 'onSignedOutHook']) {\n    if (options[hook]) {\n      if (typeof options[hook] == 'function') {\n        Accounts.ui._options[hook] = options[hook];\n      } else if (typeof options[hook] == 'string') {\n        Accounts.ui._options[hook] = () => redirect(options[hook]);\n      } else {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a function or an absolute or relative path`);\n      }\n    }\n  }\n};\n\nmodule.exportDefault(Accounts);","map":{"version":3,"sources":["packages/epotek:accounts-ui/imports/accounts_ui.js"],"names":["Accounts","module","link","v","redirect","validatePassword","validateEmail","validateUsername","ui","_options","requestPermissions","requestOfflineToken","forceApprovalPrompt","requireEmailVerification","passwordSignupFields","minimumPasswordLength","loginPath","signUpPath","resetPasswordPath","profilePath","changePasswordPath","homeRoutePath","onSubmitHook","onPreSignUpHook","Promise","resolve","onPostSignUpHook","onEnrollAccountHook","onResetPasswordHook","onVerifyEmailHook","onSignedInHook","onSignedOutHook","emailPattern","RegExp","config","options","VALID_KEYS","Object","keys","forEach","key","includes","Error","service","scope","Array","value","hook","path","exportDefault"],"mappings":"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","sourcesContent":["import { Accounts } from 'meteor/accounts-base';\nimport {\n  redirect,\n  validatePassword,\n  validateEmail,\n  validateUsername\n} from './helpers.js';\n\n/**\n * @summary Accounts UI\n * @namespace\n * @memberOf Accounts\n */\nAccounts.ui = {};\n\nAccounts.ui._options = {\n  requestPermissions: [],\n  requestOfflineToken: {},\n  forceApprovalPrompt: {},\n  requireEmailVerification: false,\n  passwordSignupFields: 'EMAIL_ONLY_NO_PASSWORD',\n  minimumPasswordLength: 7,\n  loginPath: '/',\n  signUpPath: null,\n  resetPasswordPath: null,\n  profilePath: '/',\n  changePasswordPath: null,\n  homeRoutePath: '/',\n  onSubmitHook: () => {},\n  onPreSignUpHook: () => new Promise(resolve => resolve()),\n  onPostSignUpHook: () => {},\n  onEnrollAccountHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onResetPasswordHook: () => redirect(`${Accounts.ui._options.loginPath}`),\n  onVerifyEmailHook: () => redirect(`${Accounts.ui._options.profilePath}`),\n  onSignedInHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  onSignedOutHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\n  emailPattern: new RegExp('[^@]+@[^@.]{2,}.[^.@]+')\n};\n\n/**\n * @summary Configure the behavior of [`<Accounts.ui.LoginForm />`](#react-accounts-ui).\n * @anywhere\n * @param {Object} options\n * @param {Object} options.requestPermissions Which [permissions](#requestpermissions) to request from the user for each external service.\n * @param {Object} options.requestOfflineToken To ask the user for permission to act on their behalf when offline, map the relevant external service to `true`. Currently only supported with Google. See [Meteor.loginWithExternalService](#meteor_loginwithexternalservice) for more details.\n * @param {Object} options.forceApprovalPrompt If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.\n * @param {String} options.passwordSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`USERNAME_AND_OPTIONAL_EMAIL`', '`USERNAME_ONLY`', '`EMAIL_ONLY`', or '`NO_PASSWORD`' (default).\n */\nAccounts.ui.config = function(options) {\n  // validate options keys\n  const VALID_KEYS = [\n    'passwordSignupFields',\n    'requestPermissions',\n    'requestOfflineToken',\n    'forbidClientAccountCreation',\n    'requireEmailVerification',\n    'minimumPasswordLength',\n    'loginPath',\n    'signUpPath',\n    'resetPasswordPath',\n    'profilePath',\n    'changePasswordPath',\n    'homeRoutePath',\n    'onSubmitHook',\n    'onPreSignUpHook',\n    'onPostSignUpHook',\n    'onEnrollAccountHook',\n    'onResetPasswordHook',\n    'onVerifyEmailHook',\n    'onSignedInHook',\n    'onSignedOutHook',\n    'validateField',\n    'emailPattern'\n  ];\n\n  Object.keys(options).forEach(function(key) {\n    if (!VALID_KEYS.includes(key))\n      throw new Error('Accounts.ui.config: Invalid key: ' + key);\n  });\n\n  // Deal with `passwordSignupFields`\n  if (options.passwordSignupFields) {\n    if (\n      [\n        'USERNAME_AND_EMAIL',\n        'USERNAME_AND_OPTIONAL_EMAIL',\n        'USERNAME_ONLY',\n        'EMAIL_ONLY',\n        'EMAIL_ONLY_NO_PASSWORD',\n        'USERNAME_AND_EMAIL_NO_PASSWORD'\n      ].includes(options.passwordSignupFields)\n    ) {\n      Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\n    } else {\n      throw new Error(\n        'Accounts.ui.config: Invalid option for `passwordSignupFields`: ' +\n          options.passwordSignupFields\n      );\n    }\n  }\n\n  // Deal with `requestPermissions`\n  if (options.requestPermissions) {\n    Object.keys(options.requestPermissions).forEach(service => {\n      const scope = options.requestPermissions[service];\n      if (Accounts.ui._options.requestPermissions[service]) {\n        throw new Error(\n          \"Accounts.ui.config: Can't set `requestPermissions` more than once for \" +\n            service\n        );\n      } else if (!(scope instanceof Array)) {\n        throw new Error(\n          'Accounts.ui.config: Value for `requestPermissions` must be an array'\n        );\n      } else {\n        Accounts.ui._options.requestPermissions[service] = scope;\n      }\n    });\n  }\n\n  // Deal with `requestOfflineToken`\n  if (options.requestOfflineToken) {\n    Object.keys(options.requestOfflineToken).forEach(service => {\n      const value = options.requestOfflineToken[service];\n      if (service !== 'google')\n        throw new Error(\n          'Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.'\n        );\n\n      if (Accounts.ui._options.requestOfflineToken[service]) {\n        throw new Error(\n          \"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \" +\n            service\n        );\n      } else {\n        Accounts.ui._options.requestOfflineToken[service] = value;\n      }\n    });\n  }\n\n  // Deal with `forceApprovalPrompt`\n  if (options.forceApprovalPrompt) {\n    Object.keys(options.forceApprovalPrompt).forEach(service => {\n      const value = options.forceApprovalPrompt[service];\n      if (service !== 'google')\n        throw new Error(\n          'Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.'\n        );\n\n      if (Accounts.ui._options.forceApprovalPrompt[service]) {\n        throw new Error(\n          \"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \" +\n            service\n        );\n      } else {\n        Accounts.ui._options.forceApprovalPrompt[service] = value;\n      }\n    });\n  }\n\n  // Deal with `requireEmailVerification`\n  if (options.requireEmailVerification) {\n    if (typeof options.requireEmailVerification != 'boolean') {\n      throw new Error(\n        `Accounts.ui.config: \"requireEmailVerification\" not a boolean`\n      );\n    } else {\n      Accounts.ui._options.requireEmailVerification =\n        options.requireEmailVerification;\n    }\n  }\n\n  // Deal with `minimumPasswordLength`\n  if (options.minimumPasswordLength) {\n    if (typeof options.minimumPasswordLength != 'number') {\n      throw new Error(\n        `Accounts.ui.config: \"minimumPasswordLength\" not a number`\n      );\n    } else {\n      Accounts.ui._options.minimumPasswordLength =\n        options.minimumPasswordLength;\n    }\n  }\n\n  // Deal with the hooks.\n  for (let hook of ['onSubmitHook', 'onPreSignUpHook', 'onPostSignUpHook']) {\n    if (options[hook]) {\n      if (typeof options[hook] != 'function') {\n        throw new Error(`Accounts.ui.config: \"${hook}\" not a function`);\n      } else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  }\n\n  // Deal with pattern.\n  for (let hook of ['emailPattern']) {\n    if (options[hook]) {\n      if (!(options[hook] instanceof RegExp)) {\n        throw new Error(\n          `Accounts.ui.config: \"${hook}\" not a Regular Expression`\n        );\n      } else {\n        Accounts.ui._options[hook] = options[hook];\n      }\n    }\n  }\n\n  // deal with the paths.\n  for (let path of [\n    'loginPath',\n    'signUpPath',\n    'resetPasswordPath',\n    'profilePath',\n    'changePasswordPath',\n    'homeRoutePath'\n  ]) {\n    if (typeof options[path] !== 'undefined') {\n      if (options[path] !== null && typeof options[path] !== 'string') {\n        throw new Error(`Accounts.ui.config: ${path} is not a string or null`);\n      } else {\n        Accounts.ui._options[path] = options[path];\n      }\n    }\n  }\n\n  // deal with redirect hooks.\n  for (let hook of [\n    'onEnrollAccountHook',\n    'onResetPasswordHook',\n    'onVerifyEmailHook',\n    'onSignedInHook',\n    'onSignedOutHook'\n  ]) {\n    if (options[hook]) {\n      if (typeof options[hook] == 'function') {\n        Accounts.ui._options[hook] = options[hook];\n      } else if (typeof options[hook] == 'string') {\n        Accounts.ui._options[hook] = () => redirect(options[hook]);\n      } else {\n        throw new Error(\n          `Accounts.ui.config: \"${hook}\" not a function or an absolute or relative path`\n        );\n      }\n    }\n  }\n};\n\nexport default Accounts;\n"]},"sourceType":"script","hash":"71bbfb1da48cabcf8f371259fd238779eb61ecc2"}

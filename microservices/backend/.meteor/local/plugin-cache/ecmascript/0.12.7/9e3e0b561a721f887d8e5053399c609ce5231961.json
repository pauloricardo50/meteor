{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/test/SlackService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/slack/server/test/SlackService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/test/SlackService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/slack/server/test/SlackService.test.js"],"names":["Factory","resetDatabase","expect","SlackService","UserService","LoanService","TEST_CHANNEL","describe","timeout","beforeEach","it","send","channel","text","catch","err","to","equal","undefined","user","create","notifyOfUpload","currentUser","yannis","emails","address","verified","userId","firstName","lastName","assignedEmployeeId","_id","loanId1","name","loanId2","fullLoanInsert","get","fileName","docLabel","loanId","then","attachments","title","promotionId","addLink","id","linkName","linkId"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { expect } from 'chai';\n\nimport SlackService from '../SlackService';\nimport UserService from '../../../users/server/UserService';\nimport LoanService from '../../../loans/server/LoanService';\n\nconst TEST_CHANNEL = 'test';\n\ndescribe('SlackService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  it('should not throw from server', () =>\n    SlackService.send({\n      channel: TEST_CHANNEL,\n      text: 'should not throw from server',\n    }).catch((err) => {\n      expect(err).to.equal(undefined);\n    }));\n\n  describe('notifyOfUpload', () => {\n    it('should not do anything if the user is not a USER', () => {\n      const user = Factory.create('admin');\n\n      expect(SlackService.notifyOfUpload({ currentUser: user })).to.equal(false);\n    });\n\n    it('should send a notification to the right channel with proper text', () => {\n      const yannis = Factory.create('admin', {\n        emails: [{ address: 'yannis@e-potek.ch', verified: true }],\n      });\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe',\n        assignedEmployeeId: yannis._id,\n      })._id;\n      const loanId1 = Factory.create('loan', { userId, name: '19-0001' })._id;\n      const loanId2 = LoanService.fullLoanInsert({ userId });\n      const user = UserService.get(userId);\n\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n        loanId: loanId2,\n      }).then(({ attachments, channel }) => {\n        expect(attachments[0].title).to.equal('Upload: file.pdf dans Taxes pour 19-0002.');\n        expect(attachments[0].text).to.equal('*Progrès:* Emprunteurs `0.00%`, Documents: `0.00%`, Bien immo: `0.00%`');\n        expect(channel).to.equal('#clients_yannis');\n      });\n    });\n\n    it('should send a shorter text version if no loanId is passed', () => {\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe',\n      })._id;\n      const user = UserService.get(userId);\n\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n      }).then(({ attachments }) => {\n        expect(attachments[0].title).to.equal('Upload: file.pdf dans Taxes.');\n      });\n    });\n\n    it('should send a promotion specific notification', () => {\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe',\n      })._id;\n      const promotionId = Factory.create('promotion', { name: 'A Promotion' })\n        ._id;\n      const loanId = LoanService.fullLoanInsert({ userId });\n      LoanService.addLink({\n        id: loanId,\n        linkName: 'promotions',\n        linkId: promotionId,\n      });\n      const user = UserService.get(userId);\n\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n        loanId,\n      }).then(({ attachments }) => {\n        expect(attachments[0].text).to.equal('_Promotion: `A Promotion`_ *Progrès:* Emprunteurs `0.00%`, Documents: `0.00%`');\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/slack/server/test/SlackService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/slack/server/test/SlackService.test.js"}},"code":"let Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet SlackService;\nmodule.link(\"../SlackService\", {\n  default(v) {\n    SlackService = v;\n  }\n\n}, 3);\nlet UserService;\nmodule.link(\"../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 4);\nlet LoanService;\nmodule.link(\"../../../loans/server/LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 5);\nconst TEST_CHANNEL = 'test';\ndescribe('SlackService', function () {\n  this.timeout(10000);\n  beforeEach(() => {\n    resetDatabase();\n  });\n  it('should not throw from server', () => SlackService.send({\n    channel: TEST_CHANNEL,\n    text: 'should not throw from server'\n  }).catch(err => {\n    expect(err).to.equal(undefined);\n  }));\n  describe('notifyOfUpload', () => {\n    it('should not do anything if the user is not a USER', () => {\n      const user = Factory.create('admin');\n      expect(SlackService.notifyOfUpload({\n        currentUser: user\n      })).to.equal(false);\n    });\n    it('should send a notification to the right channel with proper text', () => {\n      const yannis = Factory.create('admin', {\n        emails: [{\n          address: 'yannis@e-potek.ch',\n          verified: true\n        }]\n      });\n\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe',\n        assignedEmployeeId: yannis._id\n      })._id;\n\n      const loanId1 = Factory.create('loan', {\n        userId,\n        name: '19-0001'\n      })._id;\n\n      const loanId2 = LoanService.fullLoanInsert({\n        userId\n      });\n      const user = UserService.get(userId);\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n        loanId: loanId2\n      }).then(({\n        attachments,\n        channel\n      }) => {\n        expect(attachments[0].title).to.equal('Upload: file.pdf dans Taxes pour 19-0002.');\n        expect(attachments[0].text).to.equal('*Progrès:* Emprunteurs `0.00%`, Documents: `0.00%`, Bien immo: `0.00%`');\n        expect(channel).to.equal('#clients_yannis');\n      });\n    });\n    it('should send a shorter text version if no loanId is passed', () => {\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe'\n      })._id;\n\n      const user = UserService.get(userId);\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes'\n      }).then(({\n        attachments\n      }) => {\n        expect(attachments[0].title).to.equal('Upload: file.pdf dans Taxes.');\n      });\n    });\n    it('should send a promotion specific notification', () => {\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe'\n      })._id;\n\n      const promotionId = Factory.create('promotion', {\n        name: 'A Promotion'\n      })._id;\n\n      const loanId = LoanService.fullLoanInsert({\n        userId\n      });\n      LoanService.addLink({\n        id: loanId,\n        linkName: 'promotions',\n        linkId: promotionId\n      });\n      const user = UserService.get(userId);\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n        loanId\n      }).then(({\n        attachments\n      }) => {\n        expect(attachments[0].text).to.equal('_Promotion: `A Promotion`_ *Progrès:* Emprunteurs `0.00%`, Documents: `0.00%`');\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/slack/server/test/SlackService.test.js"],"names":["TEST_CHANNEL","describe","beforeEach","resetDatabase","it","channel","text","err","expect","user","Factory","currentUser","yannis","emails","address","verified","userId","firstName","lastName","assignedEmployeeId","_id","loanId1","name","loanId2","UserService","fileName","docLabel","loanId","attachments","promotionId","LoanService","id","linkName","linkId"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { expect } from 'chai';\n\nimport SlackService from '../SlackService';\nimport UserService from '../../../users/server/UserService';\nimport LoanService from '../../../loans/server/LoanService';\n\nconst TEST_CHANNEL = 'test';\n\ndescribe('SlackService', function () {\n  this.timeout(10000);\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  it('should not throw from server', () =>\n    SlackService.send({\n      channel: TEST_CHANNEL,\n      text: 'should not throw from server',\n    }).catch((err) => {\n      expect(err).to.equal(undefined);\n    }));\n\n  describe('notifyOfUpload', () => {\n    it('should not do anything if the user is not a USER', () => {\n      const user = Factory.create('admin');\n\n      expect(SlackService.notifyOfUpload({ currentUser: user })).to.equal(false);\n    });\n\n    it('should send a notification to the right channel with proper text', () => {\n      const yannis = Factory.create('admin', {\n        emails: [{ address: 'yannis@e-potek.ch', verified: true }],\n      });\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe',\n        assignedEmployeeId: yannis._id,\n      })._id;\n      const loanId1 = Factory.create('loan', { userId, name: '19-0001' })._id;\n      const loanId2 = LoanService.fullLoanInsert({ userId });\n      const user = UserService.get(userId);\n\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n        loanId: loanId2,\n      }).then(({ attachments, channel }) => {\n        expect(attachments[0].title).to.equal('Upload: file.pdf dans Taxes pour 19-0002.');\n        expect(attachments[0].text).to.equal('*Progrès:* Emprunteurs `0.00%`, Documents: `0.00%`, Bien immo: `0.00%`');\n        expect(channel).to.equal('#clients_yannis');\n      });\n    });\n\n    it('should send a shorter text version if no loanId is passed', () => {\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe',\n      })._id;\n      const user = UserService.get(userId);\n\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n      }).then(({ attachments }) => {\n        expect(attachments[0].title).to.equal('Upload: file.pdf dans Taxes.');\n      });\n    });\n\n    it('should send a promotion specific notification', () => {\n      const userId = Factory.create('user', {\n        firstName: 'John',\n        lastName: 'Doe',\n      })._id;\n      const promotionId = Factory.create('promotion', { name: 'A Promotion' })\n        ._id;\n      const loanId = LoanService.fullLoanInsert({ userId });\n      LoanService.addLink({\n        id: loanId,\n        linkName: 'promotions',\n        linkId: promotionId,\n      });\n      const user = UserService.get(userId);\n\n      return SlackService.notifyOfUpload({\n        currentUser: user,\n        fileName: 'file.pdf',\n        docLabel: 'Taxes',\n        loanId,\n      }).then(({ attachments }) => {\n        expect(attachments[0].text).to.equal('_Promotion: `A Promotion`_ *Progrès:* Emprunteurs `0.00%`, Documents: `0.00%`');\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"9e3e0b561a721f887d8e5053399c609ce5231961"}

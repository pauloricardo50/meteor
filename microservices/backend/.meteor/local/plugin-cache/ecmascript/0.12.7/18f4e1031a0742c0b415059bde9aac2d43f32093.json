{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/TooltipContext.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/tooltips/test/TooltipContext.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/TooltipContext.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/tooltips/test/TooltipContext.spec.jsx"],"names":["React","expect","mount","shallow","TooltipProvider","TooltipContainer","describe","it","skip","id","Component","tooltipList","wrapper","find","to","have","length","dive","prop","equal"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,KAAT,EAAgBC,OAAhB;AACA,SAASC,eAAT,EAA0BC,gBAA1B;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,EAAAA,EAAE,CAACC,IAAH,CAAQ,sBAAR,EAAgC,MAAM;AACpC;AACA;AACA,UAAMC,EAAE,GAAG,MAAX;AACA,UAAMC,SAAS,GAAGL,gBAAgB,CAAC,CAAC;AAAEM,MAAAA;AAAF,KAAD,KACjC,CAAC,MAAM,QAAP,CAAgB,CAACA,WAAD,CAAa,EAAE,MAAM,QAAR,CADG,CAAlC;AAGA,UAAMC,OAAO,GAAGV,KAAK,CAAC,CAAC,eAAD,CAAiB,YAAY,CAACO,EAAD,CAA7B;MACpB,CAAC,MAAM,QAAP;QACE,CAAC,IAAD;UACE,CAAC,SAAD;QACF,EAAE,IAAF;MACF,EAAE,MAAM,QAAR;IACF,EAAE,eAAF,CANqB,CAArB;AAOAR,IAAAA,MAAM,CAACW,OAAO,CAACC,IAAR,CAAaH,SAAb,CAAD,CAAN,CAAgCI,EAAhC,CAAmCC,IAAnC,CAAwCC,MAAxC,CAA+C,CAA/C;AACAf,IAAAA,MAAM,CAACW,OAAO,CACXC,IADI,CACCH,SADD,EAEJO,IAFI,GAGJC,IAHI,CAGC,aAHD,CAAD,CAAN,CAGwBJ,EAHxB,CAG2BK,KAH3B,CAGiC,IAHjC;AAID,GAnBD;AAoBD,CArBO,CAAR","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { mount, shallow } from '../../../utils/testHelpers/enzyme';\nimport { TooltipProvider, TooltipContainer } from '../TooltipContext';\n\ndescribe('TooltipContext', () => {\n  it.skip('passes tooltips down', () => {\n    // FIXME: Can't test react context for now\n    // https://github.com/airbnb/enzyme/pulls\n    const id = 'test';\n    const Component = TooltipContainer(({ tooltipList }) => (\n      <React.Fragment>{tooltipList}</React.Fragment>\n    ));\n    const wrapper = mount(<TooltipProvider tooltipList={id}>\n      <React.Fragment>\n        <span>\n          <Component />\n        </span>\n      </React.Fragment>\n    </TooltipProvider>);\n    expect(wrapper.find(Component)).to.have.length(1);\n    expect(wrapper\n      .find(Component)\n      .dive()\n      .prop('tooltipList')).to.equal(true);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/TooltipContext.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/tooltips/test/TooltipContext.spec.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet mount, shallow;\nmodule.link(\"../../../utils/testHelpers/enzyme\", {\n  mount(v) {\n    mount = v;\n  },\n\n  shallow(v) {\n    shallow = v;\n  }\n\n}, 2);\nlet TooltipProvider, TooltipContainer;\nmodule.link(\"../TooltipContext\", {\n  TooltipProvider(v) {\n    TooltipProvider = v;\n  },\n\n  TooltipContainer(v) {\n    TooltipContainer = v;\n  }\n\n}, 3);\ndescribe('TooltipContext', () => {\n  it.skip('passes tooltips down', () => {\n    // FIXME: Can't test react context for now\n    // https://github.com/airbnb/enzyme/pulls\n    const id = 'test';\n    const Component = TooltipContainer((_ref) => {\n      let {\n        tooltipList\n      } = _ref;\n      return React.createElement(React.Fragment, null, tooltipList);\n    });\n    const wrapper = mount(React.createElement(TooltipProvider, {\n      tooltipList: id\n    }, React.createElement(React.Fragment, null, React.createElement(\"span\", null, React.createElement(Component, null)))));\n    expect(wrapper.find(Component)).to.have.length(1);\n    expect(wrapper.find(Component).dive().prop('tooltipList')).to.equal(true);\n  });\n});","map":{"version":3,"sources":["imports/core/components/tooltips/test/TooltipContext.spec.jsx"],"names":["describe","it","id","Component","TooltipContainer","tooltipList","wrapper","mount","expect"],"mappings":"AAAA,IAAA,KAAA;AAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA;AAAA,MAAA,CAAA,IAAA,CAAA,MAAA,EAAA;AAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,MAAA,CAAA,IAAA,CAAA,mCAAA,EAAA;AAAA,EAAA,KAAA,CAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,OAAA,CAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAAA,IAAA,eAAA,EAAA,gBAAA;AAAA,MAAA,CAAA,IAAA,CAAA,mBAAA,EAAA;AAAA,EAAA,eAAA,CAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,CAAA;AAAA,GAAA;;AAAA,EAAA,gBAAA,CAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAAA;;AAAA,CAAA,EAAA,CAAA;AAMAA,QAAQ,CAAA,gBAAA,EAAmB,MAAM;AAC/BC,EAAAA,EAAE,CAAFA,IAAAA,CAAAA,sBAAAA,EAAgC,MAAM;AACpC;AACA;AACA,UAAMC,EAAE,GAAR,MAAA;AACA,UAAMC,SAAS,GAAGC,gBAAgB,CAAC;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aACjC,oBAAC,KAAD,CAAA,QAAA,QADF,WACE,CADiC;AAAA,KAAD,CAAlC;AAGA,UAAMC,OAAO,GAAGC,KAAK,CAAC,oBAAA,eAAA;AAAiB,MAAA,WAAA,EAAjB;AAAA,OACpB,oBAAC,KAAD,CAAA,QAAA,QACE,kCACE,oBAAA,SAAA,OADF,CADF,CADoB,CAAD,CAArB;AAOAC,IAAAA,MAAM,CAACF,OAAO,CAAPA,IAAAA,CAAPE,SAAOF,CAAD,CAANE,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,CAAAA;AACAA,IAAAA,MAAM,CAACF,OAAO,CAAPA,IAAAA,CAAAA,SAAAA,EAAAA,IAAAA,GAAAA,IAAAA,CAAPE,aAAOF,CAAD,CAANE,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA;AAfFP,GAAAA;AADFD,CAAQ,CAARA","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { mount, shallow } from '../../../utils/testHelpers/enzyme';\nimport { TooltipProvider, TooltipContainer } from '../TooltipContext';\n\ndescribe('TooltipContext', () => {\n  it.skip('passes tooltips down', () => {\n    // FIXME: Can't test react context for now\n    // https://github.com/airbnb/enzyme/pulls\n    const id = 'test';\n    const Component = TooltipContainer(({ tooltipList }) => (\n      <React.Fragment>{tooltipList}</React.Fragment>\n    ));\n    const wrapper = mount(<TooltipProvider tooltipList={id}>\n      <React.Fragment>\n        <span>\n          <Component />\n        </span>\n      </React.Fragment>\n    </TooltipProvider>);\n    expect(wrapper.find(Component)).to.have.length(1);\n    expect(wrapper\n      .find(Component)\n      .dive()\n      .prop('tooltipList')).to.equal(true);\n  });\n});\n"]},"sourceType":"script","hash":"18f4e1031a0742c0b415059bde9aac2d43f32093"}

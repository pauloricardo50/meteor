{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/LoanCalculator.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/Calculator/test/LoanCalculator.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/LoanCalculator.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/Calculator/test/LoanCalculator.spec.js"],"names":["expect","Calculator","CalculatorClass","INTEREST_RATES","EXPENSES","OWN_FUNDS_USAGE_TYPES","describe","it","getProjectValue","loan","structure","to","equal","property","value","propertyWork","getTotalUsed","ownFunds","usageType","WITHDRAW","PLEDGE","getFees","propertyId","_id","total","notaryFees","wantedLoan","canton","deep","include","structures","id","promotionOptionId","promotionOptions","promotionLots","properties","structureId","getInterests","loanTranches","type","interestRates","myRate","offer","getTheoreticalInterests","Calc","theoreticalInterestRate","theoreticalInterestRate2ndRank","be","within","getAmortization","above","amortizationGoal","amortizationYears","offerOverride","getMonthly","YEARS_10","currentInterestRates","getTheoreticalMonthly","expensesSubtractFromIncome","Object","values","filter","v","LEASING","borrowers","expenses","description","realEstate","getIncomeRatio","salary","getBorrowRatio","getMaxBorrowRatio","loanHasMinimalInformation","fortuneUsed","getLoanFilesProgress","logic","percent","count","documents","getMissingLoanDocuments","other","key","getMortgageNoteIncrease","mortgageNotes","mortgageNoteIds","getNonPledgedOwnFunds","getMissingOwnFunds"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator, { Calculator as CalculatorClass } from '..';\nimport { INTEREST_RATES, EXPENSES } from 'core/api/constants';\nimport { OWN_FUNDS_USAGE_TYPES } from '../../../api/constants';\n\ndescribe('LoanCalculator', () => {\n  describe('getProjectValue', () => {\n    it('returns 0 if the property value is 0 or does not exist', () => {\n      expect(Calculator.getProjectValue({ loan: { structure: {} } })).to.equal(0);\n      expect(Calculator.getProjectValue({\n        loan: { structure: { property: { value: 0 } }, propertyWork: 100 },\n      })).to.equal(0);\n    });\n\n    it('calculates project with propertyValue, notary fees and propertyWork', () => {\n      expect(Calculator.getProjectValue({\n        loan: { structure: { property: { value: 100 }, propertyWork: 50 } },\n      })).to.equal(155);\n    });\n  });\n\n  describe('getTotalUsed', () => {\n    it('it gets the sum of all used own funds, without pledged funds', () => {\n      expect(Calculator.getTotalUsed({\n        loan: {\n          structure: {\n            ownFunds: [\n              { value: 3, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n              { value: 2, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n              { value: 1 },\n            ],\n          },\n        },\n      })).to.equal(6);\n    });\n  });\n\n  describe('getFees', () => {\n    it('calculates fees if no notary fees exist', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            propertyId: 'prop',\n            property: { _id: 'prop', value: 100 },\n          },\n        },\n      }).total).to.equal(5);\n    });\n\n    it('uses provided notary fees if they are defined', () => {\n      expect(Calculator.getFees({\n        loan: { structure: { property: { value: 100 }, notaryFees: 123 } },\n      }).total).to.equal(123);\n    });\n\n    it('uses provided notary fees if they are 0', () => {\n      expect(Calculator.getFees({\n        loan: { structure: { property: { value: 100 }, notaryFees: 0 } },\n      }).total).to.equal(0);\n    });\n\n    it('returns accurate notary fees if data is sufficient', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            propertyId: 'prop',\n            wantedLoan: 800000,\n            property: { _id: 'prop', value: 1000000, canton: 'GE' },\n          },\n        },\n      })).to.deep.include({ total: 55159.1 });\n    });\n\n    it('calculates accurate fees for a promotionOption', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structures: [\n            {\n              id: 'struct1',\n              promotionOptionId: 'option1',\n              wantedLoan: 800000,\n            },\n          ],\n          promotionOptions: [\n            {\n              value: 1000000,\n              _id: 'option1',\n              promotionLots: [\n                {\n                  properties: [{ _id: 'prop', canton: 'GE' }],\n                },\n              ],\n            },\n          ],\n        },\n        structureId: 'struct1',\n      })).to.deep.include({ total: 55159.1 });\n    });\n  });\n\n  describe('getInterests', () => {\n    it('uses interest rates if provided', () => {\n      expect(Calculator.getInterests({\n        loan: {\n          structure: {\n            property: { value: 100000 },\n            wantedLoan: 500000,\n            loanTranches: [{ value: 1, type: 'myRate' }],\n          },\n        },\n        interestRates: { myRate: 0.012 },\n      })).to.equal(500);\n    });\n\n    it('uses the rates from the offer if it exists, even if interest rate is provided', () => {\n      expect(Calculator.getInterests({\n        loan: {\n          structure: {\n            property: { value: 100000 },\n            wantedLoan: 500000,\n            loanTranches: [{ value: 1, type: 'myRate' }],\n            offer: { myRate: 0.012 },\n          },\n        },\n        interestRates: { myRate: 0.024 },\n      })).to.equal(500);\n    });\n  });\n\n  describe('getTheoretialInterests', () => {\n    it('uses the theoretical rate', () => {\n      expect(Calculator.getTheoreticalInterests({\n        loan: {\n          structure: { wantedLoan: 1200000, property: { value: 1000000 } },\n        },\n      })).to.equal(5000);\n    });\n\n    it('uses the overridden theoretial rate', () => {\n      const Calc = new CalculatorClass({\n        theoreticalInterestRate: 0.04,\n        theoreticalInterestRate2ndRank: 0.04,\n      });\n      expect(Calc.getTheoreticalInterests({\n        loan: {\n          structure: { wantedLoan: 1200000, property: { value: 1000000 } },\n        },\n      })).to.equal(4000);\n    });\n\n    it('uses theoreticalInterestRate2ndRank to calculate the rate', () => {\n      const Calc = new CalculatorClass({\n        theoreticalInterestRate: 0.01,\n        theoreticalInterestRate2ndRank: 0.1,\n      });\n\n      // 650k at 1%\n      // 150k at 10%\n      // -> 1791\n\n      expect(Calc.getTheoreticalInterests({\n        loan: {\n          structure: { wantedLoan: 800000, property: { value: 1000000 } },\n        },\n      })).to.be.within(1791, 1792);\n    });\n  });\n\n  describe('getAmortization', () => {\n    it('figures out what amortization should be', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(1000);\n    });\n\n    it('does not amortize if loan is lower than 65%', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 650000,\n            propertyWork: 0,\n            property: { value: 1000000 },\n          },\n        },\n      })).to.equal(0);\n\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 1000,\n            propertyWork: 0,\n            property: { value: 1000000 },\n          },\n        },\n      })).to.equal(0);\n    });\n\n    it('does amortize if the loan is even a little bit above 65%', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 650001,\n            propertyWork: 0,\n            property: { value: 1000000 },\n          },\n        },\n      })).to.be.above(0);\n    });\n\n    it('should amortize faster if borrowers are old');\n\n    it('gets amortization from the offer if it is defined', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: { amortizationGoal: 0.5 },\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(2000);\n    });\n\n    it('uses amortizationYears from the offer if defined', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: { amortizationGoal: 0.5, amortizationYears: 30 },\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(1000);\n    });\n\n    it('resets amortizationGoal after calculating with offers', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: { amortizationGoal: 0.5 },\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(2000);\n\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(1000);\n    });\n\n    it('calculates amortization with an overrideOffer if provided', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structures: [\n            {\n              id: 'asdf',\n              wantedLoan: 640000,\n              propertyWork: 0,\n              propertyId: 'prop',\n            },\n          ],\n          properties: [{ _id: 'prop', value: 1000000 }],\n        },\n        offerOverride: { amortizationGoal: 0.65 },\n        structureId: 'asdf',\n      })).to.equal(0);\n\n      expect(Calculator.getAmortization({\n        loan: {\n          structures: [\n            {\n              id: 'asdf',\n              wantedLoan: 650000,\n              propertyWork: 0,\n              propertyId: 'prop',\n            },\n          ],\n          properties: [{ _id: 'prop', value: 1000000 }],\n        },\n        offerOverride: { amortizationGoal: 0.5, amortizationYears: 10 },\n        structureId: 'asdf',\n      })).to.equal(1250);\n    });\n  });\n\n  describe('getMonthly', () => {\n    it('sums amortization and interests', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          currentInterestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n        },\n      })).to.be.within(1800, 2500);\n    });\n\n    it('uses provided interestRates', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.equal(1800);\n    });\n\n    it('uses the offer interestRates', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            offer: {\n              amortizationGoal: 0.5,\n              [INTEREST_RATES.YEARS_10]: 0.02,\n            },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.equal(3600);\n    });\n  });\n\n  describe('getTheoreticalMonthly', () => {\n    it('uses the default theoretical rate', () => {\n      expect(Calculator.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n      })).to.equal(6000);\n    });\n\n    it('uses the provided theoretical rate', () => {\n      const Calc = new CalculatorClass({\n        interestRates: { myRate: 0.012 },\n        theoreticalInterestRate: 0.01,\n      });\n      expect(Calc.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n      })).to.equal(2800);\n    });\n\n    it('adds any expenses from the borrowers', () => {\n      const Calc = new CalculatorClass({\n        interestRates: { myRate: 0.012 },\n        theoreticalInterestRate: 0.01,\n        expensesSubtractFromIncome: Object.values(EXPENSES).filter(v => v !== EXPENSES.LEASING),\n      });\n\n      // 2800 for the loan\n      // 100 more for the leasing\n      // 2800 for the other property\n\n      expect(Calc.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          borrowers: [\n            {\n              expenses: { description: EXPENSES.LEASING, value: 1200 },\n              realEstate: [{ value: 1200000, loan: 960000 }],\n            },\n          ],\n        },\n      })).to.equal(5700);\n    });\n  });\n\n  describe('getIncomeRatio', () => {\n    it('compares theoretical monthly cost and income', () => {\n      expect(Calculator.getIncomeRatio({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: { value: 1000000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          borrowers: [{ salary: 180000 }],\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.be.within(0.33, 0.34);\n    });\n\n    it('returns 1 if the incomeRatio is negative', () => {\n      expect(Calculator.getIncomeRatio({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: { value: 1000000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          borrowers: [\n            { expenses: [{ value: 10000, description: EXPENSES.LEASING }] },\n          ],\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.equal(1);\n    });\n  });\n\n  describe('getBorrowRatio', () => {\n    it('calculates ratio based on loan, property value, and propertyWork', () => {\n      expect(Calculator.getBorrowRatio({\n        loan: {\n          structure: {\n            wantedLoan: 500,\n            propertyWork: 100,\n            property: { value: 900 },\n          },\n        },\n      })).to.equal(0.5);\n    });\n  });\n\n  describe('getMaxBorrowRatio', () => {\n    it('returns the max ratio for a loan', () => {\n      expect(Calculator.getMaxBorrowRatio({ loan: {} })).to.equal(0.8);\n    });\n  });\n\n  describe('loanHasMinimalInformation', () => {\n    it('returns true if ownFunds, property value and wantedLoan are defined', () => {\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            ownFunds: [{ value: 100000 }],\n            property: { value: 1 },\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns false if one of these fields is undefined', () => {\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            fortuneUsed: 1,\n            property: { value: 1 },\n          },\n        },\n      })).to.equal(false);\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            property: { value: 1 },\n          },\n        },\n      })).to.equal(false);\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            fortuneUsed: 1,\n          },\n        },\n      })).to.equal(false);\n    });\n  });\n\n  describe('getLoanFilesProgress', () => {\n    it('returns 0 for an empty loan', () => {\n      expect(Calculator.getLoanFilesProgress({ loan: { logic: {} } })).to.deep.equal({ percent: 0, count: 1 });\n    });\n\n    it('returns 100% for a loan initially, when documents have arrived', () => {\n      expect(Calculator.getLoanFilesProgress({\n        loan: { documents: {}, logic: {} },\n      })).to.deep.equal({ percent: 1, count: 0 });\n    });\n  });\n\n  describe('getMissingLoanDocuments', () => {\n    it('shows nothing is required initially', () => {\n      expect(Calculator.getMissingLoanDocuments({\n        loan: { logic: {} },\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: { logic: {} },\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: { documents: {}, logic: {} },\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: {\n          documents: { other: [{ key: 'hello' }] },\n          logic: {},\n        },\n      })).to.deep.equal([]);\n    });\n  });\n\n  describe('getMortgageNoteIncrease', () => {\n    it('returns the loan value if no mortgage note is added', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: {},\n          },\n        },\n      })).to.equal(800000);\n    });\n\n    it('returns the loan value if no property is selected', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: {},\n          },\n        },\n      })).to.equal(800000);\n    });\n\n    it('returns the increase with mortgageNotes on the property', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: { mortgageNotes: [{ value: 100000 }] },\n          },\n        },\n      })).to.equal(700000);\n    });\n\n    it('counts a mortgagenote as 0 if no value is set on it', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: {},\n          },\n        },\n      })).to.equal(800000);\n    });\n\n    it('works with borrowers mortgageNotes', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            mortgageNoteIds: ['note'],\n            property: {},\n          },\n          borrowers: [{ mortgageNotes: [{ _id: 'note' }] }],\n        },\n      })).to.equal(800000);\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            mortgageNoteIds: ['note'],\n            property: {},\n          },\n          borrowers: [{ mortgageNotes: [{ _id: 'note', value: 200000 }] }],\n        },\n      })).to.equal(600000);\n    });\n\n    it('caps the increase at 0', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            mortgageNoteIds: ['note'],\n            property: { mortgageNotes: [{ value: 500000 }] },\n          },\n          borrowers: [{ mortgageNotes: [{ _id: 'note', value: 500000 }] }],\n        },\n      })).to.equal(0);\n    });\n  });\n\n  describe('getNonPledgedOwnFunds', () => {\n    it('gets them', () => {\n      const loan = {\n        structure: {\n          ownFunds: [\n            { value: 100 },\n            { value: 100, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n          ],\n        },\n      };\n\n      expect(Calculator.getNonPledgedOwnFunds({ loan })).to.equal(100);\n    });\n  });\n\n  describe('calculateMissingOwnFunds', () => {\n    it('returns a standard amount', () => {\n      expect(Calculator.getMissingOwnFunds({\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [],\n            },\n          ],\n          borrowers: [{}],\n        },\n        structureId: 'struct1',\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [],\n        },\n      })).to.equal(250000);\n    });\n\n    it('overrides notaryFees if provided', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [],\n          notaryFees: 0,\n        },\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [],\n              notaryFees: 0,\n            },\n          ],\n        },\n        borrowers: [{}],\n        structureId: 'struct1',\n      })).to.equal(200000);\n    });\n\n    it('uses property work', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 100000,\n          ownFunds: [],\n        },\n        properties: [{ _id: 'propertyId', value: 900000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 900000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 100000,\n              ownFunds: [],\n            },\n          ],\n          borrowers: [{}],\n        },\n        structureId: 'struct1',\n      })).to.equal(245000);\n    });\n\n    it('subtracts used own funds', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [{ value: 100000 }],\n        },\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [{ value: 100000 }],\n            },\n          ],\n        },\n        borrowers: [{}],\n        structureId: 'struct1',\n      })).to.equal(150000);\n    });\n\n    it('does not count pledge as own funds', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [\n            { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n            { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n          ],\n        },\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [\n                { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n                { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n              ],\n            },\n          ],\n        },\n        borrowers: [{}],\n        structureId: 'struct1',\n      })).to.equal(150000);\n    });\n\n    it('uses calculated notary fees and rounds them', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 1179750,\n          propertyId: 'propertyId',\n          propertyWork: 165000,\n          ownFunds: [],\n        },\n        properties: [{ _id: 'propertyId', value: 1650000, canton: 'GE' }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1650000, canton: 'GE' }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 1179750,\n              propertyId: 'propertyId',\n              propertyWork: 165000,\n              ownFunds: [],\n            },\n          ],\n          borrowers: [{}],\n        },\n        structureId: 'struct1',\n      })).to.be.within(720693, 720694);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/Calculator/test/LoanCalculator.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/Calculator/test/LoanCalculator.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet Calculator, CalculatorClass;\nmodule.link(\"..\", {\n  default(v) {\n    Calculator = v;\n  },\n\n  Calculator(v) {\n    CalculatorClass = v;\n  }\n\n}, 1);\nlet INTEREST_RATES, EXPENSES;\nmodule.link(\"../../../api/constants\", {\n  INTEREST_RATES(v) {\n    INTEREST_RATES = v;\n  },\n\n  EXPENSES(v) {\n    EXPENSES = v;\n  }\n\n}, 2);\nlet OWN_FUNDS_USAGE_TYPES;\nmodule.link(\"../../../api/constants\", {\n  OWN_FUNDS_USAGE_TYPES(v) {\n    OWN_FUNDS_USAGE_TYPES = v;\n  }\n\n}, 3);\ndescribe('LoanCalculator', () => {\n  describe('getProjectValue', () => {\n    it('returns 0 if the property value is 0 or does not exist', () => {\n      expect(Calculator.getProjectValue({\n        loan: {\n          structure: {}\n        }\n      })).to.equal(0);\n      expect(Calculator.getProjectValue({\n        loan: {\n          structure: {\n            property: {\n              value: 0\n            }\n          },\n          propertyWork: 100\n        }\n      })).to.equal(0);\n    });\n    it('calculates project with propertyValue, notary fees and propertyWork', () => {\n      expect(Calculator.getProjectValue({\n        loan: {\n          structure: {\n            property: {\n              value: 100\n            },\n            propertyWork: 50\n          }\n        }\n      })).to.equal(155);\n    });\n  });\n  describe('getTotalUsed', () => {\n    it('it gets the sum of all used own funds, without pledged funds', () => {\n      expect(Calculator.getTotalUsed({\n        loan: {\n          structure: {\n            ownFunds: [{\n              value: 3,\n              usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW\n            }, {\n              value: 2,\n              usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE\n            }, {\n              value: 1\n            }]\n          }\n        }\n      })).to.equal(6);\n    });\n  });\n  describe('getFees', () => {\n    it('calculates fees if no notary fees exist', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            propertyId: 'prop',\n            property: {\n              _id: 'prop',\n              value: 100\n            }\n          }\n        }\n      }).total).to.equal(5);\n    });\n    it('uses provided notary fees if they are defined', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            property: {\n              value: 100\n            },\n            notaryFees: 123\n          }\n        }\n      }).total).to.equal(123);\n    });\n    it('uses provided notary fees if they are 0', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            property: {\n              value: 100\n            },\n            notaryFees: 0\n          }\n        }\n      }).total).to.equal(0);\n    });\n    it('returns accurate notary fees if data is sufficient', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            propertyId: 'prop',\n            wantedLoan: 800000,\n            property: {\n              _id: 'prop',\n              value: 1000000,\n              canton: 'GE'\n            }\n          }\n        }\n      })).to.deep.include({\n        total: 55159.1\n      });\n    });\n    it('calculates accurate fees for a promotionOption', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structures: [{\n            id: 'struct1',\n            promotionOptionId: 'option1',\n            wantedLoan: 800000\n          }],\n          promotionOptions: [{\n            value: 1000000,\n            _id: 'option1',\n            promotionLots: [{\n              properties: [{\n                _id: 'prop',\n                canton: 'GE'\n              }]\n            }]\n          }]\n        },\n        structureId: 'struct1'\n      })).to.deep.include({\n        total: 55159.1\n      });\n    });\n  });\n  describe('getInterests', () => {\n    it('uses interest rates if provided', () => {\n      expect(Calculator.getInterests({\n        loan: {\n          structure: {\n            property: {\n              value: 100000\n            },\n            wantedLoan: 500000,\n            loanTranches: [{\n              value: 1,\n              type: 'myRate'\n            }]\n          }\n        },\n        interestRates: {\n          myRate: 0.012\n        }\n      })).to.equal(500);\n    });\n    it('uses the rates from the offer if it exists, even if interest rate is provided', () => {\n      expect(Calculator.getInterests({\n        loan: {\n          structure: {\n            property: {\n              value: 100000\n            },\n            wantedLoan: 500000,\n            loanTranches: [{\n              value: 1,\n              type: 'myRate'\n            }],\n            offer: {\n              myRate: 0.012\n            }\n          }\n        },\n        interestRates: {\n          myRate: 0.024\n        }\n      })).to.equal(500);\n    });\n  });\n  describe('getTheoretialInterests', () => {\n    it('uses the theoretical rate', () => {\n      expect(Calculator.getTheoreticalInterests({\n        loan: {\n          structure: {\n            wantedLoan: 1200000,\n            property: {\n              value: 1000000\n            }\n          }\n        }\n      })).to.equal(5000);\n    });\n    it('uses the overridden theoretial rate', () => {\n      const Calc = new CalculatorClass({\n        theoreticalInterestRate: 0.04,\n        theoreticalInterestRate2ndRank: 0.04\n      });\n      expect(Calc.getTheoreticalInterests({\n        loan: {\n          structure: {\n            wantedLoan: 1200000,\n            property: {\n              value: 1000000\n            }\n          }\n        }\n      })).to.equal(4000);\n    });\n    it('uses theoreticalInterestRate2ndRank to calculate the rate', () => {\n      const Calc = new CalculatorClass({\n        theoreticalInterestRate: 0.01,\n        theoreticalInterestRate2ndRank: 0.1\n      }); // 650k at 1%\n      // 150k at 10%\n      // -> 1791\n\n      expect(Calc.getTheoreticalInterests({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: {\n              value: 1000000\n            }\n          }\n        }\n      })).to.be.within(1791, 1792);\n    });\n  });\n  describe('getAmortization', () => {\n    it('figures out what amortization should be', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            property: {\n              value: 1200000\n            }\n          }\n        }\n      })).to.equal(1000);\n    });\n    it('does not amortize if loan is lower than 65%', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 650000,\n            propertyWork: 0,\n            property: {\n              value: 1000000\n            }\n          }\n        }\n      })).to.equal(0);\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 1000,\n            propertyWork: 0,\n            property: {\n              value: 1000000\n            }\n          }\n        }\n      })).to.equal(0);\n    });\n    it('does amortize if the loan is even a little bit above 65%', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 650001,\n            propertyWork: 0,\n            property: {\n              value: 1000000\n            }\n          }\n        }\n      })).to.be.above(0);\n    });\n    it('should amortize faster if borrowers are old');\n    it('gets amortization from the offer if it is defined', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: {\n              amortizationGoal: 0.5\n            },\n            property: {\n              value: 1200000\n            }\n          }\n        }\n      })).to.equal(2000);\n    });\n    it('uses amortizationYears from the offer if defined', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: {\n              amortizationGoal: 0.5,\n              amortizationYears: 30\n            },\n            property: {\n              value: 1200000\n            }\n          }\n        }\n      })).to.equal(1000);\n    });\n    it('resets amortizationGoal after calculating with offers', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: {\n              amortizationGoal: 0.5\n            },\n            property: {\n              value: 1200000\n            }\n          }\n        }\n      })).to.equal(2000);\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            property: {\n              value: 1200000\n            }\n          }\n        }\n      })).to.equal(1000);\n    });\n    it('calculates amortization with an overrideOffer if provided', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structures: [{\n            id: 'asdf',\n            wantedLoan: 640000,\n            propertyWork: 0,\n            propertyId: 'prop'\n          }],\n          properties: [{\n            _id: 'prop',\n            value: 1000000\n          }]\n        },\n        offerOverride: {\n          amortizationGoal: 0.65\n        },\n        structureId: 'asdf'\n      })).to.equal(0);\n      expect(Calculator.getAmortization({\n        loan: {\n          structures: [{\n            id: 'asdf',\n            wantedLoan: 650000,\n            propertyWork: 0,\n            propertyId: 'prop'\n          }],\n          properties: [{\n            _id: 'prop',\n            value: 1000000\n          }]\n        },\n        offerOverride: {\n          amortizationGoal: 0.5,\n          amortizationYears: 10\n        },\n        structureId: 'asdf'\n      })).to.equal(1250);\n    });\n  });\n  describe('getMonthly', () => {\n    it('sums amortization and interests', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: {\n              value: 1200000\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          },\n          currentInterestRates: {\n            [INTEREST_RATES.YEARS_10]: 0.01\n          }\n        }\n      })).to.be.within(1800, 2500);\n    });\n    it('uses provided interestRates', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: {\n              value: 1200000\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          }\n        },\n        interestRates: {\n          [INTEREST_RATES.YEARS_10]: 0.01\n        }\n      })).to.equal(1800);\n    });\n    it('uses the offer interestRates', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: {\n              value: 1200000\n            },\n            offer: {\n              amortizationGoal: 0.5,\n              [INTEREST_RATES.YEARS_10]: 0.02\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          }\n        },\n        interestRates: {\n          [INTEREST_RATES.YEARS_10]: 0.01\n        }\n      })).to.equal(3600);\n    });\n  });\n  describe('getTheoreticalMonthly', () => {\n    it('uses the default theoretical rate', () => {\n      expect(Calculator.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: {\n              value: 1200000\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          }\n        }\n      })).to.equal(6000);\n    });\n    it('uses the provided theoretical rate', () => {\n      const Calc = new CalculatorClass({\n        interestRates: {\n          myRate: 0.012\n        },\n        theoreticalInterestRate: 0.01\n      });\n      expect(Calc.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: {\n              value: 1200000\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          }\n        }\n      })).to.equal(2800);\n    });\n    it('adds any expenses from the borrowers', () => {\n      const Calc = new CalculatorClass({\n        interestRates: {\n          myRate: 0.012\n        },\n        theoreticalInterestRate: 0.01,\n        expensesSubtractFromIncome: Object.values(EXPENSES).filter(v => v !== EXPENSES.LEASING)\n      }); // 2800 for the loan\n      // 100 more for the leasing\n      // 2800 for the other property\n\n      expect(Calc.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: {\n              value: 1200000\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          },\n          borrowers: [{\n            expenses: {\n              description: EXPENSES.LEASING,\n              value: 1200\n            },\n            realEstate: [{\n              value: 1200000,\n              loan: 960000\n            }]\n          }]\n        }\n      })).to.equal(5700);\n    });\n  });\n  describe('getIncomeRatio', () => {\n    it('compares theoretical monthly cost and income', () => {\n      expect(Calculator.getIncomeRatio({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: {\n              value: 1000000\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          },\n          borrowers: [{\n            salary: 180000\n          }]\n        },\n        interestRates: {\n          [INTEREST_RATES.YEARS_10]: 0.01\n        }\n      })).to.be.within(0.33, 0.34);\n    });\n    it('returns 1 if the incomeRatio is negative', () => {\n      expect(Calculator.getIncomeRatio({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: {\n              value: 1000000\n            },\n            propertyWork: 0,\n            loanTranches: [{\n              type: INTEREST_RATES.YEARS_10,\n              value: 1\n            }]\n          },\n          borrowers: [{\n            expenses: [{\n              value: 10000,\n              description: EXPENSES.LEASING\n            }]\n          }]\n        },\n        interestRates: {\n          [INTEREST_RATES.YEARS_10]: 0.01\n        }\n      })).to.equal(1);\n    });\n  });\n  describe('getBorrowRatio', () => {\n    it('calculates ratio based on loan, property value, and propertyWork', () => {\n      expect(Calculator.getBorrowRatio({\n        loan: {\n          structure: {\n            wantedLoan: 500,\n            propertyWork: 100,\n            property: {\n              value: 900\n            }\n          }\n        }\n      })).to.equal(0.5);\n    });\n  });\n  describe('getMaxBorrowRatio', () => {\n    it('returns the max ratio for a loan', () => {\n      expect(Calculator.getMaxBorrowRatio({\n        loan: {}\n      })).to.equal(0.8);\n    });\n  });\n  describe('loanHasMinimalInformation', () => {\n    it('returns true if ownFunds, property value and wantedLoan are defined', () => {\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            ownFunds: [{\n              value: 100000\n            }],\n            property: {\n              value: 1\n            }\n          }\n        }\n      })).to.equal(true);\n    });\n    it('returns false if one of these fields is undefined', () => {\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            fortuneUsed: 1,\n            property: {\n              value: 1\n            }\n          }\n        }\n      })).to.equal(false);\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            property: {\n              value: 1\n            }\n          }\n        }\n      })).to.equal(false);\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            fortuneUsed: 1\n          }\n        }\n      })).to.equal(false);\n    });\n  });\n  describe('getLoanFilesProgress', () => {\n    it('returns 0 for an empty loan', () => {\n      expect(Calculator.getLoanFilesProgress({\n        loan: {\n          logic: {}\n        }\n      })).to.deep.equal({\n        percent: 0,\n        count: 1\n      });\n    });\n    it('returns 100% for a loan initially, when documents have arrived', () => {\n      expect(Calculator.getLoanFilesProgress({\n        loan: {\n          documents: {},\n          logic: {}\n        }\n      })).to.deep.equal({\n        percent: 1,\n        count: 0\n      });\n    });\n  });\n  describe('getMissingLoanDocuments', () => {\n    it('shows nothing is required initially', () => {\n      expect(Calculator.getMissingLoanDocuments({\n        loan: {\n          logic: {}\n        }\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: {\n          logic: {}\n        }\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: {\n          documents: {},\n          logic: {}\n        }\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: {\n          documents: {\n            other: [{\n              key: 'hello'\n            }]\n          },\n          logic: {}\n        }\n      })).to.deep.equal([]);\n    });\n  });\n  describe('getMortgageNoteIncrease', () => {\n    it('returns the loan value if no mortgage note is added', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: {}\n          }\n        }\n      })).to.equal(800000);\n    });\n    it('returns the loan value if no property is selected', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: {}\n          }\n        }\n      })).to.equal(800000);\n    });\n    it('returns the increase with mortgageNotes on the property', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: {\n              mortgageNotes: [{\n                value: 100000\n              }]\n            }\n          }\n        }\n      })).to.equal(700000);\n    });\n    it('counts a mortgagenote as 0 if no value is set on it', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: {}\n          }\n        }\n      })).to.equal(800000);\n    });\n    it('works with borrowers mortgageNotes', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            mortgageNoteIds: ['note'],\n            property: {}\n          },\n          borrowers: [{\n            mortgageNotes: [{\n              _id: 'note'\n            }]\n          }]\n        }\n      })).to.equal(800000);\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            mortgageNoteIds: ['note'],\n            property: {}\n          },\n          borrowers: [{\n            mortgageNotes: [{\n              _id: 'note',\n              value: 200000\n            }]\n          }]\n        }\n      })).to.equal(600000);\n    });\n    it('caps the increase at 0', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            mortgageNoteIds: ['note'],\n            property: {\n              mortgageNotes: [{\n                value: 500000\n              }]\n            }\n          },\n          borrowers: [{\n            mortgageNotes: [{\n              _id: 'note',\n              value: 500000\n            }]\n          }]\n        }\n      })).to.equal(0);\n    });\n  });\n  describe('getNonPledgedOwnFunds', () => {\n    it('gets them', () => {\n      const loan = {\n        structure: {\n          ownFunds: [{\n            value: 100\n          }, {\n            value: 100,\n            usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE\n          }]\n        }\n      };\n      expect(Calculator.getNonPledgedOwnFunds({\n        loan\n      })).to.equal(100);\n    });\n  });\n  describe('calculateMissingOwnFunds', () => {\n    it('returns a standard amount', () => {\n      expect(Calculator.getMissingOwnFunds({\n        properties: [{\n          _id: 'propertyId',\n          value: 1000000\n        }],\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          structures: [{\n            id: 'struct1',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            propertyWork: 0,\n            ownFunds: []\n          }],\n          borrowers: [{}]\n        },\n        structureId: 'struct1',\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: []\n        }\n      })).to.equal(250000);\n    });\n    it('overrides notaryFees if provided', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [],\n          notaryFees: 0\n        },\n        properties: [{\n          _id: 'propertyId',\n          value: 1000000\n        }],\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          structures: [{\n            id: 'struct1',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            propertyWork: 0,\n            ownFunds: [],\n            notaryFees: 0\n          }]\n        },\n        borrowers: [{}],\n        structureId: 'struct1'\n      })).to.equal(200000);\n    });\n    it('uses property work', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 100000,\n          ownFunds: []\n        },\n        properties: [{\n          _id: 'propertyId',\n          value: 900000\n        }],\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 900000\n          }],\n          structures: [{\n            id: 'struct1',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            propertyWork: 100000,\n            ownFunds: []\n          }],\n          borrowers: [{}]\n        },\n        structureId: 'struct1'\n      })).to.equal(245000);\n    });\n    it('subtracts used own funds', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [{\n            value: 100000\n          }]\n        },\n        properties: [{\n          _id: 'propertyId',\n          value: 1000000\n        }],\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          structures: [{\n            id: 'struct1',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            propertyWork: 0,\n            ownFunds: [{\n              value: 100000\n            }]\n          }]\n        },\n        borrowers: [{}],\n        structureId: 'struct1'\n      })).to.equal(150000);\n    });\n    it('does not count pledge as own funds', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [{\n            value: 100000,\n            usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE\n          }, {\n            value: 100000,\n            usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW\n          }]\n        },\n        properties: [{\n          _id: 'propertyId',\n          value: 1000000\n        }],\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1000000\n          }],\n          structures: [{\n            id: 'struct1',\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            propertyWork: 0,\n            ownFunds: [{\n              value: 100000,\n              usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE\n            }, {\n              value: 100000,\n              usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW\n            }]\n          }]\n        },\n        borrowers: [{}],\n        structureId: 'struct1'\n      })).to.equal(150000);\n    });\n    it('uses calculated notary fees and rounds them', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 1179750,\n          propertyId: 'propertyId',\n          propertyWork: 165000,\n          ownFunds: []\n        },\n        properties: [{\n          _id: 'propertyId',\n          value: 1650000,\n          canton: 'GE'\n        }],\n        loan: {\n          properties: [{\n            _id: 'propertyId',\n            value: 1650000,\n            canton: 'GE'\n          }],\n          structures: [{\n            id: 'struct1',\n            wantedLoan: 1179750,\n            propertyId: 'propertyId',\n            propertyWork: 165000,\n            ownFunds: []\n          }],\n          borrowers: [{}]\n        },\n        structureId: 'struct1'\n      })).to.be.within(720693, 720694);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/Calculator/test/LoanCalculator.spec.js"],"names":["describe","it","expect","loan","structure","property","value","propertyWork","ownFunds","usageType","OWN_FUNDS_USAGE_TYPES","WITHDRAW","PLEDGE","propertyId","_id","notaryFees","wantedLoan","canton","total","structures","id","promotionOptionId","promotionOptions","promotionLots","properties","structureId","loanTranches","type","interestRates","myRate","offer","Calc","theoreticalInterestRate","theoreticalInterestRate2ndRank","amortizationGoal","amortizationYears","offerOverride","INTEREST_RATES","currentInterestRates","expensesSubtractFromIncome","Object","v","EXPENSES","borrowers","expenses","description","realEstate","salary","LEASING","fortuneUsed","logic","percent","count","documents","other","key","mortgageNotes","mortgageNoteIds"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport Calculator, { Calculator as CalculatorClass } from '..';\nimport { INTEREST_RATES, EXPENSES } from 'core/api/constants';\nimport { OWN_FUNDS_USAGE_TYPES } from '../../../api/constants';\n\ndescribe('LoanCalculator', () => {\n  describe('getProjectValue', () => {\n    it('returns 0 if the property value is 0 or does not exist', () => {\n      expect(Calculator.getProjectValue({ loan: { structure: {} } })).to.equal(0);\n      expect(Calculator.getProjectValue({\n        loan: { structure: { property: { value: 0 } }, propertyWork: 100 },\n      })).to.equal(0);\n    });\n\n    it('calculates project with propertyValue, notary fees and propertyWork', () => {\n      expect(Calculator.getProjectValue({\n        loan: { structure: { property: { value: 100 }, propertyWork: 50 } },\n      })).to.equal(155);\n    });\n  });\n\n  describe('getTotalUsed', () => {\n    it('it gets the sum of all used own funds, without pledged funds', () => {\n      expect(Calculator.getTotalUsed({\n        loan: {\n          structure: {\n            ownFunds: [\n              { value: 3, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n              { value: 2, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n              { value: 1 },\n            ],\n          },\n        },\n      })).to.equal(6);\n    });\n  });\n\n  describe('getFees', () => {\n    it('calculates fees if no notary fees exist', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            propertyId: 'prop',\n            property: { _id: 'prop', value: 100 },\n          },\n        },\n      }).total).to.equal(5);\n    });\n\n    it('uses provided notary fees if they are defined', () => {\n      expect(Calculator.getFees({\n        loan: { structure: { property: { value: 100 }, notaryFees: 123 } },\n      }).total).to.equal(123);\n    });\n\n    it('uses provided notary fees if they are 0', () => {\n      expect(Calculator.getFees({\n        loan: { structure: { property: { value: 100 }, notaryFees: 0 } },\n      }).total).to.equal(0);\n    });\n\n    it('returns accurate notary fees if data is sufficient', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structure: {\n            propertyId: 'prop',\n            wantedLoan: 800000,\n            property: { _id: 'prop', value: 1000000, canton: 'GE' },\n          },\n        },\n      })).to.deep.include({ total: 55159.1 });\n    });\n\n    it('calculates accurate fees for a promotionOption', () => {\n      expect(Calculator.getFees({\n        loan: {\n          structures: [\n            {\n              id: 'struct1',\n              promotionOptionId: 'option1',\n              wantedLoan: 800000,\n            },\n          ],\n          promotionOptions: [\n            {\n              value: 1000000,\n              _id: 'option1',\n              promotionLots: [\n                {\n                  properties: [{ _id: 'prop', canton: 'GE' }],\n                },\n              ],\n            },\n          ],\n        },\n        structureId: 'struct1',\n      })).to.deep.include({ total: 55159.1 });\n    });\n  });\n\n  describe('getInterests', () => {\n    it('uses interest rates if provided', () => {\n      expect(Calculator.getInterests({\n        loan: {\n          structure: {\n            property: { value: 100000 },\n            wantedLoan: 500000,\n            loanTranches: [{ value: 1, type: 'myRate' }],\n          },\n        },\n        interestRates: { myRate: 0.012 },\n      })).to.equal(500);\n    });\n\n    it('uses the rates from the offer if it exists, even if interest rate is provided', () => {\n      expect(Calculator.getInterests({\n        loan: {\n          structure: {\n            property: { value: 100000 },\n            wantedLoan: 500000,\n            loanTranches: [{ value: 1, type: 'myRate' }],\n            offer: { myRate: 0.012 },\n          },\n        },\n        interestRates: { myRate: 0.024 },\n      })).to.equal(500);\n    });\n  });\n\n  describe('getTheoretialInterests', () => {\n    it('uses the theoretical rate', () => {\n      expect(Calculator.getTheoreticalInterests({\n        loan: {\n          structure: { wantedLoan: 1200000, property: { value: 1000000 } },\n        },\n      })).to.equal(5000);\n    });\n\n    it('uses the overridden theoretial rate', () => {\n      const Calc = new CalculatorClass({\n        theoreticalInterestRate: 0.04,\n        theoreticalInterestRate2ndRank: 0.04,\n      });\n      expect(Calc.getTheoreticalInterests({\n        loan: {\n          structure: { wantedLoan: 1200000, property: { value: 1000000 } },\n        },\n      })).to.equal(4000);\n    });\n\n    it('uses theoreticalInterestRate2ndRank to calculate the rate', () => {\n      const Calc = new CalculatorClass({\n        theoreticalInterestRate: 0.01,\n        theoreticalInterestRate2ndRank: 0.1,\n      });\n\n      // 650k at 1%\n      // 150k at 10%\n      // -> 1791\n\n      expect(Calc.getTheoreticalInterests({\n        loan: {\n          structure: { wantedLoan: 800000, property: { value: 1000000 } },\n        },\n      })).to.be.within(1791, 1792);\n    });\n  });\n\n  describe('getAmortization', () => {\n    it('figures out what amortization should be', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(1000);\n    });\n\n    it('does not amortize if loan is lower than 65%', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 650000,\n            propertyWork: 0,\n            property: { value: 1000000 },\n          },\n        },\n      })).to.equal(0);\n\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 1000,\n            propertyWork: 0,\n            property: { value: 1000000 },\n          },\n        },\n      })).to.equal(0);\n    });\n\n    it('does amortize if the loan is even a little bit above 65%', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 650001,\n            propertyWork: 0,\n            property: { value: 1000000 },\n          },\n        },\n      })).to.be.above(0);\n    });\n\n    it('should amortize faster if borrowers are old');\n\n    it('gets amortization from the offer if it is defined', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: { amortizationGoal: 0.5 },\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(2000);\n    });\n\n    it('uses amortizationYears from the offer if defined', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: { amortizationGoal: 0.5, amortizationYears: 30 },\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(1000);\n    });\n\n    it('resets amortizationGoal after calculating with offers', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            offer: { amortizationGoal: 0.5 },\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(2000);\n\n      expect(Calculator.getAmortization({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            propertyWork: 0,\n            property: { value: 1200000 },\n          },\n        },\n      })).to.equal(1000);\n    });\n\n    it('calculates amortization with an overrideOffer if provided', () => {\n      expect(Calculator.getAmortization({\n        loan: {\n          structures: [\n            {\n              id: 'asdf',\n              wantedLoan: 640000,\n              propertyWork: 0,\n              propertyId: 'prop',\n            },\n          ],\n          properties: [{ _id: 'prop', value: 1000000 }],\n        },\n        offerOverride: { amortizationGoal: 0.65 },\n        structureId: 'asdf',\n      })).to.equal(0);\n\n      expect(Calculator.getAmortization({\n        loan: {\n          structures: [\n            {\n              id: 'asdf',\n              wantedLoan: 650000,\n              propertyWork: 0,\n              propertyId: 'prop',\n            },\n          ],\n          properties: [{ _id: 'prop', value: 1000000 }],\n        },\n        offerOverride: { amortizationGoal: 0.5, amortizationYears: 10 },\n        structureId: 'asdf',\n      })).to.equal(1250);\n    });\n  });\n\n  describe('getMonthly', () => {\n    it('sums amortization and interests', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          currentInterestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n        },\n      })).to.be.within(1800, 2500);\n    });\n\n    it('uses provided interestRates', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.equal(1800);\n    });\n\n    it('uses the offer interestRates', () => {\n      expect(Calculator.getMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            offer: {\n              amortizationGoal: 0.5,\n              [INTEREST_RATES.YEARS_10]: 0.02,\n            },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.equal(3600);\n    });\n  });\n\n  describe('getTheoreticalMonthly', () => {\n    it('uses the default theoretical rate', () => {\n      expect(Calculator.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n      })).to.equal(6000);\n    });\n\n    it('uses the provided theoretical rate', () => {\n      const Calc = new CalculatorClass({\n        interestRates: { myRate: 0.012 },\n        theoreticalInterestRate: 0.01,\n      });\n      expect(Calc.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n        },\n      })).to.equal(2800);\n    });\n\n    it('adds any expenses from the borrowers', () => {\n      const Calc = new CalculatorClass({\n        interestRates: { myRate: 0.012 },\n        theoreticalInterestRate: 0.01,\n        expensesSubtractFromIncome: Object.values(EXPENSES).filter(v => v !== EXPENSES.LEASING),\n      });\n\n      // 2800 for the loan\n      // 100 more for the leasing\n      // 2800 for the other property\n\n      expect(Calc.getTheoreticalMonthly({\n        loan: {\n          structure: {\n            wantedLoan: 960000,\n            property: { value: 1200000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          borrowers: [\n            {\n              expenses: { description: EXPENSES.LEASING, value: 1200 },\n              realEstate: [{ value: 1200000, loan: 960000 }],\n            },\n          ],\n        },\n      })).to.equal(5700);\n    });\n  });\n\n  describe('getIncomeRatio', () => {\n    it('compares theoretical monthly cost and income', () => {\n      expect(Calculator.getIncomeRatio({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: { value: 1000000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          borrowers: [{ salary: 180000 }],\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.be.within(0.33, 0.34);\n    });\n\n    it('returns 1 if the incomeRatio is negative', () => {\n      expect(Calculator.getIncomeRatio({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: { value: 1000000 },\n            propertyWork: 0,\n            loanTranches: [{ type: INTEREST_RATES.YEARS_10, value: 1 }],\n          },\n          borrowers: [\n            { expenses: [{ value: 10000, description: EXPENSES.LEASING }] },\n          ],\n        },\n        interestRates: { [INTEREST_RATES.YEARS_10]: 0.01 },\n      })).to.equal(1);\n    });\n  });\n\n  describe('getBorrowRatio', () => {\n    it('calculates ratio based on loan, property value, and propertyWork', () => {\n      expect(Calculator.getBorrowRatio({\n        loan: {\n          structure: {\n            wantedLoan: 500,\n            propertyWork: 100,\n            property: { value: 900 },\n          },\n        },\n      })).to.equal(0.5);\n    });\n  });\n\n  describe('getMaxBorrowRatio', () => {\n    it('returns the max ratio for a loan', () => {\n      expect(Calculator.getMaxBorrowRatio({ loan: {} })).to.equal(0.8);\n    });\n  });\n\n  describe('loanHasMinimalInformation', () => {\n    it('returns true if ownFunds, property value and wantedLoan are defined', () => {\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            ownFunds: [{ value: 100000 }],\n            property: { value: 1 },\n          },\n        },\n      })).to.equal(true);\n    });\n\n    it('returns false if one of these fields is undefined', () => {\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            fortuneUsed: 1,\n            property: { value: 1 },\n          },\n        },\n      })).to.equal(false);\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            property: { value: 1 },\n          },\n        },\n      })).to.equal(false);\n      expect(Calculator.loanHasMinimalInformation({\n        loan: {\n          structure: {\n            wantedLoan: 1,\n            fortuneUsed: 1,\n          },\n        },\n      })).to.equal(false);\n    });\n  });\n\n  describe('getLoanFilesProgress', () => {\n    it('returns 0 for an empty loan', () => {\n      expect(Calculator.getLoanFilesProgress({ loan: { logic: {} } })).to.deep.equal({ percent: 0, count: 1 });\n    });\n\n    it('returns 100% for a loan initially, when documents have arrived', () => {\n      expect(Calculator.getLoanFilesProgress({\n        loan: { documents: {}, logic: {} },\n      })).to.deep.equal({ percent: 1, count: 0 });\n    });\n  });\n\n  describe('getMissingLoanDocuments', () => {\n    it('shows nothing is required initially', () => {\n      expect(Calculator.getMissingLoanDocuments({\n        loan: { logic: {} },\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: { logic: {} },\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: { documents: {}, logic: {} },\n      })).to.deep.equal([]);\n      expect(Calculator.getMissingLoanDocuments({\n        loan: {\n          documents: { other: [{ key: 'hello' }] },\n          logic: {},\n        },\n      })).to.deep.equal([]);\n    });\n  });\n\n  describe('getMortgageNoteIncrease', () => {\n    it('returns the loan value if no mortgage note is added', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: {},\n          },\n        },\n      })).to.equal(800000);\n    });\n\n    it('returns the loan value if no property is selected', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            property: {},\n          },\n        },\n      })).to.equal(800000);\n    });\n\n    it('returns the increase with mortgageNotes on the property', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: { mortgageNotes: [{ value: 100000 }] },\n          },\n        },\n      })).to.equal(700000);\n    });\n\n    it('counts a mortgagenote as 0 if no value is set on it', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            propertyId: 'propertyId',\n            wantedLoan: 800000,\n            property: {},\n          },\n        },\n      })).to.equal(800000);\n    });\n\n    it('works with borrowers mortgageNotes', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            mortgageNoteIds: ['note'],\n            property: {},\n          },\n          borrowers: [{ mortgageNotes: [{ _id: 'note' }] }],\n        },\n      })).to.equal(800000);\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            mortgageNoteIds: ['note'],\n            property: {},\n          },\n          borrowers: [{ mortgageNotes: [{ _id: 'note', value: 200000 }] }],\n        },\n      })).to.equal(600000);\n    });\n\n    it('caps the increase at 0', () => {\n      expect(Calculator.getMortgageNoteIncrease({\n        loan: {\n          structure: {\n            wantedLoan: 800000,\n            propertyId: 'propertyId',\n            mortgageNoteIds: ['note'],\n            property: { mortgageNotes: [{ value: 500000 }] },\n          },\n          borrowers: [{ mortgageNotes: [{ _id: 'note', value: 500000 }] }],\n        },\n      })).to.equal(0);\n    });\n  });\n\n  describe('getNonPledgedOwnFunds', () => {\n    it('gets them', () => {\n      const loan = {\n        structure: {\n          ownFunds: [\n            { value: 100 },\n            { value: 100, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n          ],\n        },\n      };\n\n      expect(Calculator.getNonPledgedOwnFunds({ loan })).to.equal(100);\n    });\n  });\n\n  describe('calculateMissingOwnFunds', () => {\n    it('returns a standard amount', () => {\n      expect(Calculator.getMissingOwnFunds({\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [],\n            },\n          ],\n          borrowers: [{}],\n        },\n        structureId: 'struct1',\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [],\n        },\n      })).to.equal(250000);\n    });\n\n    it('overrides notaryFees if provided', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [],\n          notaryFees: 0,\n        },\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [],\n              notaryFees: 0,\n            },\n          ],\n        },\n        borrowers: [{}],\n        structureId: 'struct1',\n      })).to.equal(200000);\n    });\n\n    it('uses property work', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 100000,\n          ownFunds: [],\n        },\n        properties: [{ _id: 'propertyId', value: 900000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 900000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 100000,\n              ownFunds: [],\n            },\n          ],\n          borrowers: [{}],\n        },\n        structureId: 'struct1',\n      })).to.equal(245000);\n    });\n\n    it('subtracts used own funds', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [{ value: 100000 }],\n        },\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [{ value: 100000 }],\n            },\n          ],\n        },\n        borrowers: [{}],\n        structureId: 'struct1',\n      })).to.equal(150000);\n    });\n\n    it('does not count pledge as own funds', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 800000,\n          propertyId: 'propertyId',\n          propertyWork: 0,\n          ownFunds: [\n            { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n            { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n          ],\n        },\n        properties: [{ _id: 'propertyId', value: 1000000 }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1000000 }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 800000,\n              propertyId: 'propertyId',\n              propertyWork: 0,\n              ownFunds: [\n                { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.PLEDGE },\n                { value: 100000, usageType: OWN_FUNDS_USAGE_TYPES.WITHDRAW },\n              ],\n            },\n          ],\n        },\n        borrowers: [{}],\n        structureId: 'struct1',\n      })).to.equal(150000);\n    });\n\n    it('uses calculated notary fees and rounds them', () => {\n      expect(Calculator.getMissingOwnFunds({\n        structure: {\n          id: 'struct1',\n          wantedLoan: 1179750,\n          propertyId: 'propertyId',\n          propertyWork: 165000,\n          ownFunds: [],\n        },\n        properties: [{ _id: 'propertyId', value: 1650000, canton: 'GE' }],\n        loan: {\n          properties: [{ _id: 'propertyId', value: 1650000, canton: 'GE' }],\n          structures: [\n            {\n              id: 'struct1',\n              wantedLoan: 1179750,\n              propertyId: 'propertyId',\n              propertyWork: 165000,\n              ownFunds: [],\n            },\n          ],\n          borrowers: [{}],\n        },\n        structureId: 'struct1',\n      })).to.be.within(720693, 720694);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"7bbb6cc97e3e8e8e2a8c7f5a55e7e57e568d91f4"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/lib/getMutationConfig.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/lib/getMutationConfig.js","filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/lib/getMutationConfig.js","passPerPreset":false,"envName":"production","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/packages/cultofcoders:redis-oplog/lib/mongo/lib/getMutationConfig.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/cultofcoders:redis-oplog/lib/mongo/lib/getMutationConfig.js"}},"code":"let getChannels;\nmodule.link(\"../../cache/lib/getChannels\", {\n  default(v) {\n    getChannels = v;\n  }\n\n}, 0);\nlet Config;\nmodule.link(\"../../config\", {\n  default(v) {\n    Config = v;\n  }\n\n}, 1);\nmodule.exportDefault(function (collection, _config, mutationObject) {\n  const collectionName = collection._name;\n\n  if (!_config || _.isFunction(_config)) {\n    _config = {};\n  }\n\n  const defaultOverrides = {};\n\n  if (!DDP._CurrentMethodInvocation.get()) {\n    // If we're not in a method, then we should never need to do optimistic\n    // ui processing.\n    //\n    // However, we allow users to really force it by explicitly passing\n    // optimistic: true if they want to use the local-dispatch code path\n    // rather than going through Redis.\n    defaultOverrides.optimistic = false;\n  }\n\n  let config = _.extend({}, Config.mutationDefaults, defaultOverrides, _config);\n\n  if (collection._redisOplog) {\n    const {\n      mutation\n    } = collection._redisOplog;\n\n    if (mutation) {\n      mutation.call(collection, config, mutationObject);\n    }\n  }\n\n  config._channels = getChannels(collectionName, config);\n  return config;\n});\n;","map":{"version":3,"sources":["packages/cultofcoders:redis-oplog/lib/mongo/lib/getMutationConfig.js"],"names":["getChannels","module","link","default","v","Config","exportDefault","collection","_config","mutationObject","collectionName","_name","_","isFunction","defaultOverrides","DDP","_CurrentMethodInvocation","get","optimistic","config","extend","mutationDefaults","_redisOplog","mutation","call","_channels"],"mappings":"AAAA,IAAIA,WAAJ;AAAgBC,MAAM,CAACC,IAAP,CAAY,6BAAZ,EAA0C;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACJ,IAAAA,WAAW,GAACI,CAAZ;AAAc;;AAA1B,CAA1C,EAAsE,CAAtE;AAAyE,IAAIC,MAAJ;AAAWJ,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA2B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACC,IAAAA,MAAM,GAACD,CAAP;AAAS;;AAArB,CAA3B,EAAkD,CAAlD;AAApGH,MAAM,CAACK,aAAP,CAQe,UAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,cAA/B,EAA+C;AAC1D,QAAMC,cAAc,GAAGH,UAAU,CAACI,KAAlC;;AAEA,MAAI,CAACH,OAAD,IAAYI,CAAC,CAACC,UAAF,CAAaL,OAAb,CAAhB,EAAuC;AACnCA,IAAAA,OAAO,GAAG,EAAV;AACH;;AAED,QAAMM,gBAAgB,GAAG,EAAzB;;AACA,MAAI,CAACC,GAAG,CAACC,wBAAJ,CAA6BC,GAA7B,EAAL,EAAyC;AACrC;AACA;AACA;AACA;AACA;AACA;AACAH,IAAAA,gBAAgB,CAACI,UAAjB,GAA8B,KAA9B;AACH;;AAED,MAAIC,MAAM,GAAGP,CAAC,CAACQ,MAAF,CAAS,EAAT,EAAaf,MAAM,CAACgB,gBAApB,EAAsCP,gBAAtC,EAAwDN,OAAxD,CAAb;;AAEA,MAAID,UAAU,CAACe,WAAf,EAA4B;AACxB,UAAM;AAACC,MAAAA;AAAD,QAAahB,UAAU,CAACe,WAA9B;;AACA,QAAIC,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACC,IAAT,CAAcjB,UAAd,EAA0BY,MAA1B,EAAkCV,cAAlC;AACH;AACJ;;AAEDU,EAAAA,MAAM,CAACM,SAAP,GAAmBzB,WAAW,CAACU,cAAD,EAAiBS,MAAjB,CAA9B;AAEA,SAAOA,MAAP;AACH,CAtCD;AAsCC","sourcesContent":["import getChannels from '../../cache/lib/getChannels';\nimport Config from '../../config';\n\n/**\n * @param collection\n * @param _config\n * @param mutationObject\n */\nexport default function (collection, _config, mutationObject) {\n    const collectionName = collection._name;\n\n    if (!_config || _.isFunction(_config)) {\n        _config = {};\n    }\n\n    const defaultOverrides = {};\n    if (!DDP._CurrentMethodInvocation.get()) {\n        // If we're not in a method, then we should never need to do optimistic\n        // ui processing.\n        //\n        // However, we allow users to really force it by explicitly passing\n        // optimistic: true if they want to use the local-dispatch code path\n        // rather than going through Redis.\n        defaultOverrides.optimistic = false;\n    }\n\n    let config = _.extend({}, Config.mutationDefaults, defaultOverrides, _config);\n\n    if (collection._redisOplog) {\n        const {mutation} = collection._redisOplog;\n        if (mutation) {\n            mutation.call(collection, config, mutationObject)\n        }\n    }\n\n    config._channels = getChannels(collectionName, config);\n\n    return config;\n};\n"]},"sourceType":"script","hash":"6caf127e8cff2241c112cfc8eee7ebfd39e40cfc"}

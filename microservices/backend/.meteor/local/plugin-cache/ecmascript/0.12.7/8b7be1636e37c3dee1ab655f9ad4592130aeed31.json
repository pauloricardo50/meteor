{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/AutoFormLayout.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/AutoForm2/client/test/AutoFormLayout.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/AutoFormLayout.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/AutoForm2/client/test/AutoFormLayout.spec.jsx"],"names":["React","expect","getMountedComponent","AutoFormLayout","AutoField","props","DemoComponent","describe","component","Component","beforeEach","reset","schemaKeys","it","layout","className","fields","find","length","to","equal","prop"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport getMountedComponent from '../../../../utils/testHelpers/getMountedComponent';\n\nimport AutoFormLayout from '../../AutoFormLayout';\n\nconst AutoField = props => <span {...props} />;\nconst DemoComponent = props => <span {...props} />;\n\ndescribe('AutoFormLayout', () => {\n  let props;\n  const component = () =>\n    getMountedComponent({ Component: AutoFormLayout, props });\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = { AutoField, schemaKeys: ['field1', 'field2', 'field3'] };\n  });\n\n  it('renders fields in a different layout', () => {\n    props.layout = [\n      { className: 'div1', fields: ['field1'] },\n      { className: 'div2', fields: ['field2'] },\n    ];\n\n    expect(component().find('.div1').length).to.equal(1);\n    expect(component().find('.div2').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field1\"]').length).to.equal(1);\n    expect(component().find('.div2 span[name=\"field2\"]').length).to.equal(1);\n  });\n\n  it('renders custom components', () => {\n    props.layout = {\n      className: 'div1',\n      fields: ['field1'],\n      Component: DemoComponent,\n    };\n\n    expect(component().find(DemoComponent).length).to.equal(1);\n    expect(component()\n      .find(DemoComponent)\n      .prop('className')).to.equal('div1');\n    expect(component()\n      .find(DemoComponent)\n      .find('span[name=\"field1\"]').length).to.equal(1);\n  });\n\n  it('renders all fields when a star is used in the field name', () => {\n    props.layout = [{ className: 'div1', fields: ['field*'] }];\n    props.schemaKeys = ['field1', 'field2', 'field3'];\n\n    expect(component().find('.div1').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field1\"]').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field2\"]').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field3\"]').length).to.equal(1);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/AutoForm2/client/test/AutoFormLayout.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/AutoForm2/client/test/AutoFormLayout.spec.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet getMountedComponent;\nmodule.link(\"../../../../utils/testHelpers/getMountedComponent\", {\n  default(v) {\n    getMountedComponent = v;\n  }\n\n}, 2);\nlet AutoFormLayout;\nmodule.link(\"../../AutoFormLayout\", {\n  default(v) {\n    AutoFormLayout = v;\n  }\n\n}, 3);\n\nconst AutoField = props => React.createElement(\"span\", props);\n\nconst DemoComponent = props => React.createElement(\"span\", props);\n\ndescribe('AutoFormLayout', () => {\n  let props;\n\n  const component = () => getMountedComponent({\n    Component: AutoFormLayout,\n    props\n  });\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = {\n      AutoField,\n      schemaKeys: ['field1', 'field2', 'field3']\n    };\n  });\n  it('renders fields in a different layout', () => {\n    props.layout = [{\n      className: 'div1',\n      fields: ['field1']\n    }, {\n      className: 'div2',\n      fields: ['field2']\n    }];\n    expect(component().find('.div1').length).to.equal(1);\n    expect(component().find('.div2').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field1\"]').length).to.equal(1);\n    expect(component().find('.div2 span[name=\"field2\"]').length).to.equal(1);\n  });\n  it('renders custom components', () => {\n    props.layout = {\n      className: 'div1',\n      fields: ['field1'],\n      Component: DemoComponent\n    };\n    expect(component().find(DemoComponent).length).to.equal(1);\n    expect(component().find(DemoComponent).prop('className')).to.equal('div1');\n    expect(component().find(DemoComponent).find('span[name=\"field1\"]').length).to.equal(1);\n  });\n  it('renders all fields when a star is used in the field name', () => {\n    props.layout = [{\n      className: 'div1',\n      fields: ['field*']\n    }];\n    props.schemaKeys = ['field1', 'field2', 'field3'];\n    expect(component().find('.div1').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field1\"]').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field2\"]').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field3\"]').length).to.equal(1);\n  });\n});","map":{"version":3,"sources":["imports/core/components/AutoForm2/client/test/AutoFormLayout.spec.jsx"],"names":["AutoField","props","DemoComponent","describe","component","getMountedComponent","Component","beforeEach","schemaKeys","it","className","fields","expect"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport getMountedComponent from '../../../../utils/testHelpers/getMountedComponent';\n\nimport AutoFormLayout from '../../AutoFormLayout';\n\nconst AutoField = props => <span {...props} />;\nconst DemoComponent = props => <span {...props} />;\n\ndescribe('AutoFormLayout', () => {\n  let props;\n  const component = () =>\n    getMountedComponent({ Component: AutoFormLayout, props });\n\n  beforeEach(() => {\n    getMountedComponent.reset();\n    props = { AutoField, schemaKeys: ['field1', 'field2', 'field3'] };\n  });\n\n  it('renders fields in a different layout', () => {\n    props.layout = [\n      { className: 'div1', fields: ['field1'] },\n      { className: 'div2', fields: ['field2'] },\n    ];\n\n    expect(component().find('.div1').length).to.equal(1);\n    expect(component().find('.div2').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field1\"]').length).to.equal(1);\n    expect(component().find('.div2 span[name=\"field2\"]').length).to.equal(1);\n  });\n\n  it('renders custom components', () => {\n    props.layout = {\n      className: 'div1',\n      fields: ['field1'],\n      Component: DemoComponent,\n    };\n\n    expect(component().find(DemoComponent).length).to.equal(1);\n    expect(component()\n      .find(DemoComponent)\n      .prop('className')).to.equal('div1');\n    expect(component()\n      .find(DemoComponent)\n      .find('span[name=\"field1\"]').length).to.equal(1);\n  });\n\n  it('renders all fields when a star is used in the field name', () => {\n    props.layout = [{ className: 'div1', fields: ['field*'] }];\n    props.schemaKeys = ['field1', 'field2', 'field3'];\n\n    expect(component().find('.div1').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field1\"]').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field2\"]').length).to.equal(1);\n    expect(component().find('.div1 span[name=\"field3\"]').length).to.equal(1);\n  });\n});\n"]},"sourceType":"script","hash":"8b7be1636e37c3dee1ab655f9ad4592130aeed31"}

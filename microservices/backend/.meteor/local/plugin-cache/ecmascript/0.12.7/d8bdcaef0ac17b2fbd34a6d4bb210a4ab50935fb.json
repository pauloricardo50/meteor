{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/FileService.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/files/server/FileService.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/FileService.js","inputSourceMap":{"version":3,"sources":["imports/core/api/files/server/FileService.js"],"names":["Mongo","readFileBuffer","removeFile","Meteor","HTTP_STATUS_CODES","FILE_STATUS","S3_ACLS","S3Service","getS3FileKey","FileService","docId","subdocument","prefix","listObjectsWithMetadata","then","results","map","formatFile","listFilesForDoc","groupFilesByCategory","key","status","VALID","updateMetadata","message","errorMessage","ERROR","deleteObject","deleteObjectsWithPrefix","files","reduce","groupedFiles","file","category","Key","split","currentCategoryFiles","collection","listFilesForDocByCategory","documents","Collection","get","update","_id","$set","fileName","name","keyParts","length","id","originalFilename","path","putObject","PUBLIC_READ_WRITE","updateDocumentsCache","keyExists","some","Error","NOT_FOUND","deletedFiles","remainingFiles"],"mappings":"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","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nimport { readFileBuffer, removeFile } from 'core/utils/filesUtils';\nimport { Meteor } from 'meteor/meteor';\nimport { HTTP_STATUS_CODES } from 'core/api/RESTAPI/server/restApiConstants';\nimport { FILE_STATUS, S3_ACLS } from '../fileConstants';\nimport S3Service from './S3Service';\nimport { getS3FileKey } from './meteor-slingshot-server';\n\nclass FileService {\n  listFilesForDoc = (docId, subdocument) => {\n    const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n    return S3Service.listObjectsWithMetadata(prefix).then(results =>\n      results.map(this.formatFile));\n  };\n\n  listFilesForDocByCategory = (docId, subdocument) =>\n    this.listFilesForDoc(docId, subdocument).then(this.groupFilesByCategory);\n\n  setFileStatus = (key, status) => {\n    if (status === FILE_STATUS.VALID) {\n      return S3Service.updateMetadata(key, { status, message: '' });\n    }\n\n    return S3Service.updateMetadata(key, { status });\n  };\n\n  setFileError = (key, errorMessage) =>\n    S3Service.updateMetadata(key, {\n      status: FILE_STATUS.ERROR,\n      message: errorMessage,\n    });\n\n  setFileValid = key =>\n    S3Service.updateMetadata(key, { status: FILE_STATUS.VALID, message: '' });\n\n  deleteFile = S3Service.deleteObject;\n\n  deleteAllFilesForDoc = (docId, subdocument) => {\n    const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n    return S3Service.deleteObjectsWithPrefix(prefix);\n  };\n\n  groupFilesByCategory = files =>\n    files.reduce((groupedFiles, file) => {\n      const category = file.Key.split('/')[1];\n      const currentCategoryFiles = groupedFiles[category] || [];\n      return { ...groupedFiles, [category]: [...currentCategoryFiles, file] };\n    }, {});\n\n  updateDocumentsCache = ({ docId, collection }) =>\n    this.listFilesForDocByCategory(docId).then(documents =>\n      Mongo.Collection.get(collection).update(\n        { _id: docId },\n        { $set: { documents } },\n      ));\n\n  formatFile = (file) => {\n    let fileName = file.name;\n    if (!fileName) {\n      const keyParts = file.Key.split('/');\n      fileName = keyParts[keyParts.length - 1];\n    }\n    return { ...file, name: fileName };\n  };\n\n  uploadFileAPI = ({ file, docId, id, collection }) => {\n    const { originalFilename, path } = file;\n    const key = getS3FileKey({ name: originalFilename }, { docId, id });\n\n    return S3Service.putObject(\n      readFileBuffer(path),\n      key,\n      {},\n      S3_ACLS.PUBLIC_READ_WRITE,\n    )\n      .then(() => this.updateDocumentsCache({ docId, collection }))\n      .then(() => this.listFilesForDoc(docId))\n      .then((files) => {\n        removeFile(path);\n        return { files };\n      });\n  };\n\n  deleteFileAPI = ({ docId, collection, key }) =>\n    this.listFilesForDoc(docId)\n      .then((files) => {\n        const keyExists = files.map(({ Key }) => Key).some(Key => Key === key);\n        if (!keyExists) {\n          throw new Meteor.Error(\n            HTTP_STATUS_CODES.NOT_FOUND,\n            `Key ${key} not found`,\n          );\n        }\n\n        return S3Service.deleteObject(key);\n      })\n      .then(() => this.updateDocumentsCache({ docId, collection }))\n      .then(() => this.listFilesForDoc(docId))\n      .then(files => ({ deletedFiles: [{ Key: key }], remainingFiles: files }));\n}\n\nexport default new FileService();\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/files/server/FileService.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/files/server/FileService.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet readFileBuffer, removeFile;\nmodule.link(\"../../../utils/filesUtils\", {\n  readFileBuffer(v) {\n    readFileBuffer = v;\n  },\n\n  removeFile(v) {\n    removeFile = v;\n  }\n\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 2);\nlet HTTP_STATUS_CODES;\nmodule.link(\"../../RESTAPI/server/restApiConstants\", {\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 3);\nlet FILE_STATUS, S3_ACLS;\nmodule.link(\"../fileConstants\", {\n  FILE_STATUS(v) {\n    FILE_STATUS = v;\n  },\n\n  S3_ACLS(v) {\n    S3_ACLS = v;\n  }\n\n}, 4);\nlet S3Service;\nmodule.link(\"./S3Service\", {\n  default(v) {\n    S3Service = v;\n  }\n\n}, 5);\nlet getS3FileKey;\nmodule.link(\"./meteor-slingshot-server\", {\n  getS3FileKey(v) {\n    getS3FileKey = v;\n  }\n\n}, 6);\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass FileService {\n  constructor() {\n    _defineProperty(this, \"listFilesForDoc\", (docId, subdocument) => {\n      const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n      return S3Service.listObjectsWithMetadata(prefix).then(results => results.map(this.formatFile));\n    });\n\n    _defineProperty(this, \"listFilesForDocByCategory\", (docId, subdocument) => this.listFilesForDoc(docId, subdocument).then(this.groupFilesByCategory));\n\n    _defineProperty(this, \"setFileStatus\", (key, status) => {\n      if (status === FILE_STATUS.VALID) {\n        return S3Service.updateMetadata(key, {\n          status,\n          message: ''\n        });\n      }\n\n      return S3Service.updateMetadata(key, {\n        status\n      });\n    });\n\n    _defineProperty(this, \"setFileError\", (key, errorMessage) => S3Service.updateMetadata(key, {\n      status: FILE_STATUS.ERROR,\n      message: errorMessage\n    }));\n\n    _defineProperty(this, \"setFileValid\", key => S3Service.updateMetadata(key, {\n      status: FILE_STATUS.VALID,\n      message: ''\n    }));\n\n    _defineProperty(this, \"deleteFile\", S3Service.deleteObject);\n\n    _defineProperty(this, \"deleteAllFilesForDoc\", (docId, subdocument) => {\n      const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n      return S3Service.deleteObjectsWithPrefix(prefix);\n    });\n\n    _defineProperty(this, \"groupFilesByCategory\", files => files.reduce((groupedFiles, file) => {\n      const category = file.Key.split('/')[1];\n      const currentCategoryFiles = groupedFiles[category] || [];\n      return (0, _objectSpread2.default)({}, groupedFiles, {\n        [category]: [...currentCategoryFiles, file]\n      });\n    }, {}));\n\n    _defineProperty(this, \"updateDocumentsCache\", ({\n      docId,\n      collection\n    }) => this.listFilesForDocByCategory(docId).then(documents => Mongo.Collection.get(collection).update({\n      _id: docId\n    }, {\n      $set: {\n        documents\n      }\n    })));\n\n    _defineProperty(this, \"formatFile\", file => {\n      let fileName = file.name;\n\n      if (!fileName) {\n        const keyParts = file.Key.split('/');\n        fileName = keyParts[keyParts.length - 1];\n      }\n\n      return (0, _objectSpread2.default)({}, file, {\n        name: fileName\n      });\n    });\n\n    _defineProperty(this, \"uploadFileAPI\", ({\n      file,\n      docId,\n      id,\n      collection\n    }) => {\n      const {\n        originalFilename,\n        path\n      } = file;\n      const key = getS3FileKey({\n        name: originalFilename\n      }, {\n        docId,\n        id\n      });\n      return S3Service.putObject(readFileBuffer(path), key, {}, S3_ACLS.PUBLIC_READ_WRITE).then(() => this.updateDocumentsCache({\n        docId,\n        collection\n      })).then(() => this.listFilesForDoc(docId)).then(files => {\n        removeFile(path);\n        return {\n          files\n        };\n      });\n    });\n\n    _defineProperty(this, \"deleteFileAPI\", ({\n      docId,\n      collection,\n      key\n    }) => this.listFilesForDoc(docId).then(files => {\n      const keyExists = files.map(({\n        Key\n      }) => Key).some(Key => Key === key);\n\n      if (!keyExists) {\n        throw new Meteor.Error(HTTP_STATUS_CODES.NOT_FOUND, `Key ${key} not found`);\n      }\n\n      return S3Service.deleteObject(key);\n    }).then(() => this.updateDocumentsCache({\n      docId,\n      collection\n    })).then(() => this.listFilesForDoc(docId)).then(files => ({\n      deletedFiles: [{\n        Key: key\n      }],\n      remainingFiles: files\n    })));\n  }\n\n}\n\nmodule.exportDefault(new FileService());","map":{"version":3,"sources":["imports/core/api/files/server/FileService.js"],"names":["prefix","subdocument","docId","S3Service","results","status","FILE_STATUS","message","errorMessage","key","files","category","file","currentCategoryFiles","groupedFiles","collection","documents","_id","$set","fileName","keyParts","name","path","getS3FileKey","originalFilename","id","readFileBuffer","S3_ACLS","removeFile","keyExists","Key","Meteor","HTTP_STATUS_CODES","deletedFiles","remainingFiles"],"mappings":"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","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nimport { readFileBuffer, removeFile } from 'core/utils/filesUtils';\nimport { Meteor } from 'meteor/meteor';\nimport { HTTP_STATUS_CODES } from 'core/api/RESTAPI/server/restApiConstants';\nimport { FILE_STATUS, S3_ACLS } from '../fileConstants';\nimport S3Service from './S3Service';\nimport { getS3FileKey } from './meteor-slingshot-server';\n\nclass FileService {\n  listFilesForDoc = (docId, subdocument) => {\n    const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n    return S3Service.listObjectsWithMetadata(prefix).then(results =>\n      results.map(this.formatFile));\n  };\n\n  listFilesForDocByCategory = (docId, subdocument) =>\n    this.listFilesForDoc(docId, subdocument).then(this.groupFilesByCategory);\n\n  setFileStatus = (key, status) => {\n    if (status === FILE_STATUS.VALID) {\n      return S3Service.updateMetadata(key, { status, message: '' });\n    }\n\n    return S3Service.updateMetadata(key, { status });\n  };\n\n  setFileError = (key, errorMessage) =>\n    S3Service.updateMetadata(key, {\n      status: FILE_STATUS.ERROR,\n      message: errorMessage,\n    });\n\n  setFileValid = key =>\n    S3Service.updateMetadata(key, { status: FILE_STATUS.VALID, message: '' });\n\n  deleteFile = S3Service.deleteObject;\n\n  deleteAllFilesForDoc = (docId, subdocument) => {\n    const prefix = subdocument ? `${docId}/${subdocument}` : docId;\n    return S3Service.deleteObjectsWithPrefix(prefix);\n  };\n\n  groupFilesByCategory = files =>\n    files.reduce((groupedFiles, file) => {\n      const category = file.Key.split('/')[1];\n      const currentCategoryFiles = groupedFiles[category] || [];\n      return { ...groupedFiles, [category]: [...currentCategoryFiles, file] };\n    }, {});\n\n  updateDocumentsCache = ({ docId, collection }) =>\n    this.listFilesForDocByCategory(docId).then(documents =>\n      Mongo.Collection.get(collection).update(\n        { _id: docId },\n        { $set: { documents } },\n      ));\n\n  formatFile = (file) => {\n    let fileName = file.name;\n    if (!fileName) {\n      const keyParts = file.Key.split('/');\n      fileName = keyParts[keyParts.length - 1];\n    }\n    return { ...file, name: fileName };\n  };\n\n  uploadFileAPI = ({ file, docId, id, collection }) => {\n    const { originalFilename, path } = file;\n    const key = getS3FileKey({ name: originalFilename }, { docId, id });\n\n    return S3Service.putObject(\n      readFileBuffer(path),\n      key,\n      {},\n      S3_ACLS.PUBLIC_READ_WRITE,\n    )\n      .then(() => this.updateDocumentsCache({ docId, collection }))\n      .then(() => this.listFilesForDoc(docId))\n      .then((files) => {\n        removeFile(path);\n        return { files };\n      });\n  };\n\n  deleteFileAPI = ({ docId, collection, key }) =>\n    this.listFilesForDoc(docId)\n      .then((files) => {\n        const keyExists = files.map(({ Key }) => Key).some(Key => Key === key);\n        if (!keyExists) {\n          throw new Meteor.Error(\n            HTTP_STATUS_CODES.NOT_FOUND,\n            `Key ${key} not found`,\n          );\n        }\n\n        return S3Service.deleteObject(key);\n      })\n      .then(() => this.updateDocumentsCache({ docId, collection }))\n      .then(() => this.listFilesForDoc(docId))\n      .then(files => ({ deletedFiles: [{ Key: key }], remainingFiles: files }));\n}\n\nexport default new FileService();\n"]},"sourceType":"script","hash":"d8bdcaef0ac17b2fbd34a6d4bb210a4ab50935fb"}

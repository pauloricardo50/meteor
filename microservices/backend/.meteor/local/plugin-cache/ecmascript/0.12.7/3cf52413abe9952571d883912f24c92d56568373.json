{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/test/LoanService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/loans/server/test/LoanService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/test/LoanService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/loans/server/test/LoanService.test.js"],"names":["expect","resetDatabase","Factory","faker","moment","checkEmails","generator","LoanService","OWN_FUNDS_TYPES","STEPS","EMAIL_IDS","ORGANISATION_TYPES","ORGANISATION_FEATURES","LOAN_STATUS","PROPERTY_CATEGORY","UserService","BorrowerService","PropertyService","LenderService","OfferService","generateOrganisationsWithLenderRules","describe","timeout","loanId","loan","beforeEach","it","create","contacts","name","title","_id","get","length","to","equal","popValue","object","deep","otherBorrower","borrowerId","otherBorrower2","borrowerIds","remove","find","count","propertyId","propertyIds","ids","borrowers","loans","lenders","countAll","userId","fullLoanInsert","findOne","structures","id","properties","addPropertyToLoan","forEach","promotionOptionId","i","addNewStructure","have","selectedStructure","description","fortuneUsed","id1","structure1","id2","name2","structure2","not","structureId","removeStructure","throw","duplicateStructure","propertyWork","undefined","updateStructure","structure","include","filter","index","structureId2","selectStructure","badId","property1","property2","getNewLoanName","insert","Date","borrowerId2","ownFunds","value","type","BANK_3A","BANK_FORTUNE","cleanupRemovedBorrower","oldBorrowerId","switchBorrower","fetch","borrowerId1","propertyId1","propertyId2","assignLoanToUser","category","PRO","users","_factory","organisations","referralId","user","fetchOne","$filters","referredByUserLink","referredByOrganisationLink","referredByUser","addresses","insertMultipleOffers","numberOfLenders","numberOfOffersPerLender","offerIds","Array","_","address","internet","email","contactId","emails","organisationId","contactIds","lenderId","lender","offer","interest10","maxAmount","assignedEmployee","address1","zipCode","city","sendNegativeFeedbackToAllLenders","then","some","step","SOLVENCY","setStep","nextStep","REQUEST","firstName","lastName","verified","assignedEmployeeId","OFFERS","emailId","response","status","template","message","from_email","subject","global_merge_vars","from_name","FIND_LENDER_NOTIFICATION","content","CLOSING","noExpect","calc","getLoanCalculator","organisationName","organisation","lenderRules","offers","offerId","promotions","lenderOrganisation","bankFortune","salary","insurance2","number","mainBorrowRatio","min","max","secondaryBorrowRatio","BANK","features","LENDER","setMaxPropertyValueWithoutBorrowRatio","canton","maxPropertyValue","date","main","second","format","borrowRatio","propertyValue","anonymous","UNSUCCESSFUL","expireAnonymousLoans","promises","push","rawCollection","updatedAt","subtract","toDate","Promise","all","insertAnonymousLoan","displayWelcomeScreen","proPropertyId"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport faker from 'faker/locale/fr';\nimport moment from 'moment';\n\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport generator from '../../../factories';\nimport LoanService from '../LoanService';\nimport {\n  OWN_FUNDS_TYPES,\n  STEPS,\n  EMAIL_IDS,\n  ORGANISATION_TYPES,\n  ORGANISATION_FEATURES,\n  LOAN_STATUS,\n  PROPERTY_CATEGORY,\n} from '../../../constants';\nimport UserService from '../../../users/server/UserService';\nimport BorrowerService from '../../../borrowers/server/BorrowerService';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport LenderService from '../../../lenders/server/LenderService';\nimport OfferService from '../../../offers/server/OfferService';\nimport { generateOrganisationsWithLenderRules } from '../../../organisations/server/test/testHelpers.test';\n\ndescribe('LoanService', function () {\n  this.timeout(10000);\n  let loanId;\n  let loan;\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('popValue', () => {\n    it('removes a value from an array', () => {\n      loanId = Factory.create('loan', {\n        contacts: [{ name: 'Joe', title: 'Mah dude' }],\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.contacts.length).to.equal(1);\n\n      LoanService.popValue({ loanId, object: { contacts: 1 } });\n\n      loan = LoanService.get(loanId);\n      expect(loan.contacts).to.deep.equal([]);\n    });\n  });\n\n  describe('remove', () => {\n    it('removes the borrowers via a before remove hook', () => {\n      // Add other borrowers to simulate a real DB\n      const otherBorrower = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      const otherBorrower2 = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [borrowerId] })._id;\n\n      LoanService.remove({ loanId });\n\n      expect(LoanService.find({}).count()).to.equal(0);\n      expect(BorrowerService.find({ _id: borrowerId }).count()).to.equal(0);\n      expect(BorrowerService.find({ _id: otherBorrower }).count()).to.equal(1);\n      expect(BorrowerService.find({ _id: otherBorrower2 }).count()).to.equal(1);\n    });\n\n    it('removes the properties via a before remove hook', () => {\n      const propertyId = Factory.create('property')._id;\n      loanId = Factory.create('loan', { propertyIds: [propertyId] })._id;\n\n      LoanService.remove({ loanId });\n\n      expect(LoanService.find({}).count()).to.equal(0);\n      expect(PropertyService.find({}).count()).to.equal(0);\n    });\n\n    it('does not remove if a borrower is linked to multiple loans', () => {\n      const { ids } = generator({ borrowers: { loans: [{}, {}] } });\n      loanId = ids.loans[0];\n\n      LoanService.remove({ loanId });\n\n      expect(LoanService.find({}).count()).to.equal(1);\n      expect(BorrowerService.find({}).count()).to.equal(1);\n    });\n\n    it('autoremoves lenders', () => {\n      const { ids } = generator({ loans: { lenders: [{}, {}, {}] } });\n      loanId = ids.loans[0];\n\n      expect(LenderService.countAll()).to.equal(3);\n\n      LoanService.remove({ loanId });\n\n      expect(LenderService.countAll()).to.equal(0);\n    });\n  });\n\n  describe('fullLoanInsert', () => {\n    let userId;\n\n    beforeEach(() => {\n      userId = 'testId';\n    });\n\n    it('inserts a loan', () => {\n      expect(LoanService.countAll()).to.equal(0, 'loans 0');\n\n      LoanService.fullLoanInsert({ userId });\n\n      expect(LoanService.countAll()).to.equal(1, 'loans 1');\n    });\n\n    it('adds userId', () => {\n      LoanService.fullLoanInsert({ userId });\n\n      expect(LoanService.findOne({}).userId).to.equal(userId, 'loans userId');\n    });\n  });\n\n  describe('addPropertyToLoan', () => {\n    it('adds the propertyId on all structures', () => {\n      generator({\n        loans: { _id: 'loanId', structures: [{ id: '1' }, { id: '2' }] },\n        properties: { _id: 'propertyId' },\n      });\n\n      LoanService.addPropertyToLoan({\n        loanId: 'loanId',\n        propertyId: 'propertyId',\n      });\n\n      loan = LoanService.get('loanId');\n\n      loan.structures.forEach(({ propertyId }) => {\n        expect(propertyId).to.equal('propertyId');\n      });\n    });\n\n    it('only adds the property if it is not defined', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          structures: [\n            { id: '1', propertyId: 'a' },\n            { id: '2', promotionOptionId: 'b' },\n            { id: '3' },\n          ],\n        },\n        properties: { _id: 'propertyId' },\n      });\n\n      LoanService.addPropertyToLoan({\n        loanId: 'loanId',\n        propertyId: 'propertyId',\n      });\n\n      loan = LoanService.get('loanId');\n\n      loan.structures.forEach(({ propertyId, promotionOptionId }, i) => {\n        if (i === 2) {\n          expect(propertyId).to.equal('propertyId');\n        } else {\n          expect(!!(propertyId || promotionOptionId)).to.equal(true);\n        }\n      });\n    });\n  });\n\n  describe('addNewStructure', () => {\n    it('adds a new structure to a loan', () => {\n      loanId = Factory.create('loan')._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures).to.deep.equal([]);\n\n      LoanService.addNewStructure({ loanId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures).to.have.length(1);\n      expect(typeof loan.structures[0].id).to.equal('string');\n    });\n\n    it('selects the structure if it is the first one', () => {\n      loanId = Factory.create('loan')._id;\n      LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n      expect(loan.selectedStructure).to.equal(loan.structures[0].id);\n    });\n\n    it('does not select the structure if it is not the first one', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: 'first' }],\n        selectedStructure: 'first',\n      })._id;\n      LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n      expect(loan.selectedStructure).to.equal('first');\n    });\n\n    it('duplicates the current chosen structure if it is not the first one', () => {\n      loanId = Factory.create('loan', {\n        structures: [\n          {\n            id: 'testId',\n            name: 'joe',\n            description: 'hello',\n            fortuneUsed: 100,\n          },\n        ],\n        selectedStructure: 'testId',\n      })._id;\n      LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n      const { id: id1, name, ...structure1 } = loan.structures[0];\n      const { id: id2, name: name2, ...structure2 } = loan.structures[1];\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n      expect(name2).to.equal('Plan financier 2');\n    });\n\n    it('returns the id of the new structure', () => {\n      loanId = Factory.create('loan')._id;\n      const structureId = LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n      expect(loan.structures[0].id).to.equal(structureId);\n    });\n  });\n\n  describe('removeStructure', () => {\n    it('removes an existing structure from a loan', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: '1' }, { id: '2' }],\n        selectedStructure: '1',\n      })._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n\n      const structureId = loan.structures[1].id;\n\n      LoanService.removeStructure({ loanId, structureId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n      expect(loan.structures[0].id).to.not.equal(structureId);\n    });\n\n    it('throws if you try to delete the current selected structure', () => {\n      const structureId = 'someId';\n      loanId = Factory.create('loan', {\n        structures: [{ id: structureId }],\n        selectedStructure: structureId,\n      })._id;\n\n      expect(() =>\n        LoanService.removeStructure({ loanId, structureId })).to.throw('pouvez pas');\n    });\n\n    it('removes a duplicate structure', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: '1' }],\n        selectedStructure: '1',\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId: '1' });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n\n      LoanService.removeStructure({\n        loanId,\n        structureId: loan.structures[1].id,\n      });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n    });\n\n    it('works for this edge case', () => {\n      loanId = Factory.create('loan', {\n        structures: [\n          {\n            id: 'poKbbHPf3FTKWt7vd',\n            propertyWork: 339000,\n          },\n          {\n            id: 'CfN4k8WKqRySCfvns',\n            propertyWork: 339000,\n          },\n        ],\n      })._id;\n\n      LoanService.removeStructure({ loanId, structureId: 'CfN4k8WKqRySCfvns' });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n    });\n  });\n\n  describe('updateStructure', () => {\n    it('updates a structure', () => {\n      const structureId = 'testId';\n      const propertyId = 'property1';\n      loanId = Factory.create('loan', {\n        structures: [\n          { id: structureId },\n          { id: `${structureId}0` },\n          { id: `${structureId}1` },\n        ],\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.structures.propertyId).to.equal(undefined);\n      LoanService.updateStructure({\n        loanId,\n        structureId,\n        structure: { propertyId },\n      });\n\n      loan = LoanService.get(loanId);\n      // This structure is correct\n      expect(loan.structures.find(({ id }) => id === structureId)).to.deep.include({ id: structureId, propertyId });\n\n      // Other structures are unaffected\n      loan.structures\n        .filter(({ id }) => id !== structureId)\n        .forEach((structure, index) => {\n          expect(structure).to.deep.include({\n            id: structureId + index,\n          });\n        });\n    });\n  });\n\n  describe('selectStructure', () => {\n    it('selects an existing structure', () => {\n      const structureId = 'testId';\n      const structureId2 = 'testId2';\n\n      loanId = Factory.create('loan', {\n        structures: [{ id: structureId }, { id: structureId2 }],\n        selectedStructure: structureId,\n      })._id;\n\n      LoanService.selectStructure({ loanId, structureId: structureId2 });\n      const { selectedStructure } = LoanService.get(loanId);\n\n      expect(selectedStructure).to.equal(structureId2);\n    });\n\n    it('throws if the structure does not exist', () => {\n      loanId = Factory.create('loan')._id;\n      const badId = 'inexistentId';\n\n      expect(() =>\n        LoanService.selectStructure({ loanId, structureId: badId })).to.throw(badId);\n    });\n  });\n\n  describe('duplicateStructure', () => {\n    it('duplicates a structure with a new id', () => {\n      const structureId = 'testId';\n\n      loanId = Factory.create('loan', {\n        structures: [\n          {\n            id: structureId,\n            name: 'joe',\n            description: 'hello',\n            fortuneUsed: 100,\n          },\n        ],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n      const { id: id1, name, ...structure1 } = loan.structures[0];\n      const { id: id2, name: name2, ...structure2 } = loan.structures[1];\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n    });\n\n    it('duplicates properly when multiple properties exist', () => {\n      const structureId = 'testId';\n      const property1 = 'property1';\n      const property2 = 'property2';\n\n      loanId = Factory.create('loan', {\n        propertyIds: [property1, property2],\n        structures: [\n          {\n            id: structureId,\n            name: 'joe',\n            description: 'hello',\n            fortuneUsed: 100,\n            propertyId: property2,\n          },\n        ],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId });\n\n      loan = LoanService.get(loanId);\n\n      const { id: id1, name, ...structure1 } = loan.structures[0];\n      const { id: id2, name: name2, ...structure2 } = loan.structures[1];\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n    });\n\n    it('adds \"- copie\" to the title', () => {\n      const structureId = 'testId';\n      const name = 'my structure';\n\n      loanId = Factory.create('loan', {\n        structures: [{ id: structureId, name }],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures[1].name).to.equal(`${name} - copie`);\n    });\n\n    it('inserts the duplicated structure right next to the duplicating one', () => {\n      const structureId = 'testId';\n      const name = 'structure';\n      loanId = Factory.create('loan', {\n        structures: [\n          { id: structureId + 0, name: name + 0 },\n          { id: structureId + 1, name: name + 1 },\n        ],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId: structureId + 0 });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(3);\n      expect(loan.structures[0].name).to.equal(name + 0);\n      expect(loan.structures[1].name).to.equal(`${name + 0} - copie`);\n      expect(loan.structures[2].name).to.equal(name + 1);\n    });\n\n    it('duplicates with a good name if no name is on the structure', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: 'testId' }],\n        selectedStructure: 'testId',\n      })._id;\n      LoanService.duplicateStructure({ loanId, structureId: 'testId' });\n      loan = LoanService.get(loanId);\n      expect(loan.structures[1].name).to.equal('Plan financier - copie');\n    });\n  });\n\n  describe('getNewLoanName', () => {\n    it('returns 19-0001 for the very first loan', () => {\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0001');\n    });\n\n    it('returns 19-0002 for the second loan', () => {\n      loanId = LoanService.insert({ loan: {} });\n      loan = LoanService.get(loanId);\n      expect(loan.name).to.equal('19-0001');\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0002');\n    });\n\n    it('sorts loans properly 1', () => {\n      Factory.create('loan', { name: '19-0009' });\n      Factory.create('loan', { name: '19-0010' });\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0011');\n    });\n\n    it('sorts loans properly even if created in different order', () => {\n      Factory.create('loan', { name: '19-0955' });\n      Factory.create('loan', { name: '19-0153' });\n      Factory.create('loan', { name: '19-0001' });\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0956');\n    });\n\n    it('returns 19-1234 for the nth loan', () => {\n      Factory.create('loan', { name: '19-1233' });\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-1234');\n    });\n\n    it('does not break if a 10000th loan is added', () => {\n      Factory.create('loan', { name: '19-9999' });\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-10000');\n    });\n\n    it('handles new year properly', () => {\n      Factory.create('loan', { name: '19-0003' });\n      const name = LoanService.getNewLoanName(new Date(2020, 1, 1));\n      expect(name).to.equal('20-0001');\n    });\n  });\n\n  describe('loan name regEx', () => {\n    it('allows loan names with correct format', () => {\n      expect(() => Factory.create('loan', { name: '18-0202' })).to.not.throw();\n    });\n\n    it('does not allow loan names with incorrect format', () => {\n      expect(() => Factory.create('loan', { name: '18-202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '1-202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '18202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '0202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: 'abc' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '18-a202' })).to.throw('regular expression');\n    });\n  });\n\n  describe('cleanupRemovedBorrower', () => {\n    it('removes all occurences of a borrower in structures', () => {\n      const borrowerId = 'dude';\n      const borrowerId2 = 'dude2';\n      loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId, borrowerId2],\n        structures: [\n          {\n            id: 'structId',\n            ownFunds: [\n              { borrowerId, value: 100, type: OWN_FUNDS_TYPES.BANK_3A },\n              {\n                borrowerId: borrowerId2,\n                value: 300,\n                type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n              },\n            ],\n          },\n        ],\n      })._id;\n\n      LoanService.cleanupRemovedBorrower({ borrowerId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures[0].ownFunds.length).to.equal(1);\n      expect(loan.structures[0].ownFunds[0].borrowerId).to.equal(borrowerId2);\n    });\n  });\n\n  describe('switchBorrower', () => {\n    it('switches a borrowerId with a new one', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId] })._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([oldBorrowerId]);\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([borrowerId]);\n    });\n\n    it('switches a borrowerId with a new one with multiple borrowers', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId, 'dude'] })\n        ._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([oldBorrowerId, 'dude']);\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([borrowerId, 'dude']);\n    });\n\n    it('deletes the old borrower if it is only on this loan', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId] })._id;\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      const borrowers = BorrowerService.find({}).fetch();\n\n      expect(borrowers.length).to.equal(1);\n    });\n\n    it('does not delete the old borrower if it is only on this loan', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId] })._id;\n      Factory.create('loan', { borrowerIds: [oldBorrowerId] });\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      const borrowers = BorrowerService.find({}).fetch();\n\n      expect(borrowers.length).to.equal(2);\n    });\n\n    it('throws if the same borrower is tried to be added twice', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', {\n        borrowerIds: [oldBorrowerId, borrowerId],\n      })._id;\n\n      expect(() =>\n        LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId })).to.throw('déjà');\n    });\n  });\n\n  describe('assignLoanToUser', () => {\n    it('assigns all properties and borrowers to the new user', () => {\n      const userId = Factory.create('user')._id;\n      const borrowerId1 = Factory.create('borrower')._id;\n      const borrowerId2 = Factory.create('borrower')._id;\n      const propertyId1 = Factory.create('property')._id;\n      const propertyId2 = Factory.create('property')._id;\n      loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId1, borrowerId2],\n        propertyIds: [propertyId1, propertyId2],\n      })._id;\n\n      LoanService.assignLoanToUser({ loanId, userId });\n\n      expect(LoanService.get(loanId).userId).to.equal(userId);\n      expect(BorrowerService.get(borrowerId1).userId).to.equal(userId);\n      expect(BorrowerService.get(borrowerId2).userId).to.equal(userId);\n      expect(PropertyService.get(propertyId1).userId).to.equal(userId);\n      expect(PropertyService.get(propertyId2).userId).to.equal(userId);\n    });\n\n    it('throws if a borrower is assigned to multiple loans', () => {\n      generator({\n        loans: [\n          { _id: 'loanId', borrowers: { _id: 'borr1' } },\n          { borrowers: [{ _id: 'borr1' }, {}] },\n        ],\n      });\n\n      expect(() =>\n        LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'dude' })).to.throw('emprunteur');\n    });\n\n    it('throws if a property is assigned to multiple loans', () => {\n      generator({\n        loans: [\n          { _id: 'loanId', properties: { _id: 'propId1' } },\n          { properties: [{ _id: 'propId1' }, {}] },\n        ],\n      });\n\n      expect(() =>\n        LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'dude' })).to.throw('bien immobilier');\n    });\n\n    it('does not throw for a PRO property, and assigns only USER properties', () => {\n      generator({\n        loans: [\n          { properties: { _id: 'propId1', category: PROPERTY_CATEGORY.PRO } },\n          {\n            _id: 'loanId',\n            properties: [{ _id: 'propId2' }, { _id: 'propId1' }],\n          },\n        ],\n      });\n\n      expect(() =>\n        LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'dude' })).to.not.throw();\n      expect(PropertyService.get('propId1').userId).to.equal(undefined);\n      expect(PropertyService.get('propId2').userId).to.equal('dude');\n    });\n\n    it('refers a user if this is his first loan', () => {\n      generator({\n        users: [\n          { _id: 'userId' },\n          {\n            _id: 'proId',\n            _factory: 'pro',\n            organisations: { _id: 'orgId' },\n          },\n        ],\n        loans: { _id: 'loanId', referralId: 'proId' },\n      });\n\n      LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'userId' });\n\n      const user = UserService.fetchOne({\n        $filters: { _id: 'userId' },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n      });\n\n      expect(user).to.deep.include({\n        referredByUserLink: 'proId',\n        referredByOrganisationLink: 'orgId',\n      });\n    });\n\n    it('does not change referredBy if it is already set', () => {\n      generator({\n        users: [\n          { _id: 'userId', referredByUser: { _id: 'proId1' } },\n          {\n            _id: 'proId2',\n            _factory: 'pro',\n            organisations: { _id: 'orgId' },\n          },\n        ],\n        loans: { _id: 'loanId', referralId: 'proId2' },\n      });\n\n      LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'userId' });\n\n      const user = UserService.fetchOne({\n        $filters: { _id: 'userId' },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n      });\n\n      expect(user).to.deep.equal({\n        _id: 'userId',\n        referredByUserLink: 'proId1',\n      });\n    });\n  });\n\n  describe('sendNegativeFeedbackToAllLenders', () => {\n    let addresses = [];\n    const insertMultipleOffers = ({\n      numberOfLenders,\n      numberOfOffersPerLender,\n    }) => {\n      let offerIds = [];\n\n      [...Array(numberOfLenders)].forEach((_, index) => {\n        // Create contact\n        const address = faker.internet.email();\n        addresses = [...addresses, address];\n        const contactId = Factory.create('contact', { emails: [{ address }] })\n          ._id;\n\n        // Create org\n        const organisationId = Factory.create('organisation', {\n          contactIds: [{ _id: contactId }],\n          name: `org ${index}`,\n        })._id;\n\n        // Create lender\n        const lenderId = LenderService.insert({\n          lender: { loanId },\n          organisationId,\n          contactId,\n        });\n\n        // Create offers\n        [...Array(numberOfOffersPerLender)].forEach(() => {\n          offerIds = [\n            ...offerIds,\n            OfferService.insert({\n              offer: { interest10: 1, maxAmount: 1000000, lenderId },\n            }),\n          ];\n        });\n      });\n\n      return offerIds;\n    };\n\n    beforeEach(() => {\n      resetDatabase();\n      loanId = 'someLoan';\n      generator({\n        users: [\n          { _id: 'adminId', _factory: 'adminEpotek' },\n          {\n            _id: 'userId',\n            assignedEmployee: { _id: 'adminId' },\n            loans: {\n              _id: loanId,\n              borrowers: {},\n              properties: {\n                _id: 'propertyId',\n                address1: 'rue du lac 31',\n                zipCode: 1400,\n                city: 'Yverdon',\n              },\n              structures: [{ id: 'struct', propertyId: 'propertyId' }],\n              selectedStructure: 'struct',\n            },\n          },\n        ],\n      });\n\n      addresses = [];\n    });\n\n    it('sends a negative feedback to all lenders', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 1;\n\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender,\n      });\n\n      expect(offerIds.length).to.equal(numberOfLenders * numberOfOffersPerLender);\n\n      return LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(numberOfLenders))\n        .then((emails) => {\n          expect(emails.length).to.equal(numberOfLenders);\n          addresses.forEach(email =>\n            expect(emails.some(({ address }) => address === email)).to.equal(true));\n        });\n    });\n\n    it('sends a negative feedback to all lenders once only', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 10;\n\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender,\n      });\n\n      expect(offerIds.length).to.equal(numberOfLenders * numberOfOffersPerLender);\n\n      return LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(numberOfLenders))\n        .then((emails) => {\n          expect(emails.length).to.equal(numberOfLenders);\n          addresses.forEach(email =>\n            expect(emails.some(({ address }) => address === email)).to.equal(true));\n        });\n    });\n\n    it('does not send any feedback if there is no lender', () =>\n      LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(0))\n        .then((emails) => {\n          expect(emails.length).to.equal(0);\n        }));\n\n    it('does not send any feedback if there is no offer', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 0;\n\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender,\n      });\n\n      expect(offerIds.length).to.equal(0);\n\n      return LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(0))\n        .then((emails) => {\n          expect(emails.length).to.equal(0);\n        });\n    });\n  });\n\n  describe('setStep', () => {\n    it('sets the step', () => {\n      generator({\n        loans: { _id: 'id', step: STEPS.SOLVENCY },\n      });\n\n      LoanService.setStep({ loanId: 'id', nextStep: STEPS.REQUEST });\n\n      loan = LoanService.get('id');\n\n      expect(loan.step).to.equal(STEPS.REQUEST);\n    });\n\n    it('sends a notification email if the step goes from SOLVENCY to OFFERS', () => {\n      generator({\n        users: {\n          _id: 'admin',\n          _factory: 'admin',\n          firstName: 'Admin',\n          lastName: 'User',\n        },\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.SOLVENCY,\n          user: {\n            emails: [{ address: 'john@doe.com', verified: false }],\n            assignedEmployeeId: 'admin',\n          },\n        },\n      });\n\n      LoanService.setStep({ loanId: 'myLoan', nextStep: STEPS.OFFERS });\n\n      loan = LoanService.get('myLoan');\n\n      expect(loan.step).to.equal(STEPS.OFFERS);\n\n      return checkEmails(1).then((emails) => {\n        const {\n          emailId,\n          address,\n          response: { status },\n          template: {\n            message: { from_email, subject, global_merge_vars, from_name },\n          },\n        } = emails[0];\n\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.FIND_LENDER_NOTIFICATION);\n        expect(address).to.equal('john@doe.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.include('[e-Potek] Identifiez votre prêteur');\n        expect(global_merge_vars.find(({ name }) => name === 'CTA_URL').content).to.include('/loans/myLoan');\n        expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('Admin User');\n      });\n    });\n\n    it('sends a notification email if the step goes from REQUEST to OFFERS', () => {\n      generator({\n        users: { _id: 'admin' },\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.REQUEST,\n          user: {\n            emails: [{ address: 'john@doe.com', verified: false }],\n            assignedEmployeeId: 'admin',\n          },\n        },\n      });\n      LoanService.setStep({ loanId: 'myLoan', nextStep: STEPS.OFFERS });\n\n      return checkEmails(1).then((emails) => {\n        const {\n          emailId,\n          response: { status },\n        } = emails[0];\n\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.FIND_LENDER_NOTIFICATION);\n      });\n    });\n\n    it('does not send a notification email if the step goes from REQUEST to OFFERS', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.CLOSING,\n          user: { emails: [{ address: 'john@doe.com', verified: false }] },\n        },\n      });\n      LoanService.setStep({ loanId: 'myLoan', nextStep: STEPS.OFFERS });\n\n      return checkEmails(1, { timeout: 2000, noExpect: true }).then((emails) => {\n        expect(emails.length).to.equal(0);\n      });\n    });\n  });\n\n  describe('getLoanCalculator', () => {\n    it('returns an uninitialized calculator by default', () => {\n      generator({ loans: { _id: 'myLoan' } });\n\n      const calc = LoanService.getLoanCalculator({ loanId: 'myLoan' });\n\n      expect(calc.organisationName).to.equal(undefined);\n    });\n\n    it('initializes a calculator if an offer has been chosen', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          lenders: {\n            organisation: { name: 'Org1', lenderRules: {} },\n            offers: { _id: 'offerId' },\n          },\n          structures: [{ offerId: 'offerId', id: 'struct' }],\n          selectedStructure: 'struct',\n        },\n      });\n\n      const calc = LoanService.getLoanCalculator({ loanId: 'myLoan' });\n\n      expect(calc.organisationName).to.equal('Org1');\n    });\n\n    it('initializes a calculator if a promotion has a lenderOrganisation on it', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          promotions: {\n            lenderOrganisation: { name: 'Org2', lenderRules: {} },\n          },\n        },\n      });\n\n      const calc = LoanService.getLoanCalculator({ loanId: 'myLoan' });\n\n      expect(calc.organisationName).to.equal('Org2');\n    });\n  });\n\n  describe('setMaxPropertyValueWithoutBorrowRatio', function () {\n    this.timeout(10000);\n\n    it('finds the ideal borrowRatio', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        },\n        organisations: [\n          ...generateOrganisationsWithLenderRules({\n            number: 5,\n            mainBorrowRatio: { min: 0.65, max: 0.9 },\n            secondaryBorrowRatio: { min: 0.5, max: 0.7 },\n          }),\n          {\n            name: 'no lender rules',\n            type: ORGANISATION_TYPES.BANK,\n            features: [ORGANISATION_FEATURES.LENDER],\n          },\n        ],\n      });\n\n      LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: 'loanId',\n        canton: 'GE',\n      });\n\n      const {\n        maxPropertyValue: { canton, date, main, second },\n      } = LoanService.fetchOne({\n        $filters: { _id: 'loanId' },\n        maxPropertyValue: 1,\n      });\n\n      expect(canton).to.equal('GE');\n      expect(moment(date).format('YYYY-MM-DD')).to.equal(moment().format('YYYY-MM-DD'));\n      expect(main.min.borrowRatio).to.equal(0.65);\n      expect(main.min.propertyValue).to.equal(1496000);\n      expect(main.max.borrowRatio).to.equal(0.835);\n      expect(main.max.propertyValue).to.equal(2761000);\n      expect(second.min.borrowRatio).to.equal(0.5);\n      expect(second.min.propertyValue).to.equal(909000);\n      expect(second.max.borrowRatio).to.equal(0.65);\n      expect(second.max.propertyValue).to.equal(1245000);\n    });\n\n    it('Only uses the promotion lender', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n          promotions: {\n            lenderOrganisation: generateOrganisationsWithLenderRules({\n              number: 1,\n              mainBorrowRatio: { min: 0.75, max: 0.75 },\n              secondaryBorrowRatio: { min: 0.7, max: 0.7 },\n            }),\n          },\n        },\n      });\n\n      LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: 'loanId',\n        canton: 'GE',\n      });\n\n      const {\n        maxPropertyValue: { canton, date, main, second },\n      } = LoanService.fetchOne({\n        $filters: { _id: 'loanId' },\n        maxPropertyValue: 1,\n      });\n\n      expect(canton).to.equal('GE');\n      expect(moment(date).format('YYYY-MM-DD')).to.equal(moment().format('YYYY-MM-DD'));\n      expect(main.min).to.equal(undefined);\n      expect(main.max.borrowRatio).to.equal(0.75);\n      expect(main.max.propertyValue).to.equal(1988000);\n      expect(second.min).to.equal(undefined);\n      expect(second.max.borrowRatio).to.equal(0.7);\n      expect(second.max.propertyValue).to.equal(1420000);\n    });\n  });\n\n  describe('expireAnonymousLoans', () => {\n    it('does not update any unmatched loans', () => {\n      generator({\n        loans: [\n          { anonymous: true },\n          { anonymous: true, status: LOAN_STATUS.UNSUCCESSFUL },\n        ],\n      });\n\n      expect(LoanService.expireAnonymousLoans()).to.equal(0);\n    });\n\n    it('only updates loans from more than a week ago', async () => {\n      const promises = [];\n      for (let index = 0; index < 10; index++) {\n        promises.push(LoanService.rawCollection.insert({\n          anonymous: true,\n          updatedAt: moment()\n            .subtract(index, 'days')\n            .toDate(),\n          _id: index,\n          name: index,\n        }));\n      }\n\n      await Promise.all(promises);\n\n      expect(LoanService.expireAnonymousLoans()).to.equal(5);\n    });\n\n    it('does not update loans already at UNSUCCESSFUL status', async () => {\n      await LoanService.rawCollection.insert({\n        anonymous: true,\n        updatedAt: moment()\n          .subtract(10, 'days')\n          .toDate(),\n        _id: 'a',\n        name: 'b',\n        status: LOAN_STATUS.UNSUCCESSFUL,\n      });\n\n      expect(LoanService.expireAnonymousLoans()).to.equal(0);\n    });\n  });\n\n  describe('insertAnonymousLoan', () => {\n    it('inserts an anonymous loan', () => {\n      LoanService.insertAnonymousLoan({ referralId: 'someId' });\n\n      expect(LoanService.findOne({})).to.deep.include({\n        anonymous: true,\n        displayWelcomeScreen: false,\n        referralId: 'someId',\n      });\n    });\n\n    it('creates a link with a property if provided', () => {\n      generator({ properties: { _id: 'propertyId' } });\n      LoanService.insertAnonymousLoan({ proPropertyId: 'propertyId' });\n\n      expect(LoanService.findOne({})).to.deep.include({\n        propertyIds: ['propertyId'],\n      });\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/loans/server/test/LoanService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/loans/server/test/LoanService.test.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet faker;\nmodule.link(\"faker/locale/fr\", {\n  default(v) {\n    faker = v;\n  }\n\n}, 3);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 4);\nlet checkEmails;\nmodule.link(\"../../../../utils/testHelpers\", {\n  checkEmails(v) {\n    checkEmails = v;\n  }\n\n}, 5);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 6);\nlet LoanService;\nmodule.link(\"../LoanService\", {\n  default(v) {\n    LoanService = v;\n  }\n\n}, 7);\nlet OWN_FUNDS_TYPES, STEPS, EMAIL_IDS, ORGANISATION_TYPES, ORGANISATION_FEATURES, LOAN_STATUS, PROPERTY_CATEGORY;\nmodule.link(\"../../../constants\", {\n  OWN_FUNDS_TYPES(v) {\n    OWN_FUNDS_TYPES = v;\n  },\n\n  STEPS(v) {\n    STEPS = v;\n  },\n\n  EMAIL_IDS(v) {\n    EMAIL_IDS = v;\n  },\n\n  ORGANISATION_TYPES(v) {\n    ORGANISATION_TYPES = v;\n  },\n\n  ORGANISATION_FEATURES(v) {\n    ORGANISATION_FEATURES = v;\n  },\n\n  LOAN_STATUS(v) {\n    LOAN_STATUS = v;\n  },\n\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  }\n\n}, 8);\nlet UserService;\nmodule.link(\"../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 9);\nlet BorrowerService;\nmodule.link(\"../../../borrowers/server/BorrowerService\", {\n  default(v) {\n    BorrowerService = v;\n  }\n\n}, 10);\nlet PropertyService;\nmodule.link(\"../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 11);\nlet LenderService;\nmodule.link(\"../../../lenders/server/LenderService\", {\n  default(v) {\n    LenderService = v;\n  }\n\n}, 12);\nlet OfferService;\nmodule.link(\"../../../offers/server/OfferService\", {\n  default(v) {\n    OfferService = v;\n  }\n\n}, 13);\nlet generateOrganisationsWithLenderRules;\nmodule.link(\"../../../organisations/server/test/testHelpers.test\", {\n  generateOrganisationsWithLenderRules(v) {\n    generateOrganisationsWithLenderRules = v;\n  }\n\n}, 14);\ndescribe('LoanService', function () {\n  this.timeout(10000);\n  let loanId;\n  let loan;\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('popValue', () => {\n    it('removes a value from an array', () => {\n      loanId = Factory.create('loan', {\n        contacts: [{\n          name: 'Joe',\n          title: 'Mah dude'\n        }]\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.contacts.length).to.equal(1);\n      LoanService.popValue({\n        loanId,\n        object: {\n          contacts: 1\n        }\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.contacts).to.deep.equal([]);\n    });\n  });\n  describe('remove', () => {\n    it('removes the borrowers via a before remove hook', () => {\n      // Add other borrowers to simulate a real DB\n      const otherBorrower = Factory.create('borrower')._id;\n\n      const borrowerId = Factory.create('borrower')._id;\n\n      const otherBorrower2 = Factory.create('borrower')._id;\n\n      loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId]\n      })._id;\n      LoanService.remove({\n        loanId\n      });\n      expect(LoanService.find({}).count()).to.equal(0);\n      expect(BorrowerService.find({\n        _id: borrowerId\n      }).count()).to.equal(0);\n      expect(BorrowerService.find({\n        _id: otherBorrower\n      }).count()).to.equal(1);\n      expect(BorrowerService.find({\n        _id: otherBorrower2\n      }).count()).to.equal(1);\n    });\n    it('removes the properties via a before remove hook', () => {\n      const propertyId = Factory.create('property')._id;\n\n      loanId = Factory.create('loan', {\n        propertyIds: [propertyId]\n      })._id;\n      LoanService.remove({\n        loanId\n      });\n      expect(LoanService.find({}).count()).to.equal(0);\n      expect(PropertyService.find({}).count()).to.equal(0);\n    });\n    it('does not remove if a borrower is linked to multiple loans', () => {\n      const {\n        ids\n      } = generator({\n        borrowers: {\n          loans: [{}, {}]\n        }\n      });\n      loanId = ids.loans[0];\n      LoanService.remove({\n        loanId\n      });\n      expect(LoanService.find({}).count()).to.equal(1);\n      expect(BorrowerService.find({}).count()).to.equal(1);\n    });\n    it('autoremoves lenders', () => {\n      const {\n        ids\n      } = generator({\n        loans: {\n          lenders: [{}, {}, {}]\n        }\n      });\n      loanId = ids.loans[0];\n      expect(LenderService.countAll()).to.equal(3);\n      LoanService.remove({\n        loanId\n      });\n      expect(LenderService.countAll()).to.equal(0);\n    });\n  });\n  describe('fullLoanInsert', () => {\n    let userId;\n    beforeEach(() => {\n      userId = 'testId';\n    });\n    it('inserts a loan', () => {\n      expect(LoanService.countAll()).to.equal(0, 'loans 0');\n      LoanService.fullLoanInsert({\n        userId\n      });\n      expect(LoanService.countAll()).to.equal(1, 'loans 1');\n    });\n    it('adds userId', () => {\n      LoanService.fullLoanInsert({\n        userId\n      });\n      expect(LoanService.findOne({}).userId).to.equal(userId, 'loans userId');\n    });\n  });\n  describe('addPropertyToLoan', () => {\n    it('adds the propertyId on all structures', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          structures: [{\n            id: '1'\n          }, {\n            id: '2'\n          }]\n        },\n        properties: {\n          _id: 'propertyId'\n        }\n      });\n      LoanService.addPropertyToLoan({\n        loanId: 'loanId',\n        propertyId: 'propertyId'\n      });\n      loan = LoanService.get('loanId');\n      loan.structures.forEach(({\n        propertyId\n      }) => {\n        expect(propertyId).to.equal('propertyId');\n      });\n    });\n    it('only adds the property if it is not defined', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          structures: [{\n            id: '1',\n            propertyId: 'a'\n          }, {\n            id: '2',\n            promotionOptionId: 'b'\n          }, {\n            id: '3'\n          }]\n        },\n        properties: {\n          _id: 'propertyId'\n        }\n      });\n      LoanService.addPropertyToLoan({\n        loanId: 'loanId',\n        propertyId: 'propertyId'\n      });\n      loan = LoanService.get('loanId');\n      loan.structures.forEach(({\n        propertyId,\n        promotionOptionId\n      }, i) => {\n        if (i === 2) {\n          expect(propertyId).to.equal('propertyId');\n        } else {\n          expect(!!(propertyId || promotionOptionId)).to.equal(true);\n        }\n      });\n    });\n  });\n  describe('addNewStructure', () => {\n    it('adds a new structure to a loan', () => {\n      loanId = Factory.create('loan')._id;\n      loan = LoanService.get(loanId);\n      expect(loan.structures).to.deep.equal([]);\n      LoanService.addNewStructure({\n        loanId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures).to.have.length(1);\n      expect(typeof loan.structures[0].id).to.equal('string');\n    });\n    it('selects the structure if it is the first one', () => {\n      loanId = Factory.create('loan')._id;\n      LoanService.addNewStructure({\n        loanId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.selectedStructure).to.equal(loan.structures[0].id);\n    });\n    it('does not select the structure if it is not the first one', () => {\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: 'first'\n        }],\n        selectedStructure: 'first'\n      })._id;\n      LoanService.addNewStructure({\n        loanId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.selectedStructure).to.equal('first');\n    });\n    it('duplicates the current chosen structure if it is not the first one', () => {\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: 'testId',\n          name: 'joe',\n          description: 'hello',\n          fortuneUsed: 100\n        }],\n        selectedStructure: 'testId'\n      })._id;\n      LoanService.addNewStructure({\n        loanId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(2);\n      const _loan$structures$ = loan.structures[0],\n            {\n        id: id1,\n        name\n      } = _loan$structures$,\n            structure1 = (0, _objectWithoutProperties2.default)(_loan$structures$, [\"id\", \"name\"]);\n      const _loan$structures$2 = loan.structures[1],\n            {\n        id: id2,\n        name: name2\n      } = _loan$structures$2,\n            structure2 = (0, _objectWithoutProperties2.default)(_loan$structures$2, [\"id\", \"name\"]);\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n      expect(name2).to.equal('Plan financier 2');\n    });\n    it('returns the id of the new structure', () => {\n      loanId = Factory.create('loan')._id;\n      const structureId = LoanService.addNewStructure({\n        loanId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(1);\n      expect(loan.structures[0].id).to.equal(structureId);\n    });\n  });\n  describe('removeStructure', () => {\n    it('removes an existing structure from a loan', () => {\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: '1'\n        }, {\n          id: '2'\n        }],\n        selectedStructure: '1'\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(2);\n      const structureId = loan.structures[1].id;\n      LoanService.removeStructure({\n        loanId,\n        structureId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(1);\n      expect(loan.structures[0].id).to.not.equal(structureId);\n    });\n    it('throws if you try to delete the current selected structure', () => {\n      const structureId = 'someId';\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: structureId\n        }],\n        selectedStructure: structureId\n      })._id;\n      expect(() => LoanService.removeStructure({\n        loanId,\n        structureId\n      })).to.throw('pouvez pas');\n    });\n    it('removes a duplicate structure', () => {\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: '1'\n        }],\n        selectedStructure: '1'\n      })._id;\n      LoanService.duplicateStructure({\n        loanId,\n        structureId: '1'\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(2);\n      LoanService.removeStructure({\n        loanId,\n        structureId: loan.structures[1].id\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(1);\n    });\n    it('works for this edge case', () => {\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: 'poKbbHPf3FTKWt7vd',\n          propertyWork: 339000\n        }, {\n          id: 'CfN4k8WKqRySCfvns',\n          propertyWork: 339000\n        }]\n      })._id;\n      LoanService.removeStructure({\n        loanId,\n        structureId: 'CfN4k8WKqRySCfvns'\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(1);\n    });\n  });\n  describe('updateStructure', () => {\n    it('updates a structure', () => {\n      const structureId = 'testId';\n      const propertyId = 'property1';\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: structureId\n        }, {\n          id: `${structureId}0`\n        }, {\n          id: `${structureId}1`\n        }]\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.structures.propertyId).to.equal(undefined);\n      LoanService.updateStructure({\n        loanId,\n        structureId,\n        structure: {\n          propertyId\n        }\n      });\n      loan = LoanService.get(loanId); // This structure is correct\n\n      expect(loan.structures.find(({\n        id\n      }) => id === structureId)).to.deep.include({\n        id: structureId,\n        propertyId\n      }); // Other structures are unaffected\n\n      loan.structures.filter(({\n        id\n      }) => id !== structureId).forEach((structure, index) => {\n        expect(structure).to.deep.include({\n          id: structureId + index\n        });\n      });\n    });\n  });\n  describe('selectStructure', () => {\n    it('selects an existing structure', () => {\n      const structureId = 'testId';\n      const structureId2 = 'testId2';\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: structureId\n        }, {\n          id: structureId2\n        }],\n        selectedStructure: structureId\n      })._id;\n      LoanService.selectStructure({\n        loanId,\n        structureId: structureId2\n      });\n      const {\n        selectedStructure\n      } = LoanService.get(loanId);\n      expect(selectedStructure).to.equal(structureId2);\n    });\n    it('throws if the structure does not exist', () => {\n      loanId = Factory.create('loan')._id;\n      const badId = 'inexistentId';\n      expect(() => LoanService.selectStructure({\n        loanId,\n        structureId: badId\n      })).to.throw(badId);\n    });\n  });\n  describe('duplicateStructure', () => {\n    it('duplicates a structure with a new id', () => {\n      const structureId = 'testId';\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: structureId,\n          name: 'joe',\n          description: 'hello',\n          fortuneUsed: 100\n        }]\n      })._id;\n      LoanService.duplicateStructure({\n        loanId,\n        structureId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(2);\n      const _loan$structures$3 = loan.structures[0],\n            {\n        id: id1,\n        name\n      } = _loan$structures$3,\n            structure1 = (0, _objectWithoutProperties2.default)(_loan$structures$3, [\"id\", \"name\"]);\n      const _loan$structures$4 = loan.structures[1],\n            {\n        id: id2,\n        name: name2\n      } = _loan$structures$4,\n            structure2 = (0, _objectWithoutProperties2.default)(_loan$structures$4, [\"id\", \"name\"]);\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n    });\n    it('duplicates properly when multiple properties exist', () => {\n      const structureId = 'testId';\n      const property1 = 'property1';\n      const property2 = 'property2';\n      loanId = Factory.create('loan', {\n        propertyIds: [property1, property2],\n        structures: [{\n          id: structureId,\n          name: 'joe',\n          description: 'hello',\n          fortuneUsed: 100,\n          propertyId: property2\n        }]\n      })._id;\n      LoanService.duplicateStructure({\n        loanId,\n        structureId\n      });\n      loan = LoanService.get(loanId);\n      const _loan$structures$5 = loan.structures[0],\n            {\n        id: id1,\n        name\n      } = _loan$structures$5,\n            structure1 = (0, _objectWithoutProperties2.default)(_loan$structures$5, [\"id\", \"name\"]);\n      const _loan$structures$6 = loan.structures[1],\n            {\n        id: id2,\n        name: name2\n      } = _loan$structures$6,\n            structure2 = (0, _objectWithoutProperties2.default)(_loan$structures$6, [\"id\", \"name\"]);\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n    });\n    it('adds \"- copie\" to the title', () => {\n      const structureId = 'testId';\n      const name = 'my structure';\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: structureId,\n          name\n        }]\n      })._id;\n      LoanService.duplicateStructure({\n        loanId,\n        structureId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures[1].name).to.equal(`${name} - copie`);\n    });\n    it('inserts the duplicated structure right next to the duplicating one', () => {\n      const structureId = 'testId';\n      const name = 'structure';\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: structureId + 0,\n          name: name + 0\n        }, {\n          id: structureId + 1,\n          name: name + 1\n        }]\n      })._id;\n      LoanService.duplicateStructure({\n        loanId,\n        structureId: structureId + 0\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures.length).to.equal(3);\n      expect(loan.structures[0].name).to.equal(name + 0);\n      expect(loan.structures[1].name).to.equal(`${name + 0} - copie`);\n      expect(loan.structures[2].name).to.equal(name + 1);\n    });\n    it('duplicates with a good name if no name is on the structure', () => {\n      loanId = Factory.create('loan', {\n        structures: [{\n          id: 'testId'\n        }],\n        selectedStructure: 'testId'\n      })._id;\n      LoanService.duplicateStructure({\n        loanId,\n        structureId: 'testId'\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures[1].name).to.equal('Plan financier - copie');\n    });\n  });\n  describe('getNewLoanName', () => {\n    it('returns 19-0001 for the very first loan', () => {\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0001');\n    });\n    it('returns 19-0002 for the second loan', () => {\n      loanId = LoanService.insert({\n        loan: {}\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.name).to.equal('19-0001');\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0002');\n    });\n    it('sorts loans properly 1', () => {\n      Factory.create('loan', {\n        name: '19-0009'\n      });\n      Factory.create('loan', {\n        name: '19-0010'\n      });\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0011');\n    });\n    it('sorts loans properly even if created in different order', () => {\n      Factory.create('loan', {\n        name: '19-0955'\n      });\n      Factory.create('loan', {\n        name: '19-0153'\n      });\n      Factory.create('loan', {\n        name: '19-0001'\n      });\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0956');\n    });\n    it('returns 19-1234 for the nth loan', () => {\n      Factory.create('loan', {\n        name: '19-1233'\n      });\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-1234');\n    });\n    it('does not break if a 10000th loan is added', () => {\n      Factory.create('loan', {\n        name: '19-9999'\n      });\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-10000');\n    });\n    it('handles new year properly', () => {\n      Factory.create('loan', {\n        name: '19-0003'\n      });\n      const name = LoanService.getNewLoanName(new Date(2020, 1, 1));\n      expect(name).to.equal('20-0001');\n    });\n  });\n  describe('loan name regEx', () => {\n    it('allows loan names with correct format', () => {\n      expect(() => Factory.create('loan', {\n        name: '18-0202'\n      })).to.not.throw();\n    });\n    it('does not allow loan names with incorrect format', () => {\n      expect(() => Factory.create('loan', {\n        name: '18-202'\n      })).to.throw('regular expression');\n      expect(() => Factory.create('loan', {\n        name: '202'\n      })).to.throw('regular expression');\n      expect(() => Factory.create('loan', {\n        name: '1-202'\n      })).to.throw('regular expression');\n      expect(() => Factory.create('loan', {\n        name: '18202'\n      })).to.throw('regular expression');\n      expect(() => Factory.create('loan', {\n        name: '0202'\n      })).to.throw('regular expression');\n      expect(() => Factory.create('loan', {\n        name: 'abc'\n      })).to.throw('regular expression');\n      expect(() => Factory.create('loan', {\n        name: '18-a202'\n      })).to.throw('regular expression');\n    });\n  });\n  describe('cleanupRemovedBorrower', () => {\n    it('removes all occurences of a borrower in structures', () => {\n      const borrowerId = 'dude';\n      const borrowerId2 = 'dude2';\n      loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId, borrowerId2],\n        structures: [{\n          id: 'structId',\n          ownFunds: [{\n            borrowerId,\n            value: 100,\n            type: OWN_FUNDS_TYPES.BANK_3A\n          }, {\n            borrowerId: borrowerId2,\n            value: 300,\n            type: OWN_FUNDS_TYPES.BANK_FORTUNE\n          }]\n        }]\n      })._id;\n      LoanService.cleanupRemovedBorrower({\n        borrowerId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.structures[0].ownFunds.length).to.equal(1);\n      expect(loan.structures[0].ownFunds[0].borrowerId).to.equal(borrowerId2);\n    });\n  });\n  describe('switchBorrower', () => {\n    it('switches a borrowerId with a new one', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n\n      const borrowerId = Factory.create('borrower')._id;\n\n      loanId = Factory.create('loan', {\n        borrowerIds: [oldBorrowerId]\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.borrowerIds).to.deep.equal([oldBorrowerId]);\n      LoanService.switchBorrower({\n        loanId,\n        oldBorrowerId,\n        borrowerId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.borrowerIds).to.deep.equal([borrowerId]);\n    });\n    it('switches a borrowerId with a new one with multiple borrowers', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n\n      const borrowerId = Factory.create('borrower')._id;\n\n      loanId = Factory.create('loan', {\n        borrowerIds: [oldBorrowerId, 'dude']\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.borrowerIds).to.deep.equal([oldBorrowerId, 'dude']);\n      LoanService.switchBorrower({\n        loanId,\n        oldBorrowerId,\n        borrowerId\n      });\n      loan = LoanService.get(loanId);\n      expect(loan.borrowerIds).to.deep.equal([borrowerId, 'dude']);\n    });\n    it('deletes the old borrower if it is only on this loan', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n\n      const borrowerId = Factory.create('borrower')._id;\n\n      loanId = Factory.create('loan', {\n        borrowerIds: [oldBorrowerId]\n      })._id;\n      LoanService.switchBorrower({\n        loanId,\n        oldBorrowerId,\n        borrowerId\n      });\n      const borrowers = BorrowerService.find({}).fetch();\n      expect(borrowers.length).to.equal(1);\n    });\n    it('does not delete the old borrower if it is only on this loan', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n\n      const borrowerId = Factory.create('borrower')._id;\n\n      loanId = Factory.create('loan', {\n        borrowerIds: [oldBorrowerId]\n      })._id;\n      Factory.create('loan', {\n        borrowerIds: [oldBorrowerId]\n      });\n      LoanService.switchBorrower({\n        loanId,\n        oldBorrowerId,\n        borrowerId\n      });\n      const borrowers = BorrowerService.find({}).fetch();\n      expect(borrowers.length).to.equal(2);\n    });\n    it('throws if the same borrower is tried to be added twice', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n\n      const borrowerId = Factory.create('borrower')._id;\n\n      loanId = Factory.create('loan', {\n        borrowerIds: [oldBorrowerId, borrowerId]\n      })._id;\n      expect(() => LoanService.switchBorrower({\n        loanId,\n        oldBorrowerId,\n        borrowerId\n      })).to.throw('déjà');\n    });\n  });\n  describe('assignLoanToUser', () => {\n    it('assigns all properties and borrowers to the new user', () => {\n      const userId = Factory.create('user')._id;\n\n      const borrowerId1 = Factory.create('borrower')._id;\n\n      const borrowerId2 = Factory.create('borrower')._id;\n\n      const propertyId1 = Factory.create('property')._id;\n\n      const propertyId2 = Factory.create('property')._id;\n\n      loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId1, borrowerId2],\n        propertyIds: [propertyId1, propertyId2]\n      })._id;\n      LoanService.assignLoanToUser({\n        loanId,\n        userId\n      });\n      expect(LoanService.get(loanId).userId).to.equal(userId);\n      expect(BorrowerService.get(borrowerId1).userId).to.equal(userId);\n      expect(BorrowerService.get(borrowerId2).userId).to.equal(userId);\n      expect(PropertyService.get(propertyId1).userId).to.equal(userId);\n      expect(PropertyService.get(propertyId2).userId).to.equal(userId);\n    });\n    it('throws if a borrower is assigned to multiple loans', () => {\n      generator({\n        loans: [{\n          _id: 'loanId',\n          borrowers: {\n            _id: 'borr1'\n          }\n        }, {\n          borrowers: [{\n            _id: 'borr1'\n          }, {}]\n        }]\n      });\n      expect(() => LoanService.assignLoanToUser({\n        loanId: 'loanId',\n        userId: 'dude'\n      })).to.throw('emprunteur');\n    });\n    it('throws if a property is assigned to multiple loans', () => {\n      generator({\n        loans: [{\n          _id: 'loanId',\n          properties: {\n            _id: 'propId1'\n          }\n        }, {\n          properties: [{\n            _id: 'propId1'\n          }, {}]\n        }]\n      });\n      expect(() => LoanService.assignLoanToUser({\n        loanId: 'loanId',\n        userId: 'dude'\n      })).to.throw('bien immobilier');\n    });\n    it('does not throw for a PRO property, and assigns only USER properties', () => {\n      generator({\n        loans: [{\n          properties: {\n            _id: 'propId1',\n            category: PROPERTY_CATEGORY.PRO\n          }\n        }, {\n          _id: 'loanId',\n          properties: [{\n            _id: 'propId2'\n          }, {\n            _id: 'propId1'\n          }]\n        }]\n      });\n      expect(() => LoanService.assignLoanToUser({\n        loanId: 'loanId',\n        userId: 'dude'\n      })).to.not.throw();\n      expect(PropertyService.get('propId1').userId).to.equal(undefined);\n      expect(PropertyService.get('propId2').userId).to.equal('dude');\n    });\n    it('refers a user if this is his first loan', () => {\n      generator({\n        users: [{\n          _id: 'userId'\n        }, {\n          _id: 'proId',\n          _factory: 'pro',\n          organisations: {\n            _id: 'orgId'\n          }\n        }],\n        loans: {\n          _id: 'loanId',\n          referralId: 'proId'\n        }\n      });\n      LoanService.assignLoanToUser({\n        loanId: 'loanId',\n        userId: 'userId'\n      });\n      const user = UserService.fetchOne({\n        $filters: {\n          _id: 'userId'\n        },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1\n      });\n      expect(user).to.deep.include({\n        referredByUserLink: 'proId',\n        referredByOrganisationLink: 'orgId'\n      });\n    });\n    it('does not change referredBy if it is already set', () => {\n      generator({\n        users: [{\n          _id: 'userId',\n          referredByUser: {\n            _id: 'proId1'\n          }\n        }, {\n          _id: 'proId2',\n          _factory: 'pro',\n          organisations: {\n            _id: 'orgId'\n          }\n        }],\n        loans: {\n          _id: 'loanId',\n          referralId: 'proId2'\n        }\n      });\n      LoanService.assignLoanToUser({\n        loanId: 'loanId',\n        userId: 'userId'\n      });\n      const user = UserService.fetchOne({\n        $filters: {\n          _id: 'userId'\n        },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1\n      });\n      expect(user).to.deep.equal({\n        _id: 'userId',\n        referredByUserLink: 'proId1'\n      });\n    });\n  });\n  describe('sendNegativeFeedbackToAllLenders', () => {\n    let addresses = [];\n\n    const insertMultipleOffers = ({\n      numberOfLenders,\n      numberOfOffersPerLender\n    }) => {\n      let offerIds = [];\n      [...Array(numberOfLenders)].forEach((_, index) => {\n        // Create contact\n        const address = faker.internet.email();\n        addresses = [...addresses, address];\n\n        const contactId = Factory.create('contact', {\n          emails: [{\n            address\n          }]\n        })._id; // Create org\n\n\n        const organisationId = Factory.create('organisation', {\n          contactIds: [{\n            _id: contactId\n          }],\n          name: `org ${index}`\n        })._id; // Create lender\n\n\n        const lenderId = LenderService.insert({\n          lender: {\n            loanId\n          },\n          organisationId,\n          contactId\n        }); // Create offers\n\n        [...Array(numberOfOffersPerLender)].forEach(() => {\n          offerIds = [...offerIds, OfferService.insert({\n            offer: {\n              interest10: 1,\n              maxAmount: 1000000,\n              lenderId\n            }\n          })];\n        });\n      });\n      return offerIds;\n    };\n\n    beforeEach(() => {\n      resetDatabase();\n      loanId = 'someLoan';\n      generator({\n        users: [{\n          _id: 'adminId',\n          _factory: 'adminEpotek'\n        }, {\n          _id: 'userId',\n          assignedEmployee: {\n            _id: 'adminId'\n          },\n          loans: {\n            _id: loanId,\n            borrowers: {},\n            properties: {\n              _id: 'propertyId',\n              address1: 'rue du lac 31',\n              zipCode: 1400,\n              city: 'Yverdon'\n            },\n            structures: [{\n              id: 'struct',\n              propertyId: 'propertyId'\n            }],\n            selectedStructure: 'struct'\n          }\n        }]\n      });\n      addresses = [];\n    });\n    it('sends a negative feedback to all lenders', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 1;\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender\n      });\n      expect(offerIds.length).to.equal(numberOfLenders * numberOfOffersPerLender);\n      return LoanService.sendNegativeFeedbackToAllLenders({\n        loanId\n      }).then(() => checkEmails(numberOfLenders)).then(emails => {\n        expect(emails.length).to.equal(numberOfLenders);\n        addresses.forEach(email => expect(emails.some(({\n          address\n        }) => address === email)).to.equal(true));\n      });\n    });\n    it('sends a negative feedback to all lenders once only', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 10;\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender\n      });\n      expect(offerIds.length).to.equal(numberOfLenders * numberOfOffersPerLender);\n      return LoanService.sendNegativeFeedbackToAllLenders({\n        loanId\n      }).then(() => checkEmails(numberOfLenders)).then(emails => {\n        expect(emails.length).to.equal(numberOfLenders);\n        addresses.forEach(email => expect(emails.some(({\n          address\n        }) => address === email)).to.equal(true));\n      });\n    });\n    it('does not send any feedback if there is no lender', () => LoanService.sendNegativeFeedbackToAllLenders({\n      loanId\n    }).then(() => checkEmails(0)).then(emails => {\n      expect(emails.length).to.equal(0);\n    }));\n    it('does not send any feedback if there is no offer', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 0;\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender\n      });\n      expect(offerIds.length).to.equal(0);\n      return LoanService.sendNegativeFeedbackToAllLenders({\n        loanId\n      }).then(() => checkEmails(0)).then(emails => {\n        expect(emails.length).to.equal(0);\n      });\n    });\n  });\n  describe('setStep', () => {\n    it('sets the step', () => {\n      generator({\n        loans: {\n          _id: 'id',\n          step: STEPS.SOLVENCY\n        }\n      });\n      LoanService.setStep({\n        loanId: 'id',\n        nextStep: STEPS.REQUEST\n      });\n      loan = LoanService.get('id');\n      expect(loan.step).to.equal(STEPS.REQUEST);\n    });\n    it('sends a notification email if the step goes from SOLVENCY to OFFERS', () => {\n      generator({\n        users: {\n          _id: 'admin',\n          _factory: 'admin',\n          firstName: 'Admin',\n          lastName: 'User'\n        },\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.SOLVENCY,\n          user: {\n            emails: [{\n              address: 'john@doe.com',\n              verified: false\n            }],\n            assignedEmployeeId: 'admin'\n          }\n        }\n      });\n      LoanService.setStep({\n        loanId: 'myLoan',\n        nextStep: STEPS.OFFERS\n      });\n      loan = LoanService.get('myLoan');\n      expect(loan.step).to.equal(STEPS.OFFERS);\n      return checkEmails(1).then(emails => {\n        const {\n          emailId,\n          address,\n          response: {\n            status\n          },\n          template: {\n            message: {\n              from_email,\n              subject,\n              global_merge_vars,\n              from_name\n            }\n          }\n        } = emails[0];\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.FIND_LENDER_NOTIFICATION);\n        expect(address).to.equal('john@doe.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.include('[e-Potek] Identifiez votre prêteur');\n        expect(global_merge_vars.find(({\n          name\n        }) => name === 'CTA_URL').content).to.include('/loans/myLoan');\n        expect(global_merge_vars.find(({\n          name\n        }) => name === 'BODY').content).to.include('Admin User');\n      });\n    });\n    it('sends a notification email if the step goes from REQUEST to OFFERS', () => {\n      generator({\n        users: {\n          _id: 'admin'\n        },\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.REQUEST,\n          user: {\n            emails: [{\n              address: 'john@doe.com',\n              verified: false\n            }],\n            assignedEmployeeId: 'admin'\n          }\n        }\n      });\n      LoanService.setStep({\n        loanId: 'myLoan',\n        nextStep: STEPS.OFFERS\n      });\n      return checkEmails(1).then(emails => {\n        const {\n          emailId,\n          response: {\n            status\n          }\n        } = emails[0];\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.FIND_LENDER_NOTIFICATION);\n      });\n    });\n    it('does not send a notification email if the step goes from REQUEST to OFFERS', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.CLOSING,\n          user: {\n            emails: [{\n              address: 'john@doe.com',\n              verified: false\n            }]\n          }\n        }\n      });\n      LoanService.setStep({\n        loanId: 'myLoan',\n        nextStep: STEPS.OFFERS\n      });\n      return checkEmails(1, {\n        timeout: 2000,\n        noExpect: true\n      }).then(emails => {\n        expect(emails.length).to.equal(0);\n      });\n    });\n  });\n  describe('getLoanCalculator', () => {\n    it('returns an uninitialized calculator by default', () => {\n      generator({\n        loans: {\n          _id: 'myLoan'\n        }\n      });\n      const calc = LoanService.getLoanCalculator({\n        loanId: 'myLoan'\n      });\n      expect(calc.organisationName).to.equal(undefined);\n    });\n    it('initializes a calculator if an offer has been chosen', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          lenders: {\n            organisation: {\n              name: 'Org1',\n              lenderRules: {}\n            },\n            offers: {\n              _id: 'offerId'\n            }\n          },\n          structures: [{\n            offerId: 'offerId',\n            id: 'struct'\n          }],\n          selectedStructure: 'struct'\n        }\n      });\n      const calc = LoanService.getLoanCalculator({\n        loanId: 'myLoan'\n      });\n      expect(calc.organisationName).to.equal('Org1');\n    });\n    it('initializes a calculator if a promotion has a lenderOrganisation on it', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          promotions: {\n            lenderOrganisation: {\n              name: 'Org2',\n              lenderRules: {}\n            }\n          }\n        }\n      });\n      const calc = LoanService.getLoanCalculator({\n        loanId: 'myLoan'\n      });\n      expect(calc.organisationName).to.equal('Org2');\n    });\n  });\n  describe('setMaxPropertyValueWithoutBorrowRatio', function () {\n    this.timeout(10000);\n    it('finds the ideal borrowRatio', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{\n              value: 100000\n            }]\n          }\n        },\n        organisations: [...generateOrganisationsWithLenderRules({\n          number: 5,\n          mainBorrowRatio: {\n            min: 0.65,\n            max: 0.9\n          },\n          secondaryBorrowRatio: {\n            min: 0.5,\n            max: 0.7\n          }\n        }), {\n          name: 'no lender rules',\n          type: ORGANISATION_TYPES.BANK,\n          features: [ORGANISATION_FEATURES.LENDER]\n        }]\n      });\n      LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: 'loanId',\n        canton: 'GE'\n      });\n      const {\n        maxPropertyValue: {\n          canton,\n          date,\n          main,\n          second\n        }\n      } = LoanService.fetchOne({\n        $filters: {\n          _id: 'loanId'\n        },\n        maxPropertyValue: 1\n      });\n      expect(canton).to.equal('GE');\n      expect(moment(date).format('YYYY-MM-DD')).to.equal(moment().format('YYYY-MM-DD'));\n      expect(main.min.borrowRatio).to.equal(0.65);\n      expect(main.min.propertyValue).to.equal(1496000);\n      expect(main.max.borrowRatio).to.equal(0.835);\n      expect(main.max.propertyValue).to.equal(2761000);\n      expect(second.min.borrowRatio).to.equal(0.5);\n      expect(second.min.propertyValue).to.equal(909000);\n      expect(second.max.borrowRatio).to.equal(0.65);\n      expect(second.max.propertyValue).to.equal(1245000);\n    });\n    it('Only uses the promotion lender', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{\n              value: 100000\n            }]\n          },\n          promotions: {\n            lenderOrganisation: generateOrganisationsWithLenderRules({\n              number: 1,\n              mainBorrowRatio: {\n                min: 0.75,\n                max: 0.75\n              },\n              secondaryBorrowRatio: {\n                min: 0.7,\n                max: 0.7\n              }\n            })\n          }\n        }\n      });\n      LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: 'loanId',\n        canton: 'GE'\n      });\n      const {\n        maxPropertyValue: {\n          canton,\n          date,\n          main,\n          second\n        }\n      } = LoanService.fetchOne({\n        $filters: {\n          _id: 'loanId'\n        },\n        maxPropertyValue: 1\n      });\n      expect(canton).to.equal('GE');\n      expect(moment(date).format('YYYY-MM-DD')).to.equal(moment().format('YYYY-MM-DD'));\n      expect(main.min).to.equal(undefined);\n      expect(main.max.borrowRatio).to.equal(0.75);\n      expect(main.max.propertyValue).to.equal(1988000);\n      expect(second.min).to.equal(undefined);\n      expect(second.max.borrowRatio).to.equal(0.7);\n      expect(second.max.propertyValue).to.equal(1420000);\n    });\n  });\n  describe('expireAnonymousLoans', () => {\n    it('does not update any unmatched loans', () => {\n      generator({\n        loans: [{\n          anonymous: true\n        }, {\n          anonymous: true,\n          status: LOAN_STATUS.UNSUCCESSFUL\n        }]\n      });\n      expect(LoanService.expireAnonymousLoans()).to.equal(0);\n    });\n    it('only updates loans from more than a week ago', () => Promise.asyncApply(() => {\n      const promises = [];\n\n      for (let index = 0; index < 10; index++) {\n        promises.push(LoanService.rawCollection.insert({\n          anonymous: true,\n          updatedAt: moment().subtract(index, 'days').toDate(),\n          _id: index,\n          name: index\n        }));\n      }\n\n      Promise.await(Promise.all(promises));\n      expect(LoanService.expireAnonymousLoans()).to.equal(5);\n    }));\n    it('does not update loans already at UNSUCCESSFUL status', () => Promise.asyncApply(() => {\n      Promise.await(LoanService.rawCollection.insert({\n        anonymous: true,\n        updatedAt: moment().subtract(10, 'days').toDate(),\n        _id: 'a',\n        name: 'b',\n        status: LOAN_STATUS.UNSUCCESSFUL\n      }));\n      expect(LoanService.expireAnonymousLoans()).to.equal(0);\n    }));\n  });\n  describe('insertAnonymousLoan', () => {\n    it('inserts an anonymous loan', () => {\n      LoanService.insertAnonymousLoan({\n        referralId: 'someId'\n      });\n      expect(LoanService.findOne({})).to.deep.include({\n        anonymous: true,\n        displayWelcomeScreen: false,\n        referralId: 'someId'\n      });\n    });\n    it('creates a link with a property if provided', () => {\n      generator({\n        properties: {\n          _id: 'propertyId'\n        }\n      });\n      LoanService.insertAnonymousLoan({\n        proPropertyId: 'propertyId'\n      });\n      expect(LoanService.findOne({})).to.deep.include({\n        propertyIds: ['propertyId']\n      });\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/loans/server/test/LoanService.test.js"],"names":["describe","beforeEach","resetDatabase","it","loanId","contacts","name","title","loan","LoanService","expect","object","otherBorrower","Factory","borrowerId","otherBorrower2","borrowerIds","_id","propertyId","propertyIds","PropertyService","ids","generator","borrowers","loans","BorrowerService","lenders","LenderService","userId","structures","id","properties","promotionOptionId","i","selectedStructure","description","fortuneUsed","structure1","structure2","structureId","propertyWork","structure","index","structureId2","badId","property1","property2","borrowerId2","ownFunds","value","type","OWN_FUNDS_TYPES","BANK_3A","BANK_FORTUNE","oldBorrowerId","borrowerId1","propertyId1","propertyId2","category","PROPERTY_CATEGORY","PRO","users","_factory","organisations","referralId","user","$filters","referredByUserLink","referredByOrganisationLink","referredByUser","addresses","insertMultipleOffers","numberOfOffersPerLender","offerIds","Array","address","faker","contactId","emails","organisationId","contactIds","lenderId","lender","offer","interest10","maxAmount","assignedEmployee","address1","zipCode","city","numberOfLenders","checkEmails","email","step","STEPS","SOLVENCY","nextStep","REQUEST","firstName","lastName","verified","assignedEmployeeId","OFFERS","response","status","template","message","from_name","EMAIL_IDS","global_merge_vars","timeout","noExpect","calc","organisation","lenderRules","offers","offerId","promotions","lenderOrganisation","bankFortune","salary","insurance2","generateOrganisationsWithLenderRules","number","mainBorrowRatio","min","max","secondaryBorrowRatio","ORGANISATION_TYPES","features","ORGANISATION_FEATURES","canton","maxPropertyValue","second","moment","main","anonymous","LOAN_STATUS","UNSUCCESSFUL","promises","updatedAt","Promise","displayWelcomeScreen","proPropertyId"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Factory } from 'meteor/dburles:factory';\nimport faker from 'faker/locale/fr';\nimport moment from 'moment';\n\nimport { checkEmails } from '../../../../utils/testHelpers';\nimport generator from '../../../factories';\nimport LoanService from '../LoanService';\nimport {\n  OWN_FUNDS_TYPES,\n  STEPS,\n  EMAIL_IDS,\n  ORGANISATION_TYPES,\n  ORGANISATION_FEATURES,\n  LOAN_STATUS,\n  PROPERTY_CATEGORY,\n} from '../../../constants';\nimport UserService from '../../../users/server/UserService';\nimport BorrowerService from '../../../borrowers/server/BorrowerService';\nimport PropertyService from '../../../properties/server/PropertyService';\nimport LenderService from '../../../lenders/server/LenderService';\nimport OfferService from '../../../offers/server/OfferService';\nimport { generateOrganisationsWithLenderRules } from '../../../organisations/server/test/testHelpers.test';\n\ndescribe('LoanService', function () {\n  this.timeout(10000);\n  let loanId;\n  let loan;\n\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('popValue', () => {\n    it('removes a value from an array', () => {\n      loanId = Factory.create('loan', {\n        contacts: [{ name: 'Joe', title: 'Mah dude' }],\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.contacts.length).to.equal(1);\n\n      LoanService.popValue({ loanId, object: { contacts: 1 } });\n\n      loan = LoanService.get(loanId);\n      expect(loan.contacts).to.deep.equal([]);\n    });\n  });\n\n  describe('remove', () => {\n    it('removes the borrowers via a before remove hook', () => {\n      // Add other borrowers to simulate a real DB\n      const otherBorrower = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      const otherBorrower2 = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [borrowerId] })._id;\n\n      LoanService.remove({ loanId });\n\n      expect(LoanService.find({}).count()).to.equal(0);\n      expect(BorrowerService.find({ _id: borrowerId }).count()).to.equal(0);\n      expect(BorrowerService.find({ _id: otherBorrower }).count()).to.equal(1);\n      expect(BorrowerService.find({ _id: otherBorrower2 }).count()).to.equal(1);\n    });\n\n    it('removes the properties via a before remove hook', () => {\n      const propertyId = Factory.create('property')._id;\n      loanId = Factory.create('loan', { propertyIds: [propertyId] })._id;\n\n      LoanService.remove({ loanId });\n\n      expect(LoanService.find({}).count()).to.equal(0);\n      expect(PropertyService.find({}).count()).to.equal(0);\n    });\n\n    it('does not remove if a borrower is linked to multiple loans', () => {\n      const { ids } = generator({ borrowers: { loans: [{}, {}] } });\n      loanId = ids.loans[0];\n\n      LoanService.remove({ loanId });\n\n      expect(LoanService.find({}).count()).to.equal(1);\n      expect(BorrowerService.find({}).count()).to.equal(1);\n    });\n\n    it('autoremoves lenders', () => {\n      const { ids } = generator({ loans: { lenders: [{}, {}, {}] } });\n      loanId = ids.loans[0];\n\n      expect(LenderService.countAll()).to.equal(3);\n\n      LoanService.remove({ loanId });\n\n      expect(LenderService.countAll()).to.equal(0);\n    });\n  });\n\n  describe('fullLoanInsert', () => {\n    let userId;\n\n    beforeEach(() => {\n      userId = 'testId';\n    });\n\n    it('inserts a loan', () => {\n      expect(LoanService.countAll()).to.equal(0, 'loans 0');\n\n      LoanService.fullLoanInsert({ userId });\n\n      expect(LoanService.countAll()).to.equal(1, 'loans 1');\n    });\n\n    it('adds userId', () => {\n      LoanService.fullLoanInsert({ userId });\n\n      expect(LoanService.findOne({}).userId).to.equal(userId, 'loans userId');\n    });\n  });\n\n  describe('addPropertyToLoan', () => {\n    it('adds the propertyId on all structures', () => {\n      generator({\n        loans: { _id: 'loanId', structures: [{ id: '1' }, { id: '2' }] },\n        properties: { _id: 'propertyId' },\n      });\n\n      LoanService.addPropertyToLoan({\n        loanId: 'loanId',\n        propertyId: 'propertyId',\n      });\n\n      loan = LoanService.get('loanId');\n\n      loan.structures.forEach(({ propertyId }) => {\n        expect(propertyId).to.equal('propertyId');\n      });\n    });\n\n    it('only adds the property if it is not defined', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          structures: [\n            { id: '1', propertyId: 'a' },\n            { id: '2', promotionOptionId: 'b' },\n            { id: '3' },\n          ],\n        },\n        properties: { _id: 'propertyId' },\n      });\n\n      LoanService.addPropertyToLoan({\n        loanId: 'loanId',\n        propertyId: 'propertyId',\n      });\n\n      loan = LoanService.get('loanId');\n\n      loan.structures.forEach(({ propertyId, promotionOptionId }, i) => {\n        if (i === 2) {\n          expect(propertyId).to.equal('propertyId');\n        } else {\n          expect(!!(propertyId || promotionOptionId)).to.equal(true);\n        }\n      });\n    });\n  });\n\n  describe('addNewStructure', () => {\n    it('adds a new structure to a loan', () => {\n      loanId = Factory.create('loan')._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures).to.deep.equal([]);\n\n      LoanService.addNewStructure({ loanId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures).to.have.length(1);\n      expect(typeof loan.structures[0].id).to.equal('string');\n    });\n\n    it('selects the structure if it is the first one', () => {\n      loanId = Factory.create('loan')._id;\n      LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n      expect(loan.selectedStructure).to.equal(loan.structures[0].id);\n    });\n\n    it('does not select the structure if it is not the first one', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: 'first' }],\n        selectedStructure: 'first',\n      })._id;\n      LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n      expect(loan.selectedStructure).to.equal('first');\n    });\n\n    it('duplicates the current chosen structure if it is not the first one', () => {\n      loanId = Factory.create('loan', {\n        structures: [\n          {\n            id: 'testId',\n            name: 'joe',\n            description: 'hello',\n            fortuneUsed: 100,\n          },\n        ],\n        selectedStructure: 'testId',\n      })._id;\n      LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n      const { id: id1, name, ...structure1 } = loan.structures[0];\n      const { id: id2, name: name2, ...structure2 } = loan.structures[1];\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n      expect(name2).to.equal('Plan financier 2');\n    });\n\n    it('returns the id of the new structure', () => {\n      loanId = Factory.create('loan')._id;\n      const structureId = LoanService.addNewStructure({ loanId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n      expect(loan.structures[0].id).to.equal(structureId);\n    });\n  });\n\n  describe('removeStructure', () => {\n    it('removes an existing structure from a loan', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: '1' }, { id: '2' }],\n        selectedStructure: '1',\n      })._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n\n      const structureId = loan.structures[1].id;\n\n      LoanService.removeStructure({ loanId, structureId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n      expect(loan.structures[0].id).to.not.equal(structureId);\n    });\n\n    it('throws if you try to delete the current selected structure', () => {\n      const structureId = 'someId';\n      loanId = Factory.create('loan', {\n        structures: [{ id: structureId }],\n        selectedStructure: structureId,\n      })._id;\n\n      expect(() =>\n        LoanService.removeStructure({ loanId, structureId })).to.throw('pouvez pas');\n    });\n\n    it('removes a duplicate structure', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: '1' }],\n        selectedStructure: '1',\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId: '1' });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n\n      LoanService.removeStructure({\n        loanId,\n        structureId: loan.structures[1].id,\n      });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n    });\n\n    it('works for this edge case', () => {\n      loanId = Factory.create('loan', {\n        structures: [\n          {\n            id: 'poKbbHPf3FTKWt7vd',\n            propertyWork: 339000,\n          },\n          {\n            id: 'CfN4k8WKqRySCfvns',\n            propertyWork: 339000,\n          },\n        ],\n      })._id;\n\n      LoanService.removeStructure({ loanId, structureId: 'CfN4k8WKqRySCfvns' });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(1);\n    });\n  });\n\n  describe('updateStructure', () => {\n    it('updates a structure', () => {\n      const structureId = 'testId';\n      const propertyId = 'property1';\n      loanId = Factory.create('loan', {\n        structures: [\n          { id: structureId },\n          { id: `${structureId}0` },\n          { id: `${structureId}1` },\n        ],\n      })._id;\n      loan = LoanService.get(loanId);\n      expect(loan.structures.propertyId).to.equal(undefined);\n      LoanService.updateStructure({\n        loanId,\n        structureId,\n        structure: { propertyId },\n      });\n\n      loan = LoanService.get(loanId);\n      // This structure is correct\n      expect(loan.structures.find(({ id }) => id === structureId)).to.deep.include({ id: structureId, propertyId });\n\n      // Other structures are unaffected\n      loan.structures\n        .filter(({ id }) => id !== structureId)\n        .forEach((structure, index) => {\n          expect(structure).to.deep.include({\n            id: structureId + index,\n          });\n        });\n    });\n  });\n\n  describe('selectStructure', () => {\n    it('selects an existing structure', () => {\n      const structureId = 'testId';\n      const structureId2 = 'testId2';\n\n      loanId = Factory.create('loan', {\n        structures: [{ id: structureId }, { id: structureId2 }],\n        selectedStructure: structureId,\n      })._id;\n\n      LoanService.selectStructure({ loanId, structureId: structureId2 });\n      const { selectedStructure } = LoanService.get(loanId);\n\n      expect(selectedStructure).to.equal(structureId2);\n    });\n\n    it('throws if the structure does not exist', () => {\n      loanId = Factory.create('loan')._id;\n      const badId = 'inexistentId';\n\n      expect(() =>\n        LoanService.selectStructure({ loanId, structureId: badId })).to.throw(badId);\n    });\n  });\n\n  describe('duplicateStructure', () => {\n    it('duplicates a structure with a new id', () => {\n      const structureId = 'testId';\n\n      loanId = Factory.create('loan', {\n        structures: [\n          {\n            id: structureId,\n            name: 'joe',\n            description: 'hello',\n            fortuneUsed: 100,\n          },\n        ],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(2);\n      const { id: id1, name, ...structure1 } = loan.structures[0];\n      const { id: id2, name: name2, ...structure2 } = loan.structures[1];\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n    });\n\n    it('duplicates properly when multiple properties exist', () => {\n      const structureId = 'testId';\n      const property1 = 'property1';\n      const property2 = 'property2';\n\n      loanId = Factory.create('loan', {\n        propertyIds: [property1, property2],\n        structures: [\n          {\n            id: structureId,\n            name: 'joe',\n            description: 'hello',\n            fortuneUsed: 100,\n            propertyId: property2,\n          },\n        ],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId });\n\n      loan = LoanService.get(loanId);\n\n      const { id: id1, name, ...structure1 } = loan.structures[0];\n      const { id: id2, name: name2, ...structure2 } = loan.structures[1];\n      expect(id1).to.not.equal(id2);\n      expect(structure1).to.deep.equal(structure2);\n    });\n\n    it('adds \"- copie\" to the title', () => {\n      const structureId = 'testId';\n      const name = 'my structure';\n\n      loanId = Factory.create('loan', {\n        structures: [{ id: structureId, name }],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures[1].name).to.equal(`${name} - copie`);\n    });\n\n    it('inserts the duplicated structure right next to the duplicating one', () => {\n      const structureId = 'testId';\n      const name = 'structure';\n      loanId = Factory.create('loan', {\n        structures: [\n          { id: structureId + 0, name: name + 0 },\n          { id: structureId + 1, name: name + 1 },\n        ],\n      })._id;\n\n      LoanService.duplicateStructure({ loanId, structureId: structureId + 0 });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures.length).to.equal(3);\n      expect(loan.structures[0].name).to.equal(name + 0);\n      expect(loan.structures[1].name).to.equal(`${name + 0} - copie`);\n      expect(loan.structures[2].name).to.equal(name + 1);\n    });\n\n    it('duplicates with a good name if no name is on the structure', () => {\n      loanId = Factory.create('loan', {\n        structures: [{ id: 'testId' }],\n        selectedStructure: 'testId',\n      })._id;\n      LoanService.duplicateStructure({ loanId, structureId: 'testId' });\n      loan = LoanService.get(loanId);\n      expect(loan.structures[1].name).to.equal('Plan financier - copie');\n    });\n  });\n\n  describe('getNewLoanName', () => {\n    it('returns 19-0001 for the very first loan', () => {\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0001');\n    });\n\n    it('returns 19-0002 for the second loan', () => {\n      loanId = LoanService.insert({ loan: {} });\n      loan = LoanService.get(loanId);\n      expect(loan.name).to.equal('19-0001');\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0002');\n    });\n\n    it('sorts loans properly 1', () => {\n      Factory.create('loan', { name: '19-0009' });\n      Factory.create('loan', { name: '19-0010' });\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0011');\n    });\n\n    it('sorts loans properly even if created in different order', () => {\n      Factory.create('loan', { name: '19-0955' });\n      Factory.create('loan', { name: '19-0153' });\n      Factory.create('loan', { name: '19-0001' });\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-0956');\n    });\n\n    it('returns 19-1234 for the nth loan', () => {\n      Factory.create('loan', { name: '19-1233' });\n\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-1234');\n    });\n\n    it('does not break if a 10000th loan is added', () => {\n      Factory.create('loan', { name: '19-9999' });\n      const name = LoanService.getNewLoanName();\n      expect(name).to.equal('19-10000');\n    });\n\n    it('handles new year properly', () => {\n      Factory.create('loan', { name: '19-0003' });\n      const name = LoanService.getNewLoanName(new Date(2020, 1, 1));\n      expect(name).to.equal('20-0001');\n    });\n  });\n\n  describe('loan name regEx', () => {\n    it('allows loan names with correct format', () => {\n      expect(() => Factory.create('loan', { name: '18-0202' })).to.not.throw();\n    });\n\n    it('does not allow loan names with incorrect format', () => {\n      expect(() => Factory.create('loan', { name: '18-202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '1-202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '18202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '0202' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: 'abc' })).to.throw('regular expression');\n      expect(() => Factory.create('loan', { name: '18-a202' })).to.throw('regular expression');\n    });\n  });\n\n  describe('cleanupRemovedBorrower', () => {\n    it('removes all occurences of a borrower in structures', () => {\n      const borrowerId = 'dude';\n      const borrowerId2 = 'dude2';\n      loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId, borrowerId2],\n        structures: [\n          {\n            id: 'structId',\n            ownFunds: [\n              { borrowerId, value: 100, type: OWN_FUNDS_TYPES.BANK_3A },\n              {\n                borrowerId: borrowerId2,\n                value: 300,\n                type: OWN_FUNDS_TYPES.BANK_FORTUNE,\n              },\n            ],\n          },\n        ],\n      })._id;\n\n      LoanService.cleanupRemovedBorrower({ borrowerId });\n      loan = LoanService.get(loanId);\n\n      expect(loan.structures[0].ownFunds.length).to.equal(1);\n      expect(loan.structures[0].ownFunds[0].borrowerId).to.equal(borrowerId2);\n    });\n  });\n\n  describe('switchBorrower', () => {\n    it('switches a borrowerId with a new one', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId] })._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([oldBorrowerId]);\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([borrowerId]);\n    });\n\n    it('switches a borrowerId with a new one with multiple borrowers', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId, 'dude'] })\n        ._id;\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([oldBorrowerId, 'dude']);\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      loan = LoanService.get(loanId);\n\n      expect(loan.borrowerIds).to.deep.equal([borrowerId, 'dude']);\n    });\n\n    it('deletes the old borrower if it is only on this loan', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId] })._id;\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      const borrowers = BorrowerService.find({}).fetch();\n\n      expect(borrowers.length).to.equal(1);\n    });\n\n    it('does not delete the old borrower if it is only on this loan', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', { borrowerIds: [oldBorrowerId] })._id;\n      Factory.create('loan', { borrowerIds: [oldBorrowerId] });\n\n      LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId });\n\n      const borrowers = BorrowerService.find({}).fetch();\n\n      expect(borrowers.length).to.equal(2);\n    });\n\n    it('throws if the same borrower is tried to be added twice', () => {\n      const oldBorrowerId = Factory.create('borrower')._id;\n      const borrowerId = Factory.create('borrower')._id;\n      loanId = Factory.create('loan', {\n        borrowerIds: [oldBorrowerId, borrowerId],\n      })._id;\n\n      expect(() =>\n        LoanService.switchBorrower({ loanId, oldBorrowerId, borrowerId })).to.throw('déjà');\n    });\n  });\n\n  describe('assignLoanToUser', () => {\n    it('assigns all properties and borrowers to the new user', () => {\n      const userId = Factory.create('user')._id;\n      const borrowerId1 = Factory.create('borrower')._id;\n      const borrowerId2 = Factory.create('borrower')._id;\n      const propertyId1 = Factory.create('property')._id;\n      const propertyId2 = Factory.create('property')._id;\n      loanId = Factory.create('loan', {\n        borrowerIds: [borrowerId1, borrowerId2],\n        propertyIds: [propertyId1, propertyId2],\n      })._id;\n\n      LoanService.assignLoanToUser({ loanId, userId });\n\n      expect(LoanService.get(loanId).userId).to.equal(userId);\n      expect(BorrowerService.get(borrowerId1).userId).to.equal(userId);\n      expect(BorrowerService.get(borrowerId2).userId).to.equal(userId);\n      expect(PropertyService.get(propertyId1).userId).to.equal(userId);\n      expect(PropertyService.get(propertyId2).userId).to.equal(userId);\n    });\n\n    it('throws if a borrower is assigned to multiple loans', () => {\n      generator({\n        loans: [\n          { _id: 'loanId', borrowers: { _id: 'borr1' } },\n          { borrowers: [{ _id: 'borr1' }, {}] },\n        ],\n      });\n\n      expect(() =>\n        LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'dude' })).to.throw('emprunteur');\n    });\n\n    it('throws if a property is assigned to multiple loans', () => {\n      generator({\n        loans: [\n          { _id: 'loanId', properties: { _id: 'propId1' } },\n          { properties: [{ _id: 'propId1' }, {}] },\n        ],\n      });\n\n      expect(() =>\n        LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'dude' })).to.throw('bien immobilier');\n    });\n\n    it('does not throw for a PRO property, and assigns only USER properties', () => {\n      generator({\n        loans: [\n          { properties: { _id: 'propId1', category: PROPERTY_CATEGORY.PRO } },\n          {\n            _id: 'loanId',\n            properties: [{ _id: 'propId2' }, { _id: 'propId1' }],\n          },\n        ],\n      });\n\n      expect(() =>\n        LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'dude' })).to.not.throw();\n      expect(PropertyService.get('propId1').userId).to.equal(undefined);\n      expect(PropertyService.get('propId2').userId).to.equal('dude');\n    });\n\n    it('refers a user if this is his first loan', () => {\n      generator({\n        users: [\n          { _id: 'userId' },\n          {\n            _id: 'proId',\n            _factory: 'pro',\n            organisations: { _id: 'orgId' },\n          },\n        ],\n        loans: { _id: 'loanId', referralId: 'proId' },\n      });\n\n      LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'userId' });\n\n      const user = UserService.fetchOne({\n        $filters: { _id: 'userId' },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n      });\n\n      expect(user).to.deep.include({\n        referredByUserLink: 'proId',\n        referredByOrganisationLink: 'orgId',\n      });\n    });\n\n    it('does not change referredBy if it is already set', () => {\n      generator({\n        users: [\n          { _id: 'userId', referredByUser: { _id: 'proId1' } },\n          {\n            _id: 'proId2',\n            _factory: 'pro',\n            organisations: { _id: 'orgId' },\n          },\n        ],\n        loans: { _id: 'loanId', referralId: 'proId2' },\n      });\n\n      LoanService.assignLoanToUser({ loanId: 'loanId', userId: 'userId' });\n\n      const user = UserService.fetchOne({\n        $filters: { _id: 'userId' },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n      });\n\n      expect(user).to.deep.equal({\n        _id: 'userId',\n        referredByUserLink: 'proId1',\n      });\n    });\n  });\n\n  describe('sendNegativeFeedbackToAllLenders', () => {\n    let addresses = [];\n    const insertMultipleOffers = ({\n      numberOfLenders,\n      numberOfOffersPerLender,\n    }) => {\n      let offerIds = [];\n\n      [...Array(numberOfLenders)].forEach((_, index) => {\n        // Create contact\n        const address = faker.internet.email();\n        addresses = [...addresses, address];\n        const contactId = Factory.create('contact', { emails: [{ address }] })\n          ._id;\n\n        // Create org\n        const organisationId = Factory.create('organisation', {\n          contactIds: [{ _id: contactId }],\n          name: `org ${index}`,\n        })._id;\n\n        // Create lender\n        const lenderId = LenderService.insert({\n          lender: { loanId },\n          organisationId,\n          contactId,\n        });\n\n        // Create offers\n        [...Array(numberOfOffersPerLender)].forEach(() => {\n          offerIds = [\n            ...offerIds,\n            OfferService.insert({\n              offer: { interest10: 1, maxAmount: 1000000, lenderId },\n            }),\n          ];\n        });\n      });\n\n      return offerIds;\n    };\n\n    beforeEach(() => {\n      resetDatabase();\n      loanId = 'someLoan';\n      generator({\n        users: [\n          { _id: 'adminId', _factory: 'adminEpotek' },\n          {\n            _id: 'userId',\n            assignedEmployee: { _id: 'adminId' },\n            loans: {\n              _id: loanId,\n              borrowers: {},\n              properties: {\n                _id: 'propertyId',\n                address1: 'rue du lac 31',\n                zipCode: 1400,\n                city: 'Yverdon',\n              },\n              structures: [{ id: 'struct', propertyId: 'propertyId' }],\n              selectedStructure: 'struct',\n            },\n          },\n        ],\n      });\n\n      addresses = [];\n    });\n\n    it('sends a negative feedback to all lenders', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 1;\n\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender,\n      });\n\n      expect(offerIds.length).to.equal(numberOfLenders * numberOfOffersPerLender);\n\n      return LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(numberOfLenders))\n        .then((emails) => {\n          expect(emails.length).to.equal(numberOfLenders);\n          addresses.forEach(email =>\n            expect(emails.some(({ address }) => address === email)).to.equal(true));\n        });\n    });\n\n    it('sends a negative feedback to all lenders once only', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 10;\n\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender,\n      });\n\n      expect(offerIds.length).to.equal(numberOfLenders * numberOfOffersPerLender);\n\n      return LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(numberOfLenders))\n        .then((emails) => {\n          expect(emails.length).to.equal(numberOfLenders);\n          addresses.forEach(email =>\n            expect(emails.some(({ address }) => address === email)).to.equal(true));\n        });\n    });\n\n    it('does not send any feedback if there is no lender', () =>\n      LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(0))\n        .then((emails) => {\n          expect(emails.length).to.equal(0);\n        }));\n\n    it('does not send any feedback if there is no offer', () => {\n      const numberOfLenders = 5;\n      const numberOfOffersPerLender = 0;\n\n      const offerIds = insertMultipleOffers({\n        loanId,\n        numberOfLenders,\n        numberOfOffersPerLender,\n      });\n\n      expect(offerIds.length).to.equal(0);\n\n      return LoanService.sendNegativeFeedbackToAllLenders({ loanId })\n        .then(() => checkEmails(0))\n        .then((emails) => {\n          expect(emails.length).to.equal(0);\n        });\n    });\n  });\n\n  describe('setStep', () => {\n    it('sets the step', () => {\n      generator({\n        loans: { _id: 'id', step: STEPS.SOLVENCY },\n      });\n\n      LoanService.setStep({ loanId: 'id', nextStep: STEPS.REQUEST });\n\n      loan = LoanService.get('id');\n\n      expect(loan.step).to.equal(STEPS.REQUEST);\n    });\n\n    it('sends a notification email if the step goes from SOLVENCY to OFFERS', () => {\n      generator({\n        users: {\n          _id: 'admin',\n          _factory: 'admin',\n          firstName: 'Admin',\n          lastName: 'User',\n        },\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.SOLVENCY,\n          user: {\n            emails: [{ address: 'john@doe.com', verified: false }],\n            assignedEmployeeId: 'admin',\n          },\n        },\n      });\n\n      LoanService.setStep({ loanId: 'myLoan', nextStep: STEPS.OFFERS });\n\n      loan = LoanService.get('myLoan');\n\n      expect(loan.step).to.equal(STEPS.OFFERS);\n\n      return checkEmails(1).then((emails) => {\n        const {\n          emailId,\n          address,\n          response: { status },\n          template: {\n            message: { from_email, subject, global_merge_vars, from_name },\n          },\n        } = emails[0];\n\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.FIND_LENDER_NOTIFICATION);\n        expect(address).to.equal('john@doe.com');\n        expect(from_email).to.equal('info@e-potek.ch');\n        expect(from_name).to.equal('e-Potek');\n        expect(subject).to.include('[e-Potek] Identifiez votre prêteur');\n        expect(global_merge_vars.find(({ name }) => name === 'CTA_URL').content).to.include('/loans/myLoan');\n        expect(global_merge_vars.find(({ name }) => name === 'BODY').content).to.include('Admin User');\n      });\n    });\n\n    it('sends a notification email if the step goes from REQUEST to OFFERS', () => {\n      generator({\n        users: { _id: 'admin' },\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.REQUEST,\n          user: {\n            emails: [{ address: 'john@doe.com', verified: false }],\n            assignedEmployeeId: 'admin',\n          },\n        },\n      });\n      LoanService.setStep({ loanId: 'myLoan', nextStep: STEPS.OFFERS });\n\n      return checkEmails(1).then((emails) => {\n        const {\n          emailId,\n          response: { status },\n        } = emails[0];\n\n        expect(status).to.equal('sent');\n        expect(emailId).to.equal(EMAIL_IDS.FIND_LENDER_NOTIFICATION);\n      });\n    });\n\n    it('does not send a notification email if the step goes from REQUEST to OFFERS', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          step: STEPS.CLOSING,\n          user: { emails: [{ address: 'john@doe.com', verified: false }] },\n        },\n      });\n      LoanService.setStep({ loanId: 'myLoan', nextStep: STEPS.OFFERS });\n\n      return checkEmails(1, { timeout: 2000, noExpect: true }).then((emails) => {\n        expect(emails.length).to.equal(0);\n      });\n    });\n  });\n\n  describe('getLoanCalculator', () => {\n    it('returns an uninitialized calculator by default', () => {\n      generator({ loans: { _id: 'myLoan' } });\n\n      const calc = LoanService.getLoanCalculator({ loanId: 'myLoan' });\n\n      expect(calc.organisationName).to.equal(undefined);\n    });\n\n    it('initializes a calculator if an offer has been chosen', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          lenders: {\n            organisation: { name: 'Org1', lenderRules: {} },\n            offers: { _id: 'offerId' },\n          },\n          structures: [{ offerId: 'offerId', id: 'struct' }],\n          selectedStructure: 'struct',\n        },\n      });\n\n      const calc = LoanService.getLoanCalculator({ loanId: 'myLoan' });\n\n      expect(calc.organisationName).to.equal('Org1');\n    });\n\n    it('initializes a calculator if a promotion has a lenderOrganisation on it', () => {\n      generator({\n        loans: {\n          _id: 'myLoan',\n          promotions: {\n            lenderOrganisation: { name: 'Org2', lenderRules: {} },\n          },\n        },\n      });\n\n      const calc = LoanService.getLoanCalculator({ loanId: 'myLoan' });\n\n      expect(calc.organisationName).to.equal('Org2');\n    });\n  });\n\n  describe('setMaxPropertyValueWithoutBorrowRatio', function () {\n    this.timeout(10000);\n\n    it('finds the ideal borrowRatio', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n        },\n        organisations: [\n          ...generateOrganisationsWithLenderRules({\n            number: 5,\n            mainBorrowRatio: { min: 0.65, max: 0.9 },\n            secondaryBorrowRatio: { min: 0.5, max: 0.7 },\n          }),\n          {\n            name: 'no lender rules',\n            type: ORGANISATION_TYPES.BANK,\n            features: [ORGANISATION_FEATURES.LENDER],\n          },\n        ],\n      });\n\n      LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: 'loanId',\n        canton: 'GE',\n      });\n\n      const {\n        maxPropertyValue: { canton, date, main, second },\n      } = LoanService.fetchOne({\n        $filters: { _id: 'loanId' },\n        maxPropertyValue: 1,\n      });\n\n      expect(canton).to.equal('GE');\n      expect(moment(date).format('YYYY-MM-DD')).to.equal(moment().format('YYYY-MM-DD'));\n      expect(main.min.borrowRatio).to.equal(0.65);\n      expect(main.min.propertyValue).to.equal(1496000);\n      expect(main.max.borrowRatio).to.equal(0.835);\n      expect(main.max.propertyValue).to.equal(2761000);\n      expect(second.min.borrowRatio).to.equal(0.5);\n      expect(second.min.propertyValue).to.equal(909000);\n      expect(second.max.borrowRatio).to.equal(0.65);\n      expect(second.max.propertyValue).to.equal(1245000);\n    });\n\n    it('Only uses the promotion lender', () => {\n      generator({\n        loans: {\n          _id: 'loanId',\n          borrowers: {\n            bankFortune: 500000,\n            salary: 1000000,\n            insurance2: [{ value: 100000 }],\n          },\n          promotions: {\n            lenderOrganisation: generateOrganisationsWithLenderRules({\n              number: 1,\n              mainBorrowRatio: { min: 0.75, max: 0.75 },\n              secondaryBorrowRatio: { min: 0.7, max: 0.7 },\n            }),\n          },\n        },\n      });\n\n      LoanService.setMaxPropertyValueWithoutBorrowRatio({\n        loanId: 'loanId',\n        canton: 'GE',\n      });\n\n      const {\n        maxPropertyValue: { canton, date, main, second },\n      } = LoanService.fetchOne({\n        $filters: { _id: 'loanId' },\n        maxPropertyValue: 1,\n      });\n\n      expect(canton).to.equal('GE');\n      expect(moment(date).format('YYYY-MM-DD')).to.equal(moment().format('YYYY-MM-DD'));\n      expect(main.min).to.equal(undefined);\n      expect(main.max.borrowRatio).to.equal(0.75);\n      expect(main.max.propertyValue).to.equal(1988000);\n      expect(second.min).to.equal(undefined);\n      expect(second.max.borrowRatio).to.equal(0.7);\n      expect(second.max.propertyValue).to.equal(1420000);\n    });\n  });\n\n  describe('expireAnonymousLoans', () => {\n    it('does not update any unmatched loans', () => {\n      generator({\n        loans: [\n          { anonymous: true },\n          { anonymous: true, status: LOAN_STATUS.UNSUCCESSFUL },\n        ],\n      });\n\n      expect(LoanService.expireAnonymousLoans()).to.equal(0);\n    });\n\n    it('only updates loans from more than a week ago', async () => {\n      const promises = [];\n      for (let index = 0; index < 10; index++) {\n        promises.push(LoanService.rawCollection.insert({\n          anonymous: true,\n          updatedAt: moment()\n            .subtract(index, 'days')\n            .toDate(),\n          _id: index,\n          name: index,\n        }));\n      }\n\n      await Promise.all(promises);\n\n      expect(LoanService.expireAnonymousLoans()).to.equal(5);\n    });\n\n    it('does not update loans already at UNSUCCESSFUL status', async () => {\n      await LoanService.rawCollection.insert({\n        anonymous: true,\n        updatedAt: moment()\n          .subtract(10, 'days')\n          .toDate(),\n        _id: 'a',\n        name: 'b',\n        status: LOAN_STATUS.UNSUCCESSFUL,\n      });\n\n      expect(LoanService.expireAnonymousLoans()).to.equal(0);\n    });\n  });\n\n  describe('insertAnonymousLoan', () => {\n    it('inserts an anonymous loan', () => {\n      LoanService.insertAnonymousLoan({ referralId: 'someId' });\n\n      expect(LoanService.findOne({})).to.deep.include({\n        anonymous: true,\n        displayWelcomeScreen: false,\n        referralId: 'someId',\n      });\n    });\n\n    it('creates a link with a property if provided', () => {\n      generator({ properties: { _id: 'propertyId' } });\n      LoanService.insertAnonymousLoan({ proPropertyId: 'propertyId' });\n\n      expect(LoanService.findOne({})).to.deep.include({\n        propertyIds: ['propertyId'],\n      });\n    });\n  });\n});\n"]},"sourceType":"script","hash":"3cf52413abe9952571d883912f24c92d56568373"}

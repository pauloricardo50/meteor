{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/16.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/migrations/server/test/16.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/16.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/migrations/server/test/16.test.js"],"names":["expect","resetDatabase","Users","Contacts","up","down","describe","beforeEach","it","rawCollection","insert","_id","phoneNumbers","find","fetch","to","deep","equal"],"mappings":"AAAA;;AACA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,KAAT,EAAgBC,QAAhB;AACA,SAASC,EAAT,EAAaC,IAAb;AAEAC,QAAQ,CAAC,cAAD,EAAiB,MAAM;AAC7BC,EAAAA,UAAU,CAAC,MAAM;AACfN,IAAAA,aAAa;AACd,GAFS,CAAV;AAIAK,EAAAA,QAAQ,CAAC,IAAD,EAAO,MAAM;AACnBE,IAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACtC,YAAMN,KAAK,CAACO,aAAN,GAAsBC,MAAtB,CAA6B;AACjCC,QAAAA,GAAG,EAAE,GAD4B;AAEjCC,QAAAA,YAAY,EAAE,CAAC,WAAD;AAFmB,OAA7B,CAAN;AAIA,YAAMT,QAAQ,CAACM,aAAT,GAAyBC,MAAzB,CAAgC;AACpCC,QAAAA,GAAG,EAAE,GAD+B;AAEpCC,QAAAA,YAAY,EAAE,CAAC,oBAAD;AAFsB,OAAhC,CAAN;AAKA,YAAMR,EAAE,EAAR;AAEAJ,MAAAA,MAAM,CAACE,KAAK,CAACW,IAAN,GAAaC,KAAb,GAAqB,CAArB,EAAwBF,YAAzB,CAAN,CAA6CG,EAA7C,CAAgDC,IAAhD,CAAqDC,KAArD,CAA2D,CACzD,kBADyD,CAA3D;AAGAjB,MAAAA,MAAM,CAACG,QAAQ,CAACU,IAAT,GAAgBC,KAAhB,GAAwB,CAAxB,EAA2BF,YAA5B,CAAN,CAAgDG,EAAhD,CAAmDC,IAAnD,CAAwDC,KAAxD,CAA8D,CAC5D,mBAD4D,CAA9D;AAGD,KAlBC,CAAF;AAoBAT,IAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAY;AACxD,YAAMN,KAAK,CAACO,aAAN,GAAsBC,MAAtB,CAA6B;AAAEC,QAAAA,GAAG,EAAE;AAAP,OAA7B,CAAN;AAEA,YAAMP,EAAE,EAAR;AAEAJ,MAAAA,MAAM,CAACE,KAAK,CAACW,IAAN,GAAaC,KAAb,GAAqB,CAArB,EAAwBF,YAAzB,CAAN,CAA6CG,EAA7C,CAAgDC,IAAhD,CAAqDC,KAArD,CAA2D,EAA3D;AACD,KANC,CAAF;AAQAT,IAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AACxC,YAAMN,KAAK,CAACO,aAAN,GAAsBC,MAAtB,CAA6B;AAAEC,QAAAA,GAAG,EAAE,GAAP;AAAYC,QAAAA,YAAY,EAAE,CAAC,KAAD;AAA1B,OAA7B,CAAN;AAEA,YAAMR,EAAE,EAAR;AAEAJ,MAAAA,MAAM,CAACE,KAAK,CAACW,IAAN,GAAaC,KAAb,GAAqB,CAArB,EAAwBF,YAAzB,CAAN,CAA6CG,EAA7C,CAAgDC,IAAhD,CAAqDC,KAArD,CAA2D,CAAC,KAAD,CAA3D;AACD,KANC,CAAF;AAOD,GApCO,CAAR;AAsCAX,EAAAA,QAAQ,CAAC,MAAD,EAAS,MAAM,CAAE,CAAjB,CAAR;AACD,CA5CO,CAAR","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { Users, Contacts } from '../../..';\nimport { up, down } from '../16';\n\ndescribe('Migration 16', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('up', () => {\n    it('formats phone numbers', async () => {\n      await Users.rawCollection().insert({\n        _id: '2',\n        phoneNumbers: ['225660110'],\n      });\n      await Contacts.rawCollection().insert({\n        _id: '3',\n        phoneNumbers: ['0033 1 09 75 83 51'],\n      });\n\n      await up();\n\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal([\n        '+41 22 566 01 10',\n      ]);\n      expect(Contacts.find().fetch()[0].phoneNumbers).to.deep.equal([\n        '+33 1 09 75 83 51',\n      ]);\n    });\n\n    it('does not fail if no phone numbers exist', async () => {\n      await Users.rawCollection().insert({ _id: '2' });\n\n      await up();\n\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal([]);\n    });\n\n    it('does not format garbage', async () => {\n      await Users.rawCollection().insert({ _id: '2', phoneNumbers: ['asd'] });\n\n      await up();\n\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal(['asd']);\n    });\n  });\n\n  describe('down', () => {});\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/migrations/server/test/16.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/migrations/server/test/16.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet Users, Contacts;\nmodule.link(\"../../..\", {\n  Users(v) {\n    Users = v;\n  },\n\n  Contacts(v) {\n    Contacts = v;\n  }\n\n}, 2);\nlet up, down;\nmodule.link(\"../16\", {\n  up(v) {\n    up = v;\n  },\n\n  down(v) {\n    down = v;\n  }\n\n}, 3);\ndescribe('Migration 16', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n  describe('up', () => {\n    it('formats phone numbers', () => Promise.asyncApply(() => {\n      Promise.await(Users.rawCollection().insert({\n        _id: '2',\n        phoneNumbers: ['225660110']\n      }));\n      Promise.await(Contacts.rawCollection().insert({\n        _id: '3',\n        phoneNumbers: ['0033 1 09 75 83 51']\n      }));\n      Promise.await(up());\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal(['+41 22 566 01 10']);\n      expect(Contacts.find().fetch()[0].phoneNumbers).to.deep.equal(['+33 1 09 75 83 51']);\n    }));\n    it('does not fail if no phone numbers exist', () => Promise.asyncApply(() => {\n      Promise.await(Users.rawCollection().insert({\n        _id: '2'\n      }));\n      Promise.await(up());\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal([]);\n    }));\n    it('does not format garbage', () => Promise.asyncApply(() => {\n      Promise.await(Users.rawCollection().insert({\n        _id: '2',\n        phoneNumbers: ['asd']\n      }));\n      Promise.await(up());\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal(['asd']);\n    }));\n  });\n  describe('down', () => {});\n});","map":{"version":3,"sources":["imports/core/api/migrations/server/test/16.test.js"],"names":["describe","beforeEach","resetDatabase","it","_id","phoneNumbers","up","expect","Users","Contacts"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport { Users, Contacts } from '../../..';\nimport { up, down } from '../16';\n\ndescribe('Migration 16', () => {\n  beforeEach(() => {\n    resetDatabase();\n  });\n\n  describe('up', () => {\n    it('formats phone numbers', async () => {\n      await Users.rawCollection().insert({\n        _id: '2',\n        phoneNumbers: ['225660110'],\n      });\n      await Contacts.rawCollection().insert({\n        _id: '3',\n        phoneNumbers: ['0033 1 09 75 83 51'],\n      });\n\n      await up();\n\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal([\n        '+41 22 566 01 10',\n      ]);\n      expect(Contacts.find().fetch()[0].phoneNumbers).to.deep.equal([\n        '+33 1 09 75 83 51',\n      ]);\n    });\n\n    it('does not fail if no phone numbers exist', async () => {\n      await Users.rawCollection().insert({ _id: '2' });\n\n      await up();\n\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal([]);\n    });\n\n    it('does not format garbage', async () => {\n      await Users.rawCollection().insert({ _id: '2', phoneNumbers: ['asd'] });\n\n      await up();\n\n      expect(Users.find().fetch()[0].phoneNumbers).to.deep.equal(['asd']);\n    });\n  });\n\n  describe('down', () => {});\n});\n"]},"sourceType":"script","hash":"f4131546642270a8f35780a73d404524611d2aa9"}

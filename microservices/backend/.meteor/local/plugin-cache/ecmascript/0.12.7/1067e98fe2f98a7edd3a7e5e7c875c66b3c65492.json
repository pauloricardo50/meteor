{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/inviteCustomerToProProperties.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/inviteCustomerToProProperties.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/inviteCustomerToProProperties.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/inviteCustomerToProProperties.test.js"],"names":["Meteor","resetDatabase","expect","sinon","UserService","PropertyService","PROPERTY_CATEGORY","PROPERTY_STATUS","SlackService","generator","RESTAPI","inviteCustomerToProPropertiesAPI","fetchAndCheckResponse","makeHeaders","getTimestampAndNonce","HTTP_STATUS_CODES","customerToInvite","email","firstName","lastName","phoneNumber","api","addEndpoint","inviteCustomerToProProperties","userData","expectedResponse","properties","impersonateUser","shareSolvency","timestamp","nonce","body","user","query","undefined","url","data","method","headers","userId","JSON","stringify","describe","timeout","before","settings","public","microservice","parent","pending","skip","start","after","reset","beforeEach","users","_factory","_id","emails","address","verified","organisations","name","proProperties","category","PRO","externalId","organisation","it","setProUserPermissions","propertyId","permissions","canInviteCustomers","message","then","customer","fetchOne","$filters","$in","referredByUserLink","referredByOrganisationLink","loans","to","equal","status","CONFLICT","newProperty","SOLD","property","findOne","FOR_SALE","propertyType","spy","stub","callsFake","address1","calledOnce","args","username","attachments","title","send","restore"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nimport UserService from '../../../../users/server/UserService';\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_STATUS,\n} from '../../../../properties/propertyConstants';\nimport SlackService from '../../../../slack/server/SlackService';\nimport generator from '../../../../factories';\nimport RESTAPI from '../../RESTAPI';\nimport inviteCustomerToProPropertiesAPI from '../inviteCustomerToProProperties';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\nimport { HTTP_STATUS_CODES } from '../../restApiConstants';\n\nconst customerToInvite = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '+41 22 566 01 10',\n};\n\nconst api = new RESTAPI();\napi.addEndpoint(\n  '/properties/invite-customer',\n  'POST',\n  inviteCustomerToProPropertiesAPI,\n);\n\nconst inviteCustomerToProProperties = ({\n  userData,\n  expectedResponse,\n  properties,\n  impersonateUser,\n  shareSolvency,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const body = {\n    user: userData || customerToInvite,\n    properties,\n    shareSolvency,\n  };\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: '/properties/invite-customer',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n  });\n};\n\ndescribe('REST: inviteCustomerToProProperties', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          emails: [{ address: 'pro@org.com', verified: true }],\n          organisations: [{ _id: 'org', name: 'Main Org' }],\n          proProperties: [\n            { _id: 'property1', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property2', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property3', category: PROPERTY_CATEGORY.PRO },\n            {\n              _id: 'externalProperty1',\n              externalId: 'ext1',\n              category: PROPERTY_CATEGORY.PRO,\n            },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          emails: [{ address: 'pro2@org.com', verified: true }],\n          organisations: [{ _id: 'org' }],\n          proProperties: [\n            { _id: 'property4', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property5', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property6', category: PROPERTY_CATEGORY.PRO },\n            {\n              _id: 'externalProperty2',\n              externalId: 'ext2',\n              category: PROPERTY_CATEGORY.PRO,\n            },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro3',\n          emails: [{ address: 'pro3@org2.com', verified: true }],\n          organisation: [{ _id: 'org2' }],\n        },\n      ],\n    });\n  });\n\n  it('invites a customer to multiple properties', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property1' },\n        { _id: 'property2' },\n        { _id: 'property3' },\n        { externalId: 'ext1' },\n        { externalId: 'ext3', category: PROPERTY_CATEGORY.PRO },\n      ],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext1\\\", \\\"ext3\\\", \\\"property1\\\", \\\"property2\\\" and \\\"property3\\\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(customer.loans[0].shareSolvency).to.equal(undefined);\n    });\n  });\n\n  it('invites a customer to multiple properties with solvency sharing', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property1' },\n        { _id: 'property2' },\n        { _id: 'property3' },\n        { externalId: 'ext1' },\n        { externalId: 'ext3', category: PROPERTY_CATEGORY.PRO },\n      ],\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext1\\\", \\\"ext3\\\", \\\"property1\\\", \\\"property2\\\" and \\\"property3\\\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(customer.loans[0].shareSolvency).to.equal(true);\n    });\n  });\n\n  it('invites a customer to multiple properties with impersonateUser', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property4',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property5',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property6',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty2',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n        { externalId: 'ext2' },\n        { externalId: 'ext3', category: PROPERTY_CATEGORY.PRO },\n      ],\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext2\\\", \\\"ext3\\\", \\\"property4\\\", \\\"property5\\\" and \\\"property6\\\"`,\n      },\n    });\n  });\n\n  it('returns an error when the user has not the right permissions', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property1' },\n        { _id: 'property2' },\n        { _id: 'property3' },\n      ],\n      expectedResponse: {\n        status: 400,\n        message:\n          'Vous ne pouvez pas inviter de clients sur ce bien immobilier [NOT_AUTHORIZED]',\n      },\n    });\n  });\n\n  it('returns an error when the user does not have the right permissions with impersonateUser', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property4',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property5',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n      ],\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        status: 400,\n        message:\n          'Vous ne pouvez pas inviter de clients sur ce bien immobilier [NOT_AUTHORIZED]',\n      },\n    });\n  });\n\n  it('returns an error when the user is not in the same organisation as impersonateUser', () =>\n    inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n      ],\n      impersonateUser: 'pro3@org2.com',\n      expectedResponse: {\n        status: 400,\n        message:\n          '[User with email address \"pro3@org2.com\" is not part of your organisation]',\n      },\n    }));\n\n  it('returns an error when impersonateUser does not exist', () =>\n    inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n      ],\n      impersonateUser: 'pro4@org.com',\n      expectedResponse: {\n        status: 400,\n        message: '[No user found for email address \"pro4@org.com\"]',\n      },\n    }));\n\n  it('returns an error when property is invalid', () =>\n    inviteCustomerToProProperties({\n      properties: [{ _id: 'property4', externalId: 'test' }],\n      expectedResponse: {\n        status: 400,\n        message: '[Each property must have either a \"_id\" or \"externalId\" key]',\n      },\n    }));\n\n  it('returns an error when properties is empty', () =>\n    inviteCustomerToProProperties({\n      properties: [],\n      expectedResponse: {\n        status: 400,\n        message: '[You must provide at least one valid property]',\n      },\n    }));\n\n  it('returns an error when no property is given', () =>\n    inviteCustomerToProProperties({\n      expectedResponse: {\n        status: 400,\n        message: '[You must provide at least one valid property]',\n      },\n    }));\n\n  it('returns an error if the customer is already invited to one property', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [{ _id: 'property2' }],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"property2\\\"`,\n      },\n    }).then(() =>\n      inviteCustomerToProProperties({\n        properties: [\n          { _id: 'property1' },\n          { _id: 'property2' },\n          { _id: 'property3' },\n        ],\n        expectedResponse: {\n          status: HTTP_STATUS_CODES.CONFLICT,\n          message: 'Cet utilisateur est déjà invité à ce bien immobilier [409]',\n        },\n      }));\n  });\n\n  it('cleans invalid fields in insert', () => {\n    const newProperty = {\n      externalId: 'myId',\n      status: PROPERTY_STATUS.SOLD,\n    };\n\n    return inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"myId\\\"`,\n      },\n    }).then(() => {\n      const property = PropertyService.findOne({ externalId: 'myId' });\n      expect(property.status).to.equal(PROPERTY_STATUS.FOR_SALE);\n    });\n  });\n\n  it('does not allow invalid fields in insert', () => {\n    const newProperty = {\n      externalId: 'myId',\n      propertyType: 'FALSE_TYPE',\n    };\n\n    return inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        status: 400,\n        message: '[ClientError: FALSE_TYPE is not an allowed value]',\n      },\n    });\n  });\n\n  it('sends a properly formatted slack notification', async () => {\n    const spy = sinon.spy();\n    sinon.stub(SlackService, 'send').callsFake(spy);\n\n    const newProperty = { externalId: 'myId', address1: 'Rue du parc 3' };\n\n    await inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"myId\\\"`,\n      },\n    });\n\n    expect(spy.calledOnce).to.equal(true);\n    expect(spy.args[0][0].username).to.equal('TestFirstName TestLastName (API Main Org)');\n    expect(spy.args[0][0].attachments[0].title).to.equal('Test User a été invité au bien immo \"Rue du parc 3\"');\n\n    SlackService.send.restore();\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/RESTAPI/server/endpoints/test/inviteCustomerToProProperties.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/RESTAPI/server/endpoints/test/inviteCustomerToProProperties.test.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 1);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 2);\nlet sinon;\nmodule.link(\"sinon\", {\n  default(v) {\n    sinon = v;\n  }\n\n}, 3);\nlet UserService;\nmodule.link(\"../../../../users/server/UserService\", {\n  default(v) {\n    UserService = v;\n  }\n\n}, 4);\nlet PropertyService;\nmodule.link(\"../../../../properties/server/PropertyService\", {\n  default(v) {\n    PropertyService = v;\n  }\n\n}, 5);\nlet PROPERTY_CATEGORY, PROPERTY_STATUS;\nmodule.link(\"../../../../properties/propertyConstants\", {\n  PROPERTY_CATEGORY(v) {\n    PROPERTY_CATEGORY = v;\n  },\n\n  PROPERTY_STATUS(v) {\n    PROPERTY_STATUS = v;\n  }\n\n}, 6);\nlet SlackService;\nmodule.link(\"../../../../slack/server/SlackService\", {\n  default(v) {\n    SlackService = v;\n  }\n\n}, 7);\nlet generator;\nmodule.link(\"../../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 8);\nlet RESTAPI;\nmodule.link(\"../../RESTAPI\", {\n  default(v) {\n    RESTAPI = v;\n  }\n\n}, 9);\nlet inviteCustomerToProPropertiesAPI;\nmodule.link(\"../inviteCustomerToProProperties\", {\n  default(v) {\n    inviteCustomerToProPropertiesAPI = v;\n  }\n\n}, 10);\nlet fetchAndCheckResponse, makeHeaders, getTimestampAndNonce;\nmodule.link(\"../../test/apiTestHelpers.test\", {\n  fetchAndCheckResponse(v) {\n    fetchAndCheckResponse = v;\n  },\n\n  makeHeaders(v) {\n    makeHeaders = v;\n  },\n\n  getTimestampAndNonce(v) {\n    getTimestampAndNonce = v;\n  }\n\n}, 11);\nlet HTTP_STATUS_CODES;\nmodule.link(\"../../restApiConstants\", {\n  HTTP_STATUS_CODES(v) {\n    HTTP_STATUS_CODES = v;\n  }\n\n}, 12);\nconst customerToInvite = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '+41 22 566 01 10'\n};\nconst api = new RESTAPI();\napi.addEndpoint('/properties/invite-customer', 'POST', inviteCustomerToProPropertiesAPI);\n\nconst inviteCustomerToProProperties = ({\n  userData,\n  expectedResponse,\n  properties,\n  impersonateUser,\n  shareSolvency\n}) => {\n  const {\n    timestamp,\n    nonce\n  } = getTimestampAndNonce();\n  const body = {\n    user: userData || customerToInvite,\n    properties,\n    shareSolvency\n  };\n  const query = impersonateUser ? {\n    'impersonate-user': impersonateUser\n  } : undefined;\n  return fetchAndCheckResponse({\n    url: '/properties/invite-customer',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query\n      }),\n      body: JSON.stringify(body)\n    },\n    expectedResponse\n  });\n};\n\ndescribe('REST: inviteCustomerToProProperties', function () {\n  this.timeout(10000);\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n  after(() => {\n    api.reset();\n  });\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [{\n        _factory: 'pro',\n        _id: 'pro',\n        emails: [{\n          address: 'pro@org.com',\n          verified: true\n        }],\n        organisations: [{\n          _id: 'org',\n          name: 'Main Org'\n        }],\n        proProperties: [{\n          _id: 'property1',\n          category: PROPERTY_CATEGORY.PRO\n        }, {\n          _id: 'property2',\n          category: PROPERTY_CATEGORY.PRO\n        }, {\n          _id: 'property3',\n          category: PROPERTY_CATEGORY.PRO\n        }, {\n          _id: 'externalProperty1',\n          externalId: 'ext1',\n          category: PROPERTY_CATEGORY.PRO\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro2',\n        emails: [{\n          address: 'pro2@org.com',\n          verified: true\n        }],\n        organisations: [{\n          _id: 'org'\n        }],\n        proProperties: [{\n          _id: 'property4',\n          category: PROPERTY_CATEGORY.PRO\n        }, {\n          _id: 'property5',\n          category: PROPERTY_CATEGORY.PRO\n        }, {\n          _id: 'property6',\n          category: PROPERTY_CATEGORY.PRO\n        }, {\n          _id: 'externalProperty2',\n          externalId: 'ext2',\n          category: PROPERTY_CATEGORY.PRO\n        }]\n      }, {\n        _factory: 'pro',\n        _id: 'pro3',\n        emails: [{\n          address: 'pro3@org2.com',\n          verified: true\n        }],\n        organisation: [{\n          _id: 'org2'\n        }]\n      }]\n    });\n  });\n  it('invites a customer to multiple properties', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty1',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    return inviteCustomerToProProperties({\n      properties: [{\n        _id: 'property1'\n      }, {\n        _id: 'property2'\n      }, {\n        _id: 'property3'\n      }, {\n        externalId: 'ext1'\n      }, {\n        externalId: 'ext3',\n        category: PROPERTY_CATEGORY.PRO\n      }],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext1\\\", \\\"ext3\\\", \\\"property1\\\", \\\"property2\\\" and \\\"property3\\\"`\n      }\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: {\n          'emails.address': {\n            $in: [customerToInvite.email]\n          }\n        },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: {\n          shareSolvency: 1\n        }\n      });\n      expect(customer.loans[0].shareSolvency).to.equal(undefined);\n    });\n  });\n  it('invites a customer to multiple properties with solvency sharing', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty1',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    return inviteCustomerToProProperties({\n      properties: [{\n        _id: 'property1'\n      }, {\n        _id: 'property2'\n      }, {\n        _id: 'property3'\n      }, {\n        externalId: 'ext1'\n      }, {\n        externalId: 'ext3',\n        category: PROPERTY_CATEGORY.PRO\n      }],\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext1\\\", \\\"ext3\\\", \\\"property1\\\", \\\"property2\\\" and \\\"property3\\\"`\n      }\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: {\n          'emails.address': {\n            $in: [customerToInvite.email]\n          }\n        },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: {\n          shareSolvency: 1\n        }\n      });\n      expect(customer.loans[0].shareSolvency).to.equal(true);\n    });\n  });\n  it('invites a customer to multiple properties with impersonateUser', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property4',\n      userId: 'pro2',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property5',\n      userId: 'pro2',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property6',\n      userId: 'pro2',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty2',\n      userId: 'pro2',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    return inviteCustomerToProProperties({\n      properties: [{\n        _id: 'property4'\n      }, {\n        _id: 'property5'\n      }, {\n        _id: 'property6'\n      }, {\n        externalId: 'ext2'\n      }, {\n        externalId: 'ext3',\n        category: PROPERTY_CATEGORY.PRO\n      }],\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext2\\\", \\\"ext3\\\", \\\"property4\\\", \\\"property5\\\" and \\\"property6\\\"`\n      }\n    });\n  });\n  it('returns an error when the user has not the right permissions', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    return inviteCustomerToProProperties({\n      properties: [{\n        _id: 'property1'\n      }, {\n        _id: 'property2'\n      }, {\n        _id: 'property3'\n      }],\n      expectedResponse: {\n        status: 400,\n        message: 'Vous ne pouvez pas inviter de clients sur ce bien immobilier [NOT_AUTHORIZED]'\n      }\n    });\n  });\n  it('returns an error when the user does not have the right permissions with impersonateUser', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property4',\n      userId: 'pro2',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property5',\n      userId: 'pro2',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    return inviteCustomerToProProperties({\n      properties: [{\n        _id: 'property4'\n      }, {\n        _id: 'property5'\n      }, {\n        _id: 'property6'\n      }],\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        status: 400,\n        message: 'Vous ne pouvez pas inviter de clients sur ce bien immobilier [NOT_AUTHORIZED]'\n      }\n    });\n  });\n  it('returns an error when the user is not in the same organisation as impersonateUser', () => inviteCustomerToProProperties({\n    properties: [{\n      _id: 'property4'\n    }, {\n      _id: 'property5'\n    }, {\n      _id: 'property6'\n    }],\n    impersonateUser: 'pro3@org2.com',\n    expectedResponse: {\n      status: 400,\n      message: '[User with email address \"pro3@org2.com\" is not part of your organisation]'\n    }\n  }));\n  it('returns an error when impersonateUser does not exist', () => inviteCustomerToProProperties({\n    properties: [{\n      _id: 'property4'\n    }, {\n      _id: 'property5'\n    }, {\n      _id: 'property6'\n    }],\n    impersonateUser: 'pro4@org.com',\n    expectedResponse: {\n      status: 400,\n      message: '[No user found for email address \"pro4@org.com\"]'\n    }\n  }));\n  it('returns an error when property is invalid', () => inviteCustomerToProProperties({\n    properties: [{\n      _id: 'property4',\n      externalId: 'test'\n    }],\n    expectedResponse: {\n      status: 400,\n      message: '[Each property must have either a \"_id\" or \"externalId\" key]'\n    }\n  }));\n  it('returns an error when properties is empty', () => inviteCustomerToProProperties({\n    properties: [],\n    expectedResponse: {\n      status: 400,\n      message: '[You must provide at least one valid property]'\n    }\n  }));\n  it('returns an error when no property is given', () => inviteCustomerToProProperties({\n    expectedResponse: {\n      status: 400,\n      message: '[You must provide at least one valid property]'\n    }\n  }));\n  it('returns an error if the customer is already invited to one property', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: {\n        canInviteCustomers: true\n      }\n    });\n    return inviteCustomerToProProperties({\n      properties: [{\n        _id: 'property2'\n      }],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"property2\\\"`\n      }\n    }).then(() => inviteCustomerToProProperties({\n      properties: [{\n        _id: 'property1'\n      }, {\n        _id: 'property2'\n      }, {\n        _id: 'property3'\n      }],\n      expectedResponse: {\n        status: HTTP_STATUS_CODES.CONFLICT,\n        message: 'Cet utilisateur est déjà invité à ce bien immobilier [409]'\n      }\n    }));\n  });\n  it('cleans invalid fields in insert', () => {\n    const newProperty = {\n      externalId: 'myId',\n      status: PROPERTY_STATUS.SOLD\n    };\n    return inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"myId\\\"`\n      }\n    }).then(() => {\n      const property = PropertyService.findOne({\n        externalId: 'myId'\n      });\n      expect(property.status).to.equal(PROPERTY_STATUS.FOR_SALE);\n    });\n  });\n  it('does not allow invalid fields in insert', () => {\n    const newProperty = {\n      externalId: 'myId',\n      propertyType: 'FALSE_TYPE'\n    };\n    return inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        status: 400,\n        message: '[ClientError: FALSE_TYPE is not an allowed value]'\n      }\n    });\n  });\n  it('sends a properly formatted slack notification', () => Promise.asyncApply(() => {\n    const spy = sinon.spy();\n    sinon.stub(SlackService, 'send').callsFake(spy);\n    const newProperty = {\n      externalId: 'myId',\n      address1: 'Rue du parc 3'\n    };\n    Promise.await(inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"myId\\\"`\n      }\n    }));\n    expect(spy.calledOnce).to.equal(true);\n    expect(spy.args[0][0].username).to.equal('TestFirstName TestLastName (API Main Org)');\n    expect(spy.args[0][0].attachments[0].title).to.equal('Test User a été invité au bien immo \"Rue du parc 3\"');\n    SlackService.send.restore();\n  }));\n});","map":{"version":3,"sources":["imports/core/api/RESTAPI/server/endpoints/test/inviteCustomerToProProperties.test.js"],"names":["customerToInvite","email","firstName","lastName","phoneNumber","api","inviteCustomerToProProperties","shareSolvency","nonce","getTimestampAndNonce","body","user","userData","query","impersonateUser","fetchAndCheckResponse","url","data","method","headers","makeHeaders","userId","JSON","expectedResponse","describe","before","Meteor","after","beforeEach","resetDatabase","generator","users","_factory","_id","emails","address","verified","organisations","name","proProperties","category","PROPERTY_CATEGORY","PRO","externalId","organisation","it","PropertyService","propertyId","permissions","canInviteCustomers","properties","message","customer","$filters","$in","referredByUserLink","referredByOrganisationLink","loans","expect","status","HTTP_STATUS_CODES","newProperty","PROPERTY_STATUS","SOLD","property","propertyType","spy","sinon","address1","SlackService"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport { Meteor } from 'meteor/meteor';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { expect } from 'chai';\nimport sinon from 'sinon';\n\nimport UserService from '../../../../users/server/UserService';\nimport PropertyService from '../../../../properties/server/PropertyService';\nimport {\n  PROPERTY_CATEGORY,\n  PROPERTY_STATUS,\n} from '../../../../properties/propertyConstants';\nimport SlackService from '../../../../slack/server/SlackService';\nimport generator from '../../../../factories';\nimport RESTAPI from '../../RESTAPI';\nimport inviteCustomerToProPropertiesAPI from '../inviteCustomerToProProperties';\nimport {\n  fetchAndCheckResponse,\n  makeHeaders,\n  getTimestampAndNonce,\n} from '../../test/apiTestHelpers.test';\nimport { HTTP_STATUS_CODES } from '../../restApiConstants';\n\nconst customerToInvite = {\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n  phoneNumber: '+41 22 566 01 10',\n};\n\nconst api = new RESTAPI();\napi.addEndpoint(\n  '/properties/invite-customer',\n  'POST',\n  inviteCustomerToProPropertiesAPI,\n);\n\nconst inviteCustomerToProProperties = ({\n  userData,\n  expectedResponse,\n  properties,\n  impersonateUser,\n  shareSolvency,\n}) => {\n  const { timestamp, nonce } = getTimestampAndNonce();\n  const body = {\n    user: userData || customerToInvite,\n    properties,\n    shareSolvency,\n  };\n  const query = impersonateUser\n    ? { 'impersonate-user': impersonateUser }\n    : undefined;\n  return fetchAndCheckResponse({\n    url: '/properties/invite-customer',\n    query,\n    data: {\n      method: 'POST',\n      headers: makeHeaders({\n        userId: 'pro',\n        timestamp,\n        nonce,\n        body,\n        query,\n      }),\n      body: JSON.stringify(body),\n    },\n    expectedResponse,\n  });\n};\n\ndescribe('REST: inviteCustomerToProProperties', function () {\n  this.timeout(10000);\n\n  before(function () {\n    if (Meteor.settings.public.microservice !== 'pro') {\n      this.parent.pending = true;\n      this.skip();\n    } else {\n      api.start();\n    }\n  });\n\n  after(() => {\n    api.reset();\n  });\n\n  beforeEach(() => {\n    resetDatabase();\n    generator({\n      users: [\n        {\n          _factory: 'pro',\n          _id: 'pro',\n          emails: [{ address: 'pro@org.com', verified: true }],\n          organisations: [{ _id: 'org', name: 'Main Org' }],\n          proProperties: [\n            { _id: 'property1', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property2', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property3', category: PROPERTY_CATEGORY.PRO },\n            {\n              _id: 'externalProperty1',\n              externalId: 'ext1',\n              category: PROPERTY_CATEGORY.PRO,\n            },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro2',\n          emails: [{ address: 'pro2@org.com', verified: true }],\n          organisations: [{ _id: 'org' }],\n          proProperties: [\n            { _id: 'property4', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property5', category: PROPERTY_CATEGORY.PRO },\n            { _id: 'property6', category: PROPERTY_CATEGORY.PRO },\n            {\n              _id: 'externalProperty2',\n              externalId: 'ext2',\n              category: PROPERTY_CATEGORY.PRO,\n            },\n          ],\n        },\n        {\n          _factory: 'pro',\n          _id: 'pro3',\n          emails: [{ address: 'pro3@org2.com', verified: true }],\n          organisation: [{ _id: 'org2' }],\n        },\n      ],\n    });\n  });\n\n  it('invites a customer to multiple properties', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property1' },\n        { _id: 'property2' },\n        { _id: 'property3' },\n        { externalId: 'ext1' },\n        { externalId: 'ext3', category: PROPERTY_CATEGORY.PRO },\n      ],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext1\\\", \\\"ext3\\\", \\\"property1\\\", \\\"property2\\\" and \\\"property3\\\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(customer.loans[0].shareSolvency).to.equal(undefined);\n    });\n  });\n\n  it('invites a customer to multiple properties with solvency sharing', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property1' },\n        { _id: 'property2' },\n        { _id: 'property3' },\n        { externalId: 'ext1' },\n        { externalId: 'ext3', category: PROPERTY_CATEGORY.PRO },\n      ],\n      shareSolvency: true,\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext1\\\", \\\"ext3\\\", \\\"property1\\\", \\\"property2\\\" and \\\"property3\\\"`,\n      },\n    }).then(() => {\n      const customer = UserService.fetchOne({\n        $filters: { 'emails.address': { $in: [customerToInvite.email] } },\n        referredByUserLink: 1,\n        referredByOrganisationLink: 1,\n        loans: { shareSolvency: 1 },\n      });\n\n      expect(customer.loans[0].shareSolvency).to.equal(true);\n    });\n  });\n\n  it('invites a customer to multiple properties with impersonateUser', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property4',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property5',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property6',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'externalProperty2',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n        { externalId: 'ext2' },\n        { externalId: 'ext3', category: PROPERTY_CATEGORY.PRO },\n      ],\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"ext2\\\", \\\"ext3\\\", \\\"property4\\\", \\\"property5\\\" and \\\"property6\\\"`,\n      },\n    });\n  });\n\n  it('returns an error when the user has not the right permissions', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property1' },\n        { _id: 'property2' },\n        { _id: 'property3' },\n      ],\n      expectedResponse: {\n        status: 400,\n        message:\n          'Vous ne pouvez pas inviter de clients sur ce bien immobilier [NOT_AUTHORIZED]',\n      },\n    });\n  });\n\n  it('returns an error when the user does not have the right permissions with impersonateUser', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property4',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property5',\n      userId: 'pro2',\n      permissions: { canInviteCustomers: true },\n    });\n\n    return inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n      ],\n      impersonateUser: 'pro2@org.com',\n      expectedResponse: {\n        status: 400,\n        message:\n          'Vous ne pouvez pas inviter de clients sur ce bien immobilier [NOT_AUTHORIZED]',\n      },\n    });\n  });\n\n  it('returns an error when the user is not in the same organisation as impersonateUser', () =>\n    inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n      ],\n      impersonateUser: 'pro3@org2.com',\n      expectedResponse: {\n        status: 400,\n        message:\n          '[User with email address \"pro3@org2.com\" is not part of your organisation]',\n      },\n    }));\n\n  it('returns an error when impersonateUser does not exist', () =>\n    inviteCustomerToProProperties({\n      properties: [\n        { _id: 'property4' },\n        { _id: 'property5' },\n        { _id: 'property6' },\n      ],\n      impersonateUser: 'pro4@org.com',\n      expectedResponse: {\n        status: 400,\n        message: '[No user found for email address \"pro4@org.com\"]',\n      },\n    }));\n\n  it('returns an error when property is invalid', () =>\n    inviteCustomerToProProperties({\n      properties: [{ _id: 'property4', externalId: 'test' }],\n      expectedResponse: {\n        status: 400,\n        message: '[Each property must have either a \"_id\" or \"externalId\" key]',\n      },\n    }));\n\n  it('returns an error when properties is empty', () =>\n    inviteCustomerToProProperties({\n      properties: [],\n      expectedResponse: {\n        status: 400,\n        message: '[You must provide at least one valid property]',\n      },\n    }));\n\n  it('returns an error when no property is given', () =>\n    inviteCustomerToProProperties({\n      expectedResponse: {\n        status: 400,\n        message: '[You must provide at least one valid property]',\n      },\n    }));\n\n  it('returns an error if the customer is already invited to one property', () => {\n    PropertyService.setProUserPermissions({\n      propertyId: 'property1',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property2',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    PropertyService.setProUserPermissions({\n      propertyId: 'property3',\n      userId: 'pro',\n      permissions: { canInviteCustomers: true },\n    });\n    return inviteCustomerToProProperties({\n      properties: [{ _id: 'property2' }],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"property2\\\"`,\n      },\n    }).then(() =>\n      inviteCustomerToProProperties({\n        properties: [\n          { _id: 'property1' },\n          { _id: 'property2' },\n          { _id: 'property3' },\n        ],\n        expectedResponse: {\n          status: HTTP_STATUS_CODES.CONFLICT,\n          message: 'Cet utilisateur est déjà invité à ce bien immobilier [409]',\n        },\n      }));\n  });\n\n  it('cleans invalid fields in insert', () => {\n    const newProperty = {\n      externalId: 'myId',\n      status: PROPERTY_STATUS.SOLD,\n    };\n\n    return inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"myId\\\"`,\n      },\n    }).then(() => {\n      const property = PropertyService.findOne({ externalId: 'myId' });\n      expect(property.status).to.equal(PROPERTY_STATUS.FOR_SALE);\n    });\n  });\n\n  it('does not allow invalid fields in insert', () => {\n    const newProperty = {\n      externalId: 'myId',\n      propertyType: 'FALSE_TYPE',\n    };\n\n    return inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        status: 400,\n        message: '[ClientError: FALSE_TYPE is not an allowed value]',\n      },\n    });\n  });\n\n  it('sends a properly formatted slack notification', async () => {\n    const spy = sinon.spy();\n    sinon.stub(SlackService, 'send').callsFake(spy);\n\n    const newProperty = { externalId: 'myId', address1: 'Rue du parc 3' };\n\n    await inviteCustomerToProProperties({\n      properties: [newProperty],\n      expectedResponse: {\n        message: `Successfully invited user \\\"${customerToInvite.email}\\\" to property ids \\\"myId\\\"`,\n      },\n    });\n\n    expect(spy.calledOnce).to.equal(true);\n    expect(spy.args[0][0].username).to.equal('TestFirstName TestLastName (API Main Org)');\n    expect(spy.args[0][0].attachments[0].title).to.equal('Test User a été invité au bien immo \"Rue du parc 3\"');\n\n    SlackService.send.restore();\n  });\n});\n"]},"sourceType":"script","hash":"1067e98fe2f98a7edd3a7e5e7c875c66b3c65492"}

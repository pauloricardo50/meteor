{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/notaryFees/test/NotaryFeesCalculator.spec.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/utils/notaryFees/test/NotaryFeesCalculator.spec.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/notaryFees/test/NotaryFeesCalculator.spec.js","inputSourceMap":{"version":3,"sources":["imports/core/utils/notaryFees/test/NotaryFeesCalculator.spec.js"],"names":["expect","RESIDENCE_TYPE","NotaryFeesCalculator","PURCHASE_TYPE","GE","describe","calc","loan","beforeEach","structure","property","value","wantedLoan","borrowers","_id","before","canton","it","purchaseType","REFINANCING","fees","getNotaryFeesForLoan","buyersContractFees","total","to","equal","mortgageNoteFees","residenceType","MAIN_RESIDENCE","propertyWork","mortgageNoteIds","mortgageNotes","structures","id","propertyId","properties","structureId","CONSTRUCTION","totalValue","landValue","constructionValue","additionalMargin","propertyRegistrationTax","deductions","buyersContractDeductions","mortgageNoteRegistrationTax","MORTGAGE_NOTE_CASATAX_DEDUCTION","mortgageNoteDeductions","deep","include","notaryFees","getNotaryFeesWithoutLoan","propertyValue","mortgageNoteIncrease"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { RESIDENCE_TYPE } from 'core/api/constants';\nimport NotaryFeesCalculator from '../NotaryFeesCalculator';\nimport { PURCHASE_TYPE } from '../../../api/constants';\nimport { GE } from '../cantonConstants';\n\ndescribe('NotaryFeesCalculator', () => {\n  let calc;\n  let loan;\n\n  beforeEach(() => {\n    loan = {\n      structure: {\n        property: { value: 1000000 },\n        wantedLoan: 800000,\n      },\n      borrowers: [{ _id: 'borrower1' }],\n    };\n  });\n\n  describe('general', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'GE' });\n    });\n\n    it('returns 0 for buyers contract fees for a refinancing loan', () => {\n      loan.purchaseType = PURCHASE_TYPE.REFINANCING;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.buyersContractFees.total).to.equal(0);\n    });\n  });\n\n  describe('GE', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'GE' });\n    });\n\n    it('returns the correct amount for a buyers contract', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.buyersContractFees.total).to.equal(39100.4);\n    });\n\n    it('returns the correct amount for a new mortgage note', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.mortgageNoteFees.total).to.equal(16058.7);\n    });\n\n    it('returns the correct amount as a whole', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(55159.1);\n    });\n\n    it('returns the correct amount for a main residence with casatax', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(31944.1);\n    });\n\n    it('ignores propertyWork', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.structure.propertyWork = 100000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(31944.1);\n    });\n\n    it('caps casatax deductions for very small properties', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.structure.property.value = 400000;\n      loan.structure.wantedLoan = 320000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(9898.16);\n    });\n\n    it('works for large properties', () => {\n      loan.structure.property.value = 3000000;\n      loan.structure.wantedLoan = 2400000;\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(154530.65);\n    });\n\n    it('adds tax on propertyWork', () => {\n      // Test code\n    });\n\n    it('calculates 0 mortgageNoteFees if no mortgageNote is required', () => {\n      loan.structure.mortgageNoteIds = ['asdf'];\n      loan.borrowers[0].mortgageNotes = [{ _id: 'asdf', value: 800000 }];\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n      expect(fees.mortgageNoteFees.total).to.equal(0);\n    });\n\n    it('calculates fees for a different structure', () => {\n      loan = {\n        structures: [{ id: 'struct2', wantedLoan: 800000, propertyId: 'prop' }],\n        properties: [{ _id: 'prop', value: 1000000 }],\n      };\n\n      const fees = calc.getNotaryFeesForLoan({ loan, structureId: 'struct2' });\n      expect(fees.total).to.equal(55159.1);\n    });\n\n    it('calculates fees for properties with landValue and constructionValue, if it is a construction', () => {\n      loan.purchaseType = PURCHASE_TYPE.CONSTRUCTION;\n      loan.structure.property.value = 0;\n      loan.structure.property.totalValue = 1000000;\n      loan.structure.property.landValue = 400000;\n      loan.structure.property.constructionValue = 400000;\n      loan.structure.property.additionalMargin = 200000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n      expect(fees.buyersContractFees.total).to.equal(28269.5);\n    });\n\n    it('calculates casatax properly for a construction', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.purchaseType = PURCHASE_TYPE.CONSTRUCTION;\n      loan.structure.property.value = 0;\n      loan.structure.property.landValue = 400000;\n      loan.structure.property.constructionValue = 650000;\n      loan.structure.property.additionalMargin = 100000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n      expect(fees.buyersContractFees.propertyRegistrationTax).to.equal(fees.deductions.buyersContractDeductions);\n      expect(fees.mortgageNoteFees.mortgageNoteRegistrationTax\n          * GE.MORTGAGE_NOTE_CASATAX_DEDUCTION).to.equal(fees.deductions.mortgageNoteDeductions);\n      expect(fees.buyersContractFees.total).to.equal(27034.85);\n    });\n  });\n\n  describe('VD', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'VD' });\n    });\n\n    it('returns the correct amounts for a regular loan', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees).to.deep.include({\n        total: 44954.25,\n      });\n      expect(fees.buyersContractFees).to.deep.include({\n        total: 38596.38,\n      });\n      expect(fees.mortgageNoteFees).to.deep.include({\n        total: 6357.88,\n      });\n    });\n  });\n\n  describe('unknown cantons', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'XX' });\n    });\n\n    it(\"returns 5% for cantons where we don't have any Math\", () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(50000);\n    });\n  });\n\n  describe('getNotaryFeesWithoutLoan', () => {\n    it('should work', () => {\n      calc = new NotaryFeesCalculator({ canton: 'GE' });\n\n      const notaryFees = calc.getNotaryFeesWithoutLoan({\n        propertyValue: 1000000,\n        mortgageNoteIncrease: 800000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      });\n\n      expect(notaryFees.total).to.equal(31944.1);\n    });\n\n    it('should work for unknown cantons', () => {\n      calc = new NotaryFeesCalculator({ canton: 'XX' });\n\n      const notaryFees = calc.getNotaryFeesWithoutLoan({\n        propertyValue: 1000000,\n        mortgageNoteIncrease: 800000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      });\n\n      expect(notaryFees.total).to.equal(50000);\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/utils/notaryFees/test/NotaryFeesCalculator.spec.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/utils/notaryFees/test/NotaryFeesCalculator.spec.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet RESIDENCE_TYPE;\nmodule.link(\"../../../api/constants\", {\n  RESIDENCE_TYPE(v) {\n    RESIDENCE_TYPE = v;\n  }\n\n}, 1);\nlet NotaryFeesCalculator;\nmodule.link(\"../NotaryFeesCalculator\", {\n  default(v) {\n    NotaryFeesCalculator = v;\n  }\n\n}, 2);\nlet PURCHASE_TYPE;\nmodule.link(\"../../../api/constants\", {\n  PURCHASE_TYPE(v) {\n    PURCHASE_TYPE = v;\n  }\n\n}, 3);\nlet GE;\nmodule.link(\"../cantonConstants\", {\n  GE(v) {\n    GE = v;\n  }\n\n}, 4);\ndescribe('NotaryFeesCalculator', () => {\n  let calc;\n  let loan;\n  beforeEach(() => {\n    loan = {\n      structure: {\n        property: {\n          value: 1000000\n        },\n        wantedLoan: 800000\n      },\n      borrowers: [{\n        _id: 'borrower1'\n      }]\n    };\n  });\n  describe('general', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({\n        canton: 'GE'\n      });\n    });\n    it('returns 0 for buyers contract fees for a refinancing loan', () => {\n      loan.purchaseType = PURCHASE_TYPE.REFINANCING;\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.buyersContractFees.total).to.equal(0);\n    });\n  });\n  describe('GE', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({\n        canton: 'GE'\n      });\n    });\n    it('returns the correct amount for a buyers contract', () => {\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.buyersContractFees.total).to.equal(39100.4);\n    });\n    it('returns the correct amount for a new mortgage note', () => {\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.mortgageNoteFees.total).to.equal(16058.7);\n    });\n    it('returns the correct amount as a whole', () => {\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.total).to.equal(55159.1);\n    });\n    it('returns the correct amount for a main residence with casatax', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.total).to.equal(31944.1);\n    });\n    it('ignores propertyWork', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.structure.propertyWork = 100000;\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.total).to.equal(31944.1);\n    });\n    it('caps casatax deductions for very small properties', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.structure.property.value = 400000;\n      loan.structure.wantedLoan = 320000;\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.total).to.equal(9898.16);\n    });\n    it('works for large properties', () => {\n      loan.structure.property.value = 3000000;\n      loan.structure.wantedLoan = 2400000;\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.total).to.equal(154530.65);\n    });\n    it('adds tax on propertyWork', () => {// Test code\n    });\n    it('calculates 0 mortgageNoteFees if no mortgageNote is required', () => {\n      loan.structure.mortgageNoteIds = ['asdf'];\n      loan.borrowers[0].mortgageNotes = [{\n        _id: 'asdf',\n        value: 800000\n      }];\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.mortgageNoteFees.total).to.equal(0);\n    });\n    it('calculates fees for a different structure', () => {\n      loan = {\n        structures: [{\n          id: 'struct2',\n          wantedLoan: 800000,\n          propertyId: 'prop'\n        }],\n        properties: [{\n          _id: 'prop',\n          value: 1000000\n        }]\n      };\n      const fees = calc.getNotaryFeesForLoan({\n        loan,\n        structureId: 'struct2'\n      });\n      expect(fees.total).to.equal(55159.1);\n    });\n    it('calculates fees for properties with landValue and constructionValue, if it is a construction', () => {\n      loan.purchaseType = PURCHASE_TYPE.CONSTRUCTION;\n      loan.structure.property.value = 0;\n      loan.structure.property.totalValue = 1000000;\n      loan.structure.property.landValue = 400000;\n      loan.structure.property.constructionValue = 400000;\n      loan.structure.property.additionalMargin = 200000;\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.buyersContractFees.total).to.equal(28269.5);\n    });\n    it('calculates casatax properly for a construction', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.purchaseType = PURCHASE_TYPE.CONSTRUCTION;\n      loan.structure.property.value = 0;\n      loan.structure.property.landValue = 400000;\n      loan.structure.property.constructionValue = 650000;\n      loan.structure.property.additionalMargin = 100000;\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.buyersContractFees.propertyRegistrationTax).to.equal(fees.deductions.buyersContractDeductions);\n      expect(fees.mortgageNoteFees.mortgageNoteRegistrationTax * GE.MORTGAGE_NOTE_CASATAX_DEDUCTION).to.equal(fees.deductions.mortgageNoteDeductions);\n      expect(fees.buyersContractFees.total).to.equal(27034.85);\n    });\n  });\n  describe('VD', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({\n        canton: 'VD'\n      });\n    });\n    it('returns the correct amounts for a regular loan', () => {\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees).to.deep.include({\n        total: 44954.25\n      });\n      expect(fees.buyersContractFees).to.deep.include({\n        total: 38596.38\n      });\n      expect(fees.mortgageNoteFees).to.deep.include({\n        total: 6357.88\n      });\n    });\n  });\n  describe('unknown cantons', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({\n        canton: 'XX'\n      });\n    });\n    it(\"returns 5% for cantons where we don't have any Math\", () => {\n      const fees = calc.getNotaryFeesForLoan({\n        loan\n      });\n      expect(fees.total).to.equal(50000);\n    });\n  });\n  describe('getNotaryFeesWithoutLoan', () => {\n    it('should work', () => {\n      calc = new NotaryFeesCalculator({\n        canton: 'GE'\n      });\n      const notaryFees = calc.getNotaryFeesWithoutLoan({\n        propertyValue: 1000000,\n        mortgageNoteIncrease: 800000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n      });\n      expect(notaryFees.total).to.equal(31944.1);\n    });\n    it('should work for unknown cantons', () => {\n      calc = new NotaryFeesCalculator({\n        canton: 'XX'\n      });\n      const notaryFees = calc.getNotaryFeesWithoutLoan({\n        propertyValue: 1000000,\n        mortgageNoteIncrease: 800000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE\n      });\n      expect(notaryFees.total).to.equal(50000);\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/utils/notaryFees/test/NotaryFeesCalculator.spec.js"],"names":["describe","beforeEach","loan","structure","property","value","wantedLoan","borrowers","_id","before","calc","canton","it","PURCHASE_TYPE","fees","expect","RESIDENCE_TYPE","structures","id","propertyId","properties","structureId","GE","total","notaryFees","propertyValue","mortgageNoteIncrease","residenceType","MAIN_RESIDENCE"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\n\nimport { RESIDENCE_TYPE } from 'core/api/constants';\nimport NotaryFeesCalculator from '../NotaryFeesCalculator';\nimport { PURCHASE_TYPE } from '../../../api/constants';\nimport { GE } from '../cantonConstants';\n\ndescribe('NotaryFeesCalculator', () => {\n  let calc;\n  let loan;\n\n  beforeEach(() => {\n    loan = {\n      structure: {\n        property: { value: 1000000 },\n        wantedLoan: 800000,\n      },\n      borrowers: [{ _id: 'borrower1' }],\n    };\n  });\n\n  describe('general', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'GE' });\n    });\n\n    it('returns 0 for buyers contract fees for a refinancing loan', () => {\n      loan.purchaseType = PURCHASE_TYPE.REFINANCING;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.buyersContractFees.total).to.equal(0);\n    });\n  });\n\n  describe('GE', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'GE' });\n    });\n\n    it('returns the correct amount for a buyers contract', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.buyersContractFees.total).to.equal(39100.4);\n    });\n\n    it('returns the correct amount for a new mortgage note', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.mortgageNoteFees.total).to.equal(16058.7);\n    });\n\n    it('returns the correct amount as a whole', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(55159.1);\n    });\n\n    it('returns the correct amount for a main residence with casatax', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(31944.1);\n    });\n\n    it('ignores propertyWork', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.structure.propertyWork = 100000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(31944.1);\n    });\n\n    it('caps casatax deductions for very small properties', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.structure.property.value = 400000;\n      loan.structure.wantedLoan = 320000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(9898.16);\n    });\n\n    it('works for large properties', () => {\n      loan.structure.property.value = 3000000;\n      loan.structure.wantedLoan = 2400000;\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(154530.65);\n    });\n\n    it('adds tax on propertyWork', () => {\n      // Test code\n    });\n\n    it('calculates 0 mortgageNoteFees if no mortgageNote is required', () => {\n      loan.structure.mortgageNoteIds = ['asdf'];\n      loan.borrowers[0].mortgageNotes = [{ _id: 'asdf', value: 800000 }];\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n      expect(fees.mortgageNoteFees.total).to.equal(0);\n    });\n\n    it('calculates fees for a different structure', () => {\n      loan = {\n        structures: [{ id: 'struct2', wantedLoan: 800000, propertyId: 'prop' }],\n        properties: [{ _id: 'prop', value: 1000000 }],\n      };\n\n      const fees = calc.getNotaryFeesForLoan({ loan, structureId: 'struct2' });\n      expect(fees.total).to.equal(55159.1);\n    });\n\n    it('calculates fees for properties with landValue and constructionValue, if it is a construction', () => {\n      loan.purchaseType = PURCHASE_TYPE.CONSTRUCTION;\n      loan.structure.property.value = 0;\n      loan.structure.property.totalValue = 1000000;\n      loan.structure.property.landValue = 400000;\n      loan.structure.property.constructionValue = 400000;\n      loan.structure.property.additionalMargin = 200000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n      expect(fees.buyersContractFees.total).to.equal(28269.5);\n    });\n\n    it('calculates casatax properly for a construction', () => {\n      loan.residenceType = RESIDENCE_TYPE.MAIN_RESIDENCE;\n      loan.purchaseType = PURCHASE_TYPE.CONSTRUCTION;\n      loan.structure.property.value = 0;\n      loan.structure.property.landValue = 400000;\n      loan.structure.property.constructionValue = 650000;\n      loan.structure.property.additionalMargin = 100000;\n\n      const fees = calc.getNotaryFeesForLoan({ loan });\n      expect(fees.buyersContractFees.propertyRegistrationTax).to.equal(fees.deductions.buyersContractDeductions);\n      expect(fees.mortgageNoteFees.mortgageNoteRegistrationTax\n          * GE.MORTGAGE_NOTE_CASATAX_DEDUCTION).to.equal(fees.deductions.mortgageNoteDeductions);\n      expect(fees.buyersContractFees.total).to.equal(27034.85);\n    });\n  });\n\n  describe('VD', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'VD' });\n    });\n\n    it('returns the correct amounts for a regular loan', () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees).to.deep.include({\n        total: 44954.25,\n      });\n      expect(fees.buyersContractFees).to.deep.include({\n        total: 38596.38,\n      });\n      expect(fees.mortgageNoteFees).to.deep.include({\n        total: 6357.88,\n      });\n    });\n  });\n\n  describe('unknown cantons', () => {\n    before(() => {\n      calc = new NotaryFeesCalculator({ canton: 'XX' });\n    });\n\n    it(\"returns 5% for cantons where we don't have any Math\", () => {\n      const fees = calc.getNotaryFeesForLoan({ loan });\n\n      expect(fees.total).to.equal(50000);\n    });\n  });\n\n  describe('getNotaryFeesWithoutLoan', () => {\n    it('should work', () => {\n      calc = new NotaryFeesCalculator({ canton: 'GE' });\n\n      const notaryFees = calc.getNotaryFeesWithoutLoan({\n        propertyValue: 1000000,\n        mortgageNoteIncrease: 800000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      });\n\n      expect(notaryFees.total).to.equal(31944.1);\n    });\n\n    it('should work for unknown cantons', () => {\n      calc = new NotaryFeesCalculator({ canton: 'XX' });\n\n      const notaryFees = calc.getNotaryFeesWithoutLoan({\n        propertyValue: 1000000,\n        mortgageNoteIncrease: 800000,\n        residenceType: RESIDENCE_TYPE.MAIN_RESIDENCE,\n      });\n\n      expect(notaryFees.total).to.equal(50000);\n    });\n  });\n});\n"]},"sourceType":"script","hash":"390e91dd8e4aeac8831507a5d57db35ff7b324da"}

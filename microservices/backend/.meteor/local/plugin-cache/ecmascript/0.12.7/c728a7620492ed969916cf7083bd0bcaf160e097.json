{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/server/test/LenderRulesService.test.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"imports/core/api/lenderRules/server/test/LenderRulesService.test.js","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/server/test/LenderRulesService.test.js","inputSourceMap":{"version":3,"sources":["imports/core/api/lenderRules/server/test/LenderRulesService.test.js"],"names":["expect","jsonLogic","Factory","resetDatabase","generator","LenderRulesService","EXPENSE_TYPES","describe","organisationId","lenderRulesId","beforeEach","create","_id","it","ids","initialize","lenderRules","fetch","$filters","$in","filters","length","to","equal","rulesId","insert","organisation","name","fetchOne","not","undefined","rulesId1","rulesId2","order","order1","order2","update","object","filter","throw","expensesSubtractFromIncome","LEASING","get","updateFilter","logicRules","var","apply","a","id1","id2","setOrder","orders","organisationId2"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport jsonLogic from 'json-logic-js';\n\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from 'core/api/factories';\nimport LenderRulesService from '../LenderRulesService';\nimport { EXPENSE_TYPES } from '../../lenderRulesConstants';\n\ndescribe('LenderRulesService', () => {\n  let organisationId;\n  let lenderRulesId;\n\n  beforeEach(() => {\n    resetDatabase();\n    organisationId = Factory.create('organisation')._id;\n    // Insert a document here, to avoid cases where all documents in a collection are changed\n    Factory.create('lenderRules');\n  });\n\n  describe('initialize', () => {\n    it('adds 3 lenderRules', () => {\n      const ids = LenderRulesService.initialize({ organisationId });\n\n      const lenderRules = LenderRulesService.fetch({\n        $filters: { _id: { $in: ids } },\n        filters: 1,\n      });\n\n      expect(lenderRules.length).to.equal(3);\n    });\n  });\n\n  describe('insert', () => {\n    it('adds a link to the organisation', () => {\n      const rulesId = LenderRulesService.insert({ organisationId });\n\n      const {\n        organisation: { name },\n      } = LenderRulesService.fetchOne({\n        $filters: { _id: rulesId },\n        organisation: { name: 1 },\n      });\n\n      expect(name).to.not.equal(undefined);\n    });\n\n    it('sets the order of the lenderRules', () => {\n      const rulesId1 = LenderRulesService.insert({ organisationId });\n      const rulesId2 = LenderRulesService.insert({ organisationId });\n\n      const { order: order1 } = LenderRulesService.fetchOne({\n        $filters: { _id: rulesId1 },\n        order: 1,\n      });\n      const { order: order2 } = LenderRulesService.fetchOne({\n        $filters: { _id: rulesId2 },\n        order: 1,\n      });\n\n      expect(order1).to.equal(0);\n      expect(order2).to.equal(1);\n    });\n  });\n\n  describe('update', () => {\n    it('does not let you update the filter directly', () => {\n      expect(() =>\n        LenderRulesService.update({\n          lenderRulesId: '',\n          object: { filter: 'stuff' },\n        })).to.throw('can not');\n    });\n\n    it('unsets expensesSubtractFromIncome if it is set to an empty array', () => {\n      generator({\n        lenderRules: {\n          _id: 'rulesId',\n          expensesSubtractFromIncome: [EXPENSE_TYPES.LEASING],\n        },\n      });\n      LenderRulesService.update({\n        lenderRulesId: 'rulesId',\n        object: { expensesSubtractFromIncome: [] },\n      });\n\n      expect(LenderRulesService.get('rulesId').expensesSubtractFromIncome).to.equal(undefined);\n    });\n  });\n\n  describe('updateFilter', () => {\n    it('updates the filter of a lenderRules document', () => {\n      lenderRulesId = LenderRulesService.insert({ organisationId });\n      LenderRulesService.updateFilter({\n        lenderRulesId,\n        logicRules: [{ '>': [{ var: 'a' }, 2] }],\n      });\n\n      const lenderRules = LenderRulesService.get(lenderRulesId);\n\n      expect(jsonLogic.apply(lenderRules.filter, { a: 3 })).to.equal(true);\n    });\n  });\n\n  describe('setOrder', () => {\n    it('changes the order of all rules', () => {\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n\n      LenderRulesService.setOrder({ orders: { [id1]: 1, [id2]: 0 } });\n\n      expect(LenderRulesService.get(id1).order).to.equal(1);\n      expect(LenderRulesService.get(id2).order).to.equal(0);\n    });\n\n    it('throws if you try to set an invalid order', () => {\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n\n      expect(() =>\n        LenderRulesService.setOrder({ orders: { [id1]: 2, [id2]: 3 } })).to.throw('ordre des filtres');\n    });\n\n    it(\"throws if lenderRules don't belong to the same org\", () => {\n      const organisationId2 = Factory.create('organisation', { name: 'org2' })\n        ._id;\n\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId2,\n      })._id;\n\n      expect(() =>\n        LenderRulesService.setOrder({ orders: { [id1]: 2, [id2]: 3 } })).to.throw('même organisation');\n    });\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/api/lenderRules/server/test/LenderRulesService.test.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/api/lenderRules/server/test/LenderRulesService.test.js"}},"code":"let expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 0);\nlet jsonLogic;\nmodule.link(\"json-logic-js\", {\n  default(v) {\n    jsonLogic = v;\n  }\n\n}, 1);\nlet Factory;\nmodule.link(\"meteor/dburles:factory\", {\n  Factory(v) {\n    Factory = v;\n  }\n\n}, 2);\nlet resetDatabase;\nmodule.link(\"meteor/xolvio:cleaner\", {\n  resetDatabase(v) {\n    resetDatabase = v;\n  }\n\n}, 3);\nlet generator;\nmodule.link(\"../../../factories\", {\n  default(v) {\n    generator = v;\n  }\n\n}, 4);\nlet LenderRulesService;\nmodule.link(\"../LenderRulesService\", {\n  default(v) {\n    LenderRulesService = v;\n  }\n\n}, 5);\nlet EXPENSE_TYPES;\nmodule.link(\"../../lenderRulesConstants\", {\n  EXPENSE_TYPES(v) {\n    EXPENSE_TYPES = v;\n  }\n\n}, 6);\ndescribe('LenderRulesService', () => {\n  let organisationId;\n  let lenderRulesId;\n  beforeEach(() => {\n    resetDatabase();\n    organisationId = Factory.create('organisation')._id; // Insert a document here, to avoid cases where all documents in a collection are changed\n\n    Factory.create('lenderRules');\n  });\n  describe('initialize', () => {\n    it('adds 3 lenderRules', () => {\n      const ids = LenderRulesService.initialize({\n        organisationId\n      });\n      const lenderRules = LenderRulesService.fetch({\n        $filters: {\n          _id: {\n            $in: ids\n          }\n        },\n        filters: 1\n      });\n      expect(lenderRules.length).to.equal(3);\n    });\n  });\n  describe('insert', () => {\n    it('adds a link to the organisation', () => {\n      const rulesId = LenderRulesService.insert({\n        organisationId\n      });\n      const {\n        organisation: {\n          name\n        }\n      } = LenderRulesService.fetchOne({\n        $filters: {\n          _id: rulesId\n        },\n        organisation: {\n          name: 1\n        }\n      });\n      expect(name).to.not.equal(undefined);\n    });\n    it('sets the order of the lenderRules', () => {\n      const rulesId1 = LenderRulesService.insert({\n        organisationId\n      });\n      const rulesId2 = LenderRulesService.insert({\n        organisationId\n      });\n      const {\n        order: order1\n      } = LenderRulesService.fetchOne({\n        $filters: {\n          _id: rulesId1\n        },\n        order: 1\n      });\n      const {\n        order: order2\n      } = LenderRulesService.fetchOne({\n        $filters: {\n          _id: rulesId2\n        },\n        order: 1\n      });\n      expect(order1).to.equal(0);\n      expect(order2).to.equal(1);\n    });\n  });\n  describe('update', () => {\n    it('does not let you update the filter directly', () => {\n      expect(() => LenderRulesService.update({\n        lenderRulesId: '',\n        object: {\n          filter: 'stuff'\n        }\n      })).to.throw('can not');\n    });\n    it('unsets expensesSubtractFromIncome if it is set to an empty array', () => {\n      generator({\n        lenderRules: {\n          _id: 'rulesId',\n          expensesSubtractFromIncome: [EXPENSE_TYPES.LEASING]\n        }\n      });\n      LenderRulesService.update({\n        lenderRulesId: 'rulesId',\n        object: {\n          expensesSubtractFromIncome: []\n        }\n      });\n      expect(LenderRulesService.get('rulesId').expensesSubtractFromIncome).to.equal(undefined);\n    });\n  });\n  describe('updateFilter', () => {\n    it('updates the filter of a lenderRules document', () => {\n      lenderRulesId = LenderRulesService.insert({\n        organisationId\n      });\n      LenderRulesService.updateFilter({\n        lenderRulesId,\n        logicRules: [{\n          '>': [{\n            var: 'a'\n          }, 2]\n        }]\n      });\n      const lenderRules = LenderRulesService.get(lenderRulesId);\n      expect(jsonLogic.apply(lenderRules.filter, {\n        a: 3\n      })).to.equal(true);\n    });\n  });\n  describe('setOrder', () => {\n    it('changes the order of all rules', () => {\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId\n      })._id;\n\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId\n      })._id;\n\n      LenderRulesService.setOrder({\n        orders: {\n          [id1]: 1,\n          [id2]: 0\n        }\n      });\n      expect(LenderRulesService.get(id1).order).to.equal(1);\n      expect(LenderRulesService.get(id2).order).to.equal(0);\n    });\n    it('throws if you try to set an invalid order', () => {\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId\n      })._id;\n\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId\n      })._id;\n\n      expect(() => LenderRulesService.setOrder({\n        orders: {\n          [id1]: 2,\n          [id2]: 3\n        }\n      })).to.throw('ordre des filtres');\n    });\n    it(\"throws if lenderRules don't belong to the same org\", () => {\n      const organisationId2 = Factory.create('organisation', {\n        name: 'org2'\n      })._id;\n\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId\n      })._id;\n\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId2\n      })._id;\n\n      expect(() => LenderRulesService.setOrder({\n        orders: {\n          [id1]: 2,\n          [id2]: 3\n        }\n      })).to.throw('même organisation');\n    });\n  });\n});","map":{"version":3,"sources":["imports/core/api/lenderRules/server/test/LenderRulesService.test.js"],"names":["describe","beforeEach","resetDatabase","organisationId","Factory","it","ids","lenderRules","$filters","_id","$in","filters","expect","rulesId","organisation","name","rulesId1","rulesId2","order","order1","order2","lenderRulesId","object","filter","generator","expensesSubtractFromIncome","EXPENSE_TYPES","LenderRulesService","logicRules","var","a","id1","id2","orders","organisationId2"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env mocha */\nimport { expect } from 'chai';\nimport jsonLogic from 'json-logic-js';\n\nimport { Factory } from 'meteor/dburles:factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\n\nimport generator from 'core/api/factories';\nimport LenderRulesService from '../LenderRulesService';\nimport { EXPENSE_TYPES } from '../../lenderRulesConstants';\n\ndescribe('LenderRulesService', () => {\n  let organisationId;\n  let lenderRulesId;\n\n  beforeEach(() => {\n    resetDatabase();\n    organisationId = Factory.create('organisation')._id;\n    // Insert a document here, to avoid cases where all documents in a collection are changed\n    Factory.create('lenderRules');\n  });\n\n  describe('initialize', () => {\n    it('adds 3 lenderRules', () => {\n      const ids = LenderRulesService.initialize({ organisationId });\n\n      const lenderRules = LenderRulesService.fetch({\n        $filters: { _id: { $in: ids } },\n        filters: 1,\n      });\n\n      expect(lenderRules.length).to.equal(3);\n    });\n  });\n\n  describe('insert', () => {\n    it('adds a link to the organisation', () => {\n      const rulesId = LenderRulesService.insert({ organisationId });\n\n      const {\n        organisation: { name },\n      } = LenderRulesService.fetchOne({\n        $filters: { _id: rulesId },\n        organisation: { name: 1 },\n      });\n\n      expect(name).to.not.equal(undefined);\n    });\n\n    it('sets the order of the lenderRules', () => {\n      const rulesId1 = LenderRulesService.insert({ organisationId });\n      const rulesId2 = LenderRulesService.insert({ organisationId });\n\n      const { order: order1 } = LenderRulesService.fetchOne({\n        $filters: { _id: rulesId1 },\n        order: 1,\n      });\n      const { order: order2 } = LenderRulesService.fetchOne({\n        $filters: { _id: rulesId2 },\n        order: 1,\n      });\n\n      expect(order1).to.equal(0);\n      expect(order2).to.equal(1);\n    });\n  });\n\n  describe('update', () => {\n    it('does not let you update the filter directly', () => {\n      expect(() =>\n        LenderRulesService.update({\n          lenderRulesId: '',\n          object: { filter: 'stuff' },\n        })).to.throw('can not');\n    });\n\n    it('unsets expensesSubtractFromIncome if it is set to an empty array', () => {\n      generator({\n        lenderRules: {\n          _id: 'rulesId',\n          expensesSubtractFromIncome: [EXPENSE_TYPES.LEASING],\n        },\n      });\n      LenderRulesService.update({\n        lenderRulesId: 'rulesId',\n        object: { expensesSubtractFromIncome: [] },\n      });\n\n      expect(LenderRulesService.get('rulesId').expensesSubtractFromIncome).to.equal(undefined);\n    });\n  });\n\n  describe('updateFilter', () => {\n    it('updates the filter of a lenderRules document', () => {\n      lenderRulesId = LenderRulesService.insert({ organisationId });\n      LenderRulesService.updateFilter({\n        lenderRulesId,\n        logicRules: [{ '>': [{ var: 'a' }, 2] }],\n      });\n\n      const lenderRules = LenderRulesService.get(lenderRulesId);\n\n      expect(jsonLogic.apply(lenderRules.filter, { a: 3 })).to.equal(true);\n    });\n  });\n\n  describe('setOrder', () => {\n    it('changes the order of all rules', () => {\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n\n      LenderRulesService.setOrder({ orders: { [id1]: 1, [id2]: 0 } });\n\n      expect(LenderRulesService.get(id1).order).to.equal(1);\n      expect(LenderRulesService.get(id2).order).to.equal(0);\n    });\n\n    it('throws if you try to set an invalid order', () => {\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n\n      expect(() =>\n        LenderRulesService.setOrder({ orders: { [id1]: 2, [id2]: 3 } })).to.throw('ordre des filtres');\n    });\n\n    it(\"throws if lenderRules don't belong to the same org\", () => {\n      const organisationId2 = Factory.create('organisation', { name: 'org2' })\n        ._id;\n\n      const id1 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId,\n      })._id;\n      const id2 = Factory.create('lenderRules', {\n        'organisationLink._id': organisationId2,\n      })._id;\n\n      expect(() =>\n        LenderRulesService.setOrder({ orders: { [id1]: 2, [id2]: 3 } })).to.throw('même organisation');\n    });\n  });\n});\n"]},"sourceType":"script","hash":"c728a7620492ed969916cf7083bd0bcaf160e097"}

{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/AutoTooltip.spec.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties",["flow",{}],"dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/core/components/tooltips/test/AutoTooltip.spec.jsx","filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/AutoTooltip.spec.jsx","inputSourceMap":{"version":3,"sources":["imports/core/components/tooltips/test/AutoTooltip.spec.jsx"],"names":["React","expect","shallow","AutoTooltip","createRegexThatFindsAnyWordFromList","TOOLTIP_LISTS","describe","props","component","beforeEach","it","getElement","to","equal","children","equals","text","tooltipList","DEV","OFFER_TABLE","throw"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from '../../../utils/testHelpers/enzyme';\n\nimport {\n  AutoTooltip,\n  createRegexThatFindsAnyWordFromList,\n} from '../AutoTooltip';\nimport { TOOLTIP_LISTS } from '../../../arrays/tooltips';\n\ndescribe('<AutoTooltip />', () => {\n  let props;\n  const component = () => shallow(<AutoTooltip {...props} />);\n\n  beforeEach(() => {\n    props = {};\n  });\n\n  it('returns null if no children are given ', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n\n  it('returns a span with text if a child is provided', () => {\n    props = { children: 'test' };\n    expect(component().equals(<span>test</span>)).to.equal(true);\n  });\n\n  it('returns the child if it is not a string', () => {\n    props = { children: <React.Fragment>test</React.Fragment> };\n    expect(component().equals(<React.Fragment>test</React.Fragment>)).to.equal(true);\n  });\n\n  it('returns a parsed string with tooltips', () => {\n    const text = 'a match1 b';\n    props = { children: text, tooltipList: TOOLTIP_LISTS.DEV };\n    expect(component().text()).to.equal('a <TooltipOverlay /> b');\n  });\n\n  it('returns a parsed string with multiple tooltips', () => {\n    const text = 'a match1 b match2 c';\n    props = { children: text, tooltipList: TOOLTIP_LISTS.DEV };\n    expect(component().text()).to.equal('a <TooltipOverlay /> b <TooltipOverlay /> c');\n  });\n\n  it('takes a list as a string to take tooltips from', () => {\n    const text = 'a 123test b';\n    props = { children: text, tooltipList: TOOLTIP_LISTS.OFFER_TABLE };\n    expect(component().text()).to.equal('a 123test b');\n  });\n\n  it('throws if a non existent list is provided', () => {\n    props = { tooltipList: 'yo', children: 'test' };\n    expect(() => component()).to.throw();\n  });\n\n  it('returns null if no list is provided', () => {\n    expect(createRegexThatFindsAnyWordFromList()).to.equal(null);\n  });\n});\n"]},"passPerPreset":false,"envName":"development","cwd":"/Users/Florian/dev/epotek/microservices/backend","root":"/Users/Florian/dev/epotek/microservices/backend","plugins":[{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-modules-commonjs","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/Florian/dev/epotek/microservices/backend/imports/core/components/tooltips/test/AutoTooltip.spec.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/core/components/tooltips/test/AutoTooltip.spec.jsx"}},"code":"let React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet expect;\nmodule.link(\"chai\", {\n  expect(v) {\n    expect = v;\n  }\n\n}, 1);\nlet shallow;\nmodule.link(\"../../../utils/testHelpers/enzyme\", {\n  shallow(v) {\n    shallow = v;\n  }\n\n}, 2);\nlet AutoTooltip, createRegexThatFindsAnyWordFromList;\nmodule.link(\"../AutoTooltip\", {\n  AutoTooltip(v) {\n    AutoTooltip = v;\n  },\n\n  createRegexThatFindsAnyWordFromList(v) {\n    createRegexThatFindsAnyWordFromList = v;\n  }\n\n}, 3);\nlet TOOLTIP_LISTS;\nmodule.link(\"../../../arrays/tooltips\", {\n  TOOLTIP_LISTS(v) {\n    TOOLTIP_LISTS = v;\n  }\n\n}, 4);\ndescribe('<AutoTooltip />', () => {\n  let props;\n\n  const component = () => shallow(React.createElement(AutoTooltip, props));\n\n  beforeEach(() => {\n    props = {};\n  });\n  it('returns null if no children are given ', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n  it('returns a span with text if a child is provided', () => {\n    props = {\n      children: 'test'\n    };\n    expect(component().equals(React.createElement(\"span\", null, \"test\"))).to.equal(true);\n  });\n  it('returns the child if it is not a string', () => {\n    props = {\n      children: React.createElement(React.Fragment, null, \"test\")\n    };\n    expect(component().equals(React.createElement(React.Fragment, null, \"test\"))).to.equal(true);\n  });\n  it('returns a parsed string with tooltips', () => {\n    const text = 'a match1 b';\n    props = {\n      children: text,\n      tooltipList: TOOLTIP_LISTS.DEV\n    };\n    expect(component().text()).to.equal('a <TooltipOverlay /> b');\n  });\n  it('returns a parsed string with multiple tooltips', () => {\n    const text = 'a match1 b match2 c';\n    props = {\n      children: text,\n      tooltipList: TOOLTIP_LISTS.DEV\n    };\n    expect(component().text()).to.equal('a <TooltipOverlay /> b <TooltipOverlay /> c');\n  });\n  it('takes a list as a string to take tooltips from', () => {\n    const text = 'a 123test b';\n    props = {\n      children: text,\n      tooltipList: TOOLTIP_LISTS.OFFER_TABLE\n    };\n    expect(component().text()).to.equal('a 123test b');\n  });\n  it('throws if a non existent list is provided', () => {\n    props = {\n      tooltipList: 'yo',\n      children: 'test'\n    };\n    expect(() => component()).to.throw();\n  });\n  it('returns null if no list is provided', () => {\n    expect(createRegexThatFindsAnyWordFromList()).to.equal(null);\n  });\n});","map":{"version":3,"sources":["imports/core/components/tooltips/test/AutoTooltip.spec.jsx"],"names":["describe","component","shallow","beforeEach","props","it","expect","children","text","tooltipList","TOOLTIP_LISTS","DEV","OFFER_TABLE","createRegexThatFindsAnyWordFromList"],"mappings":"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","sourcesContent":["/* eslint-env mocha */\nimport React from 'react';\nimport { expect } from 'chai';\nimport { shallow } from '../../../utils/testHelpers/enzyme';\n\nimport {\n  AutoTooltip,\n  createRegexThatFindsAnyWordFromList,\n} from '../AutoTooltip';\nimport { TOOLTIP_LISTS } from '../../../arrays/tooltips';\n\ndescribe('<AutoTooltip />', () => {\n  let props;\n  const component = () => shallow(<AutoTooltip {...props} />);\n\n  beforeEach(() => {\n    props = {};\n  });\n\n  it('returns null if no children are given ', () => {\n    expect(component().getElement()).to.equal(null);\n  });\n\n  it('returns a span with text if a child is provided', () => {\n    props = { children: 'test' };\n    expect(component().equals(<span>test</span>)).to.equal(true);\n  });\n\n  it('returns the child if it is not a string', () => {\n    props = { children: <React.Fragment>test</React.Fragment> };\n    expect(component().equals(<React.Fragment>test</React.Fragment>)).to.equal(true);\n  });\n\n  it('returns a parsed string with tooltips', () => {\n    const text = 'a match1 b';\n    props = { children: text, tooltipList: TOOLTIP_LISTS.DEV };\n    expect(component().text()).to.equal('a <TooltipOverlay /> b');\n  });\n\n  it('returns a parsed string with multiple tooltips', () => {\n    const text = 'a match1 b match2 c';\n    props = { children: text, tooltipList: TOOLTIP_LISTS.DEV };\n    expect(component().text()).to.equal('a <TooltipOverlay /> b <TooltipOverlay /> c');\n  });\n\n  it('takes a list as a string to take tooltips from', () => {\n    const text = 'a 123test b';\n    props = { children: text, tooltipList: TOOLTIP_LISTS.OFFER_TABLE };\n    expect(component().text()).to.equal('a 123test b');\n  });\n\n  it('throws if a non existent list is provided', () => {\n    props = { tooltipList: 'yo', children: 'test' };\n    expect(() => component()).to.throw();\n  });\n\n  it('returns null if no list is provided', () => {\n    expect(createRegexThatFindsAnyWordFromList()).to.equal(null);\n  });\n});\n"]},"sourceType":"script","hash":"e176d5f79a16d4d44d119943caf396731260bc60"}

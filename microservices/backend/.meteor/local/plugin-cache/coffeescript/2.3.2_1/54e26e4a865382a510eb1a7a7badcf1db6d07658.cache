{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nextendPublish(function (name, func, options) {\n  var newFunc;\n\n  newFunc = function (...args) {\n    var enabled, originalAdded, originalChanged, publish, scopeFieldName;\n    publish = this;\n    scopeFieldName = `_sub_${publish._subscriptionId}`;\n    enabled = false;\n\n    publish.enableScope = function () {\n      return enabled = true;\n    };\n\n    originalAdded = publish.added;\n\n    publish.added = function (collectionName, id, fields) {\n      // Add our scoping field.\n      if (enabled) {\n        fields = _.clone(fields);\n        fields[scopeFieldName] = 1;\n      }\n\n      return originalAdded.call(this, collectionName, id, fields);\n    };\n\n    originalChanged = publish.changed;\n\n    publish.changed = function (collectionName, id, fields) {\n      // We do not allow changes to our scoping field.\n      if (enabled && scopeFieldName in fields) {\n        fields = _.clone(fields);\n        delete fields[scopeFieldName];\n      }\n\n      return originalChanged.call(this, collectionName, id, fields);\n    };\n\n    return func.apply(publish, args);\n  };\n\n  return [name, newFunc, options];\n});","sourceMap":{"version":3,"sources":["/packages/peerlibrary_subscription-scope/server.coffee","/server.coffee"],"names":["extendPublish","name","func","options","newFunc","args","enabled","originalAdded","originalChanged","publish","scopeFieldName","_subscriptionId","enableScope","added","collectionName","id","fields","_","clone","call","changed","apply"],"mappings":";AAAAA,aAAA,CAAc,UAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAA;AACZ,MAAAC,OAAA;;AAAAA,EAAAA,OAAA,GAAU,UAAA,GAACC,IAAD,EAAA;AACR,QAAAC,OAAA,EAAAC,aAAA,EAAAC,eAAA,EAAAC,OAAA,EAAAC,cAAA;AAAAD,IAAAA,OAAA,GAAU,IAAV;AAEAC,IAAAA,cAAA,GAAiB,QAAQD,OAAO,CAACE,eAAhB,EAAjB;AAEAL,IAAAA,OAAA,GAAU,KAAV;;AAEAG,IAAAA,OAAO,CAACG,WAAR,GAAsB,YAAA;ACApB,aDCAN,OAAA,GAAU,ICDV;ADAoB,KAAtB;;AAGAC,IAAAA,aAAA,GAAgBE,OAAO,CAACI,KAAxB;;AACAJ,IAAAA,OAAO,CAACI,KAAR,GAAgB,UAACC,cAAD,EAAiBC,EAAjB,EAAqBC,MAArB,EAAA;ACAd;ADEA,UAAGV,OAAH,EAAA;AACEU,QAAAA,MAAA,GAASC,CAAC,CAACC,KAAF,CAAQF,MAAR,CAAT;AACAA,QAAAA,MAAO,CAAAN,cAAA,CAAP,GAAyB,CAAzB;ACAD;;AACD,aDCAH,aAAa,CAACY,IAAd,CAAmB,IAAnB,EAAsBL,cAAtB,EAAsCC,EAAtC,EAA0CC,MAA1C,CCDA;ADLc,KAAhB;;AAQAR,IAAAA,eAAA,GAAkBC,OAAO,CAACW,OAA1B;;AACAX,IAAAA,OAAO,CAACW,OAAR,GAAkB,UAACN,cAAD,EAAiBC,EAAjB,EAAqBC,MAArB,EAAA;ACAhB;ADEA,UAAGV,OAAA,IAAYI,cAAA,IAAkBM,MAAjC,EAAA;AACEA,QAAAA,MAAA,GAASC,CAAC,CAACC,KAAF,CAAQF,MAAR,CAAT;AACA,eAAOA,MAAO,CAAAN,cAAA,CAAd;ACAD;;AACD,aDCAF,eAAe,CAACW,IAAhB,CAAqB,IAArB,EAAwBL,cAAxB,EAAwCC,EAAxC,EAA4CC,MAA5C,CCDA;ADLgB,KAAlB;;ACOA,WDCAd,IAAI,CAACmB,KAAL,CAAWZ,OAAX,EAAoBJ,IAApB,CCDA;AD3BQ,GAAV;;AC6BA,SDCA,CAACJ,IAAD,EAAOG,OAAP,EAAgBD,OAAhB,CCDA;AD9BF,CAAA,CAAA","file":"packages/peerlibrary:subscription-scope/server.coffee.map","sourcesContent":["extendPublish (name, func, options) ->\n  newFunc = (args...) ->\n    publish = @\n\n    scopeFieldName = \"_sub_#{publish._subscriptionId}\"\n\n    enabled = false\n\n    publish.enableScope = ->\n      enabled = true\n\n    originalAdded = publish.added\n    publish.added = (collectionName, id, fields) ->\n      # Add our scoping field.\n      if enabled\n        fields = _.clone fields\n        fields[scopeFieldName] = 1\n\n      originalAdded.call @, collectionName, id, fields\n\n    originalChanged = publish.changed\n    publish.changed = (collectionName, id, fields) ->\n      # We do not allow changes to our scoping field.\n      if enabled and scopeFieldName of fields\n        fields = _.clone fields\n        delete fields[scopeFieldName]\n\n      originalChanged.call @, collectionName, id, fields\n\n    func.apply publish, args\n\n  [name, newFunc, options]\n","extendPublish(function(name, func, options) {\n  var newFunc;\n  newFunc = function(...args) {\n    var enabled, originalAdded, originalChanged, publish, scopeFieldName;\n    publish = this;\n    scopeFieldName = `_sub_${publish._subscriptionId}`;\n    enabled = false;\n    publish.enableScope = function() {\n      return enabled = true;\n    };\n    originalAdded = publish.added;\n    publish.added = function(collectionName, id, fields) {\n      // Add our scoping field.\n      if (enabled) {\n        fields = _.clone(fields);\n        fields[scopeFieldName] = 1;\n      }\n      return originalAdded.call(this, collectionName, id, fields);\n    };\n    originalChanged = publish.changed;\n    publish.changed = function(collectionName, id, fields) {\n      // We do not allow changes to our scoping field.\n      if (enabled && scopeFieldName in fields) {\n        fields = _.clone(fields);\n        delete fields[scopeFieldName];\n      }\n      return originalChanged.call(this, collectionName, id, fields);\n    };\n    return func.apply(publish, args);\n  };\n  return [name, newFunc, options];\n});\n"]}}
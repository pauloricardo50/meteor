{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,r=Package.meteor.meteorEnv,i=Package.random.Random,o=Package.modules.meteorInstall,m=Package[\"babel-runtime\"].meteorBabelHelpers,s=Package.promise.Promise,a,n,u=o({node_modules:{meteor:{retry:{\"retry.js\":function(t,r,o){o.export({Retry:()=>m});class m{constructor(){let{baseTimeout:e=1e3,exponent:t=2.2,maxTimeout:r=3e5,minTimeout:i=10,minCount:o=2,fuzz:m=.5}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.baseTimeout=e,this.exponent=t,this.maxTimeout=r,this.minTimeout=i,this.minCount=o,this.fuzz=m,this.retryTimer=null}clear(){this.retryTimer&&clearTimeout(this.retryTimer),this.retryTimer=null}_timeout(e){return e<this.minCount?this.minTimeout:Math.min(this.maxTimeout,this.baseTimeout*Math.pow(this.exponent,e))*(i.fraction()*this.fuzz+(1-this.fuzz/2));var t}retryLater(t,r){var i=this._timeout(t);return this.retryTimer&&clearTimeout(this.retryTimer),this.retryTimer=e.setTimeout(r,i),i}}}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/retry/retry.js\");Package._define(\"retry\",u,{Retry:a})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/retry/retry.js\"],\"names\":[\"module\",\"export\",\"Retry\",\"constructor\",\"baseTimeout\",\"exponent\",\"maxTimeout\",\"minTimeout\",\"minCount\",\"fuzz\",\"arguments\",\"length\",\"undefined\",\"this\",\"retryTimer\",\"clear\",\"clearTimeout\",\"_timeout\",\"count\",\"Math\",\"min\",\"pow\",\"Random\",\"fraction\",\"timeout\",\"retryLater\",\"fn\",\"Meteor\",\"setTimeout\"],\"mappings\":\"4RAAAA,EAAOC,QAAQC,MAAM,IAAIA,UAUZA,EACXC,cASQ,IATIC,YACVA,EAAc,IADJC,SAEVA,EAAW,IAFDC,WAKVA,EAAa,IALHC,WAMVA,EAAa,GANHC,SAOVA,EAAW,EAPDC,KAQVA,EAAO,IACDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,MACNG,KAAKT,YAAcA,EACnBS,KAAKR,SAAWA,EAChBQ,KAAKP,WAAaA,EAClBO,KAAKN,WAAaA,EAClBM,KAAKL,SAAWA,EAChBK,KAAKJ,KAAOA,EACZI,KAAKC,WAAa,KAIpBC,QACMF,KAAKC,YACPE,aAAaH,KAAKC,YAEpBD,KAAKC,WAAa,KAKpBG,SAASC,GACP,OAAIA,EAAQL,KAAKL,SACRK,KAAKN,WAKAY,KAAKC,IACjBP,KAAKP,WACLO,KAAKT,YAAce,KAAKE,IAAIR,KAAKR,SAAUa,KAE3CI,EAAOC,WAAaV,KAAKJ,MAAQ,EAAII,KAAKJ,KAAO,IAJnD,IAAIe,EAWNC,WAAWP,EAAOQ,GAChB,IAAIF,EAAUX,KAAKI,SAASC,GAI5B,OAHIL,KAAKC,YACPE,aAAaH,KAAKC,YACpBD,KAAKC,WAAaa,EAAOC,WAAWF,EAAIF,GACjCA\",\"sourcesContent\":[\"// Retry logic with an exponential backoff.\\n//\\n// options:\\n//  baseTimeout: time for initial reconnect attempt (ms).\\n//  exponent: exponential factor to increase timeout each attempt.\\n//  maxTimeout: maximum time between retries (ms).\\n//  minCount: how many times to reconnect \\\"instantly\\\".\\n//  minTimeout: time to wait for the first `minCount` retries (ms).\\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\\n\\nexport class Retry {\\n  constructor({\\n    baseTimeout = 1000,\\n    exponent = 2.2,\\n    // The default is high-ish to ensure a server can recover from a\\n    // failure caused by load.\\n    maxTimeout = 5 * 60 * 1000,\\n    minTimeout = 10,\\n    minCount = 2,\\n    fuzz = 0.5,\\n  } = {}) {\\n    this.baseTimeout = baseTimeout;\\n    this.exponent = exponent;\\n    this.maxTimeout = maxTimeout;\\n    this.minTimeout = minTimeout;\\n    this.minCount = minCount;\\n    this.fuzz = fuzz;\\n    this.retryTimer = null;\\n  }\\n\\n  // Reset a pending retry, if any.\\n  clear() {\\n    if (this.retryTimer) {\\n      clearTimeout(this.retryTimer);\\n    }\\n    this.retryTimer = null;\\n  }\\n\\n  // Calculate how long to wait in milliseconds to retry, based on the\\n  // `count` of which retry this is.\\n  _timeout(count) {\\n    if (count < this.minCount) {\\n      return this.minTimeout;\\n    }\\n\\n    // fuzz the timeout randomly, to avoid reconnect storms when a\\n    // server goes down.\\n    var timeout = Math.min(\\n      this.maxTimeout,\\n      this.baseTimeout * Math.pow(this.exponent, count)\\n    ) * (\\n      Random.fraction() * this.fuzz + (1 - this.fuzz / 2)\\n    );\\n\\n    return timeout;\\n  }\\n\\n  // Call `fn` after a delay, based on the `count` of which retry this is.\\n  retryLater(count, fn) {\\n    var timeout = this._timeout(count);\\n    if (this.retryTimer)\\n      clearTimeout(this.retryTimer);\\n    this.retryTimer = Meteor.setTimeout(fn, timeout);\\n    return timeout;\\n  }\\n}\\n\"]}","minifier":"terser"}
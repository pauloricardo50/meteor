{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,n=Package.meteor.meteorEnv,r=Package.tracker.Tracker,i=Package.tracker.Deps,a=Package.retry.Retry,o=Package[\"ddp-client\"].DDP,s=Package.modules.meteorInstall,c=Package[\"babel-runtime\"].meteorBabelHelpers,u=Package.promise.Promise,l=Package[\"ecmascript-runtime-client\"].Symbol,f=Package[\"ecmascript-runtime-client\"].Map,d=Package[\"ecmascript-runtime-client\"].Set,v,h,_=s({node_modules:{meteor:{autoupdate:{\"autoupdate_client.js\":function(t,n,r){var i;r.export({Autoupdate:function(){return l}}),r.link(\"./client_versions.js\",{ClientVersions:function(e){i=e}},0);var s=e.isCordova?\"web.cordova\":e.isModern?\"web.browser\":\"web.browser.legacy\",c=((__meteor_runtime_config__.autoupdate||{}).versions||{})[s]||{version:\"unknown\",versionRefreshable:\"unknown\",versionNonRefreshable:\"unknown\",assets:[]},l={},f=o.connect(__meteor_runtime_config__.ROOT_URL),d=l._clientVersions=new i;f.registerStore(\"meteor_autoupdate_clientVersions\",d.createStore()),l.newClientAvailable=function(){return d.newClientAvailable(s,[\"versionRefreshable\",\"versionNonRefreshable\"],c)};var v=!1,h=new a({minCount:0,baseTimeout:3e4}),_=0;l._retrySubscription=function(){f.subscribe(\"meteor_autoupdate_clientVersions\",{onError:function(t){e._debug(\"autoupdate subscription failed\",t),_++,h.retryLater(_,function(){l._retrySubscription()})},onReady:function(){var t=u.resolve();function n(e){t.then(function(){return i(e)})}var r=d.watch(n);function i(t){if(t._id===s){if(t.versionNonRefreshable!==c.versionNonRefreshable)return r&&r(),void(Package.reload&&Package.reload.Reload._reload());if(t.versionRefreshable!==c.versionRefreshable){var n=function(t,n){var r;if(t.onload=function(){v=!0,r||(r=!0,n())},!v)var i=e.setInterval(function(){t.sheet&&(r||(r=!0,n()),e.clearInterval(i))},50)},i=function(){o.length>0&&--u<1&&o.splice(0).forEach(function(e){e.parentNode.removeChild(e)})};c.versionRefreshable=t.versionRefreshable;var a=t.assets||[],o=[];Array.prototype.forEach.call(document.getElementsByTagName(\"link\"),function(e){\"__meteor-css__\"===e.className&&o.push(e)});var u=a.length;a.length>0?a.forEach(function(t){var r=document.createElement(\"link\"),a;r.setAttribute(\"rel\",\"stylesheet\"),r.setAttribute(\"type\",\"text/css\"),r.setAttribute(\"class\",\"__meteor-css__\"),r.setAttribute(\"href\",t.url),n(r,function(){e.setTimeout(i,200)}),document.getElementsByTagName(\"head\").item(0).appendChild(r)}):i()}}}}})},l._retrySubscription()},\"client_versions.js\":function(e,t,n){var r,i=e(\"@babel/runtime/helpers/interopRequireDefault\")(e(\"@babel/runtime/helpers/objectSpread\")),a;n.export({ClientVersions:function(){return o}}),n.link(\"meteor/tracker\",{Tracker:function(e){a=e}},0);var o=function(){function e(){this._versions=new f,this._watchCallbacks=new d}var t=e.prototype;return t.createStore=function(){function e(){var e=this;return{update:function(t){var n=t.id,r=t.msg,i=t.fields;\"added\"!==r&&\"changed\"!==r||e.set(n,i)}}}return e}(),t.hasVersions=function(){function e(){return this._versions.size>0}return e}(),t.get=function(){function e(e){return this._versions.get(e)}return e}(),t.set=function(){function e(e,t){var n=this._versions.get(e),r=!1;n?Object.assign(n,t):(n=(0,i.default)({_id:e},t),r=!0,this._versions.set(e,n)),this._watchCallbacks.forEach(function(e){var t=e.fn,i=e.filter;i&&i!==n._id||t(n,r)})}return e}(),t.watch=function(){function e(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.skipInitial,i=n.filter;if(!r){var a=u.resolve();this._versions.forEach(function(t){i&&i!==t._id||a.then(function(){return e(t,!0)})})}var o={fn:e,filter:i};return this._watchCallbacks.add(o),function(){return t._watchCallbacks.delete(o)}}return e}(),t.newClientAvailable=function(){function e(e,t,n){function r(r){return r._id===e&&t.some(function(e){return r[e]!==n[e]})}var i=new a.Dependency,o=this.get(e);i.depend();var s=this.watch(function(e){r(e)&&(i.changed(),s())},{skipInitial:!0});return!!o&&r(o)}return e}(),e}()}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/autoupdate/autoupdate_client.js\");Package._define(\"autoupdate\",_,{Autoupdate:void 0})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/autoupdate/autoupdate_client.js\",\"packages/autoupdate/client_versions.js\"],\"names\":[\"ClientVersions\",\"module\",\"export\",\"Autoupdate\",\"link\",\"v\",\"clientArch\",\"Meteor\",\"isCordova\",\"isModern\",\"autoupdateVersions\",\"__meteor_runtime_config__\",\"autoupdate\",\"versions\",\"version\",\"versionRefreshable\",\"versionNonRefreshable\",\"assets\",\"connection\",\"DDP\",\"connect\",\"ROOT_URL\",\"clientVersions\",\"_clientVersions\",\"registerStore\",\"createStore\",\"newClientAvailable\",\"knownToSupportCssOnLoad\",\"retry\",\"Retry\",\"minCount\",\"baseTimeout\",\"failures\",\"_retrySubscription\",\"subscribe\",\"onError\",\"error\",\"_debug\",\"retryLater\",\"onReady\",\"resolved\",\"Promise\",\"resolve\",\"check\",\"doc\",\"then\",\"checkNewVersionDocument\",\"stop\",\"watch\",\"_id\",\"Package\",\"reload\",\"Reload\",\"_reload\",\"waitUntilCssLoads\",\"callback\",\"called\",\"onload\",\"id\",\"setInterval\",\"sheet\",\"clearInterval\",\"removeOldLinks\",\"oldLinks\",\"length\",\"newLinksLeftToLoad\",\"splice\",\"forEach\",\"parentNode\",\"removeChild\",\"newCss\",\"Array\",\"prototype\",\"call\",\"document\",\"getElementsByTagName\",\"className\",\"push\",\"css\",\"newLink\",\"createElement\",\"head\",\"setAttribute\",\"url\",\"setTimeout\",\"item\",\"appendChild\",\"Tracker\",\"this\",\"_versions\",\"Map\",\"_watchCallbacks\",\"Set\",\"_this\",\"update\",\"_ref\",\"msg\",\"fields\",\"set\",\"hasVersions\",\"size\",\"get\",\"isNew\",\"Object\",\"assign\",\"_objectSpread2\",\"default\",\"_ref2\",\"fn\",\"filter\",\"_this2\",\"_ref3\",\"arguments\",\"undefined\",\"skipInitial\",\"add\",\"delete\",\"currentVersion\",\"isNewVersion\",\"some\",\"field\",\"dependency\",\"Dependency\",\"depend\",\"changed\"],\"mappings\":\"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\",\"sourcesContent\":[\"// Subscribe to the `meteor_autoupdate_clientVersions` collection,\\n// which contains the set of acceptable client versions.\\n//\\n// A \\\"hard code push\\\" occurs when the running client version is not in\\n// the set of acceptable client versions (or the server updates the\\n// collection, there is a published client version marked `current` and\\n// the running client version is no longer in the set).\\n//\\n// When the `reload` package is loaded, a hard code push causes\\n// the browser to reload, so that it will load the latest client\\n// version from the server.\\n//\\n// A \\\"soft code push\\\" represents the situation when the running client\\n// version is in the set of acceptable versions, but there is a newer\\n// version available on the server.\\n//\\n// `Autoupdate.newClientAvailable` is a reactive data source which\\n// becomes `true` if there is a new version of the client is available on\\n// the server.\\n//\\n// This package doesn't implement a soft code reload process itself,\\n// but `newClientAvailable` could be used for example to display a\\n// \\\"click to reload\\\" link to the user.\\n\\n// The client version of the client code currently running in the\\n// browser.\\n\\nimport { ClientVersions } from './client_versions.js';\\n\\nconst clientArch = Meteor.isCordova\\n  ? 'web.cordova'\\n  : Meteor.isModern\\n    ? 'web.browser'\\n    : 'web.browser.legacy';\\n\\nconst autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {})\\n  .versions || {})[clientArch] || {\\n  version: 'unknown',\\n  versionRefreshable: 'unknown',\\n  versionNonRefreshable: 'unknown',\\n  assets: [],\\n};\\n\\nexport const Autoupdate = {};\\nconst connection = DDP.connect(__meteor_runtime_config__.ROOT_URL);\\n\\n// Stores acceptable client versions.\\nconst clientVersions = (Autoupdate._clientVersions = new ClientVersions()); // Used by a self-test.\\n\\nconnection.registerStore(\\n  'meteor_autoupdate_clientVersions',\\n  clientVersions.createStore(),\\n);\\n\\nAutoupdate.newClientAvailable = function () {\\n  return clientVersions.newClientAvailable(\\n    clientArch,\\n    ['versionRefreshable', 'versionNonRefreshable'],\\n    autoupdateVersions,\\n  );\\n};\\n\\n// Set to true if the link.onload callback ever fires for any <link> node.\\nlet knownToSupportCssOnLoad = false;\\n\\nconst retry = new Retry({\\n  // Unlike the stream reconnect use of Retry, which we want to be instant\\n  // in normal operation, this is a wacky failure. We don't want to retry\\n  // right away, we can start slowly.\\n  //\\n  // A better way than timeconstants here might be to use the knowledge\\n  // of when we reconnect to help trigger these retries. Typically, the\\n  // server fixing code will result in a restart and reconnect, but\\n  // potentially the subscription could have a transient error.\\n  minCount: 0, // don't do any immediate retries\\n  baseTimeout: 30 * 1000, // start with 30s\\n});\\n\\nlet failures = 0;\\n\\nAutoupdate._retrySubscription = () => {\\n  connection.subscribe('meteor_autoupdate_clientVersions', {\\n    onError(error) {\\n      Meteor._debug('autoupdate subscription failed', error);\\n      failures++;\\n      retry.retryLater(failures, () => {\\n        // Just retry making the subscription, don't reload the whole\\n        // page. While reloading would catch more cases (for example,\\n        // the server went back a version and is now doing old-style hot\\n        // code push), it would also be more prone to reload loops,\\n        // which look really bad to the user. Just retrying the\\n        // subscription over DDP means it is at least possible to fix by\\n        // updating the server.\\n        Autoupdate._retrySubscription();\\n      });\\n    },\\n\\n    onReady() {\\n      // Call checkNewVersionDocument with a slight delay, so that the\\n      // const handle declaration is guaranteed to be initialized, even if\\n      // the added or changed callbacks are called synchronously.\\n      const resolved = Promise.resolve();\\n      function check(doc) {\\n        resolved.then(() => checkNewVersionDocument(doc));\\n      }\\n\\n      const stop = clientVersions.watch(check);\\n\\n      function checkNewVersionDocument(doc) {\\n        if (doc._id !== clientArch) {\\n          return;\\n        }\\n\\n        if (\\n          doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable\\n        ) {\\n          // Non-refreshable assets have changed, so we have to reload the\\n          // whole page rather than just replacing <link> tags.\\n          if (stop) stop();\\n          if (Package.reload) {\\n            // The reload package should be provided by ddp-client, which\\n            // is provided by the ddp package that autoupdate depends on.\\n            Package.reload.Reload._reload();\\n          }\\n          return;\\n        }\\n\\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\\n\\n          // Switch out old css links for the new css links. Inspired by:\\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\\n          const newCss = doc.assets || [];\\n          const oldLinks = [];\\n\\n          Array.prototype.forEach.call(\\n            document.getElementsByTagName('link'),\\n            (link) => {\\n              if (link.className === '__meteor-css__') {\\n                oldLinks.push(link);\\n              }\\n            },\\n          );\\n\\n          function waitUntilCssLoads(link, callback) {\\n            let called;\\n\\n            link.onload = function () {\\n              knownToSupportCssOnLoad = true;\\n              if (!called) {\\n                called = true;\\n                callback();\\n              }\\n            };\\n\\n            if (!knownToSupportCssOnLoad) {\\n              var id = Meteor.setInterval(() => {\\n                if (link.sheet) {\\n                  if (!called) {\\n                    called = true;\\n                    callback();\\n                  }\\n                  Meteor.clearInterval(id);\\n                }\\n              }, 50);\\n            }\\n          }\\n\\n          let newLinksLeftToLoad = newCss.length;\\n          function removeOldLinks() {\\n            if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\\n              oldLinks.splice(0).forEach((link) => {\\n                link.parentNode.removeChild(link);\\n              });\\n            }\\n          }\\n\\n          if (newCss.length > 0) {\\n            newCss.forEach((css) => {\\n              const newLink = document.createElement('link');\\n              newLink.setAttribute('rel', 'stylesheet');\\n              newLink.setAttribute('type', 'text/css');\\n              newLink.setAttribute('class', '__meteor-css__');\\n              newLink.setAttribute('href', css.url);\\n\\n              waitUntilCssLoads(newLink, () => {\\n                Meteor.setTimeout(removeOldLinks, 200);\\n              });\\n\\n              const head = document.getElementsByTagName('head').item(0);\\n              head.appendChild(newLink);\\n            });\\n          } else {\\n            removeOldLinks();\\n          }\\n        }\\n      }\\n    },\\n  });\\n};\\n\\nAutoupdate._retrySubscription();\\n\",\"import { Tracker } from \\\"meteor/tracker\\\";\\n\\nexport class ClientVersions {\\n  constructor() {\\n    this._versions = new Map();\\n    this._watchCallbacks = new Set();\\n  }\\n\\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\\n  // After the store is registered, document updates reported by Livedata are\\n  // merged with the documents in this `ClientVersions` instance.\\n  createStore() {\\n    return {\\n      update: ({ id, msg, fields }) => {\\n        if (msg === \\\"added\\\" || msg === \\\"changed\\\") {\\n          this.set(id, fields);\\n        }\\n      }\\n    };\\n  }\\n\\n  hasVersions() {\\n    return this._versions.size > 0;\\n  }\\n\\n  get(id) {\\n    return this._versions.get(id);\\n  }\\n\\n  // Adds or updates a version document and invokes registered callbacks for the\\n  // added/updated document. If a document with the given ID already exists, its\\n  // fields are merged with `fields`.\\n  set(id, fields) {\\n    let version = this._versions.get(id);\\n    let isNew = false;\\n\\n    if (version) {\\n      Object.assign(version, fields);\\n    } else {\\n      version = {\\n        _id: id,\\n        ...fields\\n      };\\n\\n      isNew = true;\\n      this._versions.set(id, version);\\n    }\\n\\n    this._watchCallbacks.forEach(({ fn, filter }) => {\\n      if (! filter || filter === version._id) {\\n        fn(version, isNew);\\n      }\\n    });\\n  }\\n\\n  // Registers a callback that will be invoked when a version document is added\\n  // or changed. Calling the function returned by `watch` removes the callback.\\n  // If `skipInitial` is true, the callback isn't be invoked for existing\\n  // documents. If `filter` is set, the callback is only invoked for documents\\n  // with ID `filter`.\\n  watch(fn, { skipInitial, filter } = {}) {\\n    if (! skipInitial) {\\n      const resolved = Promise.resolve();\\n\\n      this._versions.forEach((version) => {\\n        if (! filter || filter === version._id) {\\n          resolved.then(() => fn(version, true));\\n        }\\n      });\\n    }\\n\\n    const callback = { fn, filter };\\n    this._watchCallbacks.add(callback);\\n\\n    return () => this._watchCallbacks.delete(callback);\\n  }\\n\\n  // A reactive data source for `Autoupdate.newClientAvailable`.\\n  newClientAvailable(id, fields, currentVersion) {\\n    function isNewVersion(version) {\\n      return (\\n        version._id === id &&\\n        fields.some((field) => version[field] !== currentVersion[field])\\n      );\\n    }\\n\\n    const dependency = new Tracker.Dependency();\\n    const version = this.get(id);\\n\\n    dependency.depend();\\n\\n    const stop = this.watch(\\n      (version) => {\\n        if (isNewVersion(version)) {\\n          dependency.changed();\\n          stop();\\n        }\\n      },\\n      { skipInitial: true }\\n    );\\n\\n    return !! version && isNewVersion(version);\\n  }\\n}\\n\"]}","minifier":"terser"}
{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,n=Package.meteor.meteorEnv,r=Package.minimongo.LocalCollection,o=Package.minimongo.Minimongo,i=Package.underscore._,a=Package.ejson.EJSON,c=Package.random.Random,u=Package.modules.meteorInstall,s=Package[\"babel-runtime\"].meteorBabelHelpers,l=Package.promise.Promise,f=Package[\"ecmascript-runtime-client\"].Symbol,d=Package[\"ecmascript-runtime-client\"].Map,g=Package[\"ecmascript-runtime-client\"].Set,m,v;u({node_modules:{meteor:{\"dburles:factory\":{\"factory.js\":function(){var e={};(m=function(){function e(e,t,n){this.name=e,this.collection=t,this.attributes=n,this.afterHooks=[],this.sequence=0}var t;return e.prototype.after=function(){function e(e){return this.afterHooks.push(e),this}return e}(),e}()).define=function(t,n,r){return e[t]=new m(t,n,r),e[t]},m.get=function(t){var n=e[t];if(!n)throw new Error(\"Factory: There is no factory named \"+t);return n},m._build=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=m.get(e),u={},s=i.extend({},a.attributes,t),l=function(e){return o.insert?m.create(e,{},n)._id:o.tree?m._build(e,{},n,{tree:!0}):c.id()},f=function(e){return e instanceof m?l(e.name):e},d=function(e){var t={sequence:function(e){return e(a.sequence)}},r=e.call(u,t,n);return f(r)};a.sequence+=1;var g=function(e,t){i.each(t,function(t,n){var o=t;if(t instanceof m)o=l(t.name);else if(i.isArray(t))o=t.map(function(e){return i.isFunction(e)?d(e):f(e)});else if(i.isFunction(t))o=d(t);else if(\"[object Object]\"===Object.prototype.toString.call(t))return e[n]=e[n]||{},g(e[n],t);var a={$set:{}};\"_id\"!==n&&(a.$set[n]=o),r._modify(e,a)})};return g(u,s),o.tree||(u._id=s._id||c.id()),u},m.build=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return m._build(e,t,n)},m.tree=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return m._build(e,t,n,{tree:!0})},m._create=function(e,t){var n=m.get(e).collection,r=n.insert(t),o;return n.findOne(r)},m.create=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=m._build(e,t,n,{insert:!0}),o=m._create(e,r);return m.get(e).afterHooks.forEach(function(e){return e(o)}),o},m.extend=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i.extend(i.clone(m.get(e).attributes),t)}}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/dburles:factory/factory.js\"),Package._define(\"dburles:factory\",{Factory:m})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/dburles:factory/factory.js\"],\"names\":[\"factories\",\"Factory\",\"name\",\"collection\",\"attributes\",\"this\",\"afterHooks\",\"sequence\",\"_proto\",\"prototype\",\"after\",\"fn\",\"push\",\"define\",\"get\",\"factory\",\"Error\",\"_build\",\"arguments\",\"length\",\"undefined\",\"userOptions\",\"options\",\"result\",\"extendedAttributes\",\"_\",\"extend\",\"makeRelation\",\"relName\",\"insert\",\"create\",\"_id\",\"tree\",\"Random\",\"id\",\"getValue\",\"value\",\"getValueFromFunction\",\"func\",\"api\",\"fnRes\",\"call\",\"walk\",\"record\",\"object\",\"each\",\"key\",\"newValue\",\"isArray\",\"map\",\"element\",\"isFunction\",\"Object\",\"toString\",\"modifier\",\"$set\",\"LocalCollection\",\"_modify\",\"build\",\"_create\",\"doc\",\"insertId\",\"findOne\",\"forEach\",\"cb\",\"clone\"],\"mappings\":\"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\",\"sourcesContent\":[\"/* global LocalCollection */\\n/* global Factory:true */\\n\\nconst factories = {};\\n\\nFactory = class Factory {\\n  constructor(name, collection, attributes) {\\n    this.name = name;\\n    this.collection = collection;\\n    this.attributes = attributes;\\n    this.afterHooks = [];\\n    this.sequence = 0;\\n  }\\n\\n  after(fn) {\\n    this.afterHooks.push(fn);\\n    return this;\\n  }\\n};\\n\\nFactory.define = (name, collection, attributes) => {\\n  factories[name] = new Factory(name, collection, attributes);\\n  return factories[name];\\n};\\n\\nFactory.get = name => {\\n  const factory = factories[name];\\n  if (! factory) {\\n    throw new Error(\\\"Factory: There is no factory named \\\" + name);\\n  }\\n  return factory;\\n};\\n\\nFactory._build = (name, attributes = {}, userOptions = {}, options = {}) => {\\n  const factory = Factory.get(name);\\n  const result = {};\\n\\n  // \\\"raw\\\" attributes without functions evaluated, or dotted properties resolved\\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\\n\\n  // either create a new factory and return its _id\\n  // or return a 'fake' _id (since we're not inserting anything)\\n  const makeRelation = relName => {\\n    if (options.insert) {\\n      return Factory.create(relName, {}, userOptions)._id;\\n    }\\n    if (options.tree) {\\n      return Factory._build(relName, {}, userOptions, {tree: true});\\n    }\\n    // fake an id on build\\n    return Random.id();\\n  };\\n\\n  const getValue = value => {\\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\\n  };\\n\\n  const getValueFromFunction = func => {\\n    const api = { sequence: fn => fn(factory.sequence) };\\n    const fnRes = func.call(result, api, userOptions);\\n    return getValue(fnRes);\\n  };\\n\\n  factory.sequence += 1;\\n\\n  const walk = (record, object) => {\\n    _.each(object, (value, key) => {\\n      let newValue = value;\\n      // is this a Factory instance?\\n      if (value instanceof Factory) {\\n        newValue = makeRelation(value.name);\\n      } else if (_.isArray(value)) {\\n        newValue = value.map(element => {\\n          if (_.isFunction(element)) {\\n            return getValueFromFunction(element);\\n          }\\n          return getValue(element);\\n        });\\n      } else if (_.isFunction(value)) {\\n        newValue = getValueFromFunction(value);\\n      // if an object literal is passed in, traverse deeper into it\\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\\n        record[key] = record[key] || {};\\n        return walk(record[key], value);\\n      }\\n\\n      const modifier = {$set: {}};\\n\\n      if (key !== '_id') {\\n        modifier.$set[key] = newValue;\\n      }\\n\\n      LocalCollection._modify(record, modifier);\\n    });\\n  };\\n\\n  walk(result, extendedAttributes);\\n\\n  if (! options.tree) {\\n    result._id = extendedAttributes._id || Random.id();\\n  }\\n  return result;\\n};\\n\\nFactory.build = (name, attributes = {}, userOptions = {}) => {\\n  return Factory._build(name, attributes, userOptions);\\n};\\n\\nFactory.tree = (name, attributes, userOptions = {}) => {\\n  return Factory._build(name, attributes, userOptions, {tree: true});\\n};\\n\\nFactory._create = (name, doc) => {\\n  const collection = Factory.get(name).collection;\\n  const insertId = collection.insert(doc);\\n  const record = collection.findOne(insertId);\\n  return record;\\n};\\n\\nFactory.create = (name, attributes = {}, userOptions = {}) => {\\n  const doc = Factory._build(name, attributes, userOptions, {insert: true});\\n  const record = Factory._create(name, doc);\\n\\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\\n\\n  return record;\\n};\\n\\nFactory.extend = (name, attributes = {}) => {\\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\\n};\\n\"]}","minifier":"terser"}
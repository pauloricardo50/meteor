{"code":"!function(){var e=Package.meteor.Meteor,n=Package.meteor.global,t=Package.meteor.meteorEnv,r=Package.modules.meteorInstall,o=Package[\"babel-runtime\"].meteorBabelHelpers,i=Package.promise.Promise,a,d;r({node_modules:{meteor:{random:{\"random.js\":function(n){if(e.isServer)var t=Npm.require(\"crypto\");var r=function(){function e(){var e=4022871197,n=function(n){n=n.toString();for(var t=0;t<n.length;t++){var r=.02519603282416938*(e+=n.charCodeAt(t));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)};return n.version=\"Mash 0.9\",n}return function(n){var t=0,r=0,o=0,i=1;0==n.length&&(n=[+new Date]);var a=e();t=a(\" \"),r=a(\" \"),o=a(\" \");for(var d=0;d<n.length;d++)(t-=a(n[d]))<0&&(t+=1),(r-=a(n[d]))<0&&(r+=1),(o-=a(n[d]))<0&&(o+=1);a=null;var u=function(){var e=2091639*t+2.3283064365386963e-10*i;return t=r,r=o,o=e-(i=0|e)};return u.uint32=function(){return 4294967296*u()},u.fract53=function(){return u()+1.1102230246251565e-16*(2097152*u()|0)},u.version=\"Alea 0.9\",u.args=n,u}(Array.prototype.slice.call(arguments))},o=\"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\",i=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_\",d=function(e,n){var t=this;if(this.type=e,!d.Type[e])throw new Error(\"Unknown random generator type: \"+e);if(e===d.Type.ALEA){if(!n.seeds)throw new Error(\"No seeds were provided for Alea PRNG\");this.alea=r.apply(null,n.seeds)}};d.Type={NODE_CRYPTO:\"NODE_CRYPTO\",BROWSER_CRYPTO:\"BROWSER_CRYPTO\",ALEA:\"ALEA\"},d.prototype.fraction=function(){var e=this,n;if(this.type===d.Type.ALEA)return this.alea();if(this.type===d.Type.NODE_CRYPTO)return 2.3283064365386963e-10*parseInt(this.hexString(8),16);if(this.type===d.Type.BROWSER_CRYPTO){var t=new Uint32Array(1);return window.crypto.getRandomValues(t),2.3283064365386963e-10*t[0]}throw new Error(\"Unknown random generator type: \"+this.type)},d.prototype.hexString=function(e){var n=this;if(this.type===d.Type.NODE_CRYPTO){var r=Math.ceil(e/2),o,i;try{o=t.randomBytes(r)}catch(e){o=t.pseudoRandomBytes(r)}return o.toString(\"hex\").substring(0,e)}return this._randomString(e,\"0123456789abcdef\")},d.prototype._randomString=function(e,n){for(var t=this,r=[],o=0;o<e;o++)r[o]=this.choice(n);return r.join(\"\")},d.prototype.id=function(e){var n=this;return void 0===e&&(e=17),this._randomString(e,o)},d.prototype.secret=function(e){var n=this;return void 0===e&&(e=43),this._randomString(e,i)},d.prototype.choice=function(e){var n=Math.floor(this.fraction()*e.length);return\"string\"==typeof e?e.substr(n,1):e[n]};var u=\"undefined\"!=typeof window&&window.innerHeight||\"undefined\"!=typeof document&&document.documentElement&&document.documentElement.clientHeight||\"undefined\"!=typeof document&&document.body&&document.body.clientHeight||1,s=\"undefined\"!=typeof window&&window.innerWidth||\"undefined\"!=typeof document&&document.documentElement&&document.documentElement.clientWidth||\"undefined\"!=typeof document&&document.body&&document.body.clientWidth||1,c=\"undefined\"!=typeof navigator&&navigator.userAgent||\"\";function f(){return new d(d.Type.ALEA,{seeds:[new Date,u,s,c,Math.random()]})}(a=e.isServer?new d(d.Type.NODE_CRYPTO):\"undefined\"!=typeof window&&window.crypto&&window.crypto.getRandomValues?new d(d.Type.BROWSER_CRYPTO):f()).createWithSeeds=function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];if(0===n.length)throw new Error(\"No seeds were provided\");return new d(d.Type.ALEA,{seeds:n})},a.insecure=f()}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/random/random.js\"),Package._define(\"random\",{Random:a})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/random/random.js\"],\"names\":[\"Meteor\",\"isServer\",\"nodeCrypto\",\"Npm\",\"require\",\"Alea\",\"Mash\",\"n\",\"mash\",\"data\",\"toString\",\"i\",\"length\",\"h\",\"charCodeAt\",\"version\",\"args\",\"s0\",\"s1\",\"s2\",\"c\",\"Date\",\"random\",\"t\",\"uint32\",\"fract53\",\"Array\",\"prototype\",\"slice\",\"call\",\"arguments\",\"UNMISTAKABLE_CHARS\",\"BASE64_CHARS\",\"RandomGenerator\",\"type\",\"options\",\"self\",\"this\",\"Type\",\"Error\",\"ALEA\",\"seeds\",\"alea\",\"apply\",\"NODE_CRYPTO\",\"BROWSER_CRYPTO\",\"fraction\",\"numerator\",\"parseInt\",\"hexString\",\"array\",\"Uint32Array\",\"window\",\"crypto\",\"getRandomValues\",\"digits\",\"numBytes\",\"Math\",\"ceil\",\"bytes\",\"result\",\"randomBytes\",\"e\",\"pseudoRandomBytes\",\"substring\",\"_randomString\",\"charsCount\",\"alphabet\",\"choice\",\"join\",\"id\",\"undefined\",\"secret\",\"arrayOrString\",\"index\",\"floor\",\"substr\",\"height\",\"innerHeight\",\"document\",\"documentElement\",\"clientHeight\",\"body\",\"width\",\"innerWidth\",\"clientWidth\",\"agent\",\"navigator\",\"userAgent\",\"createAleaGeneratorWithGeneratedSeed\",\"Random\",\"createWithSeeds\",\"_len\",\"_key\",\"insecure\"],\"mappings\":\"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\",\"sourcesContent\":[\"// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,\\n// window.crypto.getRandomValues() in the browser) when available. If these\\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically\\n// strong, and we seed it with various sources such as the date, Math.random,\\n// and window size on the client.  When using crypto.getRandomValues(), our\\n// primitive is hexString(), from which we construct fraction(). When using\\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use\\n// that to construct hex string.\\n\\nif (Meteor.isServer)\\n  var nodeCrypto = Npm.require('crypto');\\n\\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript\\n// for a full discussion and Alea implementation.\\nvar Alea = function () {\\n  function Mash() {\\n    var n = 0xefc8249d;\\n\\n    var mash = function(data) {\\n      data = data.toString();\\n      for (var i = 0; i < data.length; i++) {\\n        n += data.charCodeAt(i);\\n        var h = 0.02519603282416938 * n;\\n        n = h >>> 0;\\n        h -= n;\\n        h *= n;\\n        n = h >>> 0;\\n        h -= n;\\n        n += h * 0x100000000; // 2^32\\n      }\\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\\n    };\\n\\n    mash.version = 'Mash 0.9';\\n    return mash;\\n  }\\n\\n  return (function (args) {\\n    var s0 = 0;\\n    var s1 = 0;\\n    var s2 = 0;\\n    var c = 1;\\n\\n    if (args.length == 0) {\\n      args = [+new Date];\\n    }\\n    var mash = Mash();\\n    s0 = mash(' ');\\n    s1 = mash(' ');\\n    s2 = mash(' ');\\n\\n    for (var i = 0; i < args.length; i++) {\\n      s0 -= mash(args[i]);\\n      if (s0 < 0) {\\n        s0 += 1;\\n      }\\n      s1 -= mash(args[i]);\\n      if (s1 < 0) {\\n        s1 += 1;\\n      }\\n      s2 -= mash(args[i]);\\n      if (s2 < 0) {\\n        s2 += 1;\\n      }\\n    }\\n    mash = null;\\n\\n    var random = function() {\\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\\n      s0 = s1;\\n      s1 = s2;\\n      return s2 = t - (c = t | 0);\\n    };\\n    random.uint32 = function() {\\n      return random() * 0x100000000; // 2^32\\n    };\\n    random.fract53 = function() {\\n      return random() +\\n        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\\n    };\\n    random.version = 'Alea 0.9';\\n    random.args = args;\\n    return random;\\n\\n  } (Array.prototype.slice.call(arguments)));\\n};\\n\\nvar UNMISTAKABLE_CHARS = \\\"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\\\";\\nvar BASE64_CHARS = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\\" +\\n  \\\"0123456789-_\\\";\\n\\n// `type` is one of `RandomGenerator.Type` as defined below.\\n//\\n// options:\\n// - seeds: (required, only for RandomGenerator.Type.ALEA) an array\\n//   whose items will be `toString`ed and used as the seed to the Alea\\n//   algorithm\\nvar RandomGenerator = function (type, options) {\\n  var self = this;\\n  self.type = type;\\n\\n  if (!RandomGenerator.Type[type]) {\\n    throw new Error(\\\"Unknown random generator type: \\\" + type);\\n  }\\n\\n  if (type === RandomGenerator.Type.ALEA) {\\n    if (!options.seeds) {\\n      throw new Error(\\\"No seeds were provided for Alea PRNG\\\");\\n    }\\n    self.alea = Alea.apply(null, options.seeds);\\n  }\\n};\\n\\n// Types of PRNGs supported by the `RandomGenerator` class\\nRandomGenerator.Type = {\\n  // Use Node's built-in `crypto.getRandomBytes` (cryptographically\\n  // secure but not seedable, runs only on the server). Reverts to\\n  // `crypto.getPseudoRandomBytes` in the extremely uncommon case that\\n  // there isn't enough entropy yet\\n  NODE_CRYPTO: \\\"NODE_CRYPTO\\\",\\n\\n  // Use non-IE browser's built-in `window.crypto.getRandomValues`\\n  // (cryptographically secure but not seedable, runs only in the\\n  // browser).\\n  BROWSER_CRYPTO: \\\"BROWSER_CRYPTO\\\",\\n\\n  // Use the *fast*, seedaable and not cryptographically secure\\n  // Alea algorithm\\n  ALEA: \\\"ALEA\\\",\\n};\\n\\n/**\\n * @name Random.fraction\\n * @summary Return a number between 0 and 1, like `Math.random`.\\n * @locus Anywhere\\n */\\nRandomGenerator.prototype.fraction = function () {\\n  var self = this;\\n  if (self.type === RandomGenerator.Type.ALEA) {\\n    return self.alea();\\n  } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\\n    var numerator = parseInt(self.hexString(8), 16);\\n    return numerator * 2.3283064365386963e-10; // 2^-32\\n  } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {\\n    var array = new Uint32Array(1);\\n    window.crypto.getRandomValues(array);\\n    return array[0] * 2.3283064365386963e-10; // 2^-32\\n  } else {\\n    throw new Error('Unknown random generator type: ' + self.type);\\n  }\\n};\\n\\n/**\\n * @name Random.hexString\\n * @summary Return a random string of `n` hexadecimal digits.\\n * @locus Anywhere\\n * @param {Number} n Length of the string\\n */\\nRandomGenerator.prototype.hexString = function (digits) {\\n  var self = this;\\n  if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\\n    var numBytes = Math.ceil(digits / 2);\\n    var bytes;\\n    // Try to get cryptographically strong randomness. Fall back to\\n    // non-cryptographically strong if not available.\\n    try {\\n      bytes = nodeCrypto.randomBytes(numBytes);\\n    } catch (e) {\\n      // XXX should re-throw any error except insufficient entropy\\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);\\n    }\\n    var result = bytes.toString(\\\"hex\\\");\\n    // If the number of digits is odd, we'll have generated an extra 4 bits\\n    // of randomness, so we need to trim the last digit.\\n    return result.substring(0, digits);\\n  } else {\\n    return this._randomString(digits, \\\"0123456789abcdef\\\");\\n  }\\n};\\n\\nRandomGenerator.prototype._randomString = function (charsCount,\\n                                                    alphabet) {\\n  var self = this;\\n  var digits = [];\\n  for (var i = 0; i < charsCount; i++) {\\n    digits[i] = self.choice(alphabet);\\n  }\\n  return digits.join(\\\"\\\");\\n};\\n\\n/**\\n * @name Random.id\\n * @summary Return a unique identifier, such as `\\\"Jjwjg6gouWLXhMGKW\\\"`, that is\\n * likely to be unique in the whole world.\\n * @locus Anywhere\\n * @param {Number} [n] Optional length of the identifier in characters\\n *   (defaults to 17)\\n */\\nRandomGenerator.prototype.id = function (charsCount) {\\n  var self = this;\\n  // 17 characters is around 96 bits of entropy, which is the amount of\\n  // state in the Alea PRNG.\\n  if (charsCount === undefined)\\n    charsCount = 17;\\n\\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);\\n};\\n\\n/**\\n * @name Random.secret\\n * @summary Return a random string of printable characters with 6 bits of\\n * entropy per character. Use `Random.secret` for security-critical secrets\\n * that are intended for machine, rather than human, consumption.\\n * @locus Anywhere\\n * @param {Number} [n] Optional length of the secret string (defaults to 43\\n *   characters, or 256 bits of entropy)\\n */\\nRandomGenerator.prototype.secret = function (charsCount) {\\n  var self = this;\\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per\\n  // character.\\n  if (charsCount === undefined)\\n    charsCount = 43;\\n  return self._randomString(charsCount, BASE64_CHARS);\\n};\\n\\n/**\\n * @name Random.choice\\n * @summary Return a random element of the given array or string.\\n * @locus Anywhere\\n * @param {Array|String} arrayOrString Array or string to choose from\\n */\\nRandomGenerator.prototype.choice = function (arrayOrString) {\\n  var index = Math.floor(this.fraction() * arrayOrString.length);\\n  if (typeof arrayOrString === \\\"string\\\")\\n    return arrayOrString.substr(index, 1);\\n  else\\n    return arrayOrString[index];\\n};\\n\\n// instantiate RNG.  Heuristically collect entropy from various sources when a\\n// cryptographic PRNG isn't available.\\n\\n// client sources\\nvar height = (typeof window !== 'undefined' && window.innerHeight) ||\\n      (typeof document !== 'undefined'\\n       && document.documentElement\\n       && document.documentElement.clientHeight) ||\\n      (typeof document !== 'undefined'\\n       && document.body\\n       && document.body.clientHeight) ||\\n      1;\\n\\nvar width = (typeof window !== 'undefined' && window.innerWidth) ||\\n      (typeof document !== 'undefined'\\n       && document.documentElement\\n       && document.documentElement.clientWidth) ||\\n      (typeof document !== 'undefined'\\n       && document.body\\n       && document.body.clientWidth) ||\\n      1;\\n\\nvar agent = (typeof navigator !== 'undefined' && navigator.userAgent) || \\\"\\\";\\n\\nfunction createAleaGeneratorWithGeneratedSeed() {\\n  return new RandomGenerator(\\n    RandomGenerator.Type.ALEA,\\n    {seeds: [new Date, height, width, agent, Math.random()]});\\n};\\n\\nif (Meteor.isServer) {\\n  Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);\\n} else {\\n  if (typeof window !== \\\"undefined\\\" && window.crypto &&\\n      window.crypto.getRandomValues) {\\n    Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);\\n  } else {\\n    // On IE 10 and below, there's no browser crypto API\\n    // available. Fall back to Alea\\n    //\\n    // XXX looks like at the moment, we use Alea in IE 11 as well,\\n    // which has `window.msCrypto` instead of `window.crypto`.\\n    Random = createAleaGeneratorWithGeneratedSeed();\\n  }\\n}\\n\\n// Create a non-cryptographically secure PRNG with a given seed (using\\n// the Alea algorithm)\\nRandom.createWithSeeds = function (...seeds) {\\n  if (seeds.length === 0) {\\n    throw new Error(\\\"No seeds were provided\\\");\\n  }\\n  return new RandomGenerator(RandomGenerator.Type.ALEA, {seeds: seeds});\\n};\\n\\n// Used like `Random`, but much faster and not cryptographically\\n// secure\\nRandom.insecure = createAleaGeneratorWithGeneratedSeed();\\n\"]}","minifier":"terser"}
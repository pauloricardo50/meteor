{"code":"!function(){var e=Package.meteor.Meteor,r=Package.meteor.global,s=Package.meteor.meteorEnv,a=Package[\"accounts-base\"].Accounts,o=Package.srp.SRP,t=Package.sha.SHA256,n=Package.ejson.EJSON,c=Package[\"ddp-client\"].DDP,d=Package.check.check,i=Package.check.Match,l=Package.underscore._,u=Package.modules.meteorInstall,m=Package[\"babel-runtime\"].meteorBabelHelpers,w=Package.promise.Promise,g=Package[\"ecmascript-runtime-client\"].Symbol,P=Package[\"ecmascript-runtime-client\"].Map,p=Package[\"ecmascript-runtime-client\"].Set,h;u({node_modules:{meteor:{\"accounts-password\":{\"password_client.js\":function(){function r(e,r){if(!r)throw e;r(e)}e.loginWithPassword=function(e,o,t){\"string\"==typeof e&&(e=-1===e.indexOf(\"@\")?{username:e}:{email:e}),a.callLoginMethod({methodArguments:[{user:e,password:a._hashPassword(o)}],userCallback:function(a,n){a&&400===a.error&&\"old password format\"===a.reason?s({upgradeError:a,userSelector:e,plaintextPassword:o},t):a?r(a,t):t&&t()}})},a._hashPassword=function(e){return{digest:t(e),algorithm:\"sha-256\"}};var s=function(s,o){var c;try{c=n.parse(s.upgradeError.details)}catch(e){}c&&\"srp\"===c.format?a.callLoginMethod({methodArguments:[{user:s.userSelector,srp:t(c.identity+\":\"+s.plaintextPassword),password:a._hashPassword(s.plaintextPassword)}],userCallback:o}):r(new e.Error(400,\"Password is old. Please reset your password.\"),o)};a.createUser=function(s,o){if(\"string\"!=typeof(s=l.clone(s)).password)throw new Error(\"options.password must be a string\");if(!s.password)return r(new e.Error(400,\"Password may not be empty\"),o);s.password=a._hashPassword(s.password),a.callLoginMethod({methodName:\"createUser\",methodArguments:[s],userCallback:o})},a.changePassword=function(o,t,n){return e.user()?(d(t,String),t?void a.connection.apply(\"changePassword\",[o?a._hashPassword(o):null,a._hashPassword(t)],function(c,d){c||!d?c&&400===c.error&&\"old password format\"===c.reason?s({upgradeError:c,userSelector:{id:e.userId()},plaintextPassword:o},function(e){e?r(e,n):a.changePassword(o,t,n)}):r(c||new Error(\"No result from changePassword.\"),n):n&&n()}):r(new e.Error(400,\"Password may not be empty\"),n)):r(new Error(\"Must be logged in to change password.\"),n)},a.forgotPassword=function(s,o){if(!s.email)return r(new e.Error(400,\"Must pass options.email\"),o);o?a.connection.call(\"forgotPassword\",s,o):a.connection.call(\"forgotPassword\",s)},a.resetPassword=function(s,o,t){if(d(s,String),d(o,String),!o)return r(new e.Error(400,\"Password may not be empty\"),t);a.callLoginMethod({methodName:\"resetPassword\",methodArguments:[s,a._hashPassword(o)],userCallback:t})},a.verifyEmail=function(s,o){if(!s)return r(new e.Error(400,\"Need to pass token\"),o);a.callLoginMethod({methodName:\"verifyEmail\",methodArguments:[s],userCallback:o})}}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/accounts-password/password_client.js\"),Package._define(\"accounts-password\")}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/accounts-password/password_client.js\"],\"names\":[\"reportError\",\"error\",\"callback\",\"Meteor\",\"loginWithPassword\",\"selector\",\"password\",\"indexOf\",\"username\",\"email\",\"Accounts\",\"callLoginMethod\",\"methodArguments\",\"user\",\"_hashPassword\",\"userCallback\",\"result\",\"reason\",\"srpUpgradePath\",\"upgradeError\",\"userSelector\",\"plaintextPassword\",\"digest\",\"SHA256\",\"algorithm\",\"options\",\"details\",\"EJSON\",\"parse\",\"e\",\"format\",\"srp\",\"identity\",\"Error\",\"createUser\",\"_\",\"clone\",\"methodName\",\"changePassword\",\"oldPassword\",\"newPassword\",\"check\",\"String\",\"connection\",\"apply\",\"id\",\"userId\",\"err\",\"forgotPassword\",\"call\",\"resetPassword\",\"token\",\"verifyEmail\"],\"mappings\":\"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\",\"sourcesContent\":[\"// Used in the various functions below to handle errors consistently\\nfunction reportError(error, callback) {\\n   if (callback) {\\n     callback(error);\\n   } else {\\n     throw error;\\n   }\\n};\\n\\n// Attempt to log in with a password.\\n//\\n// @param selector {String|Object} One of the following:\\n//   - {username: (username)}\\n//   - {email: (email)}\\n//   - a string which may be a username or email, depending on whether\\n//     it contains \\\"@\\\".\\n// @param password {String}\\n// @param callback {Function(error|undefined)}\\n\\n/**\\n * @summary Log the user in with a password.\\n * @locus Client\\n * @param {Object | String} user\\n *   Either a string interpreted as a username or an email; or an object with a\\n *   single key: `email`, `username` or `id`. Username or email match in a case\\n *   insensitive manner.\\n * @param {String} password The user's password.\\n * @param {Function} [callback] Optional callback.\\n *   Called with no arguments on success, or with a single `Error` argument\\n *   on failure.\\n * @importFromPackage meteor\\n */\\nMeteor.loginWithPassword = function (selector, password, callback) {\\n  if (typeof selector === 'string')\\n    if (selector.indexOf('@') === -1)\\n      selector = {username: selector};\\n    else\\n      selector = {email: selector};\\n\\n  Accounts.callLoginMethod({\\n    methodArguments: [{\\n      user: selector,\\n      password: Accounts._hashPassword(password)\\n    }],\\n    userCallback: function (error, result) {\\n      if (error && error.error === 400 &&\\n          error.reason === 'old password format') {\\n        // The \\\"reason\\\" string should match the error thrown in the\\n        // password login handler in password_server.js.\\n\\n        // XXX COMPAT WITH 0.8.1.3\\n        // If this user's last login was with a previous version of\\n        // Meteor that used SRP, then the server throws this error to\\n        // indicate that we should try again. The error includes the\\n        // user's SRP identity. We provide a value derived from the\\n        // identity and the password to prove to the server that we know\\n        // the password without requiring a full SRP flow, as well as\\n        // SHA256(password), which the server bcrypts and stores in\\n        // place of the old SRP information for this user.\\n        srpUpgradePath({\\n          upgradeError: error,\\n          userSelector: selector,\\n          plaintextPassword: password\\n        }, callback);\\n      }\\n      else if (error) {\\n        reportError(error, callback);\\n      } else {\\n        callback && callback();\\n      }\\n    }\\n  });\\n};\\n\\nAccounts._hashPassword = function (password) {\\n  return {\\n    digest: SHA256(password),\\n    algorithm: \\\"sha-256\\\"\\n  };\\n};\\n\\n// XXX COMPAT WITH 0.8.1.3\\n// The server requested an upgrade from the old SRP password format,\\n// so supply the needed SRP identity to login. Options:\\n//   - upgradeError: the error object that the server returned to tell\\n//     us to upgrade from SRP to bcrypt.\\n//   - userSelector: selector to retrieve the user object\\n//   - plaintextPassword: the password as a string\\nvar srpUpgradePath = function (options, callback) {\\n  var details;\\n  try {\\n    details = EJSON.parse(options.upgradeError.details);\\n  } catch (e) {}\\n  if (!(details && details.format === 'srp')) {\\n    reportError(\\n      new Meteor.Error(400, \\\"Password is old. Please reset your \\\" +\\n                       \\\"password.\\\"), callback);\\n  } else {\\n    Accounts.callLoginMethod({\\n      methodArguments: [{\\n        user: options.userSelector,\\n        srp: SHA256(details.identity + \\\":\\\" + options.plaintextPassword),\\n        password: Accounts._hashPassword(options.plaintextPassword)\\n      }],\\n      userCallback: callback\\n    });\\n  }\\n};\\n\\n// Attempt to log in as a new user.\\n\\n/**\\n * @summary Create a new user.\\n * @locus Anywhere\\n * @param {Object} options\\n * @param {String} options.username A unique name for this user.\\n * @param {String} options.email The user's email address.\\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\\n * @param {Object} options.profile The user's profile, typically including the `name` field.\\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.createUser = function (options, callback) {\\n  options = _.clone(options); // we'll be modifying options\\n\\n  if (typeof options.password !== 'string')\\n    throw new Error(\\\"options.password must be a string\\\");\\n  if (!options.password) {\\n    return reportError(new Meteor.Error(400, \\\"Password may not be empty\\\"), callback);\\n  }\\n\\n  // Replace password with the hashed password.\\n  options.password = Accounts._hashPassword(options.password);\\n\\n  Accounts.callLoginMethod({\\n    methodName: 'createUser',\\n    methodArguments: [options],\\n    userCallback: callback\\n  });\\n};\\n\\n// Change password. Must be logged in.\\n//\\n// @param oldPassword {String|null} By default servers no longer allow\\n//   changing password without the old password, but they could so we\\n//   support passing no password to the server and letting it decide.\\n// @param newPassword {String}\\n// @param callback {Function(error|undefined)}\\n\\n/**\\n * @summary Change the current user's password. Must be logged in.\\n * @locus Client\\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.changePassword = function (oldPassword, newPassword, callback) {\\n  if (!Meteor.user()) {\\n    return reportError(new Error(\\\"Must be logged in to change password.\\\"), callback);\\n  }\\n\\n  check(newPassword, String);\\n  if (!newPassword) {\\n    return reportError(new Meteor.Error(400, \\\"Password may not be empty\\\"), callback);\\n  }\\n\\n  Accounts.connection.apply(\\n    'changePassword',\\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\\n     Accounts._hashPassword(newPassword)],\\n    function (error, result) {\\n      if (error || !result) {\\n        if (error && error.error === 400 &&\\n            error.reason === 'old password format') {\\n          // XXX COMPAT WITH 0.8.1.3\\n          // The server is telling us to upgrade from SRP to bcrypt, as\\n          // in Meteor.loginWithPassword.\\n          srpUpgradePath({\\n            upgradeError: error,\\n            userSelector: { id: Meteor.userId() },\\n            plaintextPassword: oldPassword\\n          }, function (err) {\\n            if (err) {\\n              reportError(err, callback);\\n            } else {\\n              // Now that we've successfully migrated from srp to\\n              // bcrypt, try changing the password again.\\n              Accounts.changePassword(oldPassword, newPassword, callback);\\n            }\\n          });\\n        } else {\\n          // A normal error, not an error telling us to upgrade to bcrypt\\n          reportError(\\n            error || new Error(\\\"No result from changePassword.\\\"), callback);\\n        }\\n      } else {\\n        callback && callback();\\n      }\\n    }\\n  );\\n};\\n\\n// Sends an email to a user with a link that can be used to reset\\n// their password\\n//\\n// @param options {Object}\\n//   - email: (email)\\n// @param callback (optional) {Function(error|undefined)}\\n\\n/**\\n * @summary Request a forgot password email.\\n * @locus Client\\n * @param {Object} options\\n * @param {String} options.email The email address to send a password reset link.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.forgotPassword = function(options, callback) {\\n  if (!options.email) {\\n    return reportError(new Meteor.Error(400, \\\"Must pass options.email\\\"), callback);\\n  }\\n\\n  if (callback) {\\n    Accounts.connection.call(\\\"forgotPassword\\\", options, callback);\\n  } else {\\n    Accounts.connection.call(\\\"forgotPassword\\\", options);\\n  }\\n};\\n\\n// Resets a password based on a token originally created by\\n// Accounts.forgotPassword, and then logs in the matching user.\\n//\\n// @param token {String}\\n// @param newPassword {String}\\n// @param callback (optional) {Function(error|undefined)}\\n\\n/**\\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\\n * @locus Client\\n * @param {String} token The token retrieved from the reset password URL.\\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.resetPassword = function(token, newPassword, callback) {\\n  check(token, String);\\n  check(newPassword, String);\\n\\n  if (!newPassword) {\\n    return reportError(new Meteor.Error(400, \\\"Password may not be empty\\\"), callback);\\n  }\\n\\n  Accounts.callLoginMethod({\\n    methodName: 'resetPassword',\\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\\n    userCallback: callback});\\n};\\n\\n// Verifies a user's email address based on a token originally\\n// created by Accounts.sendVerificationEmail\\n//\\n// @param token {String}\\n// @param callback (optional) {Function(error|undefined)}\\n\\n/**\\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\\n * @locus Client\\n * @param {String} token The token retrieved from the verification URL.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.verifyEmail = function(token, callback) {\\n  if (!token) {\\n    return reportError(new Meteor.Error(400, \\\"Need to pass token\\\"), callback);\\n  }\\n\\n  Accounts.callLoginMethod({\\n    methodName: 'verifyEmail',\\n    methodArguments: [token],\\n    userCallback: callback});\\n};\\n\"]}","minifier":"terser"}
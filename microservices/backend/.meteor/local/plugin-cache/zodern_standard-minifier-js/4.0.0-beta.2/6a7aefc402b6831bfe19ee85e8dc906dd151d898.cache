{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,r=Package.meteor.meteorEnv,o=Package.ejson.EJSON,s=Package[\"id-map\"].IdMap,n=Package.random.Random,a=Package.modules.meteorInstall,i=Package[\"babel-runtime\"].meteorBabelHelpers,c=Package.promise.Promise,l,u,d,m=a({node_modules:{meteor:{\"mongo-id\":{\"id.js\":function(e,t,r){let o,s;r.export({MongoID:()=>n}),r.link(\"meteor/ejson\",{EJSON(e){o=e}},0),r.link(\"meteor/random\",{Random(e){s=e}},1);const n={_looksLikeObjectID:e=>24===e.length&&e.match(/^[0-9a-f]*$/),ObjectID:class e{constructor(e){if(e){if(e=e.toLowerCase(),!n._looksLikeObjectID(e))throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");this._str=e}else this._str=s.hexString(24)}equals(e){return e instanceof n.ObjectID&&this.valueOf()===e.valueOf()}toString(){return'ObjectID(\"'.concat(this._str,'\")')}clone(){return new n.ObjectID(this._str)}typeName(){return\"oid\"}getTimestamp(){return Number.parseInt(this._str.substr(0,8),16)}valueOf(){return this._str}toJSONValue(){return this.valueOf()}toHexString(){return this.valueOf()}}};o.addType(\"oid\",e=>new n.ObjectID(e)),n.idStringify=(e=>{if(e instanceof n.ObjectID)return e.valueOf();if(\"string\"==typeof e)return\"\"===e?e:e.startsWith(\"-\")||e.startsWith(\"~\")||n._looksLikeObjectID(e)||e.startsWith(\"{\")?\"-\".concat(e):e;if(void 0===e)return\"-\";if(\"object\"==typeof e&&null!==e)throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");return\"~\".concat(JSON.stringify(e))}),n.idParse=(e=>\"\"===e?e:\"-\"===e?void 0:e.startsWith(\"-\")?e.substr(1):e.startsWith(\"~\")?JSON.parse(e.substr(1)):n._looksLikeObjectID(e)?new n.ObjectID(e):e)}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/mongo-id/id.js\");Package._define(\"mongo-id\",m,{MongoID:void 0})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/mongo-id/id.js\"],\"names\":[\"EJSON\",\"Random\",\"module\",\"export\",\"MongoID\",\"link\",\"v\",\"str\",\"length\",\"match\",\"ObjectID\",\"constructor\",\"hexString\",\"toLowerCase\",\"_looksLikeObjectID\",\"Error\",\"this\",\"_str\",\"equals\",\"other\",\"valueOf\",\"toString\",\"concat\",\"clone\",\"typeName\",\"getTimestamp\",\"Number\",\"parseInt\",\"substr\",\"toJSONValue\",\"toHexString\",\"addType\",\"idStringify\",\"id\",\"startsWith\",\"undefined\",\"JSON\",\"stringify\",\"idParse\",\"parse\"],\"mappings\":\"gVAAqC,IAAIA,EAA4DC,EAArGC,EAAOC,QAAQC,QAAQ,IAAIA,IAAoBF,EAAOG,KAAK,gBAAgBL,MAAMM,GAAGN,EAAMM,IAAI,GAAcJ,EAAOG,KAAK,iBAAiBJ,OAAOK,GAAGL,EAAOK,IAAI,GAG9J,MAAMF,GAENA,mBAA6BG,GAAsB,KAAfA,EAAIC,QAAiBD,EAAIE,MAAM,eAEnEL,eAAyBM,EACvBC,YAAaC,GAEX,GAAIA,EAAW,CAEb,GADAA,EAAYA,EAAUC,eACjBT,EAAQU,mBAAmBF,GAC9B,MAAM,IAAIG,MAAM,uDAGlBC,KAAKC,KAAOL,OAEZI,KAAKC,KAAOhB,EAAOW,UAAU,IAIjCM,OAAOC,GACL,OAAOA,aAAiBf,EAAQM,UAChCM,KAAKI,YAAcD,EAAMC,UAG3BC,WACE,MAAA,aAAAC,OAAoBN,KAAKC,KAAzB,MAGFM,QACE,OAAO,IAAInB,EAAQM,SAASM,KAAKC,MAGnCO,WACE,MAAO,MAGTC,eACE,OAAOC,OAAOC,SAASX,KAAKC,KAAKW,OAAO,EAAG,GAAI,IAGjDR,UACE,OAAOJ,KAAKC,KAGdY,cACE,OAAOb,KAAKI,UAGdU,cACE,OAAOd,KAAKI,aAKhBpB,EAAM+B,QAAQ,MAAOxB,GAAO,IAAIH,EAAQM,SAASH,IAEjDH,EAAQ4B,YAAeC,CAAAA,IACrB,GAAIA,aAAc7B,EAAQM,SACxB,OAAOuB,EAAGb,UACL,GAAkB,iBAAPa,EAChB,MAAW,KAAPA,EACKA,EACEA,EAAGC,WAAW,MACdD,EAAGC,WAAW,MACd9B,EAAQU,mBAAmBmB,IAC3BA,EAAGC,WAAW,KACvB,IAAAZ,OAAWW,GAEJA,EAEJ,QAAWE,IAAPF,EACT,MAAO,IACF,GAAkB,iBAAPA,GAA0B,OAAPA,EACnC,MAAM,IAAIlB,MAAM,wEAEhB,MAAA,IAAAO,OAAWc,KAAKC,UAAUJ,MAI9B7B,EAAQkC,QAAWL,CAAAA,GACN,KAAPA,EACKA,EACS,MAAPA,OACT,EACSA,EAAGC,WAAW,KAChBD,EAAGL,OAAO,GACRK,EAAGC,WAAW,KAChBE,KAAKG,MAAMN,EAAGL,OAAO,IACnBxB,EAAQU,mBAAmBmB,GAC7B,IAAI7B,EAAQM,SAASuB,GAErBA\",\"sourcesContent\":[\"import { EJSON } from 'meteor/ejson';\\nimport { Random } from 'meteor/random';\\n\\nconst MongoID = {};\\n\\nMongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);\\n\\nMongoID.ObjectID = class ObjectID {\\n  constructor (hexString) {\\n    //random-based impl of Mongo ObjectID\\n    if (hexString) {\\n      hexString = hexString.toLowerCase();\\n      if (!MongoID._looksLikeObjectID(hexString)) {\\n        throw new Error('Invalid hexadecimal string for creating an ObjectID');\\n      }\\n      // meant to work with _.isEqual(), which relies on structural equality\\n      this._str = hexString;\\n    } else {\\n      this._str = Random.hexString(24);\\n    }\\n  }\\n\\n  equals(other) {\\n    return other instanceof MongoID.ObjectID &&\\n    this.valueOf() === other.valueOf();\\n  }\\n\\n  toString() {\\n    return `ObjectID(\\\"${this._str}\\\")`;\\n  }\\n\\n  clone() {\\n    return new MongoID.ObjectID(this._str);\\n  }\\n\\n  typeName() {\\n    return 'oid';\\n  }\\n  \\n  getTimestamp() {\\n    return Number.parseInt(this._str.substr(0, 8), 16);\\n  }\\n\\n  valueOf() {\\n    return this._str;\\n  }\\n\\n  toJSONValue() {\\n    return this.valueOf();\\n  }\\n\\n  toHexString() {\\n    return this.valueOf();\\n  }\\n\\n}\\n\\nEJSON.addType('oid', str => new MongoID.ObjectID(str));\\n\\nMongoID.idStringify = (id) => {\\n  if (id instanceof MongoID.ObjectID) {\\n    return id.valueOf();\\n  } else if (typeof id === 'string') {\\n    if (id === '') {\\n      return id;\\n    } else if (id.startsWith('-') || // escape previously dashed strings\\n               id.startsWith('~') || // escape escaped numbers, true, false\\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings\\n               id.startsWith('{')) { // escape object-form strings, for maybe implementing later\\n      return `-${id}`;\\n    } else {\\n      return id; // other strings go through unchanged.\\n    }\\n  } else if (id === undefined) {\\n    return '-';\\n  } else if (typeof id === 'object' && id !== null) {\\n    throw new Error('Meteor does not currently support objects other than ObjectID as ids');\\n  } else { // Numbers, true, false, null\\n    return `~${JSON.stringify(id)}`;\\n  }\\n};\\n\\nMongoID.idParse = (id) => {\\n  if (id === '') {\\n    return id;\\n  } else if (id === '-') {\\n    return undefined;\\n  } else if (id.startsWith('-')) {\\n    return id.substr(1);\\n  } else if (id.startsWith('~')) {\\n    return JSON.parse(id.substr(1));\\n  } else if (MongoID._looksLikeObjectID(id)) {\\n    return new MongoID.ObjectID(id);\\n  } else {\\n    return id;\\n  }\\n};\\n\\nexport { MongoID };\\n\"]}","minifier":"terser"}
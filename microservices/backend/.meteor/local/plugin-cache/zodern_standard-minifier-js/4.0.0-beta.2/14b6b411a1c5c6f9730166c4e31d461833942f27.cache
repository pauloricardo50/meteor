{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,s=Package.meteor.meteorEnv,o=Package[\"accounts-base\"].Accounts,i=Package.check.check,n=Package.check.Match,a=Package.random.Random,r=Package.session.Session,l=Package[\"react-meteor-data\"].ReactMeteorData,u=Package.modules.meteorInstall,c=Package[\"babel-runtime\"].meteorBabelHelpers,h=Package.promise.Promise,d,m,g,p=u({node_modules:{meteor:{\"epotek:accounts-ui\":{\"check-npm.js\":function(){},\"main_client.js\":function(e,t,s){let o,i,n;s.export({default:()=>n,Accounts:()=>o,STATES:()=>i}),s.link(\"meteor/accounts-base\",{Accounts(e){o=e}},0),s.link(\"./imports/accounts_ui.js\"),s.link(\"./imports/login_session.js\"),s.link(\"./imports/helpers.js\",{STATES(e){i=e}},1),s.link(\"./imports/api/client/loginWithoutPassword.js\"),s.link(\"./imports/ui/components/LoginForm.jsx\",{default(e){n=e}},2)},imports:{\"accounts_ui.js\":function(e,t,s){let o,i,n,a,r;s.link(\"meteor/accounts-base\",{Accounts(e){o=e}},0),s.link(\"./helpers.js\",{redirect(e){i=e},validatePassword(e){n=e},validateEmail(e){a=e},validateUsername(e){r=e}},1),o.ui={},o.ui._options={requestPermissions:[],requestOfflineToken:{},forceApprovalPrompt:{},requireEmailVerification:!1,passwordSignupFields:\"EMAIL_ONLY_NO_PASSWORD\",minimumPasswordLength:7,loginPath:\"/\",signUpPath:null,resetPasswordPath:null,profilePath:\"/\",changePasswordPath:null,homeRoutePath:\"/\",onSubmitHook:()=>{},onPreSignUpHook:()=>new h(e=>e()),onPostSignUpHook:()=>{},onEnrollAccountHook:()=>i(\"\".concat(o.ui._options.loginPath)),onResetPasswordHook:()=>i(\"\".concat(o.ui._options.loginPath)),onVerifyEmailHook:()=>i(\"\".concat(o.ui._options.profilePath)),onSignedInHook:()=>i(\"\".concat(o.ui._options.homeRoutePath)),onSignedOutHook:()=>i(\"\".concat(o.ui._options.homeRoutePath)),emailPattern:new RegExp(\"[^@]+@[^@.]{2,}.[^.@]+\")},o.ui.config=function(e){const t=[\"passwordSignupFields\",\"requestPermissions\",\"requestOfflineToken\",\"forbidClientAccountCreation\",\"requireEmailVerification\",\"minimumPasswordLength\",\"loginPath\",\"signUpPath\",\"resetPasswordPath\",\"profilePath\",\"changePasswordPath\",\"homeRoutePath\",\"onSubmitHook\",\"onPreSignUpHook\",\"onPostSignUpHook\",\"onEnrollAccountHook\",\"onResetPasswordHook\",\"onVerifyEmailHook\",\"onSignedInHook\",\"onSignedOutHook\",\"validateField\",\"emailPattern\"];if(Object.keys(e).forEach(function(e){if(!t.includes(e))throw new Error(\"Accounts.ui.config: Invalid key: \"+e)}),e.passwordSignupFields){if(![\"USERNAME_AND_EMAIL\",\"USERNAME_AND_OPTIONAL_EMAIL\",\"USERNAME_ONLY\",\"EMAIL_ONLY\",\"EMAIL_ONLY_NO_PASSWORD\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(e.passwordSignupFields))throw new Error(\"Accounts.ui.config: Invalid option for `passwordSignupFields`: \"+e.passwordSignupFields);o.ui._options.passwordSignupFields=e.passwordSignupFields}if(e.requestPermissions&&Object.keys(e.requestPermissions).forEach(t=>{const s=e.requestPermissions[t];if(o.ui._options.requestPermissions[t])throw new Error(\"Accounts.ui.config: Can't set `requestPermissions` more than once for \"+t);if(!(s instanceof Array))throw new Error(\"Accounts.ui.config: Value for `requestPermissions` must be an array\");o.ui._options.requestPermissions[t]=s}),e.requestOfflineToken&&Object.keys(e.requestOfflineToken).forEach(t=>{const s=e.requestOfflineToken[t];if(\"google\"!==t)throw new Error(\"Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.\");if(o.ui._options.requestOfflineToken[t])throw new Error(\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \"+t);o.ui._options.requestOfflineToken[t]=s}),e.forceApprovalPrompt&&Object.keys(e.forceApprovalPrompt).forEach(t=>{const s=e.forceApprovalPrompt[t];if(\"google\"!==t)throw new Error(\"Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.\");if(o.ui._options.forceApprovalPrompt[t])throw new Error(\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \"+t);o.ui._options.forceApprovalPrompt[t]=s}),e.requireEmailVerification){if(\"boolean\"!=typeof e.requireEmailVerification)throw new Error('Accounts.ui.config: \"requireEmailVerification\" not a boolean');o.ui._options.requireEmailVerification=e.requireEmailVerification}if(e.minimumPasswordLength){if(\"number\"!=typeof e.minimumPasswordLength)throw new Error('Accounts.ui.config: \"minimumPasswordLength\" not a number');o.ui._options.minimumPasswordLength=e.minimumPasswordLength}for(var s=[\"onSubmitHook\",\"onPreSignUpHook\",\"onPostSignUpHook\"],n=0;n<s.length;n++){let t=s[n];if(e[t]){if(\"function\"!=typeof e[t])throw new Error('Accounts.ui.config: \"'.concat(t,'\" not a function'));o.ui._options[t]=e[t]}}for(var a=[\"emailPattern\"],r=0;r<a.length;r++){let t=a[r];if(e[t]){if(!(e[t]instanceof RegExp))throw new Error('Accounts.ui.config: \"'.concat(t,'\" not a Regular Expression'));o.ui._options[t]=e[t]}}for(var l=[\"loginPath\",\"signUpPath\",\"resetPasswordPath\",\"profilePath\",\"changePasswordPath\",\"homeRoutePath\"],u=0;u<l.length;u++){let t=l[u];if(void 0!==e[t]){if(null!==e[t]&&\"string\"!=typeof e[t])throw new Error(\"Accounts.ui.config: \".concat(t,\" is not a string or null\"));o.ui._options[t]=e[t]}}for(var c=[\"onEnrollAccountHook\",\"onResetPasswordHook\",\"onVerifyEmailHook\",\"onSignedInHook\",\"onSignedOutHook\"],h=0;h<c.length;h++){let t=c[h];if(e[t])if(\"function\"==typeof e[t])o.ui._options[t]=e[t];else{if(\"string\"!=typeof e[t])throw new Error('Accounts.ui.config: \"'.concat(t,'\" not a function or an absolute or relative path'));o.ui._options[t]=(()=>i(e[t]))}}},s.exportDefault(o)},\"helpers.js\":function(t,s,i){let n;i.export({loginButtonsSession:()=>a,STATES:()=>r,getLoginServices:()=>l,hasPasswordService:()=>u,loginResultCallback:()=>c,passwordSignupFields:()=>h,validateEmail:()=>d,validatePassword:()=>m,validateUsername:()=>g,redirect:()=>p,capitalize:()=>f});try{n=t(\"react-router\").browserHistory}catch(e){}const a=o._loginButtonsSession,r={SIGN_IN:Symbol(\"SIGN_IN\"),SIGN_UP:Symbol(\"SIGN_UP\"),PROFILE:Symbol(\"PROFILE\"),PASSWORD_CHANGE:Symbol(\"PASSWORD_CHANGE\"),PASSWORD_RESET:Symbol(\"PASSWORD_RESET\"),ENROLL_ACCOUNT:Symbol(\"ENROLL_ACCOUNT\")};function l(){const e=Package[\"accounts-oauth\"]?o.oauth.serviceNames():[];return e.sort(),e.map(function(e){return{name:e}})}function u(){return!!Package[\"accounts-password\"]}function c(t,s){s&&(s instanceof o.LoginCancelledError||ServiceConfiguration.ConfigError),e.isClient&&\"function\"==typeof t&&t()}function h(){return o.ui._options.passwordSignupFields||\"EMAIL_ONLY_NO_PASSWORD\"}function d(e,t,s){return\"USERNAME_AND_OPTIONAL_EMAIL\"===h()&&\"\"===e||(!!o.ui._options.emailPattern.test(e)||(e&&0!==e.length?(t(\"error.accounts.Invalid email\",\"warning\",!1,\"email\"),!1):(t(\"error.emailRequired\",\"warning\",!1,\"email\"),!1)))}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",t=arguments.length>1?arguments[1]:void 0,s=arguments.length>2?arguments[2]:void 0;if(e.length>=o.ui._options.minimumPasswordLength)return!0;{const e=\"error.minChar\";return t(e,\"warning\",!1,\"password\"),!1}}function g(e,t,s,o){if(e)return!0;{const e=\"USERNAME_ONLY\"===h()||o===r.SIGN_UP?\"username\":\"usernameOrEmail\";return t(\"error.usernameRequired\",\"warning\",!1,e),!1}}function p(t){e.isClient&&window.history&&e.setTimeout(()=>{Package[\"kadira:flow-router\"]?Package[\"kadira:flow-router\"].FlowRouter.go(t):Package[\"kadira:flow-router-ssr\"]?Package[\"kadira:flow-router-ssr\"].FlowRouter.go(t):n?n.push(t):window.history.pushState({},\"redirect\",t)},100)}function f(e){return e.replace(/\\-/,\" \").split(\" \").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(\" \")}this.getLoginServices=l},\"login_session.js\":function(t,s,o){let i,n,a,l;o.export({validateKey:()=>c,KEY_PREFIX:()=>h}),o.link(\"meteor/accounts-base\",{Accounts(e){i=e}},0),o.link(\"./helpers.js\",{STATES(e){n=e},loginResultCallback(e){a=e},getLoginServices(e){l=e}},1);const u=[\"dropdownVisible\",\"inSignupFlow\",\"inForgotPasswordFlow\",\"inChangePasswordFlow\",\"inMessageOnlyFlow\",\"errorMessage\",\"infoMessage\",\"resetPasswordToken\",\"enrollAccountToken\",\"justVerifiedEmail\",\"justResetPassword\",\"configureLoginServiceDialogVisible\",\"configureLoginServiceDialogServiceName\",\"configureLoginServiceDialogSaveDisabled\",\"configureOnDesktopVisible\"],c=function(e){if(!u.includes(e))throw new Error(\"Invalid key in loginButtonsSession: \"+e)},h=\"Meteor.loginButtons.\";if(i._loginButtonsSession={set:function(e,t){if(c(e),[\"errorMessage\",\"infoMessage\"].includes(e))throw new Error(\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\");this._set(e,t)},_set:function(e,t){r.set(h+e,t)},get:function(e){return c(e),r.get(h+e)}},e.isClient){let e;i.onPageLoadLogin(function(e){l().map(e=>{let{name:t}=e;return t}).includes(e.type)&&a(e.type,e.error)}),i.onResetPasswordLink(function(t,s){i._loginButtonsSession.set(\"resetPasswordToken\",t),r.set(h+\"state\",\"resetPasswordToken\"),e=s,i.ui._options.onResetPasswordHook()}),i.onEnrollmentLink(function(t,s){i._loginButtonsSession.set(\"enrollAccountToken\",t),r.set(h+\"state\",\"enrollAccountToken\"),e=s,i.ui._options.onEnrollAccountHook()}),i.onEmailVerificationLink(function(e,t){i.verifyEmail(e,function(e){e?i.ui._options.onVerifyEmailHook():(i._loginButtonsSession.set(\"justVerifiedEmail\",!0),r.set(h+\"state\",\"justVerifiedEmail\"),i.ui._options.onSignedInHook()),t()})})}},api:{client:{\"loginWithoutPassword.js\":function(){o.loginWithoutPassword=function(e,t){if(!e.email)throw new Error(\"Must pass options.email\");o.connection.call(\"loginWithoutPassword\",e,t)}}}},ui:{components:{\"Button.jsx\":function(e,t,s){let o,i,n,a;s.export({Button:()=>r}),s.link(\"react\",{default(e){o=e}},0),s.link(\"prop-types\",{default(e){i=e}},1),s.link(\"meteor/accounts-base\",{Accounts(e){n=e}},2);try{a=e(\"react-router\").Link}catch(e){}class r extends o.Component{render(){const{label:e,href:t=null,type:s,disabled:i=!1,className:n,onClick:r}=this.props;return\"link\"==s?a&&t?o.createElement(a,{to:t,className:n},e):o.createElement(\"a\",{href:t,className:n,onClick:r},e):o.createElement(\"button\",{className:n,type:s,disabled:i,onClick:r},e)}}r.propTypes={onClick:i.func},n.ui.Button=r},\"Buttons.jsx\":function(e,t,s){var o,i=e(\"@babel/runtime/helpers/interopRequireDefault\")(e(\"@babel/runtime/helpers/extends\"));let n,a;s.export({Buttons:()=>r}),s.link(\"react\",{default(e){n=e}},0),s.link(\"./Button.jsx\"),s.link(\"meteor/accounts-base\",{Accounts(e){a=e}},1);class r extends n.Component{render(){let{buttons:e={},className:t=\"buttons\"}=this.props;return n.createElement(\"div\",{className:t},Object.keys(e).map((t,s)=>n.createElement(a.ui.Button,(0,i.default)({},e[t],{key:s}))))}}a.ui.Buttons=r},\"Field.jsx\":function(e,t,s){let o,i,n;s.export({Field:()=>a}),s.link(\"react\",{default(e){o=e}},0),s.link(\"prop-types\",{default(e){i=e}},1),s.link(\"meteor/accounts-base\",{Accounts(e){n=e}},2);class a extends o.Component{constructor(e){super(e),this.state={mount:!0}}triggerUpdate(){const{onChange:e}=this.props;this.input&&e&&e({target:{value:this.input.value}})}componentDidMount(){this.triggerUpdate()}componentDidUpdate(e){e.id!==this.props.id?this.setState({mount:!1}):this.state.mount||(this.setState({mount:!0}),this.triggerUpdate())}render(){const{id:e,hint:t,label:s,type:i=\"text\",onChange:n,required:a=!1,className:r=\"field\",defaultValue:l=\"\",message:u}=this.props,{mount:c=!0}=this.state;return\"notice\"==i?o.createElement(\"div\",{className:r},s):c?o.createElement(\"div\",{className:r},o.createElement(\"label\",{htmlFor:e},s),o.createElement(\"input\",{id:e,ref:e=>this.input=e,type:i,onChange:n,placeholder:t,defaultValue:l}),u&&o.createElement(\"span\",{className:[\"message\",u.type].join(\" \").trim()},u.message)):null}}a.propTypes={onChange:i.func},n.ui.Field=a},\"Fields.jsx\":function(e,t,s){var o,i=e(\"@babel/runtime/helpers/interopRequireDefault\")(e(\"@babel/runtime/helpers/extends\"));let n,a;s.export({Fields:()=>r}),s.link(\"react\",{default(e){n=e}},0),s.link(\"meteor/accounts-base\",{Accounts(e){a=e}},1),s.link(\"./Field.jsx\");class r extends n.Component{render(){let{fields:e={},className:t=\"fields\"}=this.props;return n.createElement(\"div\",{className:t},Object.keys(e).map((t,s)=>n.createElement(a.ui.Field,(0,i.default)({},e[t],{key:s}))))}}a.ui.Fields=r},\"Form.jsx\":function(e,t,s){let o,i,n,a;s.export({Form:()=>r}),s.link(\"react\",{default(e){o=e}},0),s.link(\"prop-types\",{default(e){i=e}},1),s.link(\"react-dom\",{default(e){n=e}},2),s.link(\"meteor/accounts-base\",{Accounts(e){a=e}},3),s.link(\"./Fields.jsx\"),s.link(\"./Buttons.jsx\"),s.link(\"./FormMessage.jsx\"),s.link(\"./PasswordOrService.jsx\"),s.link(\"./SocialButtons.jsx\"),s.link(\"./FormMessages.jsx\");class r extends o.Component{componentDidMount(){let e=this.form;e&&e.addEventListener(\"submit\",e=>{e.preventDefault()})}render(){const{hasPasswordService:e,oauthServices:t,fields:s,buttons:i,error:n,messages:r,translate:l,ready:u=!0,className:c}=this.props;return o.createElement(\"form\",{ref:e=>this.form=e,className:[c,u?\"ready\":null].join(\" \"),className:\"accounts-ui\",noValidate:!0},o.createElement(a.ui.Fields,{fields:s}),o.createElement(a.ui.Buttons,{buttons:i}),o.createElement(a.ui.PasswordOrService,{oauthServices:t,translate:l}),o.createElement(a.ui.SocialButtons,{oauthServices:t}),o.createElement(a.ui.FormMessages,{messages:r}))}}r.propTypes={oauthServices:i.object,fields:i.object.isRequired,buttons:i.object.isRequired,translate:i.func.isRequired,error:i.string,ready:i.bool},a.ui.Form=r},\"FormMessage.jsx\":function(e,t,s){let o,i;function n(e){return e===Object(e)}s.export({FormMessage:()=>a}),s.link(\"react\",{default(e){o=e}},0),s.link(\"meteor/accounts-base\",{Accounts(e){i=e}},1);class a extends o.Component{render(){let{message:e,type:t,className:s=\"message\",style:i={},deprecated:a}=this.props;return a&&console.warn(\"You are overriding Accounts.ui.Form and using FormMessage, the use of FormMessage in Form has been depreacted in v1.2.11, update your implementation to use FormMessages: https://github.com/studiointeract/accounts-ui/#deprecations\"),(e=n(e)?e.message:e)?o.createElement(\"div\",{style:i,className:[s,t].join(\" \")},e):null}}i.ui.FormMessage=a},\"FormMessages.jsx\":function(e,t,s){let o,i,n;s.export({FormMessages:()=>a}),s.link(\"react\",{default(e){o=e},Component(e){i=e}},0),s.link(\"meteor/accounts-base\",{Accounts(e){n=e}},1);class a extends i{render(){const{messages:e=[],className:t=\"messages\",style:s={}}=this.props;return e.length>0&&o.createElement(\"div\",{className:\"messages\"},e.filter(e=>!(\"field\"in e)).map((e,t)=>{let{message:s,type:i}=e;return o.createElement(n.ui.FormMessage,{message:s,type:i,key:t})}))}}n.ui.FormMessages=a},\"LoginForm.jsx\":function(t,s,o){var i=t(\"@babel/runtime/helpers/interopRequireDefault\"),n=i(t(\"@babel/runtime/helpers/extends\")),a=i(t(\"@babel/runtime/helpers/objectSpread\"));let l,u,c,d,m,g,p,f,S,w,P,k,_,E,A,N,b;function O(e,t){const s={};return e.forEach(function(e){s[e[t]]=e}),s}o.link(\"react\",{default(e){l=e},Component(e){u=e}},0),o.link(\"prop-types\",{default(e){c=e}},1),o.link(\"react-dom\",{default(e){d=e}},2),o.link(\"meteor/react-meteor-data\",{withTracker(e){m=e}},3),o.link(\"meteor/accounts-base\",{Accounts(e){g=e}},4),o.link(\"meteor-accounts-t9n\",{T9n(e){p=e}},5),o.link(\"../../login_session.js\",{KEY_PREFIX(e){f=e}},6),o.link(\"./Form.jsx\"),o.link(\"../../helpers.js\",{STATES(e){S=e},passwordSignupFields(e){w=e},validateEmail(e){P=e},validatePassword(e){k=e},validateUsername(e){_=e},loginResultCallback(e){E=e},getLoginServices(e){A=e},hasPasswordService(e){N=e},capitalize(e){b=e}},7);class F extends u{constructor(e){super(e);let{formState:t,loginPath:s,signUpPath:o,resetPasswordPath:i,profilePath:n,changePasswordPath:a}=e;t===S.SIGN_IN&&Package[\"accounts-password\"]&&console.warn(\"Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.\"),this.state={messages:[],waiting:!0,formState:t||(g.user()?S.PROFILE:S.SIGN_IN),onSubmitHook:e.onSubmitHook||g.ui._options.onSubmitHook,onSignedInHook:e.onSignedInHook||g.ui._options.onSignedInHook,onSignedOutHook:e.onSignedOutHook||g.ui._options.onSignedOutHook,onPreSignUpHook:e.onPreSignUpHook||g.ui._options.onPreSignUpHook,onPostSignUpHook:e.onPostSignUpHook||g.ui._options.onPostSignUpHook},this.translate=this.translate.bind(this)}componentDidMount(){let e;switch(this.setState(e=>({waiting:!1,ready:!0})),r.get(f+\"state\")){case\"enrollAccountToken\":this.setState(e=>({formState:S.ENROLL_ACCOUNT})),r.set(f+\"state\",null);break;case\"resetPasswordToken\":this.setState(e=>({formState:S.PASSWORD_CHANGE})),r.set(f+\"state\",null);break;case\"justVerifiedEmail\":this.setState(e=>({formState:S.PROFILE})),r.set(f+\"state\",null)}this.setState(e=>(0,a.default)({},this.getDefaultFieldValues()))}componentWillReceiveProps(e,t){e.formState&&e.formState!==this.state.formState&&this.setState((0,a.default)({formState:e.formState},this.getDefaultFieldValues()))}componentDidUpdate(e,t){!e.user!=!this.props.user&&this.setState({formState:this.props.user?S.PROFILE:S.SIGN_IN})}translate(e){return p.get(e)}validateField(e,t){const{formState:s}=this.state;switch(e){case\"email\":return P(t,this.showMessage.bind(this),this.clearMessage.bind(this));case\"password\":return k(t,this.showMessage.bind(this),this.clearMessage.bind(this));case\"username\":return _(t,this.showMessage.bind(this),this.clearMessage.bind(this),s)}}getUsernameOrEmailField(){return{id:\"usernameOrEmail\",hint:this.translate(\"enterUsernameOrEmail\"),label:this.translate(\"usernameOrEmail\"),required:!0,defaultValue:this.state.username||\"\",onChange:this.handleChange.bind(this,\"usernameOrEmail\"),message:this.getMessageForField(\"usernameOrEmail\")}}getUsernameField(){return{id:\"username\",hint:this.translate(\"enterUsername\"),label:this.translate(\"username\"),required:!0,defaultValue:this.state.username||\"\",onChange:this.handleChange.bind(this,\"username\"),message:this.getMessageForField(\"username\")}}getEmailField(){return{id:\"email\",hint:this.translate(\"enterEmail\"),label:this.translate(\"email\"),type:\"email\",required:!0,defaultValue:this.state.email||\"\",onChange:this.handleChange.bind(this,\"email\"),message:this.getMessageForField(\"email\")}}getPasswordField(){return{id:\"password\",hint:this.translate(\"enterPassword\"),label:this.translate(\"password\"),type:\"password\",required:!0,defaultValue:this.state.password||\"\",onChange:this.handleChange.bind(this,\"password\"),message:this.getMessageForField(\"password\")}}getSetPasswordField(){return{id:\"newPassword\",hint:this.translate(\"enterPassword\"),label:this.translate(\"choosePassword\"),type:\"password\",required:!0,onChange:this.handleChange.bind(this,\"newPassword\")}}getNewPasswordField(){return{id:\"newPassword\",hint:this.translate(\"enterNewPassword\"),label:this.translate(\"newPassword\"),type:\"password\",required:!0,onChange:this.handleChange.bind(this,\"newPassword\"),message:this.getMessageForField(\"newPassword\")}}handleChange(e,t){let s=t.target.value;switch(e){case\"password\":break;default:s=s.trim()}this.setState({[e]:s}),this.setDefaultFieldValues({[e]:s})}fields(){const t=[],{formState:s}=this.state;return N()||0!=A().length||t.push({label:\"No login service added, i.e. accounts-password\",type:\"notice\"}),N()&&s==S.SIGN_IN&&([\"USERNAME_AND_EMAIL\",\"USERNAME_AND_OPTIONAL_EMAIL\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())&&t.push(this.getUsernameOrEmailField()),\"USERNAME_ONLY\"===w()&&t.push(this.getUsernameField()),[\"EMAIL_ONLY\",\"EMAIL_ONLY_NO_PASSWORD\"].includes(w())&&t.push(this.getEmailField()),[\"EMAIL_ONLY_NO_PASSWORD\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())||t.push(this.getPasswordField())),N()&&s==S.SIGN_UP&&([\"USERNAME_AND_EMAIL\",\"USERNAME_AND_OPTIONAL_EMAIL\",\"USERNAME_ONLY\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())&&t.push(this.getUsernameField()),[\"USERNAME_AND_EMAIL\",\"EMAIL_ONLY\",\"EMAIL_ONLY_NO_PASSWORD\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())&&t.push(this.getEmailField()),[\"USERNAME_AND_OPTIONAL_EMAIL\"].includes(w())&&t.push(Object.assign(this.getEmailField(),{required:!1})),[\"EMAIL_ONLY_NO_PASSWORD\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())||t.push(this.getPasswordField())),s==S.PASSWORD_RESET&&t.push(this.getEmailField()),this.showPasswordChangeForm()&&(e.isClient&&!g._loginButtonsSession.get(\"resetPasswordToken\")&&t.push(this.getPasswordField()),t.push(this.getNewPasswordField())),this.showEnrollAccountForm()&&t.push(this.getSetPasswordField()),O(t,\"id\")}buttons(){const{loginPath:e=g.ui._options.loginPath,signUpPath:t=g.ui._options.signUpPath,resetPasswordPath:s=g.ui._options.resetPasswordPath,changePasswordPath:o=g.ui._options.changePasswordPath,profilePath:i=g.ui._options.profilePath}=this.props,{user:n}=this.props,{formState:a,waiting:r}=this.state;let l=[];return n&&a==S.PROFILE&&l.push({id:\"signOut\",label:this.translate(\"signOut\"),disabled:r,onClick:this.signOut.bind(this)}),this.showCreateAccountLink()&&l.push({id:\"switchToSignUp\",label:this.translate(\"signUp\"),type:\"link\",href:t,onClick:this.switchToSignUp.bind(this)}),a!=S.SIGN_UP&&a!=S.PASSWORD_RESET||l.push({id:\"switchToSignIn\",label:this.translate(\"signIn\"),type:\"link\",href:e,onClick:this.switchToSignIn.bind(this)}),this.showForgotPasswordLink()&&l.push({id:\"switchToPasswordReset\",label:this.translate(\"forgotPassword\"),type:\"link\",href:s,onClick:this.switchToPasswordReset.bind(this)}),n&&![\"EMAIL_ONLY_NO_PASSWORD\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())&&a==S.PROFILE&&n.services&&\"password\"in n.services&&l.push({id:\"switchToChangePassword\",label:this.translate(\"changePassword\"),type:\"link\",href:o,onClick:this.switchToChangePassword.bind(this)}),a==S.SIGN_UP&&l.push({id:\"signUp\",label:this.translate(\"signUp\"),type:N()?\"submit\":\"link\",className:\"active\",disabled:r,onClick:N()?this.signUp.bind(this,{}):null}),this.showSignInLink()&&l.push({id:\"signIn\",label:this.translate(\"signIn\"),type:N()?\"submit\":\"link\",className:\"active\",disabled:r,onClick:N()?this.signIn.bind(this):null}),a==S.PASSWORD_RESET&&l.push({id:\"emailResetLink\",label:this.translate(\"resetYourPassword\"),type:\"submit\",disabled:r,onClick:this.passwordReset.bind(this)}),(this.showPasswordChangeForm()||this.showEnrollAccountForm())&&(l.push({id:\"changePassword\",label:this.showPasswordChangeForm()?this.translate(\"changePassword\"):this.translate(\"setPassword\"),type:\"submit\",disabled:r,onClick:this.passwordChange.bind(this)}),g.user()?l.push({id:\"switchToSignOut\",label:this.translate(\"cancel\"),type:\"link\",href:i,onClick:this.switchToSignOut.bind(this)}):l.push({id:\"cancelResetPassword\",label:this.translate(\"cancel\"),type:\"link\",onClick:this.cancelResetPassword.bind(this)})),l.sort((e,t)=>(\"submit\"==t.type&&null!=e.type)-(\"submit\"==e.type&&null!=t.type)),O(l,\"id\")}showSignInLink(){return this.state.formState==S.SIGN_IN&&Package[\"accounts-password\"]}showPasswordChangeForm(){return Package[\"accounts-password\"]&&this.state.formState==S.PASSWORD_CHANGE}showEnrollAccountForm(){return Package[\"accounts-password\"]&&this.state.formState==S.ENROLL_ACCOUNT}showCreateAccountLink(){return this.state.formState==S.SIGN_IN&&!g._options.forbidClientAccountCreation&&Package[\"accounts-password\"]}showForgotPasswordLink(){return!this.props.user&&this.state.formState==S.SIGN_IN&&[\"USERNAME_AND_EMAIL\",\"USERNAME_AND_OPTIONAL_EMAIL\",\"EMAIL_ONLY\"].includes(w())}setDefaultFieldValues(e){if(\"object\"!=typeof e)throw new Error(\"Argument to setDefaultFieldValues is not of type object\");\"undefined\"!=typeof localStorage&&localStorage&&localStorage.setItem(\"accounts_ui\",JSON.stringify((0,a.default)({passwordSignupFields:w()},this.getDefaultFieldValues(),e)))}getDefaultFieldValues(){if(\"undefined\"!=typeof localStorage&&localStorage){const e=JSON.parse(localStorage.getItem(\"accounts_ui\")||null);if(e&&e.passwordSignupFields===w())return e}}clearDefaultFieldValues(){\"undefined\"!=typeof localStorage&&localStorage&&localStorage.removeItem(\"accounts_ui\")}switchToSignUp(e){e.preventDefault(),this.setState((0,a.default)({formState:S.SIGN_UP},this.getDefaultFieldValues())),this.clearMessages()}switchToSignIn(e){e.preventDefault(),this.setState((0,a.default)({formState:S.SIGN_IN},this.getDefaultFieldValues())),this.clearMessages()}switchToPasswordReset(e){e.preventDefault(),this.setState((0,a.default)({formState:S.PASSWORD_RESET},this.getDefaultFieldValues())),this.clearMessages()}switchToChangePassword(e){e.preventDefault(),this.setState((0,a.default)({formState:S.PASSWORD_CHANGE},this.getDefaultFieldValues())),this.clearMessages()}switchToSignOut(e){e.preventDefault(),this.setState({formState:S.PROFILE}),this.clearMessages()}cancelResetPassword(e){e.preventDefault(),g._loginButtonsSession.set(\"resetPasswordToken\",null),this.setState({formState:S.SIGN_IN,messages:[]})}signOut(){e.logout(()=>{this.setState({formState:S.SIGN_IN,password:null}),this.state.onSignedOutHook(),this.clearMessages(),this.clearDefaultFieldValues()})}signIn(){const{username:t=null,email:s=null,usernameOrEmail:o=null,password:i,formState:n,onSubmitHook:a}=this.state;let r=!1,l;if(this.clearMessages(),null!==o)if(this.validateField(\"username\",o)){if([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w()))return void this.loginWithoutPassword();l=o}else this.state.formState==S.SIGN_UP&&this.state.onSubmitHook(\"error.accounts.usernameRequired\",this.state.formState),r=!0;else null!==t?this.validateField(\"username\",t)?l={username:t}:(this.state.formState==S.SIGN_UP&&this.state.onSubmitHook(\"error.accounts.usernameRequired\",this.state.formState),r=!0):null==o&&(this.validateField(\"email\",s)?[\"EMAIL_ONLY_NO_PASSWORD\"].includes(w())?(this.loginWithoutPassword(),r=!0):l={email:s}:r=!0);[\"EMAIL_ONLY_NO_PASSWORD\"].includes(w())||this.validateField(\"password\",i)||(r=!0),r||e.loginWithPassword(l,i,(e,t)=>{a(e,n),e?this.showMessage(\"error.accounts.\".concat(e.reason)||\"unknown_error\",\"error\"):(E(()=>this.state.onSignedInHook()),this.setState({formState:S.PROFILE,password:null}),this.clearDefaultFieldValues())})}oauthButtons(){const{formState:e,waiting:t}=this.state;let s=[];return e!=S.SIGN_IN&&e!=S.SIGN_UP||g.oauth&&g.oauth.serviceNames().map(e=>{s.push({id:e,label:b(e),disabled:t,type:\"button\",className:\"btn-\".concat(e,\" \").concat(e),onClick:this.oauthSignIn.bind(this,e)})}),O(s,\"id\")}oauthSignIn(t){const{user:s}=this.props,{formState:o,waiting:i,onSubmitHook:n}=this.state;function a(){return t.charAt(0).toUpperCase()+t.slice(1)}\"meteor-developer\"===t&&(t=\"meteorDeveloperAccount\");const r=e[\"loginWith\"+a()];let l={};g.ui._options.requestPermissions[t]&&(l.requestPermissions=g.ui._options.requestPermissions[t]),g.ui._options.requestOfflineToken[t]&&(l.requestOfflineToken=g.ui._options.requestOfflineToken[t]),g.ui._options.forceApprovalPrompt[t]&&(l.forceApprovalPrompt=g.ui._options.forceApprovalPrompt[t]),this.clearMessages();const u=this;r(l,t=>{n(t,o),t?this.showMessage(\"error.accounts.\".concat(t.reason)||\"unknown_error\"):(this.setState({formState:S.PROFILE}),this.clearDefaultFieldValues(),E(()=>{e.setTimeout(()=>this.state.onSignedInHook(),100)}))})}signUp(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const{username:s=null,email:o=null,usernameOrEmail:i=null,password:n,formState:a,onSubmitHook:r}=this.state;let l=!1;this.clearMessages(),null!==s?this.validateField(\"username\",s)?t.username=s:(this.state.formState==S.SIGN_UP&&this.state.onSubmitHook(\"error.accounts.usernameRequired\",this.state.formState),l=!0):[\"USERNAME_AND_EMAIL\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())&&!this.validateField(\"username\",s)&&(this.state.formState==S.SIGN_UP&&this.state.onSubmitHook(\"error.accounts.usernameRequired\",this.state.formState),l=!0),this.validateField(\"email\",o)?t.email=o:l=!0,[\"EMAIL_ONLY_NO_PASSWORD\",\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w())?t.password=e.uuid():this.validateField(\"password\",n)?t.password=n:(r(\"Invalid password\",a),l=!0);const u=function(e){g.createUser(e,t=>{if(t)this.showMessage(\"error.accounts.\".concat(t.reason)||\"unknown_error\",\"error\"),this.translate(\"error.accounts.\".concat(t.reason))?r(\"error.accounts.\".concat(t.reason),a):r(\"unknown_error\",a);else{r(null,a),this.setState({formState:S.PROFILE,password:null});let t=g.user();E(this.state.onPostSignUpHook.bind(this,e,t)),this.clearDefaultFieldValues()}this.setState({waiting:!1})})};if(!l){this.setState({waiting:!0});let e=this.state.onPreSignUpHook(t);e instanceof h?e.then(u.bind(this,t)):u(t)}}loginWithoutPassword(){const{email:e=\"\",usernameOrEmail:t=\"\",waiting:s,formState:o,onSubmitHook:i}=this.state;if(!s)if(this.validateField(\"email\",e))this.setState({waiting:!0}),g.loginWithoutPassword({email:e},e=>{e?this.showMessage(\"error.accounts.\".concat(e.reason)||\"unknown_error\",\"error\"):(this.showMessage(this.translate(\"info.emailSent\"),\"success\",5e3),this.clearDefaultFieldValues()),i(e,o),this.setState({waiting:!1})});else if(this.validateField(\"username\",t))this.setState({waiting:!0}),g.loginWithoutPassword({email:t,username:t},e=>{e?this.showMessage(\"error.accounts.\".concat(e.reason)||\"unknown_error\",\"error\"):(this.showMessage(this.translate(\"info.emailSent\"),\"success\",5e3),this.clearDefaultFieldValues()),i(e,o),this.setState({waiting:!1})});else{let e=null;e=([\"USERNAME_AND_EMAIL_NO_PASSWORD\"].includes(w()),this.translate(\"error.accounts.invalid_email\")),this.showMessage(e,\"warning\"),i(e,o)}}passwordReset(){const{email:e=\"\",waiting:t,formState:s,onSubmitHook:o}=this.state;t||(this.clearMessages(),this.validateField(\"email\",e)&&(this.setState({waiting:!0}),g.forgotPassword({email:e},e=>{e?this.showMessage(\"error.accounts.\".concat(e.reason)||\"unknown_error\",\"error\"):(this.showMessage(this.translate(\"info.emailSent\"),\"success\",5e3),this.clearDefaultFieldValues()),o(e,s),this.setState({waiting:!1})})))}passwordChange(){const{password:e,newPassword:t,formState:s,onSubmitHook:o,onSignedInHook:i}=this.state;if(!this.validateField(\"password\",t))return void o(\"err.minChar\",s);let n=g._loginButtonsSession.get(\"resetPasswordToken\");n||(n=g._loginButtonsSession.get(\"enrollAccountToken\")),n?g.resetPassword(n,t,e=>{e?(this.showMessage(\"error.accounts.\".concat(e.reason)||\"unknown_error\",\"error\"),o(e,s)):(this.showMessage(this.translate(\"info.passwordChanged\"),\"success\",5e3),o(null,s),this.setState({formState:S.PROFILE}),g._loginButtonsSession.set(\"resetPasswordToken\",null),g._loginButtonsSession.set(\"enrollAccountToken\",null),i())}):g.changePassword(e,t,e=>{e?(this.showMessage(\"error.accounts.\".concat(e.reason)||\"unknown_error\",\"error\"),o(e,s)):(this.showMessage(\"info.passwordChanged\",\"success\",5e3),o(null,s),this.setState({formState:S.PROFILE}),this.clearDefaultFieldValues())})}showMessage(e,t,s,o){(e=this.translate(e).trim())&&(this.setState(s=>{let{messages:i=[]}=s;return i.push((0,a.default)({message:e,type:t},o&&{field:o})),{messages:i}}),s&&(this.hideMessageTimout=setTimeout(()=>{this.clearMessage(e)},s)))}getMessageForField(e){const{messages:t=[]}=this.state;return t.find(t=>{let{field:s}=t;return s===e})}clearMessage(e){e&&this.setState(t=>{let{messages:s=[]}=t;return{messages:s.filter(t=>{let{message:s}=t;return s!==e})}})}clearMessages(){this.hideMessageTimout&&clearTimeout(this.hideMessageTimout),this.setState({messages:[]})}componentWillMount(){if(e.isClient){const e=document.createElement(\"div\");d.render(l.createElement(g.ui.Field,{message:\"test\"}),e),0==e.getElementsByClassName(\"message\").length&&console.warn(\"Implementations of Accounts.ui.Field must render message in v1.2.11.\\n          https://github.com/studiointeract/accounts-ui/#deprecations\")}}componentWillUnmount(){this.hideMessageTimout&&clearTimeout(this.hideMessageTimout)}render(){this.oauthButtons();const{messages:e=[]}=this.state,t={deprecated:!0,message:e.map(e=>{let{message:t}=e;return t}).join(\", \")};return l.createElement(g.ui.Form,(0,n.default)({oauthServices:this.oauthButtons(),fields:this.fields(),buttons:this.buttons()},this.state,{message:t,translate:e=>this.translate(e)}))}}F.propTypes={formState:c.symbol,loginPath:c.string,signUpPath:c.string,resetPasswordPath:c.string,profilePath:c.string,changePasswordPath:c.string},F.defaultProps={formState:null,loginPath:null,signUpPath:null,resetPasswordPath:null,profilePath:null,changePasswordPath:null},g.ui.LoginForm=F;const M=m(()=>(e.subscribe(\"servicesList\"),{user:g.user()}))(F);g.ui.LoginForm=M,o.exportDefault(M)},\"PasswordOrService.jsx\":function(e,t,s){let o,i,n,a,r;s.export({PasswordOrService:()=>l}),s.link(\"react\",{default(e){o=e}},0),s.link(\"prop-types\",{default(e){i=e}},1),s.link(\"meteor/accounts-base\",{Accounts(e){n=e}},2),s.link(\"meteor-accounts-t9n\",{T9n(e){a=e}},3),s.link(\"../../helpers.js\",{hasPasswordService(e){r=e}},4);class l extends o.Component{constructor(e){super(e),this.state={hasPasswordService:r(),services:Object.keys(e.oauthServices).map(t=>e.oauthServices[t].label)}}translate(e){return this.props.translate?this.props.translate(e):a.get(e)}render(){let{className:e=\"password-or-service\",style:t={}}=this.props,{hasPasswordService:s,services:i}=this.state;return g=i,i.length>2&&(g=[]),s&&i.length>0?o.createElement(\"div\",{style:t,className:e},\"\".concat(this.translate(\"orUse\"),\" \").concat(g.join(\" / \"))):null}}l.propTypes={oauthServices:i.object},n.ui.PasswordOrService=l},\"SocialButtons.jsx\":function(e,t,s){var o,i=e(\"@babel/runtime/helpers/interopRequireDefault\")(e(\"@babel/runtime/helpers/extends\"));let n,a;s.export({SocialButtons:()=>r}),s.link(\"react\",{default(e){n=e}},0),s.link(\"./Button.jsx\"),s.link(\"meteor/accounts-base\",{Accounts(e){a=e}},1);class r extends n.Component{render(){let{oauthServices:e={},className:t=\"social-buttons\"}=this.props;return n.createElement(\"div\",{className:t},Object.keys(e).map((t,s)=>n.createElement(a.ui.Button,(0,i.default)({},e[t],{key:s}))))}}a.ui.SocialButtons=r}}}}}}}},{extensions:[\".js\",\".json\",\".jsx\"]});p(\"/node_modules/meteor/epotek:accounts-ui/check-npm.js\");var f=p(\"/node_modules/meteor/epotek:accounts-ui/main_client.js\");Package._define(\"epotek:accounts-ui\",f)}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/epotek:accounts-ui/main_client.js\",\"packages/epotek:accounts-ui/imports/accounts_ui.js\",\"packages/epotek:accounts-ui/imports/helpers.js\",\"packages/epotek:accounts-ui/imports/login_session.js\",\"packages/epotek:accounts-ui/imports/api/client/loginWithoutPassword.js\",\"packages/epotek:accounts-ui/imports/ui/components/Button.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/Buttons.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/Field.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/Fields.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/Form.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/FormMessage.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/FormMessages.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/LoginForm.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/PasswordOrService.jsx\",\"packages/epotek:accounts-ui/imports/ui/components/SocialButtons.jsx\"],\"names\":[\"Accounts\",\"STATES\",\"LoginForm\",\"module\",\"export\",\"default\",\"link\",\"v\",\"redirect\",\"validatePassword\",\"validateEmail\",\"validateUsername\",\"ui\",\"_options\",\"requestPermissions\",\"requestOfflineToken\",\"forceApprovalPrompt\",\"requireEmailVerification\",\"passwordSignupFields\",\"minimumPasswordLength\",\"loginPath\",\"signUpPath\",\"resetPasswordPath\",\"profilePath\",\"changePasswordPath\",\"homeRoutePath\",\"onSubmitHook\",\"onPreSignUpHook\",\"Promise\",\"resolve\",\"onPostSignUpHook\",\"onEnrollAccountHook\",\"concat\",\"onResetPasswordHook\",\"onVerifyEmailHook\",\"onSignedInHook\",\"onSignedOutHook\",\"emailPattern\",\"RegExp\",\"config\",\"options\",\"VALID_KEYS\",\"Object\",\"keys\",\"forEach\",\"key\",\"includes\",\"Error\",\"service\",\"scope\",\"Array\",\"value\",\"_arr\",\"_i\",\"length\",\"hook\",\"_arr2\",\"_i2\",\"_arr3\",\"_i3\",\"path\",\"_arr4\",\"_i4\",\"exportDefault\",\"browserHistory\",\"loginButtonsSession\",\"getLoginServices\",\"hasPasswordService\",\"loginResultCallback\",\"capitalize\",\"require\",\"e\",\"_loginButtonsSession\",\"SIGN_IN\",\"Symbol\",\"SIGN_UP\",\"PROFILE\",\"PASSWORD_CHANGE\",\"PASSWORD_RESET\",\"ENROLL_ACCOUNT\",\"services\",\"Package\",\"oauth\",\"serviceNames\",\"sort\",\"map\",\"name\",\"err\",\"LoginCancelledError\",\"ServiceConfiguration\",\"ConfigError\",\"Meteor\",\"isClient\",\"email\",\"showMessage\",\"clearMessage\",\"test\",\"password\",\"arguments\",\"undefined\",\"errMsg\",\"username\",\"formState\",\"fieldName\",\"window\",\"history\",\"setTimeout\",\"FlowRouter\",\"go\",\"push\",\"pushState\",\"string\",\"replace\",\"split\",\"word\",\"charAt\",\"toUpperCase\",\"slice\",\"join\",\"this\",\"validateKey\",\"KEY_PREFIX\",\"set\",\"_set\",\"Session\",\"get\",\"doneCallback\",\"onPageLoadLogin\",\"attemptInfo\",\"_ref\",\"type\",\"error\",\"onResetPasswordLink\",\"token\",\"done\",\"onEnrollmentLink\",\"onEmailVerificationLink\",\"verifyEmail\",\"loginWithoutPassword\",\"callback\",\"connection\",\"call\",\"React\",\"PropTypes\",\"Link\",\"Button\",\"Component\",\"render\",\"label\",\"href\",\"disabled\",\"className\",\"onClick\",\"props\",\"createElement\",\"to\",\"propTypes\",\"func\",\"Buttons\",\"buttons\",\"id\",\"i\",\"_extends2\",\"Field\",\"constructor\",\"super\",\"state\",\"mount\",\"triggerUpdate\",\"onChange\",\"input\",\"target\",\"componentDidMount\",\"componentDidUpdate\",\"prevProps\",\"setState\",\"hint\",\"required\",\"defaultValue\",\"message\",\"htmlFor\",\"ref\",\"placeholder\",\"trim\",\"Fields\",\"fields\",\"ReactDOM\",\"Form\",\"form\",\"addEventListener\",\"preventDefault\",\"oauthServices\",\"messages\",\"translate\",\"ready\",\"noValidate\",\"PasswordOrService\",\"SocialButtons\",\"FormMessages\",\"object\",\"isRequired\",\"bool\",\"isObject\",\"obj\",\"FormMessage\",\"style\",\"deprecated\",\"console\",\"warn\",\"filter\",\"withTracker\",\"T9n\",\"indexBy\",\"array\",\"result\",\"waiting\",\"user\",\"bind\",\"changeState\",\"prevState\",\"_objectSpread2\",\"getDefaultFieldValues\",\"componentWillReceiveProps\",\"nextProps\",\"nextContext\",\"text\",\"validateField\",\"field\",\"getUsernameOrEmailField\",\"handleChange\",\"getMessageForField\",\"getUsernameField\",\"getEmailField\",\"getPasswordField\",\"getSetPasswordField\",\"getNewPasswordField\",\"evt\",\"[object Object]\",\"setDefaultFieldValues\",\"loginFields\",\"assign\",\"showPasswordChangeForm\",\"showEnrollAccountForm\",\"loginButtons\",\"signOut\",\"showCreateAccountLink\",\"switchToSignUp\",\"switchToSignIn\",\"showForgotPasswordLink\",\"switchToPasswordReset\",\"switchToChangePassword\",\"signUp\",\"showSignInLink\",\"signIn\",\"passwordReset\",\"passwordChange\",\"switchToSignOut\",\"cancelResetPassword\",\"a\",\"b\",\"forbidClientAccountCreation\",\"defaults\",\"localStorage\",\"setItem\",\"JSON\",\"stringify\",\"defaultFieldValues\",\"parse\",\"getItem\",\"clearDefaultFieldValues\",\"removeItem\",\"event\",\"clearMessages\",\"logout\",\"usernameOrEmail\",\"loginSelector\",\"loginWithPassword\",\"reason\",\"oauthButtons\",\"oauthSignIn\",\"serviceName\",\"capitalService\",\"loginWithService\",\"self\",\"uuid\",\"SignUp\",\"createUser\",\"promise\",\"then\",\"forgotPassword\",\"newPassword\",\"resetPassword\",\"changePassword\",\"clearTimeout\",\"hideMessageTimout\",\"find\",\"_ref2\",\"_ref3\",\"_ref4\",\"componentWillMount\",\"container\",\"document\",\"getElementsByClassName\",\"componentWillUnmount\",\"_ref5\",\"symbol\",\"defaultProps\",\"LoginFormContainer\",\"subscribe\",\"labels\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { Accounts } from 'meteor/accounts-base';\\nimport './imports/accounts_ui.js';\\nimport './imports/login_session.js';\\nimport { STATES } from './imports/helpers.js';\\nimport './imports/api/client/loginWithoutPassword.js';\\nimport LoginForm from './imports/ui/components/LoginForm.jsx';\\n\\nexport { LoginForm as default, Accounts, STATES };\\n\",\"import { Accounts } from 'meteor/accounts-base';\\nimport {\\n  redirect,\\n  validatePassword,\\n  validateEmail,\\n  validateUsername\\n} from './helpers.js';\\n\\n/**\\n * @summary Accounts UI\\n * @namespace\\n * @memberOf Accounts\\n */\\nAccounts.ui = {};\\n\\nAccounts.ui._options = {\\n  requestPermissions: [],\\n  requestOfflineToken: {},\\n  forceApprovalPrompt: {},\\n  requireEmailVerification: false,\\n  passwordSignupFields: 'EMAIL_ONLY_NO_PASSWORD',\\n  minimumPasswordLength: 7,\\n  loginPath: '/',\\n  signUpPath: null,\\n  resetPasswordPath: null,\\n  profilePath: '/',\\n  changePasswordPath: null,\\n  homeRoutePath: '/',\\n  onSubmitHook: () => {},\\n  onPreSignUpHook: () => new Promise(resolve => resolve()),\\n  onPostSignUpHook: () => {},\\n  onEnrollAccountHook: () => redirect(`${Accounts.ui._options.loginPath}`),\\n  onResetPasswordHook: () => redirect(`${Accounts.ui._options.loginPath}`),\\n  onVerifyEmailHook: () => redirect(`${Accounts.ui._options.profilePath}`),\\n  onSignedInHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\\n  onSignedOutHook: () => redirect(`${Accounts.ui._options.homeRoutePath}`),\\n  emailPattern: new RegExp('[^@]+@[^@.]{2,}.[^.@]+')\\n};\\n\\n/**\\n * @summary Configure the behavior of [`<Accounts.ui.LoginForm />`](#react-accounts-ui).\\n * @anywhere\\n * @param {Object} options\\n * @param {Object} options.requestPermissions Which [permissions](#requestpermissions) to request from the user for each external service.\\n * @param {Object} options.requestOfflineToken To ask the user for permission to act on their behalf when offline, map the relevant external service to `true`. Currently only supported with Google. See [Meteor.loginWithExternalService](#meteor_loginwithexternalservice) for more details.\\n * @param {Object} options.forceApprovalPrompt If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.\\n * @param {String} options.passwordSignupFields Which fields to display in the user creation form. One of '`USERNAME_AND_EMAIL`', '`USERNAME_AND_OPTIONAL_EMAIL`', '`USERNAME_ONLY`', '`EMAIL_ONLY`', or '`NO_PASSWORD`' (default).\\n */\\nAccounts.ui.config = function(options) {\\n  // validate options keys\\n  const VALID_KEYS = [\\n    'passwordSignupFields',\\n    'requestPermissions',\\n    'requestOfflineToken',\\n    'forbidClientAccountCreation',\\n    'requireEmailVerification',\\n    'minimumPasswordLength',\\n    'loginPath',\\n    'signUpPath',\\n    'resetPasswordPath',\\n    'profilePath',\\n    'changePasswordPath',\\n    'homeRoutePath',\\n    'onSubmitHook',\\n    'onPreSignUpHook',\\n    'onPostSignUpHook',\\n    'onEnrollAccountHook',\\n    'onResetPasswordHook',\\n    'onVerifyEmailHook',\\n    'onSignedInHook',\\n    'onSignedOutHook',\\n    'validateField',\\n    'emailPattern'\\n  ];\\n\\n  Object.keys(options).forEach(function(key) {\\n    if (!VALID_KEYS.includes(key))\\n      throw new Error('Accounts.ui.config: Invalid key: ' + key);\\n  });\\n\\n  // Deal with `passwordSignupFields`\\n  if (options.passwordSignupFields) {\\n    if (\\n      [\\n        'USERNAME_AND_EMAIL',\\n        'USERNAME_AND_OPTIONAL_EMAIL',\\n        'USERNAME_ONLY',\\n        'EMAIL_ONLY',\\n        'EMAIL_ONLY_NO_PASSWORD',\\n        'USERNAME_AND_EMAIL_NO_PASSWORD'\\n      ].includes(options.passwordSignupFields)\\n    ) {\\n      Accounts.ui._options.passwordSignupFields = options.passwordSignupFields;\\n    } else {\\n      throw new Error(\\n        'Accounts.ui.config: Invalid option for `passwordSignupFields`: ' +\\n          options.passwordSignupFields\\n      );\\n    }\\n  }\\n\\n  // Deal with `requestPermissions`\\n  if (options.requestPermissions) {\\n    Object.keys(options.requestPermissions).forEach(service => {\\n      const scope = options.requestPermissions[service];\\n      if (Accounts.ui._options.requestPermissions[service]) {\\n        throw new Error(\\n          \\\"Accounts.ui.config: Can't set `requestPermissions` more than once for \\\" +\\n            service\\n        );\\n      } else if (!(scope instanceof Array)) {\\n        throw new Error(\\n          'Accounts.ui.config: Value for `requestPermissions` must be an array'\\n        );\\n      } else {\\n        Accounts.ui._options.requestPermissions[service] = scope;\\n      }\\n    });\\n  }\\n\\n  // Deal with `requestOfflineToken`\\n  if (options.requestOfflineToken) {\\n    Object.keys(options.requestOfflineToken).forEach(service => {\\n      const value = options.requestOfflineToken[service];\\n      if (service !== 'google')\\n        throw new Error(\\n          'Accounts.ui.config: `requestOfflineToken` only supported for Google login at the moment.'\\n        );\\n\\n      if (Accounts.ui._options.requestOfflineToken[service]) {\\n        throw new Error(\\n          \\\"Accounts.ui.config: Can't set `requestOfflineToken` more than once for \\\" +\\n            service\\n        );\\n      } else {\\n        Accounts.ui._options.requestOfflineToken[service] = value;\\n      }\\n    });\\n  }\\n\\n  // Deal with `forceApprovalPrompt`\\n  if (options.forceApprovalPrompt) {\\n    Object.keys(options.forceApprovalPrompt).forEach(service => {\\n      const value = options.forceApprovalPrompt[service];\\n      if (service !== 'google')\\n        throw new Error(\\n          'Accounts.ui.config: `forceApprovalPrompt` only supported for Google login at the moment.'\\n        );\\n\\n      if (Accounts.ui._options.forceApprovalPrompt[service]) {\\n        throw new Error(\\n          \\\"Accounts.ui.config: Can't set `forceApprovalPrompt` more than once for \\\" +\\n            service\\n        );\\n      } else {\\n        Accounts.ui._options.forceApprovalPrompt[service] = value;\\n      }\\n    });\\n  }\\n\\n  // Deal with `requireEmailVerification`\\n  if (options.requireEmailVerification) {\\n    if (typeof options.requireEmailVerification != 'boolean') {\\n      throw new Error(\\n        `Accounts.ui.config: \\\"requireEmailVerification\\\" not a boolean`\\n      );\\n    } else {\\n      Accounts.ui._options.requireEmailVerification =\\n        options.requireEmailVerification;\\n    }\\n  }\\n\\n  // Deal with `minimumPasswordLength`\\n  if (options.minimumPasswordLength) {\\n    if (typeof options.minimumPasswordLength != 'number') {\\n      throw new Error(\\n        `Accounts.ui.config: \\\"minimumPasswordLength\\\" not a number`\\n      );\\n    } else {\\n      Accounts.ui._options.minimumPasswordLength =\\n        options.minimumPasswordLength;\\n    }\\n  }\\n\\n  // Deal with the hooks.\\n  for (let hook of ['onSubmitHook', 'onPreSignUpHook', 'onPostSignUpHook']) {\\n    if (options[hook]) {\\n      if (typeof options[hook] != 'function') {\\n        throw new Error(`Accounts.ui.config: \\\"${hook}\\\" not a function`);\\n      } else {\\n        Accounts.ui._options[hook] = options[hook];\\n      }\\n    }\\n  }\\n\\n  // Deal with pattern.\\n  for (let hook of ['emailPattern']) {\\n    if (options[hook]) {\\n      if (!(options[hook] instanceof RegExp)) {\\n        throw new Error(\\n          `Accounts.ui.config: \\\"${hook}\\\" not a Regular Expression`\\n        );\\n      } else {\\n        Accounts.ui._options[hook] = options[hook];\\n      }\\n    }\\n  }\\n\\n  // deal with the paths.\\n  for (let path of [\\n    'loginPath',\\n    'signUpPath',\\n    'resetPasswordPath',\\n    'profilePath',\\n    'changePasswordPath',\\n    'homeRoutePath'\\n  ]) {\\n    if (typeof options[path] !== 'undefined') {\\n      if (options[path] !== null && typeof options[path] !== 'string') {\\n        throw new Error(`Accounts.ui.config: ${path} is not a string or null`);\\n      } else {\\n        Accounts.ui._options[path] = options[path];\\n      }\\n    }\\n  }\\n\\n  // deal with redirect hooks.\\n  for (let hook of [\\n    'onEnrollAccountHook',\\n    'onResetPasswordHook',\\n    'onVerifyEmailHook',\\n    'onSignedInHook',\\n    'onSignedOutHook'\\n  ]) {\\n    if (options[hook]) {\\n      if (typeof options[hook] == 'function') {\\n        Accounts.ui._options[hook] = options[hook];\\n      } else if (typeof options[hook] == 'string') {\\n        Accounts.ui._options[hook] = () => redirect(options[hook]);\\n      } else {\\n        throw new Error(\\n          `Accounts.ui.config: \\\"${hook}\\\" not a function or an absolute or relative path`\\n        );\\n      }\\n    }\\n  }\\n};\\n\\nexport default Accounts;\\n\",\"let browserHistory;\\ntry {\\n  browserHistory = require('react-router').browserHistory;\\n} catch (e) {}\\nexport const loginButtonsSession = Accounts._loginButtonsSession;\\nexport const STATES = {\\n  SIGN_IN: Symbol('SIGN_IN'),\\n  SIGN_UP: Symbol('SIGN_UP'),\\n  PROFILE: Symbol('PROFILE'),\\n  PASSWORD_CHANGE: Symbol('PASSWORD_CHANGE'),\\n  PASSWORD_RESET: Symbol('PASSWORD_RESET'),\\n  ENROLL_ACCOUNT: Symbol('ENROLL_ACCOUNT')\\n};\\n\\nexport function getLoginServices() {\\n  // First look for OAuth services.\\n  const services = Package['accounts-oauth']\\n    ? Accounts.oauth.serviceNames()\\n    : [];\\n\\n  // Be equally kind to all login services. This also preserves\\n  // backwards-compatibility.\\n  services.sort();\\n\\n  return services.map(function(name) {\\n    return { name: name };\\n  });\\n}\\n// Export getLoginServices using old style globals for accounts-base which\\n// requires it.\\nthis.getLoginServices = getLoginServices;\\n\\nexport function hasPasswordService() {\\n  // First look for OAuth services.\\n  return !!Package['accounts-password'];\\n}\\n\\nexport function loginResultCallback(service, err) {\\n  if (!err) {\\n  } else if (err instanceof Accounts.LoginCancelledError) {\\n    // do nothing\\n  } else if (err instanceof ServiceConfiguration.ConfigError) {\\n  } else {\\n    //loginButtonsSession.errorMessage(err.reason || \\\"Unknown error\\\");\\n  }\\n\\n  if (Meteor.isClient) {\\n    if (typeof redirect === 'string') {\\n      window.location.href = '/';\\n    }\\n\\n    if (typeof service === 'function') {\\n      service();\\n    }\\n  }\\n}\\n\\nexport function passwordSignupFields() {\\n  return Accounts.ui._options.passwordSignupFields || 'EMAIL_ONLY_NO_PASSWORD';\\n}\\n\\nexport function validateEmail(email, showMessage, clearMessage) {\\n  if (\\n    passwordSignupFields() === 'USERNAME_AND_OPTIONAL_EMAIL' &&\\n    email === ''\\n  ) {\\n    return true;\\n  }\\n  if (Accounts.ui._options.emailPattern.test(email)) {\\n    return true;\\n  } else if (!email || email.length === 0) {\\n    showMessage('error.emailRequired', 'warning', false, 'email');\\n    return false;\\n  } else {\\n    showMessage('error.accounts.Invalid email', 'warning', false, 'email');\\n    return false;\\n  }\\n}\\n\\nexport function validatePassword(password = '', showMessage, clearMessage) {\\n  if (password.length >= Accounts.ui._options.minimumPasswordLength) {\\n    return true;\\n  } else {\\n    // const errMsg = T9n.get(\\\"error.minChar\\\").replace(/7/, Accounts.ui._options.minimumPasswordLength);\\n    const errMsg = 'error.minChar';\\n    showMessage(errMsg, 'warning', false, 'password');\\n    return false;\\n  }\\n}\\n\\nexport function validateUsername(\\n  username,\\n  showMessage,\\n  clearMessage,\\n  formState\\n) {\\n  if (username) {\\n    return true;\\n  } else {\\n    const fieldName =\\n      passwordSignupFields() === 'USERNAME_ONLY' || formState === STATES.SIGN_UP\\n        ? 'username'\\n        : 'usernameOrEmail';\\n    showMessage('error.usernameRequired', 'warning', false, fieldName);\\n    return false;\\n  }\\n}\\n\\nexport function redirect(redirect) {\\n  if (Meteor.isClient) {\\n    if (window.history) {\\n      // Run after all app specific redirects, i.e. to the login screen.\\n      Meteor.setTimeout(() => {\\n        if (Package['kadira:flow-router']) {\\n          Package['kadira:flow-router'].FlowRouter.go(redirect);\\n        } else if (Package['kadira:flow-router-ssr']) {\\n          Package['kadira:flow-router-ssr'].FlowRouter.go(redirect);\\n        } else if (browserHistory) {\\n          browserHistory.push(redirect);\\n        } else {\\n          window.history.pushState({}, 'redirect', redirect);\\n        }\\n      }, 100);\\n    }\\n  }\\n}\\n\\nexport function capitalize(string) {\\n  return string\\n    .replace(/\\\\-/, ' ')\\n    .split(' ')\\n    .map(word => {\\n      return word.charAt(0).toUpperCase() + word.slice(1);\\n    })\\n    .join(' ');\\n}\\n\",\"import { Accounts } from 'meteor/accounts-base';\\nimport { STATES, loginResultCallback, getLoginServices } from './helpers.js';\\n\\nconst VALID_KEYS = [\\n  'dropdownVisible',\\n\\n  // XXX consider replacing these with one key that has an enum for values.\\n  'inSignupFlow',\\n  'inForgotPasswordFlow',\\n  'inChangePasswordFlow',\\n  'inMessageOnlyFlow',\\n\\n  'errorMessage',\\n  'infoMessage',\\n\\n  // dialogs with messages (info and error)\\n  'resetPasswordToken',\\n  'enrollAccountToken',\\n  'justVerifiedEmail',\\n  'justResetPassword',\\n\\n  'configureLoginServiceDialogVisible',\\n  'configureLoginServiceDialogServiceName',\\n  'configureLoginServiceDialogSaveDisabled',\\n  'configureOnDesktopVisible'\\n];\\n\\nexport const validateKey = function(key) {\\n  if (!VALID_KEYS.includes(key))\\n    throw new Error('Invalid key in loginButtonsSession: ' + key);\\n};\\n\\nexport const KEY_PREFIX = 'Meteor.loginButtons.';\\n\\n// XXX This should probably be package scope rather than exported\\n// (there was even a comment to that effect here from before we had\\n// namespacing) but accounts-ui-viewer uses it, so leave it as is for\\n// now\\nAccounts._loginButtonsSession = {\\n  set: function(key, value) {\\n    validateKey(key);\\n    if (['errorMessage', 'infoMessage'].includes(key))\\n      throw new Error(\\n        \\\"Don't set errorMessage or infoMessage directly. Instead, use errorMessage() or infoMessage().\\\"\\n      );\\n\\n    this._set(key, value);\\n  },\\n\\n  _set: function(key, value) {\\n    Session.set(KEY_PREFIX + key, value);\\n  },\\n\\n  get: function(key) {\\n    validateKey(key);\\n    return Session.get(KEY_PREFIX + key);\\n  }\\n};\\n\\nif (Meteor.isClient) {\\n  // In the login redirect flow, we'll have the result of the login\\n  // attempt at page load time when we're redirected back to the\\n  // application.  Register a callback to update the UI (i.e. to close\\n  // the dialog on a successful login or display the error on a failed\\n  // login).\\n  //\\n  Accounts.onPageLoadLogin(function(attemptInfo) {\\n    // Ignore if we have a left over login attempt for a service that is no longer registered.\\n    if (\\n      getLoginServices()\\n        .map(({ name }) => name)\\n        .includes(attemptInfo.type)\\n    )\\n      loginResultCallback(attemptInfo.type, attemptInfo.error);\\n  });\\n\\n  let doneCallback;\\n\\n  Accounts.onResetPasswordLink(function(token, done) {\\n    Accounts._loginButtonsSession.set('resetPasswordToken', token);\\n    Session.set(KEY_PREFIX + 'state', 'resetPasswordToken');\\n    doneCallback = done;\\n\\n    Accounts.ui._options.onResetPasswordHook();\\n  });\\n\\n  Accounts.onEnrollmentLink(function(token, done) {\\n    Accounts._loginButtonsSession.set('enrollAccountToken', token);\\n    Session.set(KEY_PREFIX + 'state', 'enrollAccountToken');\\n    doneCallback = done;\\n\\n    Accounts.ui._options.onEnrollAccountHook();\\n  });\\n\\n  Accounts.onEmailVerificationLink(function(token, done) {\\n    Accounts.verifyEmail(token, function(error) {\\n      if (!error) {\\n        Accounts._loginButtonsSession.set('justVerifiedEmail', true);\\n        Session.set(KEY_PREFIX + 'state', 'justVerifiedEmail');\\n        Accounts.ui._options.onSignedInHook();\\n      } else {\\n        Accounts.ui._options.onVerifyEmailHook();\\n      }\\n\\n      done();\\n    });\\n  });\\n}\\n\",\"/**\\n * @summary Request a forgot password email.\\n * @locus Client\\n * @param {Object} options\\n * @param {String} options.email The email address to send a password reset link.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n */\\nAccounts.loginWithoutPassword = function(options, callback) {\\n  if (!options.email) throw new Error('Must pass options.email');\\n  Accounts.connection.call('loginWithoutPassword', options, callback);\\n};\\n\",\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport { Accounts } from 'meteor/accounts-base';\\n\\nlet Link;\\ntry {\\n  Link = require('react-router').Link;\\n} catch (e) {}\\n\\nexport class Button extends React.Component {\\n  render() {\\n    const {\\n      label,\\n      href = null,\\n      type,\\n      disabled = false,\\n      className,\\n      onClick\\n    } = this.props;\\n    if (type == 'link') {\\n      // Support React Router.\\n      if (Link && href) {\\n        return (\\n          <Link to={href} className={className}>\\n            {label}\\n          </Link>\\n        );\\n      } else {\\n        return (\\n          <a href={href} className={className} onClick={onClick}>\\n            {label}\\n          </a>\\n        );\\n      }\\n    }\\n    return (\\n      <button\\n        className={className}\\n        type={type}\\n        disabled={disabled}\\n        onClick={onClick}\\n      >\\n        {label}\\n      </button>\\n    );\\n  }\\n}\\n\\nButton.propTypes = {\\n  onClick: PropTypes.func\\n};\\n\\nAccounts.ui.Button = Button;\\n\",\"import React from 'react';\\nimport './Button.jsx';\\nimport { Accounts } from 'meteor/accounts-base';\\n\\nexport class Buttons extends React.Component {\\n  render() {\\n    let { buttons = {}, className = 'buttons' } = this.props;\\n    return (\\n      <div className={className}>\\n        {Object.keys(buttons).map((id, i) => (\\n          <Accounts.ui.Button {...buttons[id]} key={i} />\\n        ))}\\n      </div>\\n    );\\n  }\\n}\\n\\nAccounts.ui.Buttons = Buttons;\\n\",\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport { Accounts } from 'meteor/accounts-base';\\n\\nexport class Field extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      mount: true\\n    };\\n  }\\n\\n  triggerUpdate() {\\n    // Trigger an onChange on inital load, to support browser prefilled values.\\n    const { onChange } = this.props;\\n    if (this.input && onChange) {\\n      onChange({ target: { value: this.input.value } });\\n    }\\n  }\\n\\n  componentDidMount() {\\n    this.triggerUpdate();\\n  }\\n\\n  componentDidUpdate(prevProps) {\\n    // Re-mount component so that we don't expose browser prefilled passwords if the component was\\n    // a password before and now something else.\\n    if (prevProps.id !== this.props.id) {\\n      this.setState({ mount: false });\\n    } else if (!this.state.mount) {\\n      this.setState({ mount: true });\\n      this.triggerUpdate();\\n    }\\n  }\\n\\n  render() {\\n    const {\\n      id,\\n      hint,\\n      label,\\n      type = 'text',\\n      onChange,\\n      required = false,\\n      className = 'field',\\n      defaultValue = '',\\n      message\\n    } = this.props;\\n    const { mount = true } = this.state;\\n    if (type == 'notice') {\\n      return <div className={className}>{label}</div>;\\n    }\\n    return mount ? (\\n      <div className={className}>\\n        <label htmlFor={id}>{label}</label>\\n        <input\\n          id={id}\\n          ref={ref => (this.input = ref)}\\n          type={type}\\n          onChange={onChange}\\n          placeholder={hint}\\n          defaultValue={defaultValue}\\n        />\\n        {message && (\\n          <span className={['message', message.type].join(' ').trim()}>\\n            {message.message}\\n          </span>\\n        )}\\n      </div>\\n    ) : null;\\n  }\\n}\\n\\nField.propTypes = {\\n  onChange: PropTypes.func\\n};\\n\\nAccounts.ui.Field = Field;\\n\",\"import React from 'react';\\nimport { Accounts } from 'meteor/accounts-base';\\nimport './Field.jsx';\\n\\nexport class Fields extends React.Component {\\n  render() {\\n    let { fields = {}, className = 'fields' } = this.props;\\n    return (\\n      <div className={className}>\\n        {Object.keys(fields).map((id, i) => (\\n          <Accounts.ui.Field {...fields[id]} key={i} />\\n        ))}\\n      </div>\\n    );\\n  }\\n}\\n\\nAccounts.ui.Fields = Fields;\\n\",\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ReactDOM from 'react-dom';\\nimport { Accounts } from 'meteor/accounts-base';\\n\\nimport './Fields.jsx';\\nimport './Buttons.jsx';\\nimport './FormMessage.jsx';\\nimport './PasswordOrService.jsx';\\nimport './SocialButtons.jsx';\\nimport './FormMessages.jsx';\\n\\nexport class Form extends React.Component {\\n  componentDidMount() {\\n    let form = this.form;\\n    if (form) {\\n      form.addEventListener('submit', e => {\\n        e.preventDefault();\\n      });\\n    }\\n  }\\n\\n  render() {\\n    const {\\n      hasPasswordService,\\n      oauthServices,\\n      fields,\\n      buttons,\\n      error,\\n      messages,\\n      translate,\\n      ready = true,\\n      className\\n    } = this.props;\\n    return (\\n      <form\\n        ref={ref => (this.form = ref)}\\n        className={[className, ready ? 'ready' : null].join(' ')}\\n        className=\\\"accounts-ui\\\"\\n        noValidate\\n      >\\n        <Accounts.ui.Fields fields={fields} />\\n        <Accounts.ui.Buttons buttons={buttons} />\\n        <Accounts.ui.PasswordOrService\\n          oauthServices={oauthServices}\\n          translate={translate}\\n        />\\n        <Accounts.ui.SocialButtons oauthServices={oauthServices} />\\n        <Accounts.ui.FormMessages messages={messages} />\\n      </form>\\n    );\\n  }\\n}\\n\\nForm.propTypes = {\\n  oauthServices: PropTypes.object,\\n  fields: PropTypes.object.isRequired,\\n  buttons: PropTypes.object.isRequired,\\n  translate: PropTypes.func.isRequired,\\n  error: PropTypes.string,\\n  ready: PropTypes.bool\\n};\\n\\nAccounts.ui.Form = Form;\\n\",\"import React from 'react';\\nimport { Accounts } from 'meteor/accounts-base';\\n\\nfunction isObject(obj) {\\n  return obj === Object(obj);\\n}\\n\\nexport class FormMessage extends React.Component {\\n  render() {\\n    let {\\n      message,\\n      type,\\n      className = 'message',\\n      style = {},\\n      deprecated\\n    } = this.props;\\n    // XXX Check for deprecations.\\n    if (deprecated) {\\n      // Found backwords compatibility issue.\\n      console.warn(\\n        'You are overriding Accounts.ui.Form and using FormMessage, the use of FormMessage in Form has been depreacted in v1.2.11, update your implementation to use FormMessages: https://github.com/studiointeract/accounts-ui/#deprecations'\\n      );\\n    }\\n    message = isObject(message) ? message.message : message; // If message is object, then try to get message from it\\n    return message ? (\\n      <div style={style} className={[className, type].join(' ')}>\\n        {message}\\n      </div>\\n    ) : null;\\n  }\\n}\\n\\nAccounts.ui.FormMessage = FormMessage;\\n\",\"import React, { Component } from 'react';\\nimport { Accounts } from 'meteor/accounts-base';\\n\\nexport class FormMessages extends Component {\\n  render() {\\n    const { messages = [], className = 'messages', style = {} } = this.props;\\n    return (\\n      messages.length > 0 && (\\n        <div className=\\\"messages\\\">\\n          {messages\\n            .filter(message => !('field' in message))\\n            .map(({ message, type }, i) => (\\n              <Accounts.ui.FormMessage message={message} type={type} key={i} />\\n            ))}\\n        </div>\\n      )\\n    );\\n  }\\n}\\n\\nAccounts.ui.FormMessages = FormMessages;\\n\",\"import React, { Component } from 'react';\\nimport PropTypes from 'prop-types';\\nimport ReactDOM from 'react-dom';\\nimport { withTracker } from 'meteor/react-meteor-data';\\nimport { Accounts } from 'meteor/accounts-base';\\nimport { T9n } from 'meteor-accounts-t9n';\\nimport { KEY_PREFIX } from '../../login_session.js';\\nimport './Form.jsx';\\n\\nimport {\\n  STATES,\\n  passwordSignupFields,\\n  validateEmail,\\n  validatePassword,\\n  validateUsername,\\n  loginResultCallback,\\n  getLoginServices,\\n  hasPasswordService,\\n  capitalize\\n} from '../../helpers.js';\\n\\nfunction indexBy(array, key) {\\n  const result = {};\\n  array.forEach(function(obj) {\\n    result[obj[key]] = obj;\\n  });\\n  return result;\\n}\\n\\nclass LoginForm extends Component {\\n  constructor(props) {\\n    super(props);\\n    let {\\n      formState,\\n      loginPath,\\n      signUpPath,\\n      resetPasswordPath,\\n      profilePath,\\n      changePasswordPath\\n    } = props;\\n\\n    if (formState === STATES.SIGN_IN && Package['accounts-password']) {\\n      console.warn(\\n        'Do not force the state to SIGN_IN on Accounts.ui.LoginForm, it will make it impossible to reset password in your app, this state is also the default state if logged out, so no need to force it.'\\n      );\\n    }\\n\\n    // Set inital state.\\n    this.state = {\\n      messages: [],\\n      waiting: true,\\n      formState: formState\\n        ? formState\\n        : Accounts.user()\\n          ? STATES.PROFILE\\n          : STATES.SIGN_IN,\\n      onSubmitHook: props.onSubmitHook || Accounts.ui._options.onSubmitHook,\\n      onSignedInHook:\\n        props.onSignedInHook || Accounts.ui._options.onSignedInHook,\\n      onSignedOutHook:\\n        props.onSignedOutHook || Accounts.ui._options.onSignedOutHook,\\n      onPreSignUpHook:\\n        props.onPreSignUpHook || Accounts.ui._options.onPreSignUpHook,\\n      onPostSignUpHook:\\n        props.onPostSignUpHook || Accounts.ui._options.onPostSignUpHook\\n    };\\n    this.translate = this.translate.bind(this);\\n  }\\n\\n  componentDidMount() {\\n    this.setState(prevState => ({ waiting: false, ready: true }));\\n    let changeState = Session.get(KEY_PREFIX + 'state');\\n    switch (changeState) {\\n      case 'enrollAccountToken':\\n        this.setState(prevState => ({\\n          formState: STATES.ENROLL_ACCOUNT\\n        }));\\n        Session.set(KEY_PREFIX + 'state', null);\\n        break;\\n      case 'resetPasswordToken':\\n        this.setState(prevState => ({\\n          formState: STATES.PASSWORD_CHANGE\\n        }));\\n        Session.set(KEY_PREFIX + 'state', null);\\n        break;\\n\\n      case 'justVerifiedEmail':\\n        this.setState(prevState => ({\\n          formState: STATES.PROFILE\\n        }));\\n        Session.set(KEY_PREFIX + 'state', null);\\n        break;\\n    }\\n\\n    // Add default field values once the form did mount on the client\\n    this.setState(prevState => ({\\n      ...this.getDefaultFieldValues()\\n    }));\\n  }\\n\\n  componentWillReceiveProps(nextProps, nextContext) {\\n    if (nextProps.formState && nextProps.formState !== this.state.formState) {\\n      this.setState({\\n        formState: nextProps.formState,\\n        ...this.getDefaultFieldValues()\\n      });\\n    }\\n  }\\n\\n  componentDidUpdate(prevProps, prevState) {\\n    if (!prevProps.user !== !this.props.user) {\\n      this.setState({\\n        formState: this.props.user ? STATES.PROFILE : STATES.SIGN_IN\\n      });\\n    }\\n  }\\n\\n  translate(text) {\\n    // if (this.props.t) {\\n    //   return this.props.t(text);\\n    // }\\n    return T9n.get(text);\\n  }\\n\\n  validateField(field, value) {\\n    const { formState } = this.state;\\n    switch (field) {\\n      case 'email':\\n        return validateEmail(\\n          value,\\n          this.showMessage.bind(this),\\n          this.clearMessage.bind(this)\\n        );\\n      case 'password':\\n        return validatePassword(\\n          value,\\n          this.showMessage.bind(this),\\n          this.clearMessage.bind(this)\\n        );\\n      case 'username':\\n        return validateUsername(\\n          value,\\n          this.showMessage.bind(this),\\n          this.clearMessage.bind(this),\\n          formState\\n        );\\n    }\\n  }\\n\\n  getUsernameOrEmailField() {\\n    return {\\n      id: 'usernameOrEmail',\\n      hint: this.translate('enterUsernameOrEmail'),\\n      label: this.translate('usernameOrEmail'),\\n      required: true,\\n      defaultValue: this.state.username || '',\\n      onChange: this.handleChange.bind(this, 'usernameOrEmail'),\\n      message: this.getMessageForField('usernameOrEmail')\\n    };\\n  }\\n\\n  getUsernameField() {\\n    return {\\n      id: 'username',\\n      hint: this.translate('enterUsername'),\\n      label: this.translate('username'),\\n      required: true,\\n      defaultValue: this.state.username || '',\\n      onChange: this.handleChange.bind(this, 'username'),\\n      message: this.getMessageForField('username')\\n    };\\n  }\\n\\n  getEmailField() {\\n    return {\\n      id: 'email',\\n      hint: this.translate('enterEmail'),\\n      label: this.translate('email'),\\n      type: 'email',\\n      required: true,\\n      defaultValue: this.state.email || '',\\n      onChange: this.handleChange.bind(this, 'email'),\\n      message: this.getMessageForField('email')\\n    };\\n  }\\n\\n  getPasswordField() {\\n    return {\\n      id: 'password',\\n      hint: this.translate('enterPassword'),\\n      label: this.translate('password'),\\n      type: 'password',\\n      required: true,\\n      defaultValue: this.state.password || '',\\n      onChange: this.handleChange.bind(this, 'password'),\\n      message: this.getMessageForField('password')\\n    };\\n  }\\n\\n  getSetPasswordField() {\\n    return {\\n      id: 'newPassword',\\n      hint: this.translate('enterPassword'),\\n      label: this.translate('choosePassword'),\\n      type: 'password',\\n      required: true,\\n      onChange: this.handleChange.bind(this, 'newPassword')\\n    };\\n  }\\n\\n  getNewPasswordField() {\\n    return {\\n      id: 'newPassword',\\n      hint: this.translate('enterNewPassword'),\\n      label: this.translate('newPassword'),\\n      type: 'password',\\n      required: true,\\n      onChange: this.handleChange.bind(this, 'newPassword'),\\n      message: this.getMessageForField('newPassword')\\n    };\\n  }\\n\\n  handleChange(field, evt) {\\n    let value = evt.target.value;\\n    switch (field) {\\n      case 'password':\\n        break;\\n      default:\\n        value = value.trim();\\n        break;\\n    }\\n    this.setState({ [field]: value });\\n    this.setDefaultFieldValues({ [field]: value });\\n  }\\n\\n  fields() {\\n    const loginFields = [];\\n    const { formState } = this.state;\\n\\n    if (!hasPasswordService() && getLoginServices().length == 0) {\\n      loginFields.push({\\n        label: 'No login service added, i.e. accounts-password',\\n        type: 'notice'\\n      });\\n    }\\n\\n    if (hasPasswordService() && formState == STATES.SIGN_IN) {\\n      if (\\n        [\\n          'USERNAME_AND_EMAIL',\\n          'USERNAME_AND_OPTIONAL_EMAIL',\\n          'USERNAME_AND_EMAIL_NO_PASSWORD'\\n        ].includes(passwordSignupFields())\\n      ) {\\n        loginFields.push(this.getUsernameOrEmailField());\\n      }\\n\\n      if (passwordSignupFields() === 'USERNAME_ONLY') {\\n        loginFields.push(this.getUsernameField());\\n      }\\n\\n      if (\\n        ['EMAIL_ONLY', 'EMAIL_ONLY_NO_PASSWORD'].includes(\\n          passwordSignupFields()\\n        )\\n      ) {\\n        loginFields.push(this.getEmailField());\\n      }\\n\\n      if (\\n        !['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\\n          passwordSignupFields()\\n        )\\n      ) {\\n        loginFields.push(this.getPasswordField());\\n      }\\n    }\\n\\n    if (hasPasswordService() && formState == STATES.SIGN_UP) {\\n      if (\\n        [\\n          'USERNAME_AND_EMAIL',\\n          'USERNAME_AND_OPTIONAL_EMAIL',\\n          'USERNAME_ONLY',\\n          'USERNAME_AND_EMAIL_NO_PASSWORD'\\n        ].includes(passwordSignupFields())\\n      ) {\\n        loginFields.push(this.getUsernameField());\\n      }\\n\\n      if (\\n        [\\n          'USERNAME_AND_EMAIL',\\n          'EMAIL_ONLY',\\n          'EMAIL_ONLY_NO_PASSWORD',\\n          'USERNAME_AND_EMAIL_NO_PASSWORD'\\n        ].includes(passwordSignupFields())\\n      ) {\\n        loginFields.push(this.getEmailField());\\n      }\\n\\n      if (['USERNAME_AND_OPTIONAL_EMAIL'].includes(passwordSignupFields())) {\\n        loginFields.push(\\n          Object.assign(this.getEmailField(), { required: false })\\n        );\\n      }\\n\\n      if (\\n        !['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\\n          passwordSignupFields()\\n        )\\n      ) {\\n        loginFields.push(this.getPasswordField());\\n      }\\n    }\\n\\n    if (formState == STATES.PASSWORD_RESET) {\\n      loginFields.push(this.getEmailField());\\n    }\\n\\n    if (this.showPasswordChangeForm()) {\\n      if (\\n        Meteor.isClient &&\\n        !Accounts._loginButtonsSession.get('resetPasswordToken')\\n      ) {\\n        loginFields.push(this.getPasswordField());\\n      }\\n      loginFields.push(this.getNewPasswordField());\\n    }\\n\\n    if (this.showEnrollAccountForm()) {\\n      loginFields.push(this.getSetPasswordField());\\n    }\\n    return indexBy(loginFields, 'id');\\n  }\\n\\n  buttons() {\\n    const {\\n      loginPath = Accounts.ui._options.loginPath,\\n      signUpPath = Accounts.ui._options.signUpPath,\\n      resetPasswordPath = Accounts.ui._options.resetPasswordPath,\\n      changePasswordPath = Accounts.ui._options.changePasswordPath,\\n      profilePath = Accounts.ui._options.profilePath\\n    } = this.props;\\n    const { user } = this.props;\\n    const { formState, waiting } = this.state;\\n    let loginButtons = [];\\n\\n    if (user && formState == STATES.PROFILE) {\\n      loginButtons.push({\\n        id: 'signOut',\\n        label: this.translate('signOut'),\\n        disabled: waiting,\\n        onClick: this.signOut.bind(this)\\n      });\\n    }\\n\\n    if (this.showCreateAccountLink()) {\\n      loginButtons.push({\\n        id: 'switchToSignUp',\\n        label: this.translate('signUp'),\\n        type: 'link',\\n        href: signUpPath,\\n        onClick: this.switchToSignUp.bind(this)\\n      });\\n    }\\n\\n    if (formState == STATES.SIGN_UP || formState == STATES.PASSWORD_RESET) {\\n      loginButtons.push({\\n        id: 'switchToSignIn',\\n        label: this.translate('signIn'),\\n        type: 'link',\\n        href: loginPath,\\n        onClick: this.switchToSignIn.bind(this)\\n      });\\n    }\\n\\n    if (this.showForgotPasswordLink()) {\\n      loginButtons.push({\\n        id: 'switchToPasswordReset',\\n        label: this.translate('forgotPassword'),\\n        type: 'link',\\n        href: resetPasswordPath,\\n        onClick: this.switchToPasswordReset.bind(this)\\n      });\\n    }\\n\\n    if (\\n      user &&\\n      !['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\\n        passwordSignupFields()\\n      ) &&\\n      formState == STATES.PROFILE &&\\n      (user.services && 'password' in user.services)\\n    ) {\\n      loginButtons.push({\\n        id: 'switchToChangePassword',\\n        label: this.translate('changePassword'),\\n        type: 'link',\\n        href: changePasswordPath,\\n        onClick: this.switchToChangePassword.bind(this)\\n      });\\n    }\\n\\n    if (formState == STATES.SIGN_UP) {\\n      loginButtons.push({\\n        id: 'signUp',\\n        label: this.translate('signUp'),\\n        type: hasPasswordService() ? 'submit' : 'link',\\n        className: 'active',\\n        disabled: waiting,\\n        onClick: hasPasswordService() ? this.signUp.bind(this, {}) : null\\n      });\\n    }\\n\\n    if (this.showSignInLink()) {\\n      loginButtons.push({\\n        id: 'signIn',\\n        label: this.translate('signIn'),\\n        type: hasPasswordService() ? 'submit' : 'link',\\n        className: 'active',\\n        disabled: waiting,\\n        onClick: hasPasswordService() ? this.signIn.bind(this) : null\\n      });\\n    }\\n\\n    if (formState == STATES.PASSWORD_RESET) {\\n      loginButtons.push({\\n        id: 'emailResetLink',\\n        label: this.translate('resetYourPassword'),\\n        type: 'submit',\\n        disabled: waiting,\\n        onClick: this.passwordReset.bind(this)\\n      });\\n    }\\n\\n    if (this.showPasswordChangeForm() || this.showEnrollAccountForm()) {\\n      loginButtons.push({\\n        id: 'changePassword',\\n        label: this.showPasswordChangeForm()\\n          ? this.translate('changePassword')\\n          : this.translate('setPassword'),\\n        type: 'submit',\\n        disabled: waiting,\\n        onClick: this.passwordChange.bind(this)\\n      });\\n\\n      if (Accounts.user()) {\\n        loginButtons.push({\\n          id: 'switchToSignOut',\\n          label: this.translate('cancel'),\\n          type: 'link',\\n          href: profilePath,\\n          onClick: this.switchToSignOut.bind(this)\\n        });\\n      } else {\\n        loginButtons.push({\\n          id: 'cancelResetPassword',\\n          label: this.translate('cancel'),\\n          type: 'link',\\n          onClick: this.cancelResetPassword.bind(this)\\n        });\\n      }\\n    }\\n\\n    // Sort the button array so that the submit button always comes first, and\\n    // buttons should also come before links.\\n    loginButtons.sort((a, b) => {\\n      return (\\n        (b.type == 'submit' && a.type != undefined) -\\n        (a.type == 'submit' && b.type != undefined)\\n      );\\n    });\\n\\n    return indexBy(loginButtons, 'id');\\n  }\\n\\n  showSignInLink() {\\n    return (\\n      this.state.formState == STATES.SIGN_IN && Package['accounts-password']\\n    );\\n  }\\n\\n  showPasswordChangeForm() {\\n    return (\\n      Package['accounts-password'] &&\\n      this.state.formState == STATES.PASSWORD_CHANGE\\n    );\\n  }\\n\\n  showEnrollAccountForm() {\\n    return (\\n      Package['accounts-password'] &&\\n      this.state.formState == STATES.ENROLL_ACCOUNT\\n    );\\n  }\\n\\n  showCreateAccountLink() {\\n    return (\\n      this.state.formState == STATES.SIGN_IN &&\\n      !Accounts._options.forbidClientAccountCreation &&\\n      Package['accounts-password']\\n    );\\n  }\\n\\n  showForgotPasswordLink() {\\n    return (\\n      !this.props.user &&\\n      this.state.formState == STATES.SIGN_IN &&\\n      [\\n        'USERNAME_AND_EMAIL',\\n        'USERNAME_AND_OPTIONAL_EMAIL',\\n        'EMAIL_ONLY'\\n      ].includes(passwordSignupFields())\\n    );\\n  }\\n\\n  /**\\n   * Helper to store field values while using the form.\\n   */\\n  setDefaultFieldValues(defaults) {\\n    if (typeof defaults !== 'object') {\\n      throw new Error(\\n        'Argument to setDefaultFieldValues is not of type object'\\n      );\\n    } else if (typeof localStorage !== 'undefined' && localStorage) {\\n      localStorage.setItem(\\n        'accounts_ui',\\n        JSON.stringify({\\n          passwordSignupFields: passwordSignupFields(),\\n          ...this.getDefaultFieldValues(),\\n          ...defaults\\n        })\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Helper to get field values when switching states in the form.\\n   */\\n  getDefaultFieldValues() {\\n    if (typeof localStorage !== 'undefined' && localStorage) {\\n      const defaultFieldValues = JSON.parse(\\n        localStorage.getItem('accounts_ui') || null\\n      );\\n      if (\\n        defaultFieldValues &&\\n        defaultFieldValues.passwordSignupFields === passwordSignupFields()\\n      ) {\\n        return defaultFieldValues;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Helper to clear field values when signing in, up or out.\\n   */\\n  clearDefaultFieldValues() {\\n    if (typeof localStorage !== 'undefined' && localStorage) {\\n      localStorage.removeItem('accounts_ui');\\n    }\\n  }\\n\\n  switchToSignUp(event) {\\n    event.preventDefault();\\n    this.setState({\\n      formState: STATES.SIGN_UP,\\n      ...this.getDefaultFieldValues()\\n    });\\n    this.clearMessages();\\n  }\\n\\n  switchToSignIn(event) {\\n    event.preventDefault();\\n    this.setState({\\n      formState: STATES.SIGN_IN,\\n      ...this.getDefaultFieldValues()\\n    });\\n    this.clearMessages();\\n  }\\n\\n  switchToPasswordReset(event) {\\n    event.preventDefault();\\n    this.setState({\\n      formState: STATES.PASSWORD_RESET,\\n      ...this.getDefaultFieldValues()\\n    });\\n    this.clearMessages();\\n  }\\n\\n  switchToChangePassword(event) {\\n    event.preventDefault();\\n    this.setState({\\n      formState: STATES.PASSWORD_CHANGE,\\n      ...this.getDefaultFieldValues()\\n    });\\n    this.clearMessages();\\n  }\\n\\n  switchToSignOut(event) {\\n    event.preventDefault();\\n    this.setState({\\n      formState: STATES.PROFILE\\n    });\\n    this.clearMessages();\\n  }\\n\\n  cancelResetPassword(event) {\\n    event.preventDefault();\\n    Accounts._loginButtonsSession.set('resetPasswordToken', null);\\n    this.setState({\\n      formState: STATES.SIGN_IN,\\n      messages: []\\n    });\\n  }\\n\\n  signOut() {\\n    Meteor.logout(() => {\\n      this.setState({\\n        formState: STATES.SIGN_IN,\\n        password: null\\n      });\\n      this.state.onSignedOutHook();\\n      this.clearMessages();\\n      this.clearDefaultFieldValues();\\n    });\\n  }\\n\\n  signIn() {\\n    const {\\n      username = null,\\n      email = null,\\n      usernameOrEmail = null,\\n      password,\\n      formState,\\n      onSubmitHook\\n    } = this.state;\\n    let error = false;\\n    let loginSelector;\\n    this.clearMessages();\\n\\n    if (usernameOrEmail !== null) {\\n      if (!this.validateField('username', usernameOrEmail)) {\\n        if (this.state.formState == STATES.SIGN_UP) {\\n          this.state.onSubmitHook(\\n            'error.accounts.usernameRequired',\\n            this.state.formState\\n          );\\n        }\\n        error = true;\\n      } else {\\n        if (\\n          ['USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())\\n        ) {\\n          this.loginWithoutPassword();\\n          return;\\n        } else {\\n          loginSelector = usernameOrEmail;\\n        }\\n      }\\n    } else if (username !== null) {\\n      if (!this.validateField('username', username)) {\\n        if (this.state.formState == STATES.SIGN_UP) {\\n          this.state.onSubmitHook(\\n            'error.accounts.usernameRequired',\\n            this.state.formState\\n          );\\n        }\\n        error = true;\\n      } else {\\n        loginSelector = { username: username };\\n      }\\n    } else if (usernameOrEmail == null) {\\n      if (!this.validateField('email', email)) {\\n        error = true;\\n      } else {\\n        if (['EMAIL_ONLY_NO_PASSWORD'].includes(passwordSignupFields())) {\\n          this.loginWithoutPassword();\\n          error = true;\\n        } else {\\n          loginSelector = { email };\\n        }\\n      }\\n    }\\n    if (\\n      !['EMAIL_ONLY_NO_PASSWORD'].includes(passwordSignupFields()) &&\\n      !this.validateField('password', password)\\n    ) {\\n      error = true;\\n    }\\n\\n    if (!error) {\\n      Meteor.loginWithPassword(loginSelector, password, (error, result) => {\\n        onSubmitHook(error, formState);\\n        if (error) {\\n          this.showMessage(\\n            `error.accounts.${error.reason}` || 'unknown_error',\\n            'error'\\n          );\\n        } else {\\n          loginResultCallback(() => this.state.onSignedInHook());\\n          this.setState({\\n            formState: STATES.PROFILE,\\n            password: null\\n          });\\n          this.clearDefaultFieldValues();\\n        }\\n      });\\n    }\\n  }\\n\\n  oauthButtons() {\\n    const { formState, waiting } = this.state;\\n    let oauthButtons = [];\\n    if (formState == STATES.SIGN_IN || formState == STATES.SIGN_UP) {\\n      if (Accounts.oauth) {\\n        Accounts.oauth.serviceNames().map(service => {\\n          oauthButtons.push({\\n            id: service,\\n            label: capitalize(service),\\n            disabled: waiting,\\n            type: 'button',\\n            className: `btn-${service} ${service}`,\\n            onClick: this.oauthSignIn.bind(this, service)\\n          });\\n        });\\n      }\\n    }\\n    return indexBy(oauthButtons, 'id');\\n  }\\n\\n  oauthSignIn(serviceName) {\\n    const { user } = this.props;\\n    const { formState, waiting, onSubmitHook } = this.state;\\n    //Thanks Josh Owens for this one.\\n    function capitalService() {\\n      return serviceName.charAt(0).toUpperCase() + serviceName.slice(1);\\n    }\\n\\n    if (serviceName === 'meteor-developer') {\\n      serviceName = 'meteorDeveloperAccount';\\n    }\\n\\n    const loginWithService = Meteor['loginWith' + capitalService()];\\n\\n    let options = {}; // use default scope unless specified\\n    if (Accounts.ui._options.requestPermissions[serviceName])\\n      options.requestPermissions =\\n        Accounts.ui._options.requestPermissions[serviceName];\\n    if (Accounts.ui._options.requestOfflineToken[serviceName])\\n      options.requestOfflineToken =\\n        Accounts.ui._options.requestOfflineToken[serviceName];\\n    if (Accounts.ui._options.forceApprovalPrompt[serviceName])\\n      options.forceApprovalPrompt =\\n        Accounts.ui._options.forceApprovalPrompt[serviceName];\\n\\n    this.clearMessages();\\n    const self = this;\\n    loginWithService(options, error => {\\n      onSubmitHook(error, formState);\\n      if (error) {\\n        this.showMessage(`error.accounts.${error.reason}` || 'unknown_error');\\n      } else {\\n        this.setState({ formState: STATES.PROFILE });\\n        this.clearDefaultFieldValues();\\n        loginResultCallback(() => {\\n          Meteor.setTimeout(() => this.state.onSignedInHook(), 100);\\n        });\\n      }\\n    });\\n  }\\n\\n  signUp(options = {}) {\\n    const {\\n      username = null,\\n      email = null,\\n      usernameOrEmail = null,\\n      password,\\n      formState,\\n      onSubmitHook\\n    } = this.state;\\n    let error = false;\\n    this.clearMessages();\\n\\n    if (username !== null) {\\n      if (!this.validateField('username', username)) {\\n        if (this.state.formState == STATES.SIGN_UP) {\\n          this.state.onSubmitHook(\\n            'error.accounts.usernameRequired',\\n            this.state.formState\\n          );\\n        }\\n        error = true;\\n      } else {\\n        options.username = username;\\n      }\\n    } else {\\n      if (\\n        ['USERNAME_AND_EMAIL', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\\n          passwordSignupFields()\\n        ) &&\\n        !this.validateField('username', username)\\n      ) {\\n        if (this.state.formState == STATES.SIGN_UP) {\\n          this.state.onSubmitHook(\\n            'error.accounts.usernameRequired',\\n            this.state.formState\\n          );\\n        }\\n        error = true;\\n      }\\n    }\\n\\n    if (!this.validateField('email', email)) {\\n      error = true;\\n    } else {\\n      options.email = email;\\n    }\\n\\n    if (\\n      ['EMAIL_ONLY_NO_PASSWORD', 'USERNAME_AND_EMAIL_NO_PASSWORD'].includes(\\n        passwordSignupFields()\\n      )\\n    ) {\\n      // Generate a random password.\\n      options.password = Meteor.uuid();\\n    } else if (!this.validateField('password', password)) {\\n      onSubmitHook('Invalid password', formState);\\n      error = true;\\n    } else {\\n      options.password = password;\\n    }\\n\\n    const SignUp = function(_options) {\\n      Accounts.createUser(_options, error => {\\n        if (error) {\\n          this.showMessage(\\n            `error.accounts.${error.reason}` || 'unknown_error',\\n            'error'\\n          );\\n          if (this.translate(`error.accounts.${error.reason}`)) {\\n            onSubmitHook(`error.accounts.${error.reason}`, formState);\\n          } else {\\n            onSubmitHook('unknown_error', formState);\\n          }\\n        } else {\\n          onSubmitHook(null, formState);\\n          this.setState({ formState: STATES.PROFILE, password: null });\\n          let user = Accounts.user();\\n          loginResultCallback(\\n            this.state.onPostSignUpHook.bind(this, _options, user)\\n          );\\n          this.clearDefaultFieldValues();\\n        }\\n\\n        this.setState({ waiting: false });\\n      });\\n    };\\n\\n    if (!error) {\\n      this.setState({ waiting: true });\\n      // Allow for Promises to return.\\n      let promise = this.state.onPreSignUpHook(options);\\n      if (promise instanceof Promise) {\\n        promise.then(SignUp.bind(this, options));\\n      } else {\\n        SignUp(options);\\n      }\\n    }\\n  }\\n\\n  loginWithoutPassword() {\\n    const {\\n      email = '',\\n      usernameOrEmail = '',\\n      waiting,\\n      formState,\\n      onSubmitHook\\n    } = this.state;\\n\\n    if (waiting) {\\n      return;\\n    }\\n\\n    if (this.validateField('email', email)) {\\n      this.setState({ waiting: true });\\n\\n      Accounts.loginWithoutPassword({ email: email }, error => {\\n        if (error) {\\n          this.showMessage(\\n            `error.accounts.${error.reason}` || 'unknown_error',\\n            'error'\\n          );\\n        } else {\\n          this.showMessage(this.translate('info.emailSent'), 'success', 5000);\\n          this.clearDefaultFieldValues();\\n        }\\n        onSubmitHook(error, formState);\\n        this.setState({ waiting: false });\\n      });\\n    } else if (this.validateField('username', usernameOrEmail)) {\\n      this.setState({ waiting: true });\\n\\n      Accounts.loginWithoutPassword(\\n        { email: usernameOrEmail, username: usernameOrEmail },\\n        error => {\\n          if (error) {\\n            this.showMessage(\\n              `error.accounts.${error.reason}` || 'unknown_error',\\n              'error'\\n            );\\n          } else {\\n            this.showMessage(this.translate('info.emailSent'), 'success', 5000);\\n            this.clearDefaultFieldValues();\\n          }\\n          onSubmitHook(error, formState);\\n          this.setState({ waiting: false });\\n        }\\n      );\\n    } else {\\n      let errMsg = null;\\n      if (['USERNAME_AND_EMAIL_NO_PASSWORD'].includes(passwordSignupFields())) {\\n        errMsg = this.translate('error.accounts.invalid_email');\\n      } else {\\n        errMsg = this.translate('error.accounts.invalid_email');\\n      }\\n      this.showMessage(errMsg, 'warning');\\n      onSubmitHook(errMsg, formState);\\n    }\\n  }\\n\\n  passwordReset() {\\n    const { email = '', waiting, formState, onSubmitHook } = this.state;\\n\\n    if (waiting) {\\n      return;\\n    }\\n\\n    this.clearMessages();\\n    if (this.validateField('email', email)) {\\n      this.setState({ waiting: true });\\n\\n      Accounts.forgotPassword({ email: email }, error => {\\n        if (error) {\\n          this.showMessage(\\n            `error.accounts.${error.reason}` || 'unknown_error',\\n            'error'\\n          );\\n        } else {\\n          this.showMessage(this.translate('info.emailSent'), 'success', 5000);\\n          this.clearDefaultFieldValues();\\n        }\\n        onSubmitHook(error, formState);\\n        this.setState({ waiting: false });\\n      });\\n    }\\n  }\\n\\n  passwordChange() {\\n    const {\\n      password,\\n      newPassword,\\n      formState,\\n      onSubmitHook,\\n      onSignedInHook\\n    } = this.state;\\n\\n    if (!this.validateField('password', newPassword)) {\\n      onSubmitHook('err.minChar', formState);\\n      return;\\n    }\\n\\n    let token = Accounts._loginButtonsSession.get('resetPasswordToken');\\n    if (!token) {\\n      token = Accounts._loginButtonsSession.get('enrollAccountToken');\\n    }\\n    if (token) {\\n      Accounts.resetPassword(token, newPassword, error => {\\n        if (error) {\\n          this.showMessage(\\n            `error.accounts.${error.reason}` || 'unknown_error',\\n            'error'\\n          );\\n          onSubmitHook(error, formState);\\n        } else {\\n          this.showMessage(\\n            this.translate('info.passwordChanged'),\\n            'success',\\n            5000\\n          );\\n          onSubmitHook(null, formState);\\n          this.setState({ formState: STATES.PROFILE });\\n          Accounts._loginButtonsSession.set('resetPasswordToken', null);\\n          Accounts._loginButtonsSession.set('enrollAccountToken', null);\\n          onSignedInHook();\\n        }\\n      });\\n    } else {\\n      Accounts.changePassword(password, newPassword, error => {\\n        if (error) {\\n          this.showMessage(\\n            `error.accounts.${error.reason}` || 'unknown_error',\\n            'error'\\n          );\\n          onSubmitHook(error, formState);\\n        } else {\\n          this.showMessage('info.passwordChanged', 'success', 5000);\\n          onSubmitHook(null, formState);\\n          this.setState({ formState: STATES.PROFILE });\\n          this.clearDefaultFieldValues();\\n        }\\n      });\\n    }\\n  }\\n\\n  showMessage(message, type, clearTimeout, field) {\\n    message = this.translate(message).trim();\\n    if (message) {\\n      this.setState(({ messages = [] }) => {\\n        messages.push({\\n          message,\\n          type,\\n          ...(field && { field })\\n        });\\n        return { messages };\\n      });\\n      if (clearTimeout) {\\n        this.hideMessageTimout = setTimeout(() => {\\n          // Filter out the message that timed out.\\n          this.clearMessage(message);\\n        }, clearTimeout);\\n      }\\n    }\\n  }\\n\\n  getMessageForField(field) {\\n    const { messages = [] } = this.state;\\n    return messages.find(({ field: key }) => key === field);\\n  }\\n\\n  clearMessage(message) {\\n    if (message) {\\n      this.setState(({ messages = [] }) => ({\\n        messages: messages.filter(({ message: a }) => a !== message)\\n      }));\\n    }\\n  }\\n\\n  clearMessages() {\\n    if (this.hideMessageTimout) {\\n      clearTimeout(this.hideMessageTimout);\\n    }\\n    this.setState({ messages: [] });\\n  }\\n\\n  componentWillMount() {\\n    // XXX Check for backwards compatibility.\\n    if (Meteor.isClient) {\\n      const container = document.createElement('div');\\n      ReactDOM.render(<Accounts.ui.Field message=\\\"test\\\" />, container);\\n      if (container.getElementsByClassName('message').length == 0) {\\n        // Found backwards compatibility issue with 1.3.x\\n        console.warn(`Implementations of Accounts.ui.Field must render message in v1.2.11.\\n          https://github.com/studiointeract/accounts-ui/#deprecations`);\\n      }\\n    }\\n  }\\n\\n  componentWillUnmount() {\\n    if (this.hideMessageTimout) {\\n      clearTimeout(this.hideMessageTimout);\\n    }\\n  }\\n\\n  render() {\\n    this.oauthButtons();\\n    // Backwords compatibility with v1.2.x.\\n    const { messages = [] } = this.state;\\n    const message = {\\n      deprecated: true,\\n      message: messages.map(({ message }) => message).join(', ')\\n    };\\n    return (\\n      <Accounts.ui.Form\\n        oauthServices={this.oauthButtons()}\\n        fields={this.fields()}\\n        buttons={this.buttons()}\\n        {...this.state}\\n        message={message}\\n        translate={text => this.translate(text)}\\n      />\\n    );\\n  }\\n}\\nLoginForm.propTypes = {\\n  formState: PropTypes.symbol,\\n  loginPath: PropTypes.string,\\n  signUpPath: PropTypes.string,\\n  resetPasswordPath: PropTypes.string,\\n  profilePath: PropTypes.string,\\n  changePasswordPath: PropTypes.string\\n};\\nLoginForm.defaultProps = {\\n  formState: null,\\n  loginPath: null,\\n  signUpPath: null,\\n  resetPasswordPath: null,\\n  profilePath: null,\\n  changePasswordPath: null\\n};\\n\\nAccounts.ui.LoginForm = LoginForm;\\n\\nconst LoginFormContainer = withTracker(() => {\\n  // Listen for the user to login/logout and the services list to the user.\\n  Meteor.subscribe('servicesList');\\n  return {\\n    user: Accounts.user()\\n  };\\n})(LoginForm);\\nAccounts.ui.LoginForm = LoginFormContainer;\\nexport default LoginFormContainer;\\n\",\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport { Accounts } from 'meteor/accounts-base';\\nimport { T9n } from 'meteor-accounts-t9n';\\nimport { hasPasswordService } from '../../helpers.js';\\n\\nexport class PasswordOrService extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      hasPasswordService: hasPasswordService(),\\n      services: Object.keys(props.oauthServices).map(service => {\\n        return props.oauthServices[service].label;\\n      })\\n    };\\n  }\\n\\n  translate(text) {\\n    if (this.props.translate) {\\n      return this.props.translate(text);\\n    }\\n    return T9n.get(text);\\n  }\\n\\n  render() {\\n    let { className = 'password-or-service', style = {} } = this.props;\\n    let { hasPasswordService, services } = this.state;\\n    labels = services;\\n    if (services.length > 2) {\\n      labels = [];\\n    }\\n\\n    if (hasPasswordService && services.length > 0) {\\n      return (\\n        <div style={style} className={className}>\\n          {`${this.translate('orUse')} ${labels.join(' / ')}`}\\n        </div>\\n      );\\n    }\\n    return null;\\n  }\\n}\\n\\nPasswordOrService.propTypes = {\\n  oauthServices: PropTypes.object\\n};\\n\\nAccounts.ui.PasswordOrService = PasswordOrService;\\n\",\"import React from 'react';\\nimport './Button.jsx';\\nimport { Accounts } from 'meteor/accounts-base';\\n\\nexport class SocialButtons extends React.Component {\\n  render() {\\n    let { oauthServices = {}, className = 'social-buttons' } = this.props;\\n    return (\\n      <div className={className}>\\n        {Object.keys(oauthServices).map((id, i) => {\\n          return <Accounts.ui.Button {...oauthServices[id]} key={i} />;\\n        })}\\n      </div>\\n    );\\n  }\\n}\\n\\nAccounts.ui.SocialButtons = SocialButtons;\\n\"]}","minifier":"terser"}
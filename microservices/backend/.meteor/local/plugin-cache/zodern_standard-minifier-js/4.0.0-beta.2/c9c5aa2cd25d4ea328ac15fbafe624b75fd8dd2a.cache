{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,n=Package.meteor.meteorEnv,o=Package.underscore._,s=Package.ejson.EJSON,i=Package.minimongo.LocalCollection,a=Package.minimongo.Minimongo,r=Package.mongo.Mongo,c=Package.random.Random,l=Package[\"diff-sequence\"].DiffSequence,d=Package[\"mongo-id\"].MongoID,m=Package.modules.meteorInstall,g=Package[\"babel-runtime\"].meteorBabelHelpers,u=Package.promise.Promise,E=Package[\"ddp-client\"].DDP,P,D=m({node_modules:{meteor:{\"cultofcoders:redis-oplog\":{\"redis-oplog.client.js\":function(e,t,n){let o;n.export({Vent:()=>s}),n.link(\"./lib/vent/VentClient\",{default(e){o=e}},0);const s=new o},lib:{\"constants.js\":function(e,t,n){n.export({Events:()=>s,Strategy:()=>i,RedisPipe:()=>o,VentConstants:()=>a});const o={EVENT:\"e\",DOC:\"d\",FIELDS:\"f\",MODIFIER:\"m\",DOCUMENT_ID:\"id\",SYNTHETIC:\"s\",UID:\"u\",MODIFIED_TOP_LEVEL_FIELDS:\"mt\"};n.exportDefault(o);const s={INSERT:\"i\",UPDATE:\"u\",REMOVE:\"r\"},i={DEFAULT:\"D\",DEDICATED_CHANNELS:\"DC\",LIMIT_SORT:\"LS\"},a={ID:\"i\",EVENT_VARIABLE:\"e\",PREFIX:\"__vent\",getPrefix:(e,t)=>\"\".concat(e,\".\").concat(t)}},vent:{\"VentClient.js\":function(t,n,s){let i,a,r;s.export({default:()=>c}),s.link(\"../constants\",{VentConstants(e){i=e}},0),s.link(\"meteor/random\",{Random(e){a=e}},1),s.link(\"meteor/ddp-common\",{DDPCommon(e){r=e}},2);class c{constructor(){this.store={},this.listen(e.connection)}subscribe(e){const t=new l(this,e);this.add(t);for(var n=arguments.length,o=new Array(n>1?n-1:0),s=1;s<n;s++)o[s-1]=arguments[s];return t.subscribe(...o)}listen(e){e._stream.on(\"message\",e=>{const t='{\"msg\":\"changed\",\"'.concat(i.PREFIX,'\":\"1');if(e.substr(0,t.length)!==t)return;const n=r.parseDDP(e),o=this.store[n.id];o&&o.handle(n[i.EVENT_VARIABLE])})}add(e){this.store[e.id]=e}remove(e){delete this.store[e.id]}}class l{constructor(e,t){this.client=e,this._name=t,this._id=a.id()}get id(){return i.getPrefix(this._id,this._name)}subscribe(){const t=this;for(var n=arguments.length,s=new Array(n),i=0;i<n;i++)s[i]=arguments[i];const a=e.subscribe(this._name,this._id,...s),r=a.stop;return Object.assign(a,{listen(n){if(!o.isFunction(n))throw new e.Error(\"invalid-argument\",\"You should pass a function to listen()\");t._eventHandler=n},stop:()=>(t.client.remove(t),r.call(a))}),a}handle(e){this._eventHandler&&this._eventHandler(e)}}}}}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/cultofcoders:redis-oplog/redis-oplog.client.js\");Package._define(\"cultofcoders:redis-oplog\",D)}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/cultofcoders:redis-oplog/redis-oplog.client.js\",\"packages/cultofcoders:redis-oplog/lib/constants.js\",\"packages/cultofcoders:redis-oplog/lib/vent/VentClient.js\"],\"names\":[\"VentClient\",\"module\",\"export\",\"Vent\",\"link\",\"default\",\"v\",\"Events\",\"Strategy\",\"RedisPipe\",\"VentConstants\",\"EVENT\",\"DOC\",\"FIELDS\",\"MODIFIER\",\"DOCUMENT_ID\",\"SYNTHETIC\",\"UID\",\"MODIFIED_TOP_LEVEL_FIELDS\",\"exportDefault\",\"INSERT\",\"UPDATE\",\"REMOVE\",\"DEFAULT\",\"DEDICATED_CHANNELS\",\"LIMIT_SORT\",\"ID\",\"EVENT_VARIABLE\",\"PREFIX\",\"getPrefix\",\"id\",\"name\",\"concat\",\"Random\",\"DDPCommon\",\"constructor\",\"this\",\"store\",\"listen\",\"Meteor\",\"connection\",\"subscribe\",\"subscription\",\"VentClientSubscription\",\"add\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"ddpConnection\",\"_stream\",\"on\",\"raw_msg\",\"search\",\"substr\",\"msg\",\"parseDDP\",\"handle\",\"remove\",\"client\",\"_name\",\"_id\",\"self\",\"_len2\",\"_key2\",\"handler\",\"oldStop\",\"stop\",\"Object\",\"assign\",\"eventHandler\",\"_\",\"isFunction\",\"Error\",\"_eventHandler\",\"call\",\"event\"],\"mappings\":\"miBAA+B,IAAIA,EAAnCC,EAAOC,QAAQC,KAAK,IAAIA,IAAsBF,EAAOG,KAAK,yBAAyBC,QAAQC,GAAGN,EAAWM,IAAI,GAE7G,MAAMH,EAAO,IAAIH,uCCFjBC,EAAOC,QAAQK,OAAO,IAAIA,EAAOC,SAAS,IAAIA,EAASC,UAAU,IAAIA,EAAUC,cAAc,IAAIA,IAAjG,MAAMD,GACFE,MAAO,IACPC,IAAK,IACLC,OAAQ,IACRC,SAAU,IACVC,YAAa,KACbC,UAAW,IACXC,IAAK,IACLC,0BAA2B,MAR/BjB,EAAOkB,cAWQV,GAEf,MAAMF,GACFa,OAAQ,IACRC,OAAQ,IACRC,OAAQ,KAGNd,GACFe,QAAS,IACTC,mBAAoB,KACpBC,WAAY,MAGVf,GACFgB,GAAI,IACJC,eAAgB,IAChBC,OAAQ,SACRC,UAAS,CAACC,EAAIC,IACV,GAAAC,OAAUF,EAAV,KAAAE,OAAgBD,2CC9BgB,IAAIrB,EAAoFuB,EAAgEC,EAAhMjC,EAAOC,QAAQG,QAAQ,IAAIL,IAA+BC,EAAOG,KAAK,gBAAgBM,cAAcJ,GAAGI,EAAcJ,IAAI,GAAcL,EAAOG,KAAK,iBAAiB6B,OAAO3B,GAAG2B,EAAO3B,IAAI,GAAiBL,EAAOG,KAAK,qBAAqB8B,UAAU5B,GAAG4B,EAAU5B,IAAI,SAOjPN,EACjBmC,cACIC,KAAKC,SACLD,KAAKE,OAAOC,EAAOC,YAGvBC,UAAUV,GACN,MAAMW,EAAe,IAAIC,EAAuBP,KAAML,GACtDK,KAAKQ,IAAIF,GAFY,IAAA,IAAAG,EAAAC,UAAAC,OAANC,EAAM,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANF,EAAME,EAAA,GAAAJ,UAAAI,GAIrB,OAAOR,EAAaD,aAAaO,GAGrCV,OAAOa,GACHA,EAAcC,QAAQC,GAAG,UAAYC,IAEjC,MAAMC,EAAM,qBAAAvB,OAAwBtB,EAAckB,OAAtC,QACZ,GAAI0B,EAAQE,OAAO,EAAGD,EAAOR,UAAYQ,EACrC,OAGJ,MAAME,EAAMvB,EAAUwB,SAASJ,GACzBZ,EAAeN,KAAKC,MAAMoB,EAAI3B,IAChCY,GACAA,EAAaiB,OAAOF,EAAI/C,EAAciB,mBASlDiB,IAAIF,GACAN,KAAKC,MAAMK,EAAaZ,IAAMY,EAMlCkB,OAAOlB,UACIN,KAAKC,MAAMK,EAAaZ,WAOjCa,EACFR,YAAY0B,EAAQ9B,GAChBK,KAAKyB,OAASA,EACdzB,KAAK0B,MAAQ/B,EACbK,KAAK2B,IAAM9B,EAAOH,KAGtBA,SACI,OAAOpB,EAAcmB,UAAUO,KAAK2B,IAAK3B,KAAK0B,OASlDrB,YACI,MAAMuB,EAAO5B,KADE,IAAA,IAAA6B,EAAAnB,UAAAC,OAANC,EAAM,IAAAC,MAAAgB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANlB,EAAMkB,GAAApB,UAAAoB,GAGf,MAAMC,EAAU5B,EAAOE,UAAUL,KAAK0B,MAAO1B,KAAK2B,OAAQf,GAEpDoB,EAAUD,EAAQE,KAgBxB,OAfAC,OAAOC,OAAOJ,GACV7B,OAAOkC,GACH,IAAKC,EAAEC,WAAWF,GACd,MAAM,IAAIjC,EAAOoC,MAAM,mBAAoB,0CAG/CX,EAAKY,cAAgBJ,GAEzBH,KAAI,KACAL,EAAKH,OAAOD,OAAOI,GAEZI,EAAQS,KAAKV,MAIrBA,EAMXR,OAAOmB,GACC1C,KAAKwC,eACLxC,KAAKwC,cAAcE\",\"sourcesContent\":[\"import VentClient from './lib/vent/VentClient';\\n\\nconst Vent = new VentClient();\\n\\nexport { Vent };\\n\",\"const RedisPipe = {\\n    EVENT: 'e',\\n    DOC: 'd',\\n    FIELDS: 'f',\\n    MODIFIER: 'm',\\n    DOCUMENT_ID: 'id',\\n    SYNTHETIC: 's',\\n    UID: 'u', // this is the unique identity of a change request\\n    MODIFIED_TOP_LEVEL_FIELDS: 'mt'\\n};\\n\\nexport default RedisPipe;\\n\\nconst Events = {\\n    INSERT: 'i',\\n    UPDATE: 'u',\\n    REMOVE: 'r'\\n};\\n\\nconst Strategy = {\\n    DEFAULT: 'D',\\n    DEDICATED_CHANNELS: 'DC',\\n    LIMIT_SORT: 'LS'\\n};\\n\\nconst VentConstants = {\\n    ID: 'i',\\n    EVENT_VARIABLE: 'e',\\n    PREFIX: '__vent',\\n    getPrefix(id, name) {\\n        return `${id}.${name}`;\\n    }\\n};\\n\\nexport {\\n    Events,\\n    Strategy,\\n    RedisPipe,\\n    VentConstants\\n};\\n\",\"import {VentConstants} from '../constants';\\nimport {Random} from 'meteor/random';\\nimport {DDPCommon} from 'meteor/ddp-common';\\n\\n/**\\n * Handles vents inside Meteor\\n */\\nexport default class VentClient {\\n    constructor() {\\n        this.store = {};\\n        this.listen(Meteor.connection);\\n    }\\n\\n    subscribe(name, ...args) {\\n        const subscription = new VentClientSubscription(this, name);\\n        this.add(subscription);\\n\\n        return subscription.subscribe(...args);\\n    }\\n\\n    listen(ddpConnection) {\\n        ddpConnection._stream.on('message', (raw_msg) => {\\n            // avoid parsing unnecessary ddp events\\n            const search = `{\\\"msg\\\":\\\"changed\\\",\\\"${VentConstants.PREFIX}\\\":\\\"1`;\\n            if (raw_msg.substr(0, search.length) !== search) {\\n                return;\\n            }\\n\\n            const msg = DDPCommon.parseDDP(raw_msg);\\n            const subscription = this.store[msg.id];\\n            if (subscription) {\\n                subscription.handle(msg[VentConstants.EVENT_VARIABLE]);\\n            }\\n        });\\n    }\\n\\n    /**\\n     * {VentClientSubscription}\\n     * @param subscription\\n     */\\n    add(subscription) {\\n        this.store[subscription.id] = subscription;\\n    }\\n\\n    /**\\n     * @param {VentClientSubscription} subscription\\n     */\\n    remove(subscription) {\\n        delete this.store[subscription.id];\\n    }\\n}\\n\\n/**\\n * Handles Vent subscription\\n */\\nclass VentClientSubscription {\\n    constructor(client, name) {\\n        this.client = client;\\n        this._name = name;\\n        this._id = Random.id();\\n    }\\n\\n    get id() {\\n        return VentConstants.getPrefix(this._id, this._name);\\n    }\\n\\n    /**\\n     * Subscribes to Meteor\\n     *\\n     * @param args\\n     * @returns {*}\\n     */\\n    subscribe(...args) {\\n        const self = this;\\n\\n        const handler = Meteor.subscribe(this._name, this._id, ...args);\\n\\n        const oldStop = handler.stop;\\n        Object.assign(handler, {\\n            listen(eventHandler) {\\n                if (!_.isFunction(eventHandler)) {\\n                    throw new Meteor.Error('invalid-argument', 'You should pass a function to listen()');\\n                }\\n\\n                self._eventHandler = eventHandler;\\n            },\\n            stop() {\\n                self.client.remove(self);\\n\\n                return oldStop.call(handler);\\n            }\\n        });\\n\\n        return handler;\\n    }\\n\\n    /**\\n     * Watches the incomming events\\n     */\\n    handle(event) {\\n        if (this._eventHandler) {\\n            this._eventHandler(event);\\n        } else {\\n\\n        }\\n    }\\n}\"]}","minifier":"terser"}
{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,n=Package.meteor.meteorEnv,r=Package.check.check,a=Package.check.Match,i=Package.random.Random,o=Package.ejson.EJSON,s=Package.tracker.Tracker,c=Package.tracker.Deps,u=Package.retry.Retry,l=Package.modules.meteorInstall,d=Package[\"babel-runtime\"].meteorBabelHelpers,m=Package.promise.Promise,h=Package[\"ecmascript-runtime-client\"].Symbol,f=Package[\"ecmascript-runtime-client\"].Map,b=Package[\"ecmascript-runtime-client\"].Set,_,p=l({node_modules:{meteor:{\"ddp-common\":{\"namespace.js\":function(){_={}},\"heartbeat.js\":function(){_.Heartbeat=function(){function t(e){this.heartbeatInterval=e.heartbeatInterval,this.heartbeatTimeout=e.heartbeatTimeout,this._sendPing=e.sendPing,this._onTimeout=e.onTimeout,this._seenPacket=!1,this._heartbeatIntervalHandle=null,this._heartbeatTimeoutHandle=null}var n=t.prototype;return n.stop=function(){function e(){this._clearHeartbeatIntervalTimer(),this._clearHeartbeatTimeoutTimer()}return e}(),n.start=function(){function e(){this.stop(),this._startHeartbeatIntervalTimer()}return e}(),n._startHeartbeatIntervalTimer=function(){function t(){var t=this;this._heartbeatIntervalHandle=e.setInterval(function(){return t._heartbeatIntervalFired()},this.heartbeatInterval)}return t}(),n._startHeartbeatTimeoutTimer=function(){function t(){var t=this;this._heartbeatTimeoutHandle=e.setTimeout(function(){return t._heartbeatTimeoutFired()},this.heartbeatTimeout)}return t}(),n._clearHeartbeatIntervalTimer=function(){function t(){this._heartbeatIntervalHandle&&(e.clearInterval(this._heartbeatIntervalHandle),this._heartbeatIntervalHandle=null)}return t}(),n._clearHeartbeatTimeoutTimer=function(){function t(){this._heartbeatTimeoutHandle&&(e.clearTimeout(this._heartbeatTimeoutHandle),this._heartbeatTimeoutHandle=null)}return t}(),n._heartbeatIntervalFired=function(){function e(){this._seenPacket||this._heartbeatTimeoutHandle||(this._sendPing(),this._startHeartbeatTimeoutTimer()),this._seenPacket=!1}return e}(),n._heartbeatTimeoutFired=function(){function e(){this._heartbeatTimeoutHandle=null,this._onTimeout()}return e}(),n.messageReceived=function(){function e(){this._seenPacket=!0,this._heartbeatTimeoutHandle&&this._clearHeartbeatTimeoutTimer()}return e}(),t}()},\"utils.js\":function(t,n,r){\"use strict\";var a,i=t(\"@babel/runtime/helpers/interopRequireDefault\")(t(\"@babel/runtime/helpers/typeof\"));r.export({hasOwn:function(){return s},slice:function(){return c},keys:function(){return u},isEmpty:function(){return l},last:function(){return m}});var s=Object.prototype.hasOwnProperty,c=Array.prototype.slice;function u(e){return Object.keys(Object(e))}function l(e){if(null==e)return!0;if(Array.isArray(e)||\"string\"==typeof e)return 0===e.length;for(var t in d.sanitizeForInObject(e))if(s.call(e,t))return!1;return!0}function m(e,t,n){if(null!=e)return null==t||n?e[e.length-1]:c.call(e,Math.max(e.length-t,0))}_.SUPPORTED_DDP_VERSIONS=[\"1\",\"pre2\",\"pre1\"],_.parseDDP=function(t){try{var n=JSON.parse(t)}catch(n){return e._debug(\"Discarding message with invalid JSON\",t),null}return null===n||\"object\"!==(0,i.default)(n)?(e._debug(\"Discarding non-object DDP message\",t),null):(s.call(n,\"cleared\")&&(s.call(n,\"fields\")||(n.fields={}),n.cleared.forEach(function(e){n.fields[e]=void 0}),delete n.cleared),[\"fields\",\"params\",\"result\"].forEach(function(e){s.call(n,e)&&(n[e]=o._adjustTypesFromJSONValue(n[e]))}),n)},_.stringifyDDP=function(e){var t=o.clone(e);if(s.call(e,\"fields\")){var n=[];Object.keys(e.fields).forEach(function(r){var a;void 0===e.fields[r]&&(n.push(r),delete t.fields[r])}),l(n)||(t.cleared=n),l(t.fields)&&delete t.fields}if([\"fields\",\"params\",\"result\"].forEach(function(e){s.call(t,e)&&(t[e]=o._adjustTypesToJSONValue(t[e]))}),e.id&&\"string\"!=typeof e.id)throw new Error(\"Message id is not a string\");return JSON.stringify(t)}},\"method_invocation.js\":function(){_.MethodInvocation=function(){function e(e){this.isSimulation=e.isSimulation,this._unblock=e.unblock||function(){},this._calledUnblock=!1,this.userId=e.userId,this._setUserId=e.setUserId||function(){},this.connection=e.connection,this.randomSeed=e.randomSeed,this.randomStream=null}var t=e.prototype;return t.unblock=function(){function e(){this._calledUnblock=!0,this._unblock()}return e}(),t.setUserId=function(){function e(e){if(this._calledUnblock)throw new Error(\"Can't call setUserId in a method after calling unblock\");this.userId=e,this._setUserId(e)}return e}(),e}()},\"random_stream.js\":function(){function e(){return i.hexString(20)}_.RandomStream=function(){function t(t){this.seed=[].concat(t.seed||e()),this.sequences=Object.create(null)}var n;return t.prototype._sequence=function(){function e(e){var t=this,n=this.sequences[e]||null;if(null===n){for(var r=this.seed.concat(e),a=0;a<r.length;a++)\"function\"==typeof r[a]&&(r[a]=r[a]());this.sequences[e]=n=i.createWithSeeds.apply(null,r)}return n}return e}(),t}(),_.RandomStream.get=function(e,t){if(t||(t=\"default\"),!e)return i.insecure;var n=e.randomStream;return n||(e.randomStream=n=new _.RandomStream({seed:e.randomSeed})),n._sequence(t)},_.makeRpcSeed=function(e,t){var n;return _.RandomStream.get(e,\"/rpc/\"+t).hexString(20)}}}}}},{extensions:[\".js\",\".json\"]});p(\"/node_modules/meteor/ddp-common/namespace.js\"),p(\"/node_modules/meteor/ddp-common/heartbeat.js\"),p(\"/node_modules/meteor/ddp-common/utils.js\"),p(\"/node_modules/meteor/ddp-common/method_invocation.js\"),p(\"/node_modules/meteor/ddp-common/random_stream.js\"),Package._define(\"ddp-common\",{DDPCommon:_})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/ddp-common/namespace.js\",\"packages/ddp-common/heartbeat.js\",\"packages/ddp-common/utils.js\",\"packages/ddp-common/method_invocation.js\",\"packages/ddp-common/random_stream.js\"],\"names\":[\"DDPCommon\",\"Heartbeat\",\"options\",\"this\",\"heartbeatInterval\",\"heartbeatTimeout\",\"_sendPing\",\"sendPing\",\"_onTimeout\",\"onTimeout\",\"_seenPacket\",\"_heartbeatIntervalHandle\",\"_heartbeatTimeoutHandle\",\"_proto\",\"prototype\",\"stop\",\"_clearHeartbeatIntervalTimer\",\"_clearHeartbeatTimeoutTimer\",\"start\",\"_startHeartbeatIntervalTimer\",\"_this\",\"Meteor\",\"setInterval\",\"_heartbeatIntervalFired\",\"_startHeartbeatTimeoutTimer\",\"_this2\",\"setTimeout\",\"_heartbeatTimeoutFired\",\"clearInterval\",\"clearTimeout\",\"messageReceived\",\"module\",\"export\",\"hasOwn\",\"slice\",\"keys\",\"isEmpty\",\"last\",\"Object\",\"hasOwnProperty\",\"Array\",\"obj\",\"isArray\",\"length\",\"key\",\"meteorBabelHelpers\",\"sanitizeForInObject\",\"call\",\"array\",\"n\",\"guard\",\"Math\",\"max\",\"SUPPORTED_DDP_VERSIONS\",\"parseDDP\",\"stringMessage\",\"msg\",\"JSON\",\"parse\",\"e\",\"_debug\",\"_typeof2\",\"default\",\"fields\",\"cleared\",\"forEach\",\"clearKey\",\"undefined\",\"field\",\"EJSON\",\"_adjustTypesFromJSONValue\",\"stringifyDDP\",\"copy\",\"clone\",\"value\",\"push\",\"_adjustTypesToJSONValue\",\"id\",\"Error\",\"stringify\",\"MethodInvocation\",\"isSimulation\",\"_unblock\",\"unblock\",\"_calledUnblock\",\"userId\",\"_setUserId\",\"setUserId\",\"connection\",\"randomSeed\",\"randomStream\",\"randomToken\",\"Random\",\"hexString\",\"RandomStream\",\"seed\",\"concat\",\"sequences\",\"create\",\"_sequence\",\"name\",\"self\",\"sequence\",\"sequenceSeed\",\"i\",\"createWithSeeds\",\"apply\",\"get\",\"scope\",\"insecure\",\"makeRpcSeed\",\"enclosing\",\"methodName\",\"stream\"],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * @namespace DDPCommon\\n * @summary Namespace for DDPCommon-related methods/classes. Shared between \\n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation\\n * of a ddp client for both client AND server; and the ddp server is the\\n * implementation of the livedata server and stream server. Common \\n * functionality shared between both can be shared under this namespace\\n */\\nDDPCommon = {};\\n\",\"// Heartbeat options:\\n//   heartbeatInterval: interval to send pings, in milliseconds.\\n//   heartbeatTimeout: timeout to close the connection if a reply isn't\\n//     received, in milliseconds.\\n//   sendPing: function to call to send a ping on the connection.\\n//   onTimeout: function to call to close the connection.\\n\\nDDPCommon.Heartbeat = class Heartbeat {\\n  constructor(options) {\\n    this.heartbeatInterval = options.heartbeatInterval;\\n    this.heartbeatTimeout = options.heartbeatTimeout;\\n    this._sendPing = options.sendPing;\\n    this._onTimeout = options.onTimeout;\\n    this._seenPacket = false;\\n\\n    this._heartbeatIntervalHandle = null;\\n    this._heartbeatTimeoutHandle = null;\\n  }\\n\\n  stop() {\\n    this._clearHeartbeatIntervalTimer();\\n    this._clearHeartbeatTimeoutTimer();\\n  }\\n\\n  start() {\\n    this.stop();\\n    this._startHeartbeatIntervalTimer();\\n  }\\n\\n  _startHeartbeatIntervalTimer() {\\n    this._heartbeatIntervalHandle = Meteor.setInterval(\\n      () => this._heartbeatIntervalFired(),\\n      this.heartbeatInterval\\n    );\\n  }\\n\\n  _startHeartbeatTimeoutTimer() {\\n    this._heartbeatTimeoutHandle = Meteor.setTimeout(\\n      () => this._heartbeatTimeoutFired(),\\n      this.heartbeatTimeout\\n    );\\n  }\\n\\n  _clearHeartbeatIntervalTimer() {\\n    if (this._heartbeatIntervalHandle) {\\n      Meteor.clearInterval(this._heartbeatIntervalHandle);\\n      this._heartbeatIntervalHandle = null;\\n    }\\n  }\\n\\n  _clearHeartbeatTimeoutTimer() {\\n    if (this._heartbeatTimeoutHandle) {\\n      Meteor.clearTimeout(this._heartbeatTimeoutHandle);\\n      this._heartbeatTimeoutHandle = null;\\n    }\\n  }\\n\\n  // The heartbeat interval timer is fired when we should send a ping.\\n  _heartbeatIntervalFired() {\\n    // don't send ping if we've seen a packet since we last checked,\\n    // *or* if we have already sent a ping and are awaiting a timeout.\\n    // That shouldn't happen, but it's possible if\\n    // `this.heartbeatInterval` is smaller than\\n    // `this.heartbeatTimeout`.\\n    if (! this._seenPacket && ! this._heartbeatTimeoutHandle) {\\n      this._sendPing();\\n      // Set up timeout, in case a pong doesn't arrive in time.\\n      this._startHeartbeatTimeoutTimer();\\n    }\\n    this._seenPacket = false;\\n  }\\n\\n  // The heartbeat timeout timer is fired when we sent a ping, but we\\n  // timed out waiting for the pong.\\n  _heartbeatTimeoutFired() {\\n    this._heartbeatTimeoutHandle = null;\\n    this._onTimeout();\\n  }\\n\\n  messageReceived() {\\n    // Tell periodic checkin that we have seen a packet, and thus it\\n    // does not need to send a ping this cycle.\\n    this._seenPacket = true;\\n    // If we were waiting for a pong, we got it.\\n    if (this._heartbeatTimeoutHandle) {\\n      this._clearHeartbeatTimeoutTimer();\\n    }\\n  }\\n};\\n\",\"\\\"use strict\\\";\\n\\nexport const hasOwn = Object.prototype.hasOwnProperty;\\nexport const slice = Array.prototype.slice;\\n\\nexport function keys(obj) {\\n  return Object.keys(Object(obj));\\n}\\n\\nexport function isEmpty(obj) {\\n  if (obj == null) {\\n    return true;\\n  }\\n\\n  if (Array.isArray(obj) ||\\n      typeof obj === \\\"string\\\") {\\n    return obj.length === 0;\\n  }\\n\\n  for (const key in obj) {\\n    if (hasOwn.call(obj, key)) {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n\\nexport function last(array, n, guard) {\\n  if (array == null) {\\n    return;\\n  }\\n\\n  if ((n == null) || guard) {\\n    return array[array.length - 1];\\n  }\\n\\n  return slice.call(array, Math.max(array.length - n, 0));\\n}\\n\\nDDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];\\n\\nDDPCommon.parseDDP = function (stringMessage) {\\n  try {\\n    var msg = JSON.parse(stringMessage);\\n  } catch (e) {\\n    Meteor._debug(\\\"Discarding message with invalid JSON\\\", stringMessage);\\n    return null;\\n  }\\n  // DDP messages must be objects.\\n  if (msg === null || typeof msg !== 'object') {\\n    Meteor._debug(\\\"Discarding non-object DDP message\\\", stringMessage);\\n    return null;\\n  }\\n\\n  // massage msg to get it into \\\"abstract ddp\\\" rather than \\\"wire ddp\\\" format.\\n\\n  // switch between \\\"cleared\\\" rep of unsetting fields and \\\"undefined\\\"\\n  // rep of same\\n  if (hasOwn.call(msg, 'cleared')) {\\n    if (! hasOwn.call(msg, 'fields')) {\\n      msg.fields = {};\\n    }\\n    msg.cleared.forEach(clearKey => {\\n      msg.fields[clearKey] = undefined;\\n    });\\n    delete msg.cleared;\\n  }\\n\\n  ['fields', 'params', 'result'].forEach(field => {\\n    if (hasOwn.call(msg, field)) {\\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\\n    }\\n  });\\n\\n  return msg;\\n};\\n\\nDDPCommon.stringifyDDP = function (msg) {\\n  const copy = EJSON.clone(msg);\\n\\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields\\n  // and cleared' rep\\n  if (hasOwn.call(msg, 'fields')) {\\n    const cleared = [];\\n\\n    Object.keys(msg.fields).forEach(key => {\\n      const value = msg.fields[key];\\n\\n      if (typeof value === \\\"undefined\\\") {\\n        cleared.push(key);\\n        delete copy.fields[key];\\n      }\\n    });\\n\\n    if (! isEmpty(cleared)) {\\n      copy.cleared = cleared;\\n    }\\n\\n    if (isEmpty(copy.fields)) {\\n      delete copy.fields;\\n    }\\n  }\\n\\n  // adjust types to basic\\n  ['fields', 'params', 'result'].forEach(field => {\\n    if (hasOwn.call(copy, field)) {\\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\\n    }\\n  });\\n\\n  if (msg.id && typeof msg.id !== 'string') {\\n    throw new Error(\\\"Message id is not a string\\\");\\n  }\\n\\n  return JSON.stringify(copy);\\n};\\n\",\"// Instance name is this because it is usually referred to as this inside a\\n// method definition\\n/**\\n * @summary The state for a single invocation of a method, referenced by this\\n * inside a method definition.\\n * @param {Object} options\\n * @instanceName this\\n * @showInstanceName true\\n */\\nDDPCommon.MethodInvocation = class MethodInvocation {\\n  constructor(options) {\\n    // true if we're running not the actual method, but a stub (that is,\\n    // if we're on a client (which may be a browser, or in the future a\\n    // server connecting to another server) and presently running a\\n    // simulation of a server-side method for latency compensation\\n    // purposes). not currently true except in a client such as a browser,\\n    // since there's usually no point in running stubs unless you have a\\n    // zero-latency connection to the user.\\n\\n    /**\\n     * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\\n     * @locus Anywhere\\n     * @name  isSimulation\\n     * @memberOf DDPCommon.MethodInvocation\\n     * @instance\\n     * @type {Boolean}\\n     */\\n    this.isSimulation = options.isSimulation;\\n\\n    // call this function to allow other method invocations (from the\\n    // same client) to continue running without waiting for this one to\\n    // complete.\\n    this._unblock = options.unblock || function () {};\\n    this._calledUnblock = false;\\n\\n    // current user id\\n\\n    /**\\n     * @summary The id of the user that made this method call, or `null` if no user was logged in.\\n     * @locus Anywhere\\n     * @name  userId\\n     * @memberOf DDPCommon.MethodInvocation\\n     * @instance\\n     */\\n    this.userId = options.userId;\\n\\n    // sets current user id in all appropriate server contexts and\\n    // reruns subscriptions\\n    this._setUserId = options.setUserId || function () {};\\n\\n    // On the server, the connection this method call came in on.\\n\\n    /**\\n     * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.\\n     * @locus Server\\n     * @name  connection\\n     * @memberOf DDPCommon.MethodInvocation\\n     * @instance\\n     */\\n    this.connection = options.connection;\\n\\n    // The seed for randomStream value generation\\n    this.randomSeed = options.randomSeed;\\n\\n    // This is set by RandomStream.get; and holds the random stream state\\n    this.randomStream = null;\\n  }\\n\\n  /**\\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\\n   * @locus Server\\n   * @memberOf DDPCommon.MethodInvocation\\n   * @instance\\n   */\\n  unblock() {\\n    this._calledUnblock = true;\\n    this._unblock();\\n  }\\n\\n  /**\\n   * @summary Set the logged in user.\\n   * @locus Server\\n   * @memberOf DDPCommon.MethodInvocation\\n   * @instance\\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\\n   */\\n  setUserId(userId) {\\n    if (this._calledUnblock) {\\n      throw new Error(\\\"Can't call setUserId in a method after calling unblock\\\");\\n    }\\n    this.userId = userId;\\n    this._setUserId(userId);\\n  }\\n};\\n\",\"// RandomStream allows for generation of pseudo-random values, from a seed.\\n//\\n// We use this for consistent 'random' numbers across the client and server.\\n// We want to generate probably-unique IDs on the client, and we ideally want\\n// the server to generate the same IDs when it executes the method.\\n//\\n// For generated values to be the same, we must seed ourselves the same way,\\n// and we must keep track of the current state of our pseudo-random generators.\\n// We call this state the scope. By default, we use the current DDP method\\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.\\n// If a randomSeed is provided it will be used to seed our random sequences.\\n// In this way, client and server method calls will generate the same values.\\n//\\n// We expose multiple named streams; each stream is independent\\n// and is seeded differently (but predictably from the name).\\n// By using multiple streams, we support reordering of requests,\\n// as long as they occur on different streams.\\n//\\n// @param options {Optional Object}\\n//   seed: Array or value - Seed value(s) for the generator.\\n//                          If an array, will be used as-is\\n//                          If a value, will be converted to a single-value array\\n//                          If omitted, a random array will be used as the seed.\\nDDPCommon.RandomStream = class RandomStream {\\n  constructor(options) {\\n    this.seed = [].concat(options.seed || randomToken());\\n    this.sequences = Object.create(null);\\n  }\\n\\n  // Get a random sequence with the specified name, creating it if does not exist.\\n  // New sequences are seeded with the seed concatenated with the name.\\n  // By passing a seed into Random.create, we use the Alea generator.\\n  _sequence(name) {\\n    var self = this;\\n\\n    var sequence = self.sequences[name] || null;\\n    if (sequence === null) {\\n      var sequenceSeed = self.seed.concat(name);\\n      for (var i = 0; i < sequenceSeed.length; i++) {\\n        if (typeof sequenceSeed[i] === \\\"function\\\") {\\n          sequenceSeed[i] = sequenceSeed[i]();\\n        }\\n      }\\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);\\n    }\\n    return sequence;\\n  }\\n};\\n\\n// Returns a random string of sufficient length for a random seed.\\n// This is a placeholder function; a similar function is planned\\n// for Random itself; when that is added we should remove this function,\\n// and call Random's randomToken instead.\\nfunction randomToken() {\\n  return Random.hexString(20);\\n};\\n\\n// Returns the random stream with the specified name, in the specified\\n// scope. If a scope is passed, then we use that to seed a (not\\n// cryptographically secure) PRNG using the fast Alea algorithm.  If\\n// scope is null (or otherwise falsey) then we use a generated seed.\\n//\\n// However, scope will normally be the current DDP method invocation,\\n// so we'll use the stream with the specified name, and we should get\\n// consistent values on the client and server sides of a method call.\\nDDPCommon.RandomStream.get = function (scope, name) {\\n  if (!name) {\\n    name = \\\"default\\\";\\n  }\\n  if (!scope) {\\n    // There was no scope passed in; the sequence won't actually be\\n    // reproducible. but make it fast (and not cryptographically\\n    // secure) anyways, so that the behavior is similar to what you'd\\n    // get by passing in a scope.\\n    return Random.insecure;\\n  }\\n  var randomStream = scope.randomStream;\\n  if (!randomStream) {\\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({\\n      seed: scope.randomSeed\\n    });\\n  }\\n  return randomStream._sequence(name);\\n};\\n\\n// Creates a randomSeed for passing to a method call.\\n// Note that we take enclosing as an argument,\\n// though we expect it to be DDP._CurrentMethodInvocation.get()\\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant\\n// invocation may not be the one currently in scope.\\n// If enclosing is null, we'll use Random and values won't be repeatable.\\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {\\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);\\n  return stream.hexString(20);\\n};\\n\"]}","minifier":"terser"}
{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,n=Package.meteor.meteorEnv,r=Package.ejson.EJSON,o=Package[\"id-map\"].IdMap,i=Package.random.Random,a=Package.modules.meteorInstall,u=Package[\"babel-runtime\"].meteorBabelHelpers,s=Package.promise.Promise,c=Package[\"ecmascript-runtime-client\"].Symbol,f=Package[\"ecmascript-runtime-client\"].Map,l=Package[\"ecmascript-runtime-client\"].Set,m,d,g=a({node_modules:{meteor:{\"mongo-id\":{\"id.js\":function(e,t,n){var r,o=e(\"@babel/runtime/helpers/interopRequireDefault\")(e(\"@babel/runtime/helpers/typeof\")),i,a;n.export({MongoID:function(){return u}}),n.link(\"meteor/ejson\",{EJSON:function(e){i=e}},0),n.link(\"meteor/random\",{Random:function(e){a=e}},1);var u={_looksLikeObjectID:function(e){return 24===e.length&&e.match(/^[0-9a-f]*$/)}};u.ObjectID=function(){function e(e){if(e){if(e=e.toLowerCase(),!u._looksLikeObjectID(e))throw new Error(\"Invalid hexadecimal string for creating an ObjectID\");this._str=e}else this._str=a.hexString(24)}var t=e.prototype;return t.equals=function(){function e(e){return e instanceof u.ObjectID&&this.valueOf()===e.valueOf()}return e}(),t.toString=function(){function e(){return'ObjectID(\"'+this._str+'\")'}return e}(),t.clone=function(){function e(){return new u.ObjectID(this._str)}return e}(),t.typeName=function(){function e(){return\"oid\"}return e}(),t.getTimestamp=function(){function e(){return Number.parseInt(this._str.substr(0,8),16)}return e}(),t.valueOf=function(){function e(){return this._str}return e}(),t.toJSONValue=function(){function e(){return this.valueOf()}return e}(),t.toHexString=function(){function e(){return this.valueOf()}return e}(),e}(),i.addType(\"oid\",function(e){return new u.ObjectID(e)}),u.idStringify=function(e){if(e instanceof u.ObjectID)return e.valueOf();if(\"string\"==typeof e)return\"\"===e?e:e.startsWith(\"-\")||e.startsWith(\"~\")||u._looksLikeObjectID(e)||e.startsWith(\"{\")?\"-\"+e:e;if(void 0===e)return\"-\";if(\"object\"===(0,o.default)(e)&&null!==e)throw new Error(\"Meteor does not currently support objects other than ObjectID as ids\");return\"~\"+JSON.stringify(e)},u.idParse=function(e){return\"\"===e?e:\"-\"===e?void 0:e.startsWith(\"-\")?e.substr(1):e.startsWith(\"~\")?JSON.parse(e.substr(1)):u._looksLikeObjectID(e)?new u.ObjectID(e):e}}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/mongo-id/id.js\");Package._define(\"mongo-id\",g,{MongoID:void 0})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/mongo-id/id.js\"],\"names\":[\"EJSON\",\"Random\",\"module\",\"export\",\"MongoID\",\"link\",\"v\",\"str\",\"length\",\"match\",\"ObjectID\",\"hexString\",\"toLowerCase\",\"_looksLikeObjectID\",\"Error\",\"this\",\"_str\",\"_proto\",\"prototype\",\"equals\",\"other\",\"valueOf\",\"toString\",\"clone\",\"typeName\",\"getTimestamp\",\"Number\",\"parseInt\",\"substr\",\"toJSONValue\",\"toHexString\",\"addType\",\"idStringify\",\"id\",\"startsWith\",\"undefined\",\"_typeof2\",\"default\",\"JSON\",\"stringify\",\"idParse\",\"parse\"],\"mappings\":\"gjBAAyCA,EAA4DC,EAArGC,EAAOC,QAAQC,QAAQ,WAAA,OAAIA,KAAoBF,EAAOG,KAAK,gBAAgBL,MAAD,SAAOM,GAAGN,EAAMM,IAAI,GAAcJ,EAAOG,KAAK,iBAAiBJ,OAAD,SAAQK,GAAGL,EAAOK,IAAI,GAG9J,IAAMF,GAENA,mBAA6B,SAAAG,GAAG,OAAmB,KAAfA,EAAIC,QAAiBD,EAAIE,MAAM,iBAEnEL,EAAQM,SAAR,WACE,SAAAA,EAAaC,GAEX,GAAIA,EAAW,CAEb,GADAA,EAAYA,EAAUC,eACjBR,EAAQS,mBAAmBF,GAC9B,MAAM,IAAIG,MAAM,uDAGlBC,KAAKC,KAAOL,OAEZI,KAAKC,KAAOf,EAAOU,UAAU,IAXnC,IAAAM,EAAAP,EAAAQ,UAAA,OAAAD,EAeEE,OAfF,WAeE,SAAAA,EAAOC,GACL,OAAOA,aAAiBhB,EAAQM,UAChCK,KAAKM,YAAcD,EAAMC,UAjB7B,OAAAF,EAAA,GAAAF,EAoBEK,SApBF,WAoBE,SAAAA,IACE,MAAA,aAAoBP,KAAKC,KAAzB,KArBJ,OAAAM,EAAA,GAAAL,EAwBEM,MAxBF,WAwBE,SAAAA,IACE,OAAO,IAAInB,EAAQM,SAASK,KAAKC,MAzBrC,OAAAO,EAAA,GAAAN,EA4BEO,SA5BF,WA4BE,SAAAA,IACE,MAAO,MA7BX,OAAAA,EAAA,GAAAP,EAgCEQ,aAhCF,WAgCE,SAAAA,IACE,OAAOC,OAAOC,SAASZ,KAAKC,KAAKY,OAAO,EAAG,GAAI,IAjCnD,OAAAH,EAAA,GAAAR,EAoCEI,QApCF,WAoCE,SAAAA,IACE,OAAON,KAAKC,KArChB,OAAAK,EAAA,GAAAJ,EAwCEY,YAxCF,WAwCE,SAAAA,IACE,OAAOd,KAAKM,UAzChB,OAAAQ,EAAA,GAAAZ,EA4CEa,YA5CF,WA4CE,SAAAA,IACE,OAAOf,KAAKM,UA7ChB,OAAAS,EAAA,GAAApB,EAAA,GAkDAV,EAAM+B,QAAQ,MAAO,SAAAxB,GAAG,OAAI,IAAIH,EAAQM,SAASH,KAEjDH,EAAQ4B,YAAc,SAACC,GACrB,GAAIA,aAAc7B,EAAQM,SACxB,OAAOuB,EAAGZ,UACL,GAAkB,iBAAPY,EAChB,MAAW,KAAPA,EACKA,EACEA,EAAGC,WAAW,MACdD,EAAGC,WAAW,MACd9B,EAAQS,mBAAmBoB,IAC3BA,EAAGC,WAAW,KACvB,IAAWD,EAEJA,EAEJ,QAAWE,IAAPF,EACT,MAAO,IACF,GAAkB,YAAd,EAAAG,EAAAC,SAAOJ,IAA0B,OAAPA,EACnC,MAAM,IAAInB,MAAM,wEAEhB,MAAA,IAAWwB,KAAKC,UAAUN,IAI9B7B,EAAQoC,QAAU,SAACP,GACjB,MAAW,KAAPA,EACKA,EACS,MAAPA,OACT,EACSA,EAAGC,WAAW,KAChBD,EAAGL,OAAO,GACRK,EAAGC,WAAW,KAChBI,KAAKG,MAAMR,EAAGL,OAAO,IACnBxB,EAAQS,mBAAmBoB,GAC7B,IAAI7B,EAAQM,SAASuB,GAErBA\",\"sourcesContent\":[\"import { EJSON } from 'meteor/ejson';\\nimport { Random } from 'meteor/random';\\n\\nconst MongoID = {};\\n\\nMongoID._looksLikeObjectID = str => str.length === 24 && str.match(/^[0-9a-f]*$/);\\n\\nMongoID.ObjectID = class ObjectID {\\n  constructor (hexString) {\\n    //random-based impl of Mongo ObjectID\\n    if (hexString) {\\n      hexString = hexString.toLowerCase();\\n      if (!MongoID._looksLikeObjectID(hexString)) {\\n        throw new Error('Invalid hexadecimal string for creating an ObjectID');\\n      }\\n      // meant to work with _.isEqual(), which relies on structural equality\\n      this._str = hexString;\\n    } else {\\n      this._str = Random.hexString(24);\\n    }\\n  }\\n\\n  equals(other) {\\n    return other instanceof MongoID.ObjectID &&\\n    this.valueOf() === other.valueOf();\\n  }\\n\\n  toString() {\\n    return `ObjectID(\\\"${this._str}\\\")`;\\n  }\\n\\n  clone() {\\n    return new MongoID.ObjectID(this._str);\\n  }\\n\\n  typeName() {\\n    return 'oid';\\n  }\\n  \\n  getTimestamp() {\\n    return Number.parseInt(this._str.substr(0, 8), 16);\\n  }\\n\\n  valueOf() {\\n    return this._str;\\n  }\\n\\n  toJSONValue() {\\n    return this.valueOf();\\n  }\\n\\n  toHexString() {\\n    return this.valueOf();\\n  }\\n\\n}\\n\\nEJSON.addType('oid', str => new MongoID.ObjectID(str));\\n\\nMongoID.idStringify = (id) => {\\n  if (id instanceof MongoID.ObjectID) {\\n    return id.valueOf();\\n  } else if (typeof id === 'string') {\\n    if (id === '') {\\n      return id;\\n    } else if (id.startsWith('-') || // escape previously dashed strings\\n               id.startsWith('~') || // escape escaped numbers, true, false\\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings\\n               id.startsWith('{')) { // escape object-form strings, for maybe implementing later\\n      return `-${id}`;\\n    } else {\\n      return id; // other strings go through unchanged.\\n    }\\n  } else if (id === undefined) {\\n    return '-';\\n  } else if (typeof id === 'object' && id !== null) {\\n    throw new Error('Meteor does not currently support objects other than ObjectID as ids');\\n  } else { // Numbers, true, false, null\\n    return `~${JSON.stringify(id)}`;\\n  }\\n};\\n\\nMongoID.idParse = (id) => {\\n  if (id === '') {\\n    return id;\\n  } else if (id === '-') {\\n    return undefined;\\n  } else if (id.startsWith('-')) {\\n    return id.substr(1);\\n  } else if (id.startsWith('~')) {\\n    return JSON.parse(id.substr(1));\\n  } else if (MongoID._looksLikeObjectID(id)) {\\n    return new MongoID.ObjectID(id);\\n  } else {\\n    return id;\\n  }\\n};\\n\\nexport { MongoID };\\n\"]}","minifier":"terser"}
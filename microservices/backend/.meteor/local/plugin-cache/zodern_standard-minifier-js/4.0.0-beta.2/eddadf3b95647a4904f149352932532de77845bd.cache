{"code":"!function(){var e=Package.meteor.Meteor,t=Package.meteor.global,n=Package.meteor.meteorEnv,o=Package.minimongo.LocalCollection,r=Package.minimongo.Minimongo,i=Package.underscore._,c=Package.ejson.EJSON,a=Package.random.Random,s=Package.modules.meteorInstall,l=Package[\"babel-runtime\"].meteorBabelHelpers,u=Package.promise.Promise,d,g;s({node_modules:{meteor:{\"dburles:factory\":{\"factory.js\":function(){const e={};(d=class e{constructor(e,t,n){this.name=e,this.collection=t,this.attributes=n,this.afterHooks=[],this.sequence=0}after(e){return this.afterHooks.push(e),this}}).define=((t,n,o)=>(e[t]=new d(t,n,o),e[t])),d.get=(t=>{const n=e[t];if(!n)throw new Error(\"Factory: There is no factory named \"+t);return n}),d._build=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const c=d.get(e),s={},l=i.extend({},c.attributes,t),u=e=>r.insert?d.create(e,{},n)._id:r.tree?d._build(e,{},n,{tree:!0}):a.id(),g=e=>e instanceof d?u(e.name):e,f=e=>{const t={sequence:e=>e(c.sequence)},o=e.call(s,t,n);return g(o)};c.sequence+=1;const m=(e,t)=>{i.each(t,(t,n)=>{let r=t;if(t instanceof d)r=u(t.name);else if(i.isArray(t))r=t.map(e=>i.isFunction(e)?f(e):g(e));else if(i.isFunction(t))r=f(t);else if(\"[object Object]\"===Object.prototype.toString.call(t))return e[n]=e[n]||{},m(e[n],t);const c={$set:{}};\"_id\"!==n&&(c.$set[n]=r),o._modify(e,c)})};return m(s,l),r.tree||(s._id=l._id||a.id()),s},d.build=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return d._build(e,t,n)},d.tree=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return d._build(e,t,n,{tree:!0})},d._create=((e,t)=>{const n=d.get(e).collection,o=n.insert(t),r=n.findOne(o);return r}),d.create=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const o=d._build(e,t,n,{insert:!0}),r=d._create(e,o);return d.get(e).afterHooks.forEach(e=>e(r)),r},d.extend=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return i.extend(i.clone(d.get(e).attributes),t)}}}}}},{extensions:[\".js\",\".json\"]})(\"/node_modules/meteor/dburles:factory/factory.js\"),Package._define(\"dburles:factory\",{Factory:d})}();","sourcemap":"{\"version\":3,\"sources\":[\"packages/dburles:factory/factory.js\"],\"names\":[\"factories\",\"Factory\",\"constructor\",\"name\",\"collection\",\"attributes\",\"this\",\"afterHooks\",\"sequence\",\"after\",\"fn\",\"push\",\"define\",\"get\",\"factory\",\"Error\",\"_build\",\"arguments\",\"length\",\"undefined\",\"userOptions\",\"options\",\"result\",\"extendedAttributes\",\"_\",\"extend\",\"makeRelation\",\"relName\",\"insert\",\"create\",\"_id\",\"tree\",\"Random\",\"id\",\"getValue\",\"value\",\"getValueFromFunction\",\"func\",\"api\",\"fnRes\",\"call\",\"walk\",\"record\",\"object\",\"each\",\"key\",\"newValue\",\"isArray\",\"map\",\"element\",\"isFunction\",\"Object\",\"prototype\",\"toString\",\"modifier\",\"$set\",\"LocalCollection\",\"_modify\",\"build\",\"_create\",\"doc\",\"insertId\",\"findOne\",\"forEach\",\"cb\",\"clone\"],\"mappings\":\"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\",\"sourcesContent\":[\"/* global LocalCollection */\\n/* global Factory:true */\\n\\nconst factories = {};\\n\\nFactory = class Factory {\\n  constructor(name, collection, attributes) {\\n    this.name = name;\\n    this.collection = collection;\\n    this.attributes = attributes;\\n    this.afterHooks = [];\\n    this.sequence = 0;\\n  }\\n\\n  after(fn) {\\n    this.afterHooks.push(fn);\\n    return this;\\n  }\\n};\\n\\nFactory.define = (name, collection, attributes) => {\\n  factories[name] = new Factory(name, collection, attributes);\\n  return factories[name];\\n};\\n\\nFactory.get = name => {\\n  const factory = factories[name];\\n  if (! factory) {\\n    throw new Error(\\\"Factory: There is no factory named \\\" + name);\\n  }\\n  return factory;\\n};\\n\\nFactory._build = (name, attributes = {}, userOptions = {}, options = {}) => {\\n  const factory = Factory.get(name);\\n  const result = {};\\n\\n  // \\\"raw\\\" attributes without functions evaluated, or dotted properties resolved\\n  const extendedAttributes = _.extend({}, factory.attributes, attributes);\\n\\n  // either create a new factory and return its _id\\n  // or return a 'fake' _id (since we're not inserting anything)\\n  const makeRelation = relName => {\\n    if (options.insert) {\\n      return Factory.create(relName, {}, userOptions)._id;\\n    }\\n    if (options.tree) {\\n      return Factory._build(relName, {}, userOptions, {tree: true});\\n    }\\n    // fake an id on build\\n    return Random.id();\\n  };\\n\\n  const getValue = value => {\\n    return (value instanceof Factory) ? makeRelation(value.name) : value;\\n  };\\n\\n  const getValueFromFunction = func => {\\n    const api = { sequence: fn => fn(factory.sequence) };\\n    const fnRes = func.call(result, api, userOptions);\\n    return getValue(fnRes);\\n  };\\n\\n  factory.sequence += 1;\\n\\n  const walk = (record, object) => {\\n    _.each(object, (value, key) => {\\n      let newValue = value;\\n      // is this a Factory instance?\\n      if (value instanceof Factory) {\\n        newValue = makeRelation(value.name);\\n      } else if (_.isArray(value)) {\\n        newValue = value.map(element => {\\n          if (_.isFunction(element)) {\\n            return getValueFromFunction(element);\\n          }\\n          return getValue(element);\\n        });\\n      } else if (_.isFunction(value)) {\\n        newValue = getValueFromFunction(value);\\n      // if an object literal is passed in, traverse deeper into it\\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {\\n        record[key] = record[key] || {};\\n        return walk(record[key], value);\\n      }\\n\\n      const modifier = {$set: {}};\\n\\n      if (key !== '_id') {\\n        modifier.$set[key] = newValue;\\n      }\\n\\n      LocalCollection._modify(record, modifier);\\n    });\\n  };\\n\\n  walk(result, extendedAttributes);\\n\\n  if (! options.tree) {\\n    result._id = extendedAttributes._id || Random.id();\\n  }\\n  return result;\\n};\\n\\nFactory.build = (name, attributes = {}, userOptions = {}) => {\\n  return Factory._build(name, attributes, userOptions);\\n};\\n\\nFactory.tree = (name, attributes, userOptions = {}) => {\\n  return Factory._build(name, attributes, userOptions, {tree: true});\\n};\\n\\nFactory._create = (name, doc) => {\\n  const collection = Factory.get(name).collection;\\n  const insertId = collection.insert(doc);\\n  const record = collection.findOne(insertId);\\n  return record;\\n};\\n\\nFactory.create = (name, attributes = {}, userOptions = {}) => {\\n  const doc = Factory._build(name, attributes, userOptions, {insert: true});\\n  const record = Factory._create(name, doc);\\n\\n  Factory.get(name).afterHooks.forEach(cb => cb(record));\\n\\n  return record;\\n};\\n\\nFactory.extend = (name, attributes = {}) => {\\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);\\n};\\n\"]}","minifier":"terser"}
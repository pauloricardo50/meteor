defaults: &defaults
  working_directory: ~/app



version: 2
jobs:
  build:
    <<: *defaults
    docker:
    - image: circleci/openjdk:8-jdk-browsers
      environment:
        # lang settings required for Meteor's Mongo
        LANG: C.UTF-8
        LANGUAGE: C.UTF-8
        LC_ALL: C.UTF-8
        LC_NUMERIC: en_US.UTF-8
        METEOR_BIN_TMP_DIR: /home/circleci/build-temp/
        METEOR_BIN_TMP_FILE: meteor-bin-temp
        # TZ: "/usr/share/zoneinfo/Europe/Zurich"
        NODE_ENV: development
        TOOL_NODE_FLAGS: "--max_old_space_size=4096 --optimize_for_size --gc-interval=100" # if builds run out of memory
        # METEOR_PROFILE: 1 # If you need to debug meteor, turn this on
    - image: cypress/browsers:chrome65-ff57
      environment:
        ## this enables colors in the output
        TERM: xterm
    steps:
      - checkout
      - add_ssh_keys
      
      - restore_cache:
          name: restore system's meteor cached build
          keys:
            - build-epotek-v3-meteor-system
      - restore_cache:
          name: restore root cached node_modules
          keys:
            - build-epotek-v2-node_modules-{{ checksum "./package.json" }}
      - restore_cache:
          name: restore core cached node_modules
          keys:
            - build-epotek-v2-node_modules-{{ checksum "./core/package.json" }}
      - restore_cache:
          name: restore app's meteor cached build
          keys:
            - build-epotek-v2-meteor-{{ checksum "./microservices/app/.meteor/release" }}-{{ checksum "./microservices/app/.meteor/packages" }}
      - restore_cache:
          name: restore app's cached node_modules
          keys:
            - build-epotek-v2-node_modules-{{ checksum "./microservices/app/package.json" }}
      - restore_cache:
          name: restore admin's meteor cached build
          keys:
            - build-epotek-v2-meteor-{{ checksum "./microservices/admin/.meteor/release" }}-{{ checksum "./microservices/admin/.meteor/packages" }}
      - restore_cache:
          name: restore admin's cached node_modules
          keys:
            - build-epotek-v2-node_modules-{{ checksum "./microservices/admin/package.json" }}
      - restore_cache:
          name: restore www's meteor cached build
          keys:
            - build-epotek-v2-meteor-{{ checksum "./microservices/www/.meteor/release" }}-{{ checksum "./microservices/www/.meteor/packages" }}
      - restore_cache:
          name: restore www's cached node_modules
          keys:
            - build-epotek-v3-node_modules-{{ checksum "./microservices/www/package.json" }}

      - run:
          name: install Meteor
          command: |
            # Only install Meteor if bin isn't found:
            # link Meteor's binary if the ~/.meteor/meteor file exists
            # (if meteor cached directory is restored);
            # otherwise install Meteor
            if [[ -e $HOME/.meteor/meteor ]];
            then
              echo 'Meteor already found';
              sudo ln -s ~/.meteor/meteor /usr/local/bin/meteor;
            else
              echo 'Installing Meteor'
              curl https://install.meteor.com?release=1.6.1.1 | /bin/sh
            fi
      - run:
          name: check versions
          command: |
            echo "Meteor version:"
            # this forces Meteor to download whatever release your project is using
            meteor --version
            which meteor
            echo "Meteor node version:"
            meteor node -v
            echo "Meteor npm version:"
            meteor npm -v
            echo "Java version:"
            java -version
      - run:
          name: Setup microservices
          command: |
            sudo apt-get install libgconf-2-4
            sudo apt install rsync
            cd scripts
            ./setup.sh
      - run:
          name: create results directories
          command: mkdir ./results ./e2e-results
      - run:
          name: run end-to-end tests for Admin
          command: |
            cd microservices/admin
            meteor npm install --no-save start-server-and-test
            meteor npm run test-e2e-CI
      - run:
          name: run end-to-end tests for App
          command: |
            cd microservices/app
            meteor npm install --no-save start-server-and-test
            meteor npm run test-e2e-CI
      - run:
          name: run end-to-end tests for Www
          command: |
            cd microservices/www
            meteor npm install --no-save start-server-and-test
            meteor npm run test-e2e-CI
      - run:
          name: run tests for App
          command: |
            cd microservices/app
            # Using 3.6.0 because of this: https://github.com/meteortesting/meteor-mocha/issues/54
            # Using chromedriver 2.37 because 2.38 is incompatible with selenium >3.6.0
            meteor npm i selenium-webdriver@3.6.0 chromedriver@2.37.0 --no-save
            meteor npm run test-CI
      - run:
          name: run tests for admin
          command: |
            cd microservices/admin
            meteor npm i selenium-webdriver@3.6.0 chromedriver@2.37.0 --no-save
            meteor npm run test-CI      
      - run:
          name: copy meteor bin to build cache
          command: |
            mkdir -p ~/build-temp
            cp /usr/local/bin/meteor ~/build-temp/meteor-bin

      - save_cache:
          name: cache system's meteor build
          key: build-epotek-v2-meteor-system
          paths:
            - ~/.meteor
      - save_cache:
          name: cache root node_modules
          key: build-epotek-v2-node_modules-{{ checksum "./package.json" }}
          paths:
            - ./node_modules
      - save_cache:
          name: cache core node_modules
          key: build-epotek-v2-node_modules-{{ checksum "./core/package.json" }}
          paths:
            - ./core/node_modules
      - save_cache:
          name: cache app's meteor build
          key: build-epotek-v2-meteor-{{ checksum "./microservices/app/.meteor/release" }}-{{ checksum "./microservices/app/.meteor/packages" }}
          paths:
            - ./microservices/app/.meteor/local
      - save_cache:
          name: cache app's node_modules
          key: build-epotek-v2-node_modules-{{ checksum "./microservices/app/package.json" }}
          paths:
            - ./microservices/app/node_modules
      - save_cache:
          name: cache admin's meteor build
          key: build-epotek-v2-meteor-{{ checksum "./microservices/admin/.meteor/release" }}-{{ checksum "./microservices/admin/.meteor/packages" }}
          paths:
            - ./microservices/admin/.meteor/local
      - save_cache:
          name: cache admin's node_modules
          key: build-epotek-v2-node_modules-{{ checksum "./microservices/admin/package.json" }}
          paths:
            - ./microservices/admin/node_modules
      - save_cache:
          name: cache www's meteor build
          key: build-epotek-v2-meteor-{{ checksum "./microservices/www/.meteor/release" }}-{{ checksum "./microservices/www/.meteor/packages" }}
          paths:
            - ./microservices/www/.meteor/local
      - save_cache:
          name: cache www's node_modules
          key: build-epotek-v3-node_modules-{{ checksum "./microservices/www/package.json" }}
          paths:
            - ./microservices/www/node_modules

      - store_test_results:
          path: ./results
      - store_artifacts:
          path: ./results
      - store_test_results:
          path: ./e2e-results
      - store_artifacts:
          path: ./e2e-results
      - store_artifacts:
          path: ./e2e-results/cypress/www-screenshots
      - store_artifacts:
          path: ./e2e-results/cypress/www-videos
      - store_artifacts:
          path: ./e2e-results/cypress/app-screenshots
      - store_artifacts:
          path: ./e2e-results/cypress/app-videos
      - store_artifacts:
          path: ./e2e-results/cypress/admin-screenshots
      - store_artifacts:
          path: ./e2e-results/cypress/admin-videos
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - app

  deploy_admin:
    <<: *defaults
    machine:
      enabled: true
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: install Meteor
          command: |
            # only install meteor if bin isn't found
            command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | /bin/sh
      - run:
          name: Prepare deployment
          command: |
            echo $STAGING_SSH_KEY_BASE64|base64 --decode > .deployment/auth.pem
            npm install -g mup
            npm install -g babel-cli
      - run:
          no_output_timeout: 30m
          command: .deployment/deploy-staging.sh admin

  deploy_app:
    <<: *defaults
    machine:
      enabled: true
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: install Meteor
          command: |
            # only install meteor if bin isn't found
            command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | /bin/sh
      - run:
          name: Prepare deployment
          command: |
            echo $STAGING_SSH_KEY_BASE64|base64 --decode > .deployment/auth.pem
            npm install -g mup
            npm install -g babel-cli
      - run:
          no_output_timeout: 30m
          command: .deployment/deploy-staging.sh app

  deploy_www:
    <<: *defaults
    machine:
      enabled: true
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: install Meteor
          command: |
            # only install meteor if bin isn't found
            command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | /bin/sh
      - run:
          name: Prepare deployment
          command: |
            echo $STAGING_SSH_KEY_BASE64|base64 --decode > .deployment/auth.pem
            npm install -g mup
            npm install -g babel-cli
      - run:
          no_output_timeout: 30m
          command: .deployment/deploy-staging.sh www
 

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy_app:
          requires:
            - build
          filters:
            branches:
              only:
                - staging
      - deploy_admin:
          requires:
            - build
          filters:
            branches:
              only:
                - staging
      - deploy_www:
          requires:
            - build
          filters:
            branches:
              only:
                - staging

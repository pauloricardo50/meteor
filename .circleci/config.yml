version: 2
jobs:
  Prepare:
    working_directory: /home/circleci/app
    docker: &ref_0
      - image: 'cypress/base:12'
        environment:
          LANG: C.UTF-8
          LANGUAGE: C.UTF-8
          LC_ALL: C.UTF-8
          LC_NUMERIC: en_US.UTF-8
          METEOR_VERSION: 1.10.2
          NODE_ENV: development
          TOOL_NODE_FLAGS: >-
            --max_old_space_size=8192 --optimize_for_size --gc_interval=100
            --min_semi_space_size=8 --max_semi_space_size=256
          METEOR_PROFILE: 100
          CIRCLE_CI: 1
          DEBUG: false
          METEOR_ALLOW_SUPERUSER: true
          METEOR_DISABLE_OPTIMISTIC_CACHING: 1
          RTL_SKIP_AUTO_CLEANUP: 1
          HOME: /home/circleci
    resource_class: large
    steps:
      - restore_cache:
          name: Restore source
          keys:
            - 'source_master_16-{{ .Branch }}-{{ .Revision }}'
            - 'source_master_16-{{ .Branch }}-'
            - source_master_16-
      - checkout
      - run:
          name: Init submodules
          command: git submodule sync && git submodule update --init --recursive
      - save_cache:
          name: Cache source
          key: 'source_master_16-{{ .Branch }}-{{ .Revision }}'
          paths:
            - .
      - restore_cache:
          name: Restore global cache
          keys:
            - 'global_master_16_2-{{ checksum "./package-lock.json" }}'
            - global_master_16_2-
      - run:
          name: Install project node_modules
          command: npm ci
      - save_cache:
          name: Cache globals
          key: 'global_master_16_2-{{ checksum "./package-lock.json" }}'
          paths:
            - /home/circleci/.cache
      - save_cache:
          name: Cache node_modules
          key: 'node_modules_master_16_{{ checksum "./package-lock.json" }}'
          paths:
            - ./node_modules
  Www - deploy:
    working_directory: /home/circleci/app
    docker: *ref_0
    resource_class: medium+
    build:
      branches:
        only:
          - chore/deploy-staging-ci
    steps:
      - setup_remote_docker
      - add_ssh_keys
      - restore_cache:
          name: Restore source
          keys:
            - 'source_master_16-{{ .Branch }}-{{ .Revision }}'
            - 'source_master_16-{{ .Branch }}-'
            - source_master_16-
      - restore_cache:
          name: Restore node_modules
          keys:
            - 'node_modules_master_16_{{ checksum "./package-lock.json" }}'
      - restore_cache:
          name: Restore meteor system
          keys:
            - >-
              meteor_system_master_16_www_{{ checksum
              "./microservices/www/.meteor/release" }}_{{ checksum
              "./microservices/www/.meteor/versions" }}
      - restore_cache:
          name: Restore meteor microservice
          keys:
            - 'meteor_microservice_master_16_www-{{ .Branch }}-{{ .Revision }}'
            - 'meteor_microservice_master_16_www-{{ .Branch }}-'
            - meteor_microservice_master_16_www-
      - run:
          name: Install meteor
          command: ./scripts/circleci/install_meteor.sh
      - run:
          name: Install GCloud
          command: |2-

                  cd ~
                  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                  apt-get install apt-transport-https ca-certificates gnupg
                  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
                  apt-get update && apt-get install -y google-cloud-sdk

                  echo "$GCLOUD_SDK_KEY" > ./gcloud-key.json
                  gcloud auth activate-service-account  --key-file=./gcloud-key.json
                  rm ./gcloud-key.json
                
      - run:
          name: Install Docker
          command: 'wget -qO- https://get.docker.com/ | sh'
      - run:
          name: Deploy
          command: |2-

                    cd deploy
                    ENVIRONMENT="staging"

                    if [ "$CIRCLE_BRANCH" = "chore/deploy-staging-ci" ]; then
                      ENVIRONMENT="staging"
                    else
                      echo "Deployments not configured for this branch"
                      exit 1
                    fi

                    # Uses the fingerprint as the name
                    mv ~/.ssh/id_rsa_02c8ca4cac313d6026c95416de40b8b8 ~/.ssh/epotek
                    node run-all -e $ENVIRONMENT --apps www validate
                    node run-all --deploy-ci -e $ENVIRONMENT --apps www deploy
                  
  App - deploy:
    working_directory: /home/circleci/app
    docker: *ref_0
    resource_class: medium+
    build:
      branches:
        only:
          - chore/deploy-staging-ci
    steps:
      - setup_remote_docker
      - add_ssh_keys
      - restore_cache:
          name: Restore source
          keys:
            - 'source_master_16-{{ .Branch }}-{{ .Revision }}'
            - 'source_master_16-{{ .Branch }}-'
            - source_master_16-
      - restore_cache:
          name: Restore node_modules
          keys:
            - 'node_modules_master_16_{{ checksum "./package-lock.json" }}'
      - restore_cache:
          name: Restore meteor system
          keys:
            - >-
              meteor_system_master_16_app_{{ checksum
              "./microservices/app/.meteor/release" }}_{{ checksum
              "./microservices/app/.meteor/versions" }}
      - restore_cache:
          name: Restore meteor microservice
          keys:
            - 'meteor_microservice_master_16_app-{{ .Branch }}-{{ .Revision }}'
            - 'meteor_microservice_master_16_app-{{ .Branch }}-'
            - meteor_microservice_master_16_app-
      - run:
          name: Install meteor
          command: ./scripts/circleci/install_meteor.sh
      - run:
          name: Install GCloud
          command: |2-

                  cd ~
                  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                  apt-get install apt-transport-https ca-certificates gnupg
                  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
                  apt-get update && apt-get install -y google-cloud-sdk

                  echo "$GCLOUD_SDK_KEY" > ./gcloud-key.json
                  gcloud auth activate-service-account  --key-file=./gcloud-key.json
                  rm ./gcloud-key.json
                
      - run:
          name: Install Docker
          command: 'wget -qO- https://get.docker.com/ | sh'
      - run:
          name: Deploy
          command: |2-

                    cd deploy
                    ENVIRONMENT="staging"

                    if [ "$CIRCLE_BRANCH" = "chore/deploy-staging-ci" ]; then
                      ENVIRONMENT="staging"
                    else
                      echo "Deployments not configured for this branch"
                      exit 1
                    fi

                    # Uses the fingerprint as the name
                    mv ~/.ssh/id_rsa_02c8ca4cac313d6026c95416de40b8b8 ~/.ssh/epotek
                    node run-all -e $ENVIRONMENT --apps app validate
                    node run-all --deploy-ci -e $ENVIRONMENT --apps app deploy
                  
  Admin - deploy:
    working_directory: /home/circleci/app
    docker: *ref_0
    resource_class: medium+
    build:
      branches:
        only:
          - chore/deploy-staging-ci
    steps:
      - setup_remote_docker
      - add_ssh_keys
      - restore_cache:
          name: Restore source
          keys:
            - 'source_master_16-{{ .Branch }}-{{ .Revision }}'
            - 'source_master_16-{{ .Branch }}-'
            - source_master_16-
      - restore_cache:
          name: Restore node_modules
          keys:
            - 'node_modules_master_16_{{ checksum "./package-lock.json" }}'
      - restore_cache:
          name: Restore meteor system
          keys:
            - >-
              meteor_system_master_16_admin_{{ checksum
              "./microservices/admin/.meteor/release" }}_{{ checksum
              "./microservices/admin/.meteor/versions" }}
      - restore_cache:
          name: Restore meteor microservice
          keys:
            - 'meteor_microservice_master_16_admin-{{ .Branch }}-{{ .Revision }}'
            - 'meteor_microservice_master_16_admin-{{ .Branch }}-'
            - meteor_microservice_master_16_admin-
      - run:
          name: Install meteor
          command: ./scripts/circleci/install_meteor.sh
      - run:
          name: Install GCloud
          command: |2-

                  cd ~
                  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                  apt-get install apt-transport-https ca-certificates gnupg
                  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
                  apt-get update && apt-get install -y google-cloud-sdk

                  echo "$GCLOUD_SDK_KEY" > ./gcloud-key.json
                  gcloud auth activate-service-account  --key-file=./gcloud-key.json
                  rm ./gcloud-key.json
                
      - run:
          name: Install Docker
          command: 'wget -qO- https://get.docker.com/ | sh'
      - run:
          name: Deploy
          command: |2-

                    cd deploy
                    ENVIRONMENT="staging"

                    if [ "$CIRCLE_BRANCH" = "chore/deploy-staging-ci" ]; then
                      ENVIRONMENT="staging"
                    else
                      echo "Deployments not configured for this branch"
                      exit 1
                    fi

                    # Uses the fingerprint as the name
                    mv ~/.ssh/id_rsa_02c8ca4cac313d6026c95416de40b8b8 ~/.ssh/epotek
                    node run-all -e $ENVIRONMENT --apps admin validate
                    node run-all --deploy-ci -e $ENVIRONMENT --apps admin deploy
                  
  Pro - deploy:
    working_directory: /home/circleci/app
    docker: *ref_0
    resource_class: medium+
    build:
      branches:
        only:
          - chore/deploy-staging-ci
    steps:
      - setup_remote_docker
      - add_ssh_keys
      - restore_cache:
          name: Restore source
          keys:
            - 'source_master_16-{{ .Branch }}-{{ .Revision }}'
            - 'source_master_16-{{ .Branch }}-'
            - source_master_16-
      - restore_cache:
          name: Restore node_modules
          keys:
            - 'node_modules_master_16_{{ checksum "./package-lock.json" }}'
      - restore_cache:
          name: Restore meteor system
          keys:
            - >-
              meteor_system_master_16_pro_{{ checksum
              "./microservices/pro/.meteor/release" }}_{{ checksum
              "./microservices/pro/.meteor/versions" }}
      - restore_cache:
          name: Restore meteor microservice
          keys:
            - 'meteor_microservice_master_16_pro-{{ .Branch }}-{{ .Revision }}'
            - 'meteor_microservice_master_16_pro-{{ .Branch }}-'
            - meteor_microservice_master_16_pro-
      - run:
          name: Install meteor
          command: ./scripts/circleci/install_meteor.sh
      - run:
          name: Install GCloud
          command: |2-

                  cd ~
                  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                  apt-get install apt-transport-https ca-certificates gnupg
                  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
                  apt-get update && apt-get install -y google-cloud-sdk

                  echo "$GCLOUD_SDK_KEY" > ./gcloud-key.json
                  gcloud auth activate-service-account  --key-file=./gcloud-key.json
                  rm ./gcloud-key.json
                
      - run:
          name: Install Docker
          command: 'wget -qO- https://get.docker.com/ | sh'
      - run:
          name: Deploy
          command: |2-

                    cd deploy
                    ENVIRONMENT="staging"

                    if [ "$CIRCLE_BRANCH" = "chore/deploy-staging-ci" ]; then
                      ENVIRONMENT="staging"
                    else
                      echo "Deployments not configured for this branch"
                      exit 1
                    fi

                    # Uses the fingerprint as the name
                    mv ~/.ssh/id_rsa_02c8ca4cac313d6026c95416de40b8b8 ~/.ssh/epotek
                    node run-all -e $ENVIRONMENT --apps pro validate
                    node run-all --deploy-ci -e $ENVIRONMENT --apps pro deploy
                  
  Backend - deploy:
    working_directory: /home/circleci/app
    docker: *ref_0
    resource_class: medium+
    build:
      branches:
        only:
          - chore/deploy-staging-ci
    steps:
      - setup_remote_docker
      - add_ssh_keys
      - restore_cache:
          name: Restore source
          keys:
            - 'source_master_16-{{ .Branch }}-{{ .Revision }}'
            - 'source_master_16-{{ .Branch }}-'
            - source_master_16-
      - restore_cache:
          name: Restore node_modules
          keys:
            - 'node_modules_master_16_{{ checksum "./package-lock.json" }}'
      - restore_cache:
          name: Restore meteor system
          keys:
            - >-
              meteor_system_master_16_backend_{{ checksum
              "./microservices/backend/.meteor/release" }}_{{ checksum
              "./microservices/backend/.meteor/versions" }}
      - restore_cache:
          name: Restore meteor microservice
          keys:
            - >-
              meteor_microservice_master_16_backend-{{ .Branch }}-{{ .Revision
              }}
            - 'meteor_microservice_master_16_backend-{{ .Branch }}-'
            - meteor_microservice_master_16_backend-
      - run:
          name: Install meteor
          command: ./scripts/circleci/install_meteor.sh
      - run:
          name: Install GCloud
          command: |2-

                  cd ~
                  echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
                  apt-get install apt-transport-https ca-certificates gnupg
                  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
                  apt-get update && apt-get install -y google-cloud-sdk

                  echo "$GCLOUD_SDK_KEY" > ./gcloud-key.json
                  gcloud auth activate-service-account  --key-file=./gcloud-key.json
                  rm ./gcloud-key.json
                
      - run:
          name: Install Docker
          command: 'wget -qO- https://get.docker.com/ | sh'
      - run:
          name: Deploy
          command: |2-

                    cd deploy
                    ENVIRONMENT="staging"

                    if [ "$CIRCLE_BRANCH" = "chore/deploy-staging-ci" ]; then
                      ENVIRONMENT="staging"
                    else
                      echo "Deployments not configured for this branch"
                      exit 1
                    fi

                    # Uses the fingerprint as the name
                    mv ~/.ssh/id_rsa_02c8ca4cac313d6026c95416de40b8b8 ~/.ssh/epotek
                    node run-all -e $ENVIRONMENT --apps backend validate
                    node run-all --deploy-ci -e $ENVIRONMENT --apps backend deploy
                  
workflows:
  version: 2
  Build and test:
    jobs:
      - Prepare
      - Www - deploy:
          requires:
            - Prepare
      - App - deploy:
          requires:
            - Prepare
      - Admin - deploy:
          requires:
            - Prepare
      - Pro - deploy:
          requires:
            - Prepare
      - Backend - deploy:
          requires:
            - Prepare
